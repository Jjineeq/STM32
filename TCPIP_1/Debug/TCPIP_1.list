
TCPIP_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e68  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d50  08011018  08011018  00021018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013d68  08013d68  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08013d68  08013d68  00023d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013d70  08013d70  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013d70  08013d70  00023d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013d74  08013d74  00023d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08013d78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          00008464  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200084f4  200084f4  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ecf5  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053ac  00000000  00000000  0004edb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017d8  00000000  00000000  00054168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001708  00000000  00000000  00055940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000301e5  00000000  00000000  00057048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025dda  00000000  00000000  0008722d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0b2a  00000000  00000000  000ad007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019db31  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006c24  00000000  00000000  0019db84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011000 	.word	0x08011000

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08011000 	.word	0x08011000

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f001 f9da 	bl	8001980 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f81a 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f9d0 	bl	8000974 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005d4:	f004 f9ac 	bl	8004930 <MX_LWIP_Init>
  MX_TIM4_Init();
 80005d8:	f000 f8fa 	bl	80007d0 <MX_TIM4_Init>
  MX_TIM2_Init();
 80005dc:	f000 f882 	bl	80006e4 <MX_TIM2_Init>
  MX_TIM5_Init();
 80005e0:	f000 f952 	bl	8000888 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  LED_OnOff(LED_ALL, 500);
 80005e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005e8:	20ff      	movs	r0, #255	; 0xff
 80005ea:	f000 fa5f 	bl	8000aac <LED_OnOff>
  User_notification(&gnetif);
 80005ee:	4804      	ldr	r0, [pc, #16]	; (8000600 <main+0x3c>)
 80005f0:	f000 fa7a 	bl	8000ae8 <User_notification>
  tcp_echoclient_connect();
 80005f4:	f000 fcf6 	bl	8000fe4 <tcp_echoclient_connect>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 80005f8:	f004 fae6 	bl	8004bc8 <MX_LWIP_Process>
 80005fc:	e7fc      	b.n	80005f8 <main+0x34>
 80005fe:	bf00      	nop
 8000600:	20000184 	.word	0x20000184

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f00f fae8 	bl	800fbe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <SystemClock_Config+0xd8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a2a      	ldr	r2, [pc, #168]	; (80006dc <SystemClock_Config+0xd8>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b28      	ldr	r3, [pc, #160]	; (80006dc <SystemClock_Config+0xd8>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xdc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a24      	ldr	r2, [pc, #144]	; (80006e0 <SystemClock_Config+0xdc>)
 800064e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <SystemClock_Config+0xdc>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000660:	2302      	movs	r3, #2
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000664:	2301      	movs	r3, #1
 8000666:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	2310      	movs	r3, #16
 800066a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000670:	2300      	movs	r3, #0
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000674:	2308      	movs	r3, #8
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000678:	23b4      	movs	r3, #180	; 0xb4
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000680:	2304      	movs	r3, #4
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 0320 	add.w	r3, r7, #32
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fe45 	bl	8003318 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000694:	f000 fa46 	bl	8000b24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000698:	f002 fdee 	bl	8003278 <HAL_PWREx_EnableOverDrive>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006a2:	f000 fa3f 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006be:	f107 030c 	add.w	r3, r7, #12
 80006c2:	2105      	movs	r1, #5
 80006c4:	4618      	mov	r0, r3
 80006c6:	f003 f89f 	bl	8003808 <HAL_RCC_ClockConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006d0:	f000 fa28 	bl	8000b24 <Error_Handler>
  }
}
 80006d4:	bf00      	nop
 80006d6:	3750      	adds	r7, #80	; 0x50
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	; 0x38
 80006e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f8:	f107 0320 	add.w	r3, r7, #32
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
 8000710:	615a      	str	r2, [r3, #20]
 8000712:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000714:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <MX_TIM2_Init+0xe8>)
 8000716:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800071a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800071c:	4b2b      	ldr	r3, [pc, #172]	; (80007cc <MX_TIM2_Init+0xe8>)
 800071e:	2200      	movs	r2, #0
 8000720:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000722:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <MX_TIM2_Init+0xe8>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000728:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_TIM2_Init+0xe8>)
 800072a:	f04f 32ff 	mov.w	r2, #4294967295
 800072e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b26      	ldr	r3, [pc, #152]	; (80007cc <MX_TIM2_Init+0xe8>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000736:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_TIM2_Init+0xe8>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800073c:	4823      	ldr	r0, [pc, #140]	; (80007cc <MX_TIM2_Init+0xe8>)
 800073e:	f003 fa1b 	bl	8003b78 <HAL_TIM_Base_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000748:	f000 f9ec 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800074c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000750:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000752:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000756:	4619      	mov	r1, r3
 8000758:	481c      	ldr	r0, [pc, #112]	; (80007cc <MX_TIM2_Init+0xe8>)
 800075a:	f003 fc75 	bl	8004048 <HAL_TIM_ConfigClockSource>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000764:	f000 f9de 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000768:	4818      	ldr	r0, [pc, #96]	; (80007cc <MX_TIM2_Init+0xe8>)
 800076a:	f003 fa54 	bl	8003c16 <HAL_TIM_PWM_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000774:	f000 f9d6 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4619      	mov	r1, r3
 8000786:	4811      	ldr	r0, [pc, #68]	; (80007cc <MX_TIM2_Init+0xe8>)
 8000788:	f004 f842 	bl	8004810 <HAL_TIMEx_MasterConfigSynchronization>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000792:	f000 f9c7 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000796:	2360      	movs	r3, #96	; 0x60
 8000798:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	4619      	mov	r1, r3
 80007ac:	4807      	ldr	r0, [pc, #28]	; (80007cc <MX_TIM2_Init+0xe8>)
 80007ae:	f003 fb89 	bl	8003ec4 <HAL_TIM_PWM_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007b8:	f000 f9b4 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <MX_TIM2_Init+0xe8>)
 80007be:	f000 fa4b 	bl	8000c58 <HAL_TIM_MspPostInit>

}
 80007c2:	bf00      	nop
 80007c4:	3738      	adds	r7, #56	; 0x38
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000ac 	.word	0x200000ac

080007d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
 80007ee:	615a      	str	r2, [r3, #20]
 80007f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <MX_TIM4_Init+0xb0>)
 80007f4:	4a23      	ldr	r2, [pc, #140]	; (8000884 <MX_TIM4_Init+0xb4>)
 80007f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 320-1;
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <MX_TIM4_Init+0xb0>)
 80007fa:	f240 123f 	movw	r2, #319	; 0x13f
 80007fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b1f      	ldr	r3, [pc, #124]	; (8000880 <MX_TIM4_Init+0xb0>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8000806:	4b1e      	ldr	r3, [pc, #120]	; (8000880 <MX_TIM4_Init+0xb0>)
 8000808:	f240 32e7 	movw	r2, #999	; 0x3e7
 800080c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_TIM4_Init+0xb0>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_TIM4_Init+0xb0>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800081a:	4819      	ldr	r0, [pc, #100]	; (8000880 <MX_TIM4_Init+0xb0>)
 800081c:	f003 f9fb 	bl	8003c16 <HAL_TIM_PWM_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000826:	f000 f97d 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000832:	f107 0320 	add.w	r3, r7, #32
 8000836:	4619      	mov	r1, r3
 8000838:	4811      	ldr	r0, [pc, #68]	; (8000880 <MX_TIM4_Init+0xb0>)
 800083a:	f003 ffe9 	bl	8004810 <HAL_TIMEx_MasterConfigSynchronization>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000844:	f000 f96e 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000848:	2360      	movs	r3, #96	; 0x60
 800084a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800084c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8000850:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2204      	movs	r2, #4
 800085e:	4619      	mov	r1, r3
 8000860:	4807      	ldr	r0, [pc, #28]	; (8000880 <MX_TIM4_Init+0xb0>)
 8000862:	f003 fb2f 	bl	8003ec4 <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 800086c:	f000 f95a 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000870:	4803      	ldr	r0, [pc, #12]	; (8000880 <MX_TIM4_Init+0xb0>)
 8000872:	f000 f9f1 	bl	8000c58 <HAL_TIM_MspPostInit>

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200000f4 	.word	0x200000f4
 8000884:	40000800 	.word	0x40000800

08000888 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08e      	sub	sp, #56	; 0x38
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	f107 0320 	add.w	r3, r7, #32
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
 80008b4:	615a      	str	r2, [r3, #20]
 80008b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80008b8:	4b2c      	ldr	r3, [pc, #176]	; (800096c <MX_TIM5_Init+0xe4>)
 80008ba:	4a2d      	ldr	r2, [pc, #180]	; (8000970 <MX_TIM5_Init+0xe8>)
 80008bc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 90-1;
 80008be:	4b2b      	ldr	r3, [pc, #172]	; (800096c <MX_TIM5_Init+0xe4>)
 80008c0:	2259      	movs	r2, #89	; 0x59
 80008c2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c4:	4b29      	ldr	r3, [pc, #164]	; (800096c <MX_TIM5_Init+0xe4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 80008ca:	4b28      	ldr	r3, [pc, #160]	; (800096c <MX_TIM5_Init+0xe4>)
 80008cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80008d0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d2:	4b26      	ldr	r3, [pc, #152]	; (800096c <MX_TIM5_Init+0xe4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d8:	4b24      	ldr	r3, [pc, #144]	; (800096c <MX_TIM5_Init+0xe4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80008de:	4823      	ldr	r0, [pc, #140]	; (800096c <MX_TIM5_Init+0xe4>)
 80008e0:	f003 f94a 	bl	8003b78 <HAL_TIM_Base_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 80008ea:	f000 f91b 	bl	8000b24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80008f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008f8:	4619      	mov	r1, r3
 80008fa:	481c      	ldr	r0, [pc, #112]	; (800096c <MX_TIM5_Init+0xe4>)
 80008fc:	f003 fba4 	bl	8004048 <HAL_TIM_ConfigClockSource>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8000906:	f000 f90d 	bl	8000b24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800090a:	4818      	ldr	r0, [pc, #96]	; (800096c <MX_TIM5_Init+0xe4>)
 800090c:	f003 f983 	bl	8003c16 <HAL_TIM_PWM_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8000916:	f000 f905 	bl	8000b24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000922:	f107 0320 	add.w	r3, r7, #32
 8000926:	4619      	mov	r1, r3
 8000928:	4810      	ldr	r0, [pc, #64]	; (800096c <MX_TIM5_Init+0xe4>)
 800092a:	f003 ff71 	bl	8004810 <HAL_TIMEx_MasterConfigSynchronization>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8000934:	f000 f8f6 	bl	8000b24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000938:	2360      	movs	r3, #96	; 0x60
 800093a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 800093c:	2305      	movs	r3, #5
 800093e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	4619      	mov	r1, r3
 800094e:	4807      	ldr	r0, [pc, #28]	; (800096c <MX_TIM5_Init+0xe4>)
 8000950:	f003 fab8 	bl	8003ec4 <HAL_TIM_PWM_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 800095a:	f000 f8e3 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800095e:	4803      	ldr	r0, [pc, #12]	; (800096c <MX_TIM5_Init+0xe4>)
 8000960:	f000 f97a 	bl	8000c58 <HAL_TIM_MspPostInit>

}
 8000964:	bf00      	nop
 8000966:	3738      	adds	r7, #56	; 0x38
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000013c 	.word	0x2000013c
 8000970:	40000c00 	.word	0x40000c00

08000974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b44      	ldr	r3, [pc, #272]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a43      	ldr	r2, [pc, #268]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b3d      	ldr	r3, [pc, #244]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a3c      	ldr	r2, [pc, #240]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b3a      	ldr	r3, [pc, #232]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a35      	ldr	r2, [pc, #212]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b2f      	ldr	r3, [pc, #188]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a2e      	ldr	r2, [pc, #184]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b28      	ldr	r3, [pc, #160]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a27      	ldr	r2, [pc, #156]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0x12c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a16:	2200      	movs	r2, #0
 8000a18:	21ff      	movs	r1, #255	; 0xff
 8000a1a:	4822      	ldr	r0, [pc, #136]	; (8000aa4 <MX_GPIO_Init+0x130>)
 8000a1c:	f002 fbfa 	bl	8003214 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000a20:	230f      	movs	r3, #15
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	481c      	ldr	r0, [pc, #112]	; (8000aa8 <MX_GPIO_Init+0x134>)
 8000a36:	f002 fa41 	bl	8002ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000a3a:	23ff      	movs	r3, #255	; 0xff
 8000a3c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a46:	2302      	movs	r3, #2
 8000a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4814      	ldr	r0, [pc, #80]	; (8000aa4 <MX_GPIO_Init+0x130>)
 8000a52:	f002 fa33 	bl	8002ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	2006      	movs	r0, #6
 8000a5c:	f001 f901 	bl	8001c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a60:	2006      	movs	r0, #6
 8000a62:	f001 f91a 	bl	8001c9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2100      	movs	r1, #0
 8000a6a:	2007      	movs	r0, #7
 8000a6c:	f001 f8f9 	bl	8001c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a70:	2007      	movs	r0, #7
 8000a72:	f001 f912 	bl	8001c9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2008      	movs	r0, #8
 8000a7c:	f001 f8f1 	bl	8001c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000a80:	2008      	movs	r0, #8
 8000a82:	f001 f90a 	bl	8001c9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2009      	movs	r0, #9
 8000a8c:	f001 f8e9 	bl	8001c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a90:	2009      	movs	r0, #9
 8000a92:	f001 f902 	bl	8001c9a <HAL_NVIC_EnableIRQ>

}
 8000a96:	bf00      	nop
 8000a98:	3728      	adds	r7, #40	; 0x28
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	40021800 	.word	0x40021800

08000aac <LED_OnOff>:

/* USER CODE BEGIN 4 */
void LED_OnOff(int led, int interval)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_SET);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	2201      	movs	r2, #1
 8000abc:	4619      	mov	r1, r3
 8000abe:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <LED_OnOff+0x38>)
 8000ac0:	f002 fba8 	bl	8003214 <HAL_GPIO_WritePin>
	HAL_Delay(interval);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 ffcc 	bl	8001a64 <HAL_Delay>
	HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_RESET);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <LED_OnOff+0x38>)
 8000ad6:	f002 fb9d 	bl	8003214 <HAL_GPIO_WritePin>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40020c00 	.word	0x40020c00

08000ae8 <User_notification>:

void User_notification(struct netif *netif)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	if(netif_is_up(netif)){
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d005      	beq.n	8000b0c <User_notification+0x24>
		HAL_GPIO_WritePin(GPIO_LED, LED7, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	4806      	ldr	r0, [pc, #24]	; (8000b20 <User_notification+0x38>)
 8000b06:	f002 fb85 	bl	8003214 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_LED, LED8, GPIO_PIN_SET);
	}
}
 8000b0a:	e004      	b.n	8000b16 <User_notification+0x2e>
		HAL_GPIO_WritePin(GPIO_LED, LED8, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2180      	movs	r1, #128	; 0x80
 8000b10:	4803      	ldr	r0, [pc, #12]	; (8000b20 <User_notification+0x38>)
 8000b12:	f002 fb7f 	bl	8003214 <HAL_GPIO_WritePin>
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40020c00 	.word	0x40020c00

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b90:	d116      	bne.n	8000bc0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <HAL_TIM_Base_MspInit+0x80>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <HAL_TIM_Base_MspInit+0x80>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <HAL_TIM_Base_MspInit+0x80>)
 8000ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	201c      	movs	r0, #28
 8000bb4:	f001 f855 	bl	8001c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bb8:	201c      	movs	r0, #28
 8000bba:	f001 f86e 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000bbe:	e01a      	b.n	8000bf6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0f      	ldr	r2, [pc, #60]	; (8000c04 <HAL_TIM_Base_MspInit+0x84>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d115      	bne.n	8000bf6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_TIM_Base_MspInit+0x80>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <HAL_TIM_Base_MspInit+0x80>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <HAL_TIM_Base_MspInit+0x80>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 0308 	and.w	r3, r3, #8
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2100      	movs	r1, #0
 8000bea:	2032      	movs	r0, #50	; 0x32
 8000bec:	f001 f839 	bl	8001c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000bf0:	2032      	movs	r0, #50	; 0x32
 8000bf2:	f001 f852 	bl	8001c9a <HAL_NVIC_EnableIRQ>
}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40000c00 	.word	0x40000c00

08000c08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <HAL_TIM_PWM_MspInit+0x48>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d115      	bne.n	8000c46 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <HAL_TIM_PWM_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a0c      	ldr	r2, [pc, #48]	; (8000c54 <HAL_TIM_PWM_MspInit+0x4c>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_TIM_PWM_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2100      	movs	r1, #0
 8000c3a:	201e      	movs	r0, #30
 8000c3c:	f001 f811 	bl	8001c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c40:	201e      	movs	r0, #30
 8000c42:	f001 f82a 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40000800 	.word	0x40000800
 8000c54:	40023800 	.word	0x40023800

08000c58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	; 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c78:	d11e      	bne.n	8000cb8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <HAL_TIM_MspPostInit+0xf8>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a33      	ldr	r2, [pc, #204]	; (8000d50 <HAL_TIM_MspPostInit+0xf8>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <HAL_TIM_MspPostInit+0xf8>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c96:	2320      	movs	r3, #32
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4828      	ldr	r0, [pc, #160]	; (8000d54 <HAL_TIM_MspPostInit+0xfc>)
 8000cb2:	f002 f903 	bl	8002ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000cb6:	e047      	b.n	8000d48 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a26      	ldr	r2, [pc, #152]	; (8000d58 <HAL_TIM_MspPostInit+0x100>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d11f      	bne.n	8000d02 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <HAL_TIM_MspPostInit+0xf8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <HAL_TIM_MspPostInit+0xf8>)
 8000ccc:	f043 0308 	orr.w	r3, r3, #8
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <HAL_TIM_MspPostInit+0xf8>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4818      	ldr	r0, [pc, #96]	; (8000d5c <HAL_TIM_MspPostInit+0x104>)
 8000cfc:	f002 f8de 	bl	8002ebc <HAL_GPIO_Init>
}
 8000d00:	e022      	b.n	8000d48 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <HAL_TIM_MspPostInit+0x108>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d11d      	bne.n	8000d48 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <HAL_TIM_MspPostInit+0xf8>)
 8000d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d14:	4a0e      	ldr	r2, [pc, #56]	; (8000d50 <HAL_TIM_MspPostInit+0xf8>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <HAL_TIM_MspPostInit+0xf8>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	4804      	ldr	r0, [pc, #16]	; (8000d54 <HAL_TIM_MspPostInit+0xfc>)
 8000d44:	f002 f8ba 	bl	8002ebc <HAL_GPIO_Init>
}
 8000d48:	bf00      	nop
 8000d4a:	3728      	adds	r7, #40	; 0x28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020000 	.word	0x40020000
 8000d58:	40000800 	.word	0x40000800
 8000d5c:	40020c00 	.word	0x40020c00
 8000d60:	40000c00 	.word	0x40000c00

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <NMI_Handler+0x4>

08000d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <HardFault_Handler+0x4>

08000d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <MemManage_Handler+0x4>

08000d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <BusFault_Handler+0x4>

08000d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <UsageFault_Handler+0x4>

08000d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d86:	bf00      	nop
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr

08000d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db0:	f000 fe38 	bl	8001a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f002 fa43 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000dca:	2002      	movs	r0, #2
 8000dcc:	f002 fa3c 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000dd8:	2004      	movs	r0, #4
 8000dda:	f002 fa35 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000de6:	2008      	movs	r0, #8
 8000de8:	f002 fa2e 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <TIM2_IRQHandler+0x10>)
 8000df6:	f002 ff5d 	bl	8003cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000ac 	.word	0x200000ac

08000e04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM4_IRQHandler+0x10>)
 8000e0a:	f002 ff53 	bl	8003cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000f4 	.word	0x200000f4

08000e18 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <TIM5_IRQHandler+0x10>)
 8000e1e:	f002 ff49 	bl	8003cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2000013c 	.word	0x2000013c

08000e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
	return 1;
 8000e30:	2301      	movs	r3, #1
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <_kill>:

int _kill(int pid, int sig)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <_kill+0x20>)
 8000e48:	2216      	movs	r2, #22
 8000e4a:	601a      	str	r2, [r3, #0]
	return -1;
 8000e4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	200084e4 	.word	0x200084e4

08000e60 <_exit>:

void _exit (int status)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff ffe5 	bl	8000e3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e72:	e7fe      	b.n	8000e72 <_exit+0x12>

08000e74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	e00a      	b.n	8000e9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e86:	f3af 8000 	nop.w
 8000e8a:	4601      	mov	r1, r0
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	60ba      	str	r2, [r7, #8]
 8000e92:	b2ca      	uxtb	r2, r1
 8000e94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	dbf0      	blt.n	8000e86 <_read+0x12>
	}

return len;
 8000ea4:	687b      	ldr	r3, [r7, #4]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3718      	adds	r7, #24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	e009      	b.n	8000ed4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	1c5a      	adds	r2, r3, #1
 8000ec4:	60ba      	str	r2, [r7, #8]
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf1      	blt.n	8000ec0 <_write+0x12>
	}
	return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_close>:

int _close(int file)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
	return -1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	370c      	adds	r7, #12
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000efe:	b480      	push	{r7}
 8000f00:	b083      	sub	sp, #12
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f0e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <_isatty>:

int _isatty(int file)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	return 1;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f58:	4a14      	ldr	r2, [pc, #80]	; (8000fac <_sbrk+0x5c>)
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <_sbrk+0x60>)
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d102      	bne.n	8000f72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <_sbrk+0x64>)
 8000f6e:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <_sbrk+0x68>)
 8000f70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <_sbrk+0x64>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d205      	bcs.n	8000f8c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <_sbrk+0x6c>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	e009      	b.n	8000fa0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <_sbrk+0x64>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	4a06      	ldr	r2, [pc, #24]	; (8000fb4 <_sbrk+0x64>)
 8000f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	20030000 	.word	0x20030000
 8000fb0:	00000400 	.word	0x00000400
 8000fb4:	200001b8 	.word	0x200001b8
 8000fb8:	200084f8 	.word	0x200084f8
 8000fbc:	200084e4 	.word	0x200084e4

08000fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <tcp_echoclient_connect>:
//	      - 이 함수는 변경할 필요없이 그대로 사용하면 된다.
//
// -------------------------------------------------------------------------

void tcp_echoclient_connect(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
		struct ip4_addr DestIPaddr;
		
		// -- <4-1> create new tcp pcb 
		echoclient_pcb = tcp_new();
 8000fea:	f007 fb67 	bl	80086bc <tcp_new>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <tcp_echoclient_connect+0x44>)
 8000ff2:	6013      	str	r3, [r2, #0]
		
		if (echoclient_pcb != NULL)  {
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <tcp_echoclient_connect+0x44>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00a      	beq.n	8001012 <tcp_echoclient_connect+0x2e>
			// -- <4-2> 접속할 server의 IP를 지정함
			IP4_ADDR( &DestIPaddr, DEST_IP_ADDR0, DEST_IP_ADDR1, DEST_IP_ADDR2, DEST_IP_ADDR3 );
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <tcp_echoclient_connect+0x48>)
 8000ffe:	607b      	str	r3, [r7, #4]
			// -- <4-3> 지정된 IP(&DestIPaddr), 포트(DEST_PORT)에 접속함
			tcp_connect(echoclient_pcb, &DestIPaddr, DEST_PORT, tcp_echoclient_connected);
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <tcp_echoclient_connect+0x44>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	1d39      	adds	r1, r7, #4
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <tcp_echoclient_connect+0x4c>)
 8001008:	f641 3258 	movw	r2, #7000	; 0x1b58
 800100c:	f006 fc1c 	bl	8007848 <tcp_connect>
			memp_free(MEMP_TCP_PCB, echoclient_pcb);
			#ifdef SERIAL_DEBUG
			printf("\n\r can not create tcp pcb");
			#endif 
		}
}
 8001010:	e005      	b.n	800101e <tcp_echoclient_connect+0x3a>
			memp_free(MEMP_TCP_PCB, echoclient_pcb);
 8001012:	4b05      	ldr	r3, [pc, #20]	; (8001028 <tcp_echoclient_connect+0x44>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4619      	mov	r1, r3
 8001018:	2001      	movs	r0, #1
 800101a:	f004 fe89 	bl	8005d30 <memp_free>
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001bc 	.word	0x200001bc
 800102c:	0400a8c0 	.word	0x0400a8c0
 8001030:	08001035 	.word	0x08001035

08001034 <tcp_echoclient_connected>:
  * retval err_t	: returned error 
  */
// ------------------------------------------------------------------------------------

static err_t tcp_echoclient_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	4613      	mov	r3, r2
 8001040:	71fb      	strb	r3, [r7, #7]
		// --<5-1> echoclient형 구조체 변수 es를 선언함
		struct echoclient *es = NULL;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
		
		if (err == ERR_OK)   {
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d14c      	bne.n	80010e8 <tcp_echoclient_connected+0xb4>
				/* allocate structure es to maintain tcp connection informations */
				es = (struct echoclient *)mem_malloc(sizeof(struct echoclient));
 800104e:	200c      	movs	r0, #12
 8001050:	f004 fc6e 	bl	8005930 <mem_malloc>
 8001054:	6178      	str	r0, [r7, #20]
				
				if (es != NULL)	{
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d03e      	beq.n	80010da <tcp_echoclient_connected+0xa6>
						es->state = ES_CONNECTED;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
						es->pcb = tpcb;
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	605a      	str	r2, [r3, #4]
						
						// -- <5-2-1> 접속완료시에 메시지를 보낸다
						 sprintf((char*)data, " Client is connected ! ");				
 8001068:	4924      	ldr	r1, [pc, #144]	; (80010fc <tcp_echoclient_connected+0xc8>)
 800106a:	4825      	ldr	r0, [pc, #148]	; (8001100 <tcp_echoclient_connected+0xcc>)
 800106c:	f00e fe1a 	bl	800fca4 <siprintf>

						 // -- <5-2-2> 접속완료시에 송신할 데이터를 pbuf (es->p_tx)에 넣는다
						 /* allocate pbuf */
						es->p_tx = pbuf_alloc(PBUF_TRANSPORT, strlen((char*)data) , PBUF_POOL);
 8001070:	4823      	ldr	r0, [pc, #140]	; (8001100 <tcp_echoclient_connected+0xcc>)
 8001072:	f7ff f8c7 	bl	8000204 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29b      	uxth	r3, r3
 800107a:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800107e:	4619      	mov	r1, r3
 8001080:	2036      	movs	r0, #54	; 0x36
 8001082:	f005 f9e7 	bl	8006454 <pbuf_alloc>
 8001086:	4602      	mov	r2, r0
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	609a      	str	r2, [r3, #8]
						 
						if (es->p_tx)  { 
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d02d      	beq.n	80010f0 <tcp_echoclient_connected+0xbc>
							/* pass newly allocated es structure as argument to tpcb */
							tcp_arg(tpcb, es);
 8001094:	6979      	ldr	r1, [r7, #20]
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f007 fb18 	bl	80086cc <tcp_arg>

							// -- <5-3> 데이터 송신이 완료되면 호출될 콜백함수를 지정
							tcp_recv(tpcb, tcp_echoclient_recv);		  
 800109c:	4919      	ldr	r1, [pc, #100]	; (8001104 <tcp_echoclient_connected+0xd0>)
 800109e:	68b8      	ldr	r0, [r7, #8]
 80010a0:	f007 fb26 	bl	80086f0 <tcp_recv>
							// -- <5-4> 데이터 수신이 완료되면 호출될 콜백함수를 지정
							tcp_sent(tpcb, tcp_echoclient_sent);
 80010a4:	4918      	ldr	r1, [pc, #96]	; (8001108 <tcp_echoclient_connected+0xd4>)
 80010a6:	68b8      	ldr	r0, [r7, #8]
 80010a8:	f007 fb44 	bl	8008734 <tcp_sent>

							// -- <5-5> polling시 호출될 콜백함수를 지정
							// 	- 이 콜백함수는 주기적으로 호출되어야 한다.
							//	- 이 콜백함수에서는 송신할 데이터 중에서 아직 미송신된 것이
							//	     있는지와 close되어야 할 conecction이 있는지를 체크한다.
							tcp_poll(tpcb, tcp_echoclient_poll, 1);		
 80010ac:	2201      	movs	r2, #1
 80010ae:	4917      	ldr	r1, [pc, #92]	; (800110c <tcp_echoclient_connected+0xd8>)
 80010b0:	68b8      	ldr	r0, [r7, #8]
 80010b2:	f007 fb61 	bl	8008778 <tcp_poll>
							
							// pbuf에 있는 데이터를 서버로 송신함
							/* copy data to pbuf */
							pbuf_take(es->p_tx, (char*)data, strlen((char*)data));
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	689c      	ldr	r4, [r3, #8]
 80010ba:	4811      	ldr	r0, [pc, #68]	; (8001100 <tcp_echoclient_connected+0xcc>)
 80010bc:	f7ff f8a2 	bl	8000204 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	461a      	mov	r2, r3
 80010c6:	490e      	ldr	r1, [pc, #56]	; (8001100 <tcp_echoclient_connected+0xcc>)
 80010c8:	4620      	mov	r0, r4
 80010ca:	f005 ff03 	bl	8006ed4 <pbuf_take>
							/* send data */
							tcp_echoclient_send(tpcb,es);
 80010ce:	6979      	ldr	r1, [r7, #20]
 80010d0:	68b8      	ldr	r0, [r7, #8]
 80010d2:	f000 f8c9 	bl	8001268 <tcp_echoclient_send>
							
							return ERR_OK;
 80010d6:	2300      	movs	r3, #0
 80010d8:	e00c      	b.n	80010f4 <tcp_echoclient_connected+0xc0>
						}
				}	
				else	{
						/* close connection */
						tcp_echoclient_connection_close(tpcb, es);		  
 80010da:	6979      	ldr	r1, [r7, #20]
 80010dc:	68b8      	ldr	r0, [r7, #8]
 80010de:	f000 f948 	bl	8001372 <tcp_echoclient_connection_close>
						/* return memory allocation error */
						return ERR_MEM;  
 80010e2:	f04f 33ff 	mov.w	r3, #4294967295
 80010e6:	e005      	b.n	80010f4 <tcp_echoclient_connected+0xc0>
				}
		}
		else  {
				/* close connection */
				tcp_echoclient_connection_close(tpcb, es);
 80010e8:	6979      	ldr	r1, [r7, #20]
 80010ea:	68b8      	ldr	r0, [r7, #8]
 80010ec:	f000 f941 	bl	8001372 <tcp_echoclient_connection_close>
		}
		return err;
 80010f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd90      	pop	{r4, r7, pc}
 80010fc:	08011018 	.word	0x08011018
 8001100:	200001c0 	.word	0x200001c0
 8001104:	08001111 	.word	0x08001111
 8001108:	080012f5 	.word	0x080012f5
 800110c:	08001321 	.word	0x08001321

08001110 <tcp_echoclient_recv>:
  * retval err_t	: retuned error  
  */
// ------------------------------------------------------------------------------------

static err_t   tcp_echoclient_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{ 
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	70fb      	strb	r3, [r7, #3]
		char * cp;
		
	 // -- <6-1> 수신받은 데이터를 cp에 대입
		cp  = p->payload; 
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	617b      	str	r3, [r7, #20]

	 // -- <6-2> cp == <L10>이면 LED1을 Off하고 대응되는 메시지를 서버로 보낸다
	 // 이하 비슷한 작업을 수행한다.

		if(strcmp(cp,"<L10>") == 0) {
 8001124:	4947      	ldr	r1, [pc, #284]	; (8001244 <tcp_echoclient_recv+0x134>)
 8001126:	6978      	ldr	r0, [r7, #20]
 8001128:	f7ff f862 	bl	80001f0 <strcmp>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d109      	bne.n	8001146 <tcp_echoclient_recv+0x36>
			HAL_GPIO_WritePin(GPIO_LED, LED1, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	2101      	movs	r1, #1
 8001136:	4844      	ldr	r0, [pc, #272]	; (8001248 <tcp_echoclient_recv+0x138>)
 8001138:	f002 f86c 	bl	8003214 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 10);
 800113c:	210a      	movs	r1, #10
 800113e:	68b8      	ldr	r0, [r7, #8]
 8001140:	f000 f936 	bl	80013b0 <message_send_client>
 8001144:	e075      	b.n	8001232 <tcp_echoclient_recv+0x122>
		}
		else if(strcmp(cp,"<L11>") == 0) {
 8001146:	4941      	ldr	r1, [pc, #260]	; (800124c <tcp_echoclient_recv+0x13c>)
 8001148:	6978      	ldr	r0, [r7, #20]
 800114a:	f7ff f851 	bl	80001f0 <strcmp>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d109      	bne.n	8001168 <tcp_echoclient_recv+0x58>
			HAL_GPIO_WritePin(GPIO_LED, LED1, GPIO_PIN_SET);
 8001154:	2201      	movs	r2, #1
 8001156:	2101      	movs	r1, #1
 8001158:	483b      	ldr	r0, [pc, #236]	; (8001248 <tcp_echoclient_recv+0x138>)
 800115a:	f002 f85b 	bl	8003214 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 11);
 800115e:	210b      	movs	r1, #11
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f000 f925 	bl	80013b0 <message_send_client>
 8001166:	e064      	b.n	8001232 <tcp_echoclient_recv+0x122>
		}
		 else if(strcmp(cp,"<L20>") == 0) {
 8001168:	4939      	ldr	r1, [pc, #228]	; (8001250 <tcp_echoclient_recv+0x140>)
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff f840 	bl	80001f0 <strcmp>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d109      	bne.n	800118a <tcp_echoclient_recv+0x7a>
			HAL_GPIO_WritePin(GPIO_LED, LED2, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2102      	movs	r1, #2
 800117a:	4833      	ldr	r0, [pc, #204]	; (8001248 <tcp_echoclient_recv+0x138>)
 800117c:	f002 f84a 	bl	8003214 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 20);
 8001180:	2114      	movs	r1, #20
 8001182:	68b8      	ldr	r0, [r7, #8]
 8001184:	f000 f914 	bl	80013b0 <message_send_client>
 8001188:	e053      	b.n	8001232 <tcp_echoclient_recv+0x122>
		 }
		else if(strcmp(cp,"<L21>") == 0) {
 800118a:	4932      	ldr	r1, [pc, #200]	; (8001254 <tcp_echoclient_recv+0x144>)
 800118c:	6978      	ldr	r0, [r7, #20]
 800118e:	f7ff f82f 	bl	80001f0 <strcmp>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d109      	bne.n	80011ac <tcp_echoclient_recv+0x9c>
			HAL_GPIO_WritePin(GPIO_LED, LED2, GPIO_PIN_SET);
 8001198:	2201      	movs	r2, #1
 800119a:	2102      	movs	r1, #2
 800119c:	482a      	ldr	r0, [pc, #168]	; (8001248 <tcp_echoclient_recv+0x138>)
 800119e:	f002 f839 	bl	8003214 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 21);
 80011a2:	2115      	movs	r1, #21
 80011a4:	68b8      	ldr	r0, [r7, #8]
 80011a6:	f000 f903 	bl	80013b0 <message_send_client>
 80011aa:	e042      	b.n	8001232 <tcp_echoclient_recv+0x122>
		}
		else if(strcmp(cp,"<L30>") == 0)	{
 80011ac:	492a      	ldr	r1, [pc, #168]	; (8001258 <tcp_echoclient_recv+0x148>)
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff f81e 	bl	80001f0 <strcmp>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d109      	bne.n	80011ce <tcp_echoclient_recv+0xbe>
			HAL_GPIO_WritePin(GPIO_LED, LED3, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2104      	movs	r1, #4
 80011be:	4822      	ldr	r0, [pc, #136]	; (8001248 <tcp_echoclient_recv+0x138>)
 80011c0:	f002 f828 	bl	8003214 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 30);
 80011c4:	211e      	movs	r1, #30
 80011c6:	68b8      	ldr	r0, [r7, #8]
 80011c8:	f000 f8f2 	bl	80013b0 <message_send_client>
 80011cc:	e031      	b.n	8001232 <tcp_echoclient_recv+0x122>
		}
		else if(strcmp(cp,"<L31>") == 0)	{
 80011ce:	4923      	ldr	r1, [pc, #140]	; (800125c <tcp_echoclient_recv+0x14c>)
 80011d0:	6978      	ldr	r0, [r7, #20]
 80011d2:	f7ff f80d 	bl	80001f0 <strcmp>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d109      	bne.n	80011f0 <tcp_echoclient_recv+0xe0>
			HAL_GPIO_WritePin(GPIO_LED, LED3, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2104      	movs	r1, #4
 80011e0:	4819      	ldr	r0, [pc, #100]	; (8001248 <tcp_echoclient_recv+0x138>)
 80011e2:	f002 f817 	bl	8003214 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 31);
 80011e6:	211f      	movs	r1, #31
 80011e8:	68b8      	ldr	r0, [r7, #8]
 80011ea:	f000 f8e1 	bl	80013b0 <message_send_client>
 80011ee:	e020      	b.n	8001232 <tcp_echoclient_recv+0x122>
		}
		else if(strcmp(cp,"<L40>") == 0)	{
 80011f0:	491b      	ldr	r1, [pc, #108]	; (8001260 <tcp_echoclient_recv+0x150>)
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7fe fffc 	bl	80001f0 <strcmp>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <tcp_echoclient_recv+0x102>
			HAL_GPIO_WritePin(GPIO_LED, LED4,GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2108      	movs	r1, #8
 8001202:	4811      	ldr	r0, [pc, #68]	; (8001248 <tcp_echoclient_recv+0x138>)
 8001204:	f002 f806 	bl	8003214 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 40);
 8001208:	2128      	movs	r1, #40	; 0x28
 800120a:	68b8      	ldr	r0, [r7, #8]
 800120c:	f000 f8d0 	bl	80013b0 <message_send_client>
 8001210:	e00f      	b.n	8001232 <tcp_echoclient_recv+0x122>
		}
		else if(strcmp(cp,"<L41>") == 0)	{
 8001212:	4914      	ldr	r1, [pc, #80]	; (8001264 <tcp_echoclient_recv+0x154>)
 8001214:	6978      	ldr	r0, [r7, #20]
 8001216:	f7fe ffeb 	bl	80001f0 <strcmp>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d108      	bne.n	8001232 <tcp_echoclient_recv+0x122>
			HAL_GPIO_WritePin(GPIO_LED, LED4, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	2108      	movs	r1, #8
 8001224:	4808      	ldr	r0, [pc, #32]	; (8001248 <tcp_echoclient_recv+0x138>)
 8001226:	f001 fff5 	bl	8003214 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 41);
 800122a:	2129      	movs	r1, #41	; 0x29
 800122c:	68b8      	ldr	r0, [r7, #8]
 800122e:	f000 f8bf 	bl	80013b0 <message_send_client>
		}
		
		// Free the p buffer 
		pbuf_free(p);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f005 fbf2 	bl	8006a1c <pbuf_free>

		return ERR_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	08011030 	.word	0x08011030
 8001248:	40020c00 	.word	0x40020c00
 800124c:	08011038 	.word	0x08011038
 8001250:	08011040 	.word	0x08011040
 8001254:	08011048 	.word	0x08011048
 8001258:	08011050 	.word	0x08011050
 800125c:	08011058 	.word	0x08011058
 8001260:	08011060 	.word	0x08011060
 8001264:	08011068 	.word	0x08011068

08001268 <tcp_echoclient_send>:
  * retval 	None 
  */
// ------------------------------------------------------------------------------------

static void tcp_echoclient_send(struct tcp_pcb *tpcb, struct echoclient * es)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
		struct pbuf *ptr;
		err_t wr_err = ERR_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]
	 
		while ((wr_err == ERR_OK) &&
 8001276:	e029      	b.n	80012cc <tcp_echoclient_send+0x64>
					 (es->p_tx != NULL) && 
					 (es->p_tx->len <= tcp_sndbuf(tpcb)))
		{		
			/* get pointer on pbuf from es structure */
			ptr = es->p_tx;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	60bb      	str	r3, [r7, #8]
			/* enqueue data for transmission */
			wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	6859      	ldr	r1, [r3, #4]
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	895a      	ldrh	r2, [r3, #10]
 8001286:	2301      	movs	r3, #1
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f00a f927 	bl	800b4dc <tcp_write>
 800128e:	4603      	mov	r3, r0
 8001290:	73fb      	strb	r3, [r7, #15]
			
			if (wr_err == ERR_OK)	{ 
 8001292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d110      	bne.n	80012bc <tcp_echoclient_send+0x54>
					/* continue with next pbuf in chain (if any) */
					es->p_tx = ptr->next;			  
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	609a      	str	r2, [r3, #8]
					if(es->p_tx != NULL)  {
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d004      	beq.n	80012b4 <tcp_echoclient_send+0x4c>
						/* increment reference count for es->p */
						pbuf_ref(es->p_tx);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f005 fc54 	bl	8006b5c <pbuf_ref>
					}
							/* free pbuf:will free pbufs up to es->p (because es->p has a reference count > 0) */
					pbuf_free(ptr);
 80012b4:	68b8      	ldr	r0, [r7, #8]
 80012b6:	f005 fbb1 	bl	8006a1c <pbuf_free>
 80012ba:	e007      	b.n	80012cc <tcp_echoclient_send+0x64>
			 }
			
			 else if(wr_err == ERR_MEM)   {
 80012bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c4:	d102      	bne.n	80012cc <tcp_echoclient_send+0x64>
					/* we are low on memory, try later, defer to poll */
				 es->p_tx = ptr;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	609a      	str	r2, [r3, #8]
		while ((wr_err == ERR_OK) &&
 80012cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10b      	bne.n	80012ec <tcp_echoclient_send+0x84>
					 (es->p_tx != NULL) && 
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
		while ((wr_err == ERR_OK) &&
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d007      	beq.n	80012ec <tcp_echoclient_send+0x84>
					 (es->p_tx->len <= tcp_sndbuf(tpcb)))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	895a      	ldrh	r2, [r3, #10]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
					 (es->p_tx != NULL) && 
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d9c5      	bls.n	8001278 <tcp_echoclient_send+0x10>
			 
			 else  {
			 /* other problem ?? */
			 }
		}
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <tcp_echoclient_sent>:
  * retval 	err_t		: returned error code
  */
// ------------------------------------------------------------------------------------

static err_t tcp_echoclient_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	4613      	mov	r3, r2
 8001300:	80fb      	strh	r3, [r7, #6]
		struct echoclient *es;

		LWIP_UNUSED_ARG(len);

		es = (struct echoclient *)arg;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	617b      	str	r3, [r7, #20]
		
		if(es->p_tx != NULL)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <tcp_echoclient_sent+0x22>
		{
			/* still got pbufs to send */
			tcp_echoclient_send(tpcb, es);
 800130e:	6979      	ldr	r1, [r7, #20]
 8001310:	68b8      	ldr	r0, [r7, #8]
 8001312:	f7ff ffa9 	bl	8001268 <tcp_echoclient_send>
		}

		return ERR_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3718      	adds	r7, #24
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <tcp_echoclient_poll>:
  * retval 	err_t	: error code
  */
// ------------------------------------------------------------------------------------

static err_t tcp_echoclient_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
		err_t ret_err;
		struct echoclient *es;

		es = (struct echoclient*)arg;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	60bb      	str	r3, [r7, #8]
		if (es != NULL)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d013      	beq.n	800135c <tcp_echoclient_poll+0x3c>
		{
			if (es->p_tx != NULL)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d004      	beq.n	8001346 <tcp_echoclient_poll+0x26>
			{
				/* there is a remaining pbuf (chain) , try to send data */
				tcp_echoclient_send(tpcb, es);
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6838      	ldr	r0, [r7, #0]
 8001340:	f7ff ff92 	bl	8001268 <tcp_echoclient_send>
 8001344:	e007      	b.n	8001356 <tcp_echoclient_poll+0x36>
			}
			else
			{
				/* no remaining pbuf (chain)  */
				if(es->state == ES_CLOSING)
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b03      	cmp	r3, #3
 800134c:	d103      	bne.n	8001356 <tcp_echoclient_poll+0x36>
				{
					/* close tcp connection */
					tcp_echoclient_connection_close(tpcb, es);
 800134e:	68b9      	ldr	r1, [r7, #8]
 8001350:	6838      	ldr	r0, [r7, #0]
 8001352:	f000 f80e 	bl	8001372 <tcp_echoclient_connection_close>
				}
			}
			ret_err = ERR_OK;
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	e004      	b.n	8001366 <tcp_echoclient_poll+0x46>
		}
		else
		{
			/* nothing to be done */
			tcp_abort(tpcb);
 800135c:	6838      	ldr	r0, [r7, #0]
 800135e:	f006 f977 	bl	8007650 <tcp_abort>
			ret_err = ERR_ABRT;
 8001362:	23f3      	movs	r3, #243	; 0xf3
 8001364:	73fb      	strb	r3, [r7, #15]
		}
		return ret_err;
 8001366:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <tcp_echoclient_connection_close>:
  * retval 	None
  */
// ------------------------------------------------------------------------------------

static void tcp_echoclient_connection_close(struct tcp_pcb *tpcb, struct echoclient * es )
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
 800137a:	6039      	str	r1, [r7, #0]
		/* remove callbacks */
		tcp_recv(tpcb, NULL);
 800137c:	2100      	movs	r1, #0
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f007 f9b6 	bl	80086f0 <tcp_recv>
		tcp_sent(tpcb, NULL);
 8001384:	2100      	movs	r1, #0
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f007 f9d4 	bl	8008734 <tcp_sent>
		tcp_poll(tpcb, NULL,0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f007 f9f1 	bl	8008778 <tcp_poll>

		if (es != NULL) {
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d002      	beq.n	80013a2 <tcp_echoclient_connection_close+0x30>
			mem_free(es);
 800139c:	6838      	ldr	r0, [r7, #0]
 800139e:	f004 f961 	bl	8005664 <mem_free>
		}

		/* close tcp connection */
		tcp_close(tpcb);  
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f006 f86a 	bl	800747c <tcp_close>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <message_send_client>:
//  -- <11>  F429 Board(Client)에서 PC(Server)로 메시지를 전송하는 함수
//
// -------------------------------------------------------------------------

void message_send_client(struct tcp_pcb *tpcb, int number)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
			struct echoclient *es = NULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]

			/* allocate structure es to maintain tcp connection informations */
			es = (struct echoclient *)mem_malloc(sizeof(struct echoclient));
 80013be:	200c      	movs	r0, #12
 80013c0:	f004 fab6 	bl	8005930 <mem_malloc>
 80013c4:	60f8      	str	r0, [r7, #12]
			es->pcb = tpcb;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	605a      	str	r2, [r3, #4]
		
			switch(number) {
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2b29      	cmp	r3, #41	; 0x29
 80013d0:	dc4a      	bgt.n	8001468 <message_send_client+0xb8>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	2b0a      	cmp	r3, #10
 80013d6:	db78      	blt.n	80014ca <message_send_client+0x11a>
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	3b0a      	subs	r3, #10
 80013dc:	2b1f      	cmp	r3, #31
 80013de:	d874      	bhi.n	80014ca <message_send_client+0x11a>
 80013e0:	a201      	add	r2, pc, #4	; (adr r2, 80013e8 <message_send_client+0x38>)
 80013e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e6:	bf00      	nop
 80013e8:	08001471 	.word	0x08001471
 80013ec:	0800147b 	.word	0x0800147b
 80013f0:	080014cb 	.word	0x080014cb
 80013f4:	080014cb 	.word	0x080014cb
 80013f8:	080014cb 	.word	0x080014cb
 80013fc:	080014cb 	.word	0x080014cb
 8001400:	080014cb 	.word	0x080014cb
 8001404:	080014cb 	.word	0x080014cb
 8001408:	080014cb 	.word	0x080014cb
 800140c:	080014cb 	.word	0x080014cb
 8001410:	08001485 	.word	0x08001485
 8001414:	0800148f 	.word	0x0800148f
 8001418:	080014cb 	.word	0x080014cb
 800141c:	080014cb 	.word	0x080014cb
 8001420:	080014cb 	.word	0x080014cb
 8001424:	080014cb 	.word	0x080014cb
 8001428:	080014cb 	.word	0x080014cb
 800142c:	080014cb 	.word	0x080014cb
 8001430:	080014cb 	.word	0x080014cb
 8001434:	080014cb 	.word	0x080014cb
 8001438:	08001499 	.word	0x08001499
 800143c:	080014a3 	.word	0x080014a3
 8001440:	080014cb 	.word	0x080014cb
 8001444:	080014cb 	.word	0x080014cb
 8001448:	080014cb 	.word	0x080014cb
 800144c:	080014cb 	.word	0x080014cb
 8001450:	080014cb 	.word	0x080014cb
 8001454:	080014cb 	.word	0x080014cb
 8001458:	080014cb 	.word	0x080014cb
 800145c:	080014cb 	.word	0x080014cb
 8001460:	080014ad 	.word	0x080014ad
 8001464:	080014b7 	.word	0x080014b7
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	2b63      	cmp	r3, #99	; 0x63
 800146c:	d028      	beq.n	80014c0 <message_send_client+0x110>
 800146e:	e02c      	b.n	80014ca <message_send_client+0x11a>
					// --  <11-1>  number의 값에 따라 대응되는 메시지를 data에 저장.
					case 10 :	sprintf((char*)data, " LED 1 is OFF");
 8001470:	4929      	ldr	r1, [pc, #164]	; (8001518 <message_send_client+0x168>)
 8001472:	482a      	ldr	r0, [pc, #168]	; (800151c <message_send_client+0x16c>)
 8001474:	f00e fc16 	bl	800fca4 <siprintf>
									break;
 8001478:	e027      	b.n	80014ca <message_send_client+0x11a>
					case 11 :	sprintf((char*)data, " LED 1 is ON !!");
 800147a:	4929      	ldr	r1, [pc, #164]	; (8001520 <message_send_client+0x170>)
 800147c:	4827      	ldr	r0, [pc, #156]	; (800151c <message_send_client+0x16c>)
 800147e:	f00e fc11 	bl	800fca4 <siprintf>
									break;
 8001482:	e022      	b.n	80014ca <message_send_client+0x11a>
					case 20 :	sprintf((char*)data, " LED 2 is OFF");
 8001484:	4927      	ldr	r1, [pc, #156]	; (8001524 <message_send_client+0x174>)
 8001486:	4825      	ldr	r0, [pc, #148]	; (800151c <message_send_client+0x16c>)
 8001488:	f00e fc0c 	bl	800fca4 <siprintf>
									break;
 800148c:	e01d      	b.n	80014ca <message_send_client+0x11a>
					case 21 :	sprintf((char*)data, " LED 2 is ON !!");
 800148e:	4926      	ldr	r1, [pc, #152]	; (8001528 <message_send_client+0x178>)
 8001490:	4822      	ldr	r0, [pc, #136]	; (800151c <message_send_client+0x16c>)
 8001492:	f00e fc07 	bl	800fca4 <siprintf>
									break;
 8001496:	e018      	b.n	80014ca <message_send_client+0x11a>
					case 30 :	sprintf((char*)data, " LED 3 is OFF");
 8001498:	4924      	ldr	r1, [pc, #144]	; (800152c <message_send_client+0x17c>)
 800149a:	4820      	ldr	r0, [pc, #128]	; (800151c <message_send_client+0x16c>)
 800149c:	f00e fc02 	bl	800fca4 <siprintf>
									break;
 80014a0:	e013      	b.n	80014ca <message_send_client+0x11a>
					case 31 :	sprintf((char*)data, " LED 3 is ON !!");
 80014a2:	4923      	ldr	r1, [pc, #140]	; (8001530 <message_send_client+0x180>)
 80014a4:	481d      	ldr	r0, [pc, #116]	; (800151c <message_send_client+0x16c>)
 80014a6:	f00e fbfd 	bl	800fca4 <siprintf>
									break;
 80014aa:	e00e      	b.n	80014ca <message_send_client+0x11a>
					case 40 :	sprintf((char*)data, " LED 4 is OFF");
 80014ac:	4921      	ldr	r1, [pc, #132]	; (8001534 <message_send_client+0x184>)
 80014ae:	481b      	ldr	r0, [pc, #108]	; (800151c <message_send_client+0x16c>)
 80014b0:	f00e fbf8 	bl	800fca4 <siprintf>
									break;
 80014b4:	e009      	b.n	80014ca <message_send_client+0x11a>
					case 41 :	sprintf((char*)data, " LED 4 is ON !!");
 80014b6:	4920      	ldr	r1, [pc, #128]	; (8001538 <message_send_client+0x188>)
 80014b8:	4818      	ldr	r0, [pc, #96]	; (800151c <message_send_client+0x16c>)
 80014ba:	f00e fbf3 	bl	800fca4 <siprintf>
									break;
 80014be:	e004      	b.n	80014ca <message_send_client+0x11a>
					case 99 :	sprintf((char*)data, " Connected ! ");
 80014c0:	491e      	ldr	r1, [pc, #120]	; (800153c <message_send_client+0x18c>)
 80014c2:	4816      	ldr	r0, [pc, #88]	; (800151c <message_send_client+0x16c>)
 80014c4:	f00e fbee 	bl	800fca4 <siprintf>
									break;							
 80014c8:	bf00      	nop
			}

			// -- <11-2> 데이터를 보냄 : - server의 message_send() 와 비슷한 방법을 사용
			//                         송신할 데이터를 es->p_tx (pbuf)에 넣는다 (allocate pbuf )

			es->p_tx = pbuf_alloc(PBUF_TRANSPORT, strlen((char*)data) , PBUF_POOL);
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <message_send_client+0x16c>)
 80014cc:	f7fe fe9a 	bl	8000204 <strlen>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80014d8:	4619      	mov	r1, r3
 80014da:	2036      	movs	r0, #54	; 0x36
 80014dc:	f004 ffba 	bl	8006454 <pbuf_alloc>
 80014e0:	4602      	mov	r2, r0
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	609a      	str	r2, [r3, #8]
			
			if (es->p_tx) {
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00f      	beq.n	800150e <message_send_client+0x15e>
						// copy data to pbuf 
						pbuf_take(es->p_tx, (char*)data, strlen((char*)data));
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	689c      	ldr	r4, [r3, #8]
 80014f2:	480a      	ldr	r0, [pc, #40]	; (800151c <message_send_client+0x16c>)
 80014f4:	f7fe fe86 	bl	8000204 <strlen>
 80014f8:	4603      	mov	r3, r0
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	4907      	ldr	r1, [pc, #28]	; (800151c <message_send_client+0x16c>)
 8001500:	4620      	mov	r0, r4
 8001502:	f005 fce7 	bl	8006ed4 <pbuf_take>
						// send data 
						tcp_echoclient_send(tpcb, es);
 8001506:	68f9      	ldr	r1, [r7, #12]
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff fead 	bl	8001268 <tcp_echoclient_send>
			}		
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bd90      	pop	{r4, r7, pc}
 8001516:	bf00      	nop
 8001518:	08011070 	.word	0x08011070
 800151c:	200001c0 	.word	0x200001c0
 8001520:	08011080 	.word	0x08011080
 8001524:	08011090 	.word	0x08011090
 8001528:	080110a0 	.word	0x080110a0
 800152c:	080110b0 	.word	0x080110b0
 8001530:	080110c0 	.word	0x080110c0
 8001534:	080110d0 	.word	0x080110d0
 8001538:	080110e0 	.word	0x080110e0
 800153c:	080110f0 	.word	0x080110f0

08001540 <key_send>:
//  -- <12> SW가 눌러지면 대응되는 메시지를 Client --> Server로 전송하는 함수
//
// -------------------------------------------------------------------------

void key_send(int key_number)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
			struct echoclient *es = NULL;
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
			
			/* allocate structure es to maintain tcp connection informations */
			es = (struct echoclient *) mem_malloc( sizeof(struct echoclient) );
 800154c:	200c      	movs	r0, #12
 800154e:	f004 f9ef 	bl	8005930 <mem_malloc>
 8001552:	60f8      	str	r0, [r7, #12]
				
			if (es != NULL)	{
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d04a      	beq.n	80015f0 <key_send+0xb0>
				es->pcb = echoclient_pcb;
 800155a:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <key_send+0xb8>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	605a      	str	r2, [r3, #4]
						
				switch(key_number) {
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3b01      	subs	r3, #1
 8001566:	2b03      	cmp	r3, #3
 8001568:	d81e      	bhi.n	80015a8 <key_send+0x68>
 800156a:	a201      	add	r2, pc, #4	; (adr r2, 8001570 <key_send+0x30>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	08001581 	.word	0x08001581
 8001574:	0800158b 	.word	0x0800158b
 8001578:	08001595 	.word	0x08001595
 800157c:	0800159f 	.word	0x0800159f
					// --  <12-1>  key_number(SW)의 값에 따라 대응되는 메시지를 data에 저장.
					case 1 :	sprintf((char*)data, " SW 1 pressed !");								break;
 8001580:	491e      	ldr	r1, [pc, #120]	; (80015fc <key_send+0xbc>)
 8001582:	481f      	ldr	r0, [pc, #124]	; (8001600 <key_send+0xc0>)
 8001584:	f00e fb8e 	bl	800fca4 <siprintf>
 8001588:	e00e      	b.n	80015a8 <key_send+0x68>
					case 2 :	sprintf((char*)data, " SW 2 pressed !");								break;
 800158a:	491e      	ldr	r1, [pc, #120]	; (8001604 <key_send+0xc4>)
 800158c:	481c      	ldr	r0, [pc, #112]	; (8001600 <key_send+0xc0>)
 800158e:	f00e fb89 	bl	800fca4 <siprintf>
 8001592:	e009      	b.n	80015a8 <key_send+0x68>
					case 3 :	sprintf((char*)data, " SW 3 pressed !");								break;
 8001594:	491c      	ldr	r1, [pc, #112]	; (8001608 <key_send+0xc8>)
 8001596:	481a      	ldr	r0, [pc, #104]	; (8001600 <key_send+0xc0>)
 8001598:	f00e fb84 	bl	800fca4 <siprintf>
 800159c:	e004      	b.n	80015a8 <key_send+0x68>
					case 4 :	sprintf((char*)data, " SW 4 pressed !");								break;
 800159e:	491b      	ldr	r1, [pc, #108]	; (800160c <key_send+0xcc>)
 80015a0:	4817      	ldr	r0, [pc, #92]	; (8001600 <key_send+0xc0>)
 80015a2:	f00e fb7f 	bl	800fca4 <siprintf>
 80015a6:	bf00      	nop
				}

				// -- <12-2> 데이터를 보냄
				// 송신할 데이터를 es->p_tx (pbuf)에 넣는다 /* allocate pbuf */

				es->p_tx = pbuf_alloc(PBUF_TRANSPORT, strlen((char*)data) , PBUF_POOL);
 80015a8:	4815      	ldr	r0, [pc, #84]	; (8001600 <key_send+0xc0>)
 80015aa:	f7fe fe2b 	bl	8000204 <strlen>
 80015ae:	4603      	mov	r3, r0
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80015b6:	4619      	mov	r1, r3
 80015b8:	2036      	movs	r0, #54	; 0x36
 80015ba:	f004 ff4b 	bl	8006454 <pbuf_alloc>
 80015be:	4602      	mov	r2, r0
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	609a      	str	r2, [r3, #8]
				
				if (es->p_tx) {
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d011      	beq.n	80015f0 <key_send+0xb0>
							/* copy data to pbuf */
							pbuf_take(es->p_tx, (char*)data, strlen((char*)data));
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	689c      	ldr	r4, [r3, #8]
 80015d0:	480b      	ldr	r0, [pc, #44]	; (8001600 <key_send+0xc0>)
 80015d2:	f7fe fe17 	bl	8000204 <strlen>
 80015d6:	4603      	mov	r3, r0
 80015d8:	b29b      	uxth	r3, r3
 80015da:	461a      	mov	r2, r3
 80015dc:	4908      	ldr	r1, [pc, #32]	; (8001600 <key_send+0xc0>)
 80015de:	4620      	mov	r0, r4
 80015e0:	f005 fc78 	bl	8006ed4 <pbuf_take>
							/* send data */
							tcp_echoclient_send(echoclient_pcb, es);
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <key_send+0xb8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68f9      	ldr	r1, [r7, #12]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fe3c 	bl	8001268 <tcp_echoclient_send>
				}
			}			
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	200001bc 	.word	0x200001bc
 80015fc:	08011100 	.word	0x08011100
 8001600:	200001c0 	.word	0x200001c0
 8001604:	08011110 	.word	0x08011110
 8001608:	08011120 	.word	0x08011120
 800160c:	08011130 	.word	0x08011130

08001610 <HAL_GPIO_EXTI_Callback>:
// -- <13> GPIO의 EXTI 가 발생하면 (즉, SW가 눌러지면) 호출되는 함수
//
// ------------------------------------------------------------------------

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
			// -- <13-1> 눌러지는 SW 값에 따라 key_send( ) 함수를 호출함

			if (GPIO_Pin == SW1)  {
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d102      	bne.n	8001626 <HAL_GPIO_EXTI_Callback+0x16>
				key_send(1);
 8001620:	2001      	movs	r0, #1
 8001622:	f7ff ff8d 	bl	8001540 <key_send>
			}
			if (GPIO_Pin == SW2)  {
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d102      	bne.n	8001632 <HAL_GPIO_EXTI_Callback+0x22>
				key_send(2);
 800162c:	2002      	movs	r0, #2
 800162e:	f7ff ff87 	bl	8001540 <key_send>
			}
			if (GPIO_Pin == SW3)  {
 8001632:	88fb      	ldrh	r3, [r7, #6]
 8001634:	2b04      	cmp	r3, #4
 8001636:	d102      	bne.n	800163e <HAL_GPIO_EXTI_Callback+0x2e>
				key_send(3);
 8001638:	2003      	movs	r0, #3
 800163a:	f7ff ff81 	bl	8001540 <key_send>
			}
			if (GPIO_Pin == SW4)  {
 800163e:	88fb      	ldrh	r3, [r7, #6]
 8001640:	2b08      	cmp	r3, #8
 8001642:	d102      	bne.n	800164a <HAL_GPIO_EXTI_Callback+0x3a>
				key_send(4);
 8001644:	2004      	movs	r0, #4
 8001646:	f7ff ff7b 	bl	8001540 <key_send>
			}
			
			// -- <13-2> SW의 chattering 현상을 방지하기 위해 시간지연을 준다
			for (int i=0; i<=100000; i++) ;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	e002      	b.n	8001656 <HAL_GPIO_EXTI_Callback+0x46>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	3301      	adds	r3, #1
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4a03      	ldr	r2, [pc, #12]	; (8001668 <HAL_GPIO_EXTI_Callback+0x58>)
 800165a:	4293      	cmp	r3, r2
 800165c:	ddf8      	ble.n	8001650 <HAL_GPIO_EXTI_Callback+0x40>
}
 800165e:	bf00      	nop
 8001660:	bf00      	nop
 8001662:	3710      	adds	r7, #16
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	000186a0 	.word	0x000186a0

0800166c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001672:	490e      	ldr	r1, [pc, #56]	; (80016ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800167a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800167c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001680:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001682:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001688:	4c0b      	ldr	r4, [pc, #44]	; (80016b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800168a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001692:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001696:	f7ff fc93 	bl	8000fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800169a:	f00e fa49 	bl	800fb30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169e:	f7fe ff91 	bl	80005c4 <main>
  bx  lr    
 80016a2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016a4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ac:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80016b0:	08013d78 	.word	0x08013d78
  ldr r2, =_sbss
 80016b4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80016b8:	200084f4 	.word	0x200084f4

080016bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>

080016be <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00b      	beq.n	80016e6 <LAN8742_RegisterBusIO+0x28>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <LAN8742_RegisterBusIO+0x28>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <LAN8742_RegisterBusIO+0x28>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ea:	e014      	b.n	8001716 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d17c      	bne.n	800183c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2220      	movs	r2, #32
 8001754:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e01c      	b.n	8001796 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	f107 0208 	add.w	r2, r7, #8
 8001764:	2112      	movs	r1, #18
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	4798      	blx	r3
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	da03      	bge.n	8001778 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001770:	f06f 0304 	mvn.w	r3, #4
 8001774:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001776:	e00b      	b.n	8001790 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f003 031f 	and.w	r3, r3, #31
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	429a      	cmp	r2, r3
 8001782:	d105      	bne.n	8001790 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
         break;
 800178e:	e005      	b.n	800179c <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b1f      	cmp	r3, #31
 800179a:	d9df      	bls.n	800175c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b1f      	cmp	r3, #31
 80017a2:	d902      	bls.n	80017aa <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80017a4:	f06f 0302 	mvn.w	r3, #2
 80017a8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d145      	bne.n	800183c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6810      	ldr	r0, [r2, #0]
 80017b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017bc:	2100      	movs	r1, #0
 80017be:	4798      	blx	r3
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	db37      	blt.n	8001836 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6810      	ldr	r0, [r2, #0]
 80017ce:	f107 0208 	add.w	r2, r7, #8
 80017d2:	2100      	movs	r1, #0
 80017d4:	4798      	blx	r3
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	db28      	blt.n	800182e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4798      	blx	r3
 80017e2:	4603      	mov	r3, r0
 80017e4:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017e6:	e01c      	b.n	8001822 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4798      	blx	r3
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017fa:	d80e      	bhi.n	800181a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	695b      	ldr	r3, [r3, #20]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	6810      	ldr	r0, [r2, #0]
 8001804:	f107 0208 	add.w	r2, r7, #8
 8001808:	2100      	movs	r1, #0
 800180a:	4798      	blx	r3
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	da07      	bge.n	8001822 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001812:	f06f 0304 	mvn.w	r3, #4
 8001816:	613b      	str	r3, [r7, #16]
                 break;
 8001818:	e010      	b.n	800183c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800181a:	f06f 0301 	mvn.w	r3, #1
 800181e:	613b      	str	r3, [r7, #16]
               break;
 8001820:	e00c      	b.n	800183c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1dd      	bne.n	80017e8 <LAN8742_Init+0xc6>
 800182c:	e006      	b.n	800183c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800182e:	f06f 0304 	mvn.w	r3, #4
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	e002      	b.n	800183c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001836:	f06f 0303 	mvn.w	r3, #3
 800183a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d112      	bne.n	8001868 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	4798      	blx	r3
 8001848:	4603      	mov	r3, r0
 800184a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800184c:	bf00      	nop
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	4798      	blx	r3
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001860:	d9f5      	bls.n	800184e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001868:	693b      	ldr	r3, [r7, #16]
 }
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6810      	ldr	r0, [r2, #0]
 8001886:	f107 020c 	add.w	r2, r7, #12
 800188a:	2101      	movs	r1, #1
 800188c:	4798      	blx	r3
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	da02      	bge.n	800189a <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001894:	f06f 0304 	mvn.w	r3, #4
 8001898:	e06e      	b.n	8001978 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6810      	ldr	r0, [r2, #0]
 80018a2:	f107 020c 	add.w	r2, r7, #12
 80018a6:	2101      	movs	r1, #1
 80018a8:	4798      	blx	r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	da02      	bge.n	80018b6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018b0:	f06f 0304 	mvn.w	r3, #4
 80018b4:	e060      	b.n	8001978 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80018c0:	2301      	movs	r3, #1
 80018c2:	e059      	b.n	8001978 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6810      	ldr	r0, [r2, #0]
 80018cc:	f107 020c 	add.w	r2, r7, #12
 80018d0:	2100      	movs	r1, #0
 80018d2:	4798      	blx	r3
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	da02      	bge.n	80018e0 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018da:	f06f 0304 	mvn.w	r3, #4
 80018de:	e04b      	b.n	8001978 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d11b      	bne.n	8001922 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d006      	beq.n	8001902 <LAN8742_GetLinkState+0x90>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80018fe:	2302      	movs	r3, #2
 8001900:	e03a      	b.n	8001978 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800190c:	2303      	movs	r3, #3
 800190e:	e033      	b.n	8001978 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800191a:	2304      	movs	r3, #4
 800191c:	e02c      	b.n	8001978 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800191e:	2305      	movs	r3, #5
 8001920:	e02a      	b.n	8001978 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6810      	ldr	r0, [r2, #0]
 800192a:	f107 020c 	add.w	r2, r7, #12
 800192e:	211f      	movs	r1, #31
 8001930:	4798      	blx	r3
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	da02      	bge.n	800193e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001938:	f06f 0304 	mvn.w	r3, #4
 800193c:	e01c      	b.n	8001978 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001948:	2306      	movs	r3, #6
 800194a:	e015      	b.n	8001978 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f003 031c 	and.w	r3, r3, #28
 8001952:	2b18      	cmp	r3, #24
 8001954:	d101      	bne.n	800195a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001956:	2302      	movs	r3, #2
 8001958:	e00e      	b.n	8001978 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f003 031c 	and.w	r3, r3, #28
 8001960:	2b08      	cmp	r3, #8
 8001962:	d101      	bne.n	8001968 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001964:	2303      	movs	r3, #3
 8001966:	e007      	b.n	8001978 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 031c 	and.w	r3, r3, #28
 800196e:	2b14      	cmp	r3, #20
 8001970:	d101      	bne.n	8001976 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001972:	2304      	movs	r3, #4
 8001974:	e000      	b.n	8001978 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001976:	2305      	movs	r3, #5
    }				
  }
}
 8001978:	4618      	mov	r0, r3
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_Init+0x40>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <HAL_Init+0x40>)
 800198a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_Init+0x40>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_Init+0x40>)
 8001996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a07      	ldr	r2, [pc, #28]	; (80019c0 <HAL_Init+0x40>)
 80019a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a8:	2003      	movs	r0, #3
 80019aa:	f000 f94f 	bl	8001c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ae:	200f      	movs	r0, #15
 80019b0:	f000 f808 	bl	80019c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b4:	f7ff f8bc 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023c00 	.word	0x40023c00

080019c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <HAL_InitTick+0x54>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_InitTick+0x58>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019da:	fbb3 f3f1 	udiv	r3, r3, r1
 80019de:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f967 	bl	8001cb6 <HAL_SYSTICK_Config>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00e      	b.n	8001a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b0f      	cmp	r3, #15
 80019f6:	d80a      	bhi.n	8001a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f8:	2200      	movs	r2, #0
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f000 f92f 	bl	8001c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a04:	4a06      	ldr	r2, [pc, #24]	; (8001a20 <HAL_InitTick+0x5c>)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e000      	b.n	8001a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_IncTick+0x20>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x24>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4413      	add	r3, r2
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_IncTick+0x24>)
 8001a36:	6013      	str	r3, [r2, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000008 	.word	0x20000008
 8001a48:	20000224 	.word	0x20000224

08001a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a50:	4b03      	ldr	r3, [pc, #12]	; (8001a60 <HAL_GetTick+0x14>)
 8001a52:	681b      	ldr	r3, [r3, #0]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	20000224 	.word	0x20000224

08001a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	f7ff ffee 	bl	8001a4c <HAL_GetTick>
 8001a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a7c:	d005      	beq.n	8001a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	; (8001aa8 <HAL_Delay+0x44>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a8a:	bf00      	nop
 8001a8c:	f7ff ffde 	bl	8001a4c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d8f7      	bhi.n	8001a8c <HAL_Delay+0x28>
  {
  }
}
 8001a9c:	bf00      	nop
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000008 	.word	0x20000008

08001aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db0b      	blt.n	8001b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	4907      	ldr	r1, [pc, #28]	; (8001b48 <__NVIC_EnableIRQ+0x38>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	2001      	movs	r0, #1
 8001b32:	fa00 f202 	lsl.w	r2, r0, r2
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
         );
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c18:	d301      	bcc.n	8001c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00f      	b.n	8001c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <SysTick_Config+0x40>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c26:	210f      	movs	r1, #15
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f7ff ff8e 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <SysTick_Config+0x40>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <SysTick_Config+0x40>)
 8001c38:	2207      	movs	r2, #7
 8001c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	e000e010 	.word	0xe000e010

08001c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff29 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c74:	f7ff ff3e 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	6978      	ldr	r0, [r7, #20]
 8001c80:	f7ff ff8e 	bl	8001ba0 <NVIC_EncodePriority>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff5d 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff31 	bl	8001b10 <__NVIC_EnableIRQ>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffa2 	bl	8001c08 <SysTick_Config>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
	...

08001cd0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e06c      	b.n	8001dbc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d106      	bne.n	8001cfa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2223      	movs	r2, #35	; 0x23
 8001cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f003 f923 	bl	8004f40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a30      	ldr	r2, [pc, #192]	; (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_ETH_Init+0xf4>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001d16:	4b2c      	ldr	r3, [pc, #176]	; (8001dc8 <HAL_ETH_Init+0xf8>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	4a2b      	ldr	r2, [pc, #172]	; (8001dc8 <HAL_ETH_Init+0xf8>)
 8001d1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d20:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001d22:	4b29      	ldr	r3, [pc, #164]	; (8001dc8 <HAL_ETH_Init+0xf8>)
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	4927      	ldr	r1, [pc, #156]	; (8001dc8 <HAL_ETH_Init+0xf8>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <HAL_ETH_Init+0xf8>)
 8001d32:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	6812      	ldr	r2, [r2, #0]
 8001d42:	f043 0301 	orr.w	r3, r3, #1
 8001d46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d4a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d4c:	f7ff fe7e 	bl	8001a4c <HAL_GetTick>
 8001d50:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d52:	e011      	b.n	8001d78 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001d54:	f7ff fe7a 	bl	8001a4c <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d62:	d909      	bls.n	8001d78 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2204      	movs	r2, #4
 8001d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	22e0      	movs	r2, #224	; 0xe0
 8001d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e021      	b.n	8001dbc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1e4      	bne.n	8001d54 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fdf0 	bl	8002970 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 fe97 	bl	8002ac4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 feed 	bl	8002b76 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	461a      	mov	r2, r3
 8001da2:	2100      	movs	r1, #0
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fe55 	bl	8002a54 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2210      	movs	r2, #16
 8001db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40013800 	.word	0x40013800

08001dcc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dda:	2b10      	cmp	r3, #16
 8001ddc:	d150      	bne.n	8001e80 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2223      	movs	r2, #35	; 0x23
 8001de2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2204      	movs	r2, #4
 8001dea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f9fd 	bl	80021ec <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0208 	orr.w	r2, r2, #8
 8001e00:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e0a:	2001      	movs	r0, #1
 8001e0c:	f7ff fe2a 	bl	8001a64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0204 	orr.w	r2, r2, #4
 8001e26:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e30:	2001      	movs	r0, #1
 8001e32:	f7ff fe17 	bl	8001a64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 fc36 	bl	80026b0 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e5a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	f043 0302 	orr.w	r3, r3, #2
 8001e6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e72:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2223      	movs	r2, #35	; 0x23
 8001e78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
  }
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b084      	sub	sp, #16
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e98:	2b23      	cmp	r3, #35	; 0x23
 8001e9a:	d14a      	bne.n	8001f32 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2223      	movs	r2, #35	; 0x23
 8001ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001eb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eba:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	f023 0302 	bic.w	r3, r3, #2
 8001ece:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ed2:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0204 	bic.w	r2, r2, #4
 8001ee2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff fdb9 	bl	8001a64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 fbd8 	bl	80026b0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0208 	bic.w	r2, r2, #8
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f18:	2001      	movs	r0, #1
 8001f1a:	f7ff fda3 	bl	8001a64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2210      	movs	r2, #16
 8001f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e000      	b.n	8001f34 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
  }
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e07c      	b.n	800205c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f68:	2b23      	cmp	r3, #35	; 0x23
 8001f6a:	d176      	bne.n	800205a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	68b9      	ldr	r1, [r7, #8]
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f000 fe6d 	bl	8002c50 <ETH_Prepare_Tx_Descriptors>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d009      	beq.n	8001f90 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	f043 0202 	orr.w	r2, r3, #2
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e065      	b.n	800205c <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f90:	f3bf 8f4f 	dsb	sy
}
 8001f94:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	3206      	adds	r2, #6
 8001f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	1c5a      	adds	r2, r3, #1
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d904      	bls.n	8001fc0 <HAL_ETH_Transmit+0x84>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	1f1a      	subs	r2, r3, #4
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3106      	adds	r1, #6
 8001fcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001fd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001fd4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001fd6:	f7ff fd39 	bl	8001a4c <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001fdc:	e037      	b.n	800204e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d011      	beq.n	8002014 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	f043 0208 	orr.w	r2, r3, #8
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e023      	b.n	800205c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800201a:	d018      	beq.n	800204e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800201c:	f7ff fd16 	bl	8001a4c <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	d302      	bcc.n	8002032 <HAL_ETH_Transmit+0xf6>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10d      	bne.n	800204e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002038:	f043 0204 	orr.w	r2, r3, #4
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8002048:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e006      	b.n	800205c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	dbc3      	blt.n	8001fde <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
  }
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d109      	bne.n	8002090 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	f043 0201 	orr.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0a8      	b.n	80021e2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002096:	2b23      	cmp	r3, #35	; 0x23
 8002098:	d001      	beq.n	800209e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e0a1      	b.n	80021e2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	69fa      	ldr	r2, [r7, #28]
 80020a8:	3212      	adds	r2, #18
 80020aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ae:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020b4:	f1c3 0304 	rsb	r3, r3, #4
 80020b8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020ba:	e06a      	b.n	8002192 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d007      	beq.n	80020d8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	699a      	ldr	r2, [r3, #24]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	69da      	ldr	r2, [r3, #28]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d103      	bne.n	80020ec <HAL_ETH_ReadData+0x88>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d040      	beq.n	800216e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00c      	beq.n	8002130 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	0c1b      	lsrs	r3, r3, #16
 800211c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002120:	3b04      	subs	r3, #4
 8002122:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002148:	461a      	mov	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	b29b      	uxth	r3, r3
 800214e:	f003 f8c7 	bl	80052e0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	441a      	add	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	2200      	movs	r2, #0
 800216c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	3301      	adds	r3, #1
 8002172:	61fb      	str	r3, [r7, #28]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	2b03      	cmp	r3, #3
 8002178:	d902      	bls.n	8002180 <HAL_ETH_ReadData+0x11c>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3b04      	subs	r3, #4
 800217e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	3212      	adds	r2, #18
 8002186:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	3301      	adds	r3, #1
 8002190:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db06      	blt.n	80021a8 <HAL_ETH_ReadData+0x144>
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d202      	bcs.n	80021a8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d089      	beq.n	80020bc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	441a      	add	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f815 	bl	80021ec <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80021c8:	7bfb      	ldrb	r3, [r7, #15]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d108      	bne.n	80021e0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	e000      	b.n	80021e2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3720      	adds	r7, #32
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80021f8:	2301      	movs	r3, #1
 80021fa:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002200:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69fa      	ldr	r2, [r7, #28]
 8002206:	3212      	adds	r2, #18
 8002208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800220c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002212:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002214:	e040      	b.n	8002298 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	6a1b      	ldr	r3, [r3, #32]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d112      	bne.n	8002244 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800221e:	f107 030c 	add.w	r3, r7, #12
 8002222:	4618      	mov	r0, r3
 8002224:	f003 f82c 	bl	8005280 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	74fb      	strb	r3, [r7, #19]
 8002232:	e007      	b.n	8002244 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	461a      	mov	r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	461a      	mov	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d026      	beq.n	8002298 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224e:	2b00      	cmp	r3, #0
 8002250:	d103      	bne.n	800225a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	4a1e      	ldr	r2, [pc, #120]	; (80022d0 <ETH_UpdateDescriptor+0xe4>)
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	e003      	b.n	8002262 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002260:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002262:	f3bf 8f5f 	dmb	sy
}
 8002266:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	3301      	adds	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	2b03      	cmp	r3, #3
 800227e:	d902      	bls.n	8002286 <ETH_UpdateDescriptor+0x9a>
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	3b04      	subs	r3, #4
 8002284:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	3212      	adds	r2, #18
 800228c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002290:	617b      	str	r3, [r7, #20]
      desccount--;
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	3b01      	subs	r3, #1
 8002296:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <ETH_UpdateDescriptor+0xb8>
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1b8      	bne.n	8002216 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d00c      	beq.n	80022c8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b6:	461a      	mov	r2, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69fa      	ldr	r2, [r7, #28]
 80022c0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80022c8:	bf00      	nop
 80022ca:	3720      	adds	r7, #32
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	800045f8 	.word	0x800045f8

080022d4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 031c 	and.w	r3, r3, #28
 80022f0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	02db      	lsls	r3, r3, #11
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	019b      	lsls	r3, r3, #6
 8002302:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	4313      	orrs	r3, r2
 800230a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f023 0302 	bic.w	r3, r3, #2
 8002312:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002324:	f7ff fb92 	bl	8001a4c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800232a:	e00d      	b.n	8002348 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800232c:	f7ff fb8e 	bl	8001a4c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233a:	d301      	bcc.n	8002340 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e010      	b.n	8002362 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1ec      	bne.n	800232c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695b      	ldr	r3, [r3, #20]
 8002358:	b29b      	uxth	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f003 031c 	and.w	r3, r3, #28
 8002386:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	02db      	lsls	r3, r3, #11
 800238c:	b29b      	uxth	r3, r3
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	019b      	lsls	r3, r3, #6
 8002398:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c4:	f7ff fb42 	bl	8001a4c <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023ca:	e00d      	b.n	80023e8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80023cc:	f7ff fb3e 	bl	8001a4c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023da:	d301      	bcc.n	80023e0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e009      	b.n	80023f4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1ec      	bne.n	80023cc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0d9      	b.n	80025c4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b00      	cmp	r3, #0
 800241c:	bf14      	ite	ne
 800241e:	2301      	movne	r3, #1
 8002420:	2300      	moveq	r3, #0
 8002422:	b2db      	uxtb	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461a      	mov	r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800247a:	2b00      	cmp	r3, #0
 800247c:	bf0c      	ite	eq
 800247e:	2301      	moveq	r3, #1
 8002480:	2300      	movne	r3, #0
 8002482:	b2db      	uxtb	r3, r3
 8002484:	461a      	mov	r2, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf14      	ite	ne
 8002498:	2301      	movne	r3, #1
 800249a:	2300      	moveq	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	bf0c      	ite	eq
 80024ce:	2301      	moveq	r3, #1
 80024d0:	2300      	movne	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fe:	2b00      	cmp	r3, #0
 8002500:	bf14      	ite	ne
 8002502:	2301      	movne	r3, #1
 8002504:	2300      	moveq	r3, #0
 8002506:	b2db      	uxtb	r3, r3
 8002508:	461a      	mov	r2, r3
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf14      	ite	ne
 800252a:	2301      	movne	r3, #1
 800252c:	2300      	moveq	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf14      	ite	ne
 8002544:	2301      	movne	r3, #1
 8002546:	2300      	moveq	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	461a      	mov	r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	0c1b      	lsrs	r3, r3, #16
 8002584:	b29a      	uxth	r2, r3
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	2b00      	cmp	r3, #0
 8002596:	bf14      	ite	ne
 8002598:	2301      	movne	r3, #1
 800259a:	2300      	moveq	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80025c2:	2300      	movs	r3, #0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e00b      	b.n	80025fc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d105      	bne.n	80025fa <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80025ee:	6839      	ldr	r1, [r7, #0]
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f883 	bl	80026fc <ETH_SetMACConfig>

    return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
  }
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f023 031c 	bic.w	r3, r3, #28
 800261a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800261c:	f001 faa0 	bl	8003b60 <HAL_RCC_GetHCLKFreq>
 8002620:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	4a1d      	ldr	r2, [pc, #116]	; (800269c <HAL_ETH_SetMDIOClockRange+0x98>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d908      	bls.n	800263c <HAL_ETH_SetMDIOClockRange+0x38>
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d804      	bhi.n	800263c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f043 0308 	orr.w	r3, r3, #8
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	e027      	b.n	800268c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4a18      	ldr	r2, [pc, #96]	; (80026a0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d908      	bls.n	8002656 <HAL_ETH_SetMDIOClockRange+0x52>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	4a17      	ldr	r2, [pc, #92]	; (80026a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d204      	bcs.n	8002656 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f043 030c 	orr.w	r3, r3, #12
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	e01a      	b.n	800268c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d303      	bcc.n	8002666 <HAL_ETH_SetMDIOClockRange+0x62>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d911      	bls.n	800268a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	4a0f      	ldr	r2, [pc, #60]	; (80026a8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d908      	bls.n	8002680 <HAL_ETH_SetMDIOClockRange+0x7c>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	4a0e      	ldr	r2, [pc, #56]	; (80026ac <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d804      	bhi.n	8002680 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	e005      	b.n	800268c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f043 0310 	orr.w	r3, r3, #16
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e000      	b.n	800268c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800268a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68fa      	ldr	r2, [r7, #12]
 8002692:	611a      	str	r2, [r3, #16]
}
 8002694:	bf00      	nop
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	01312cff 	.word	0x01312cff
 80026a0:	02160ebf 	.word	0x02160ebf
 80026a4:	03938700 	.word	0x03938700
 80026a8:	05f5e0ff 	.word	0x05f5e0ff
 80026ac:	08f0d17f 	.word	0x08f0d17f

080026b0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026d2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026e0:	2001      	movs	r0, #1
 80026e2:	f7ff f9bf 	bl	8001a64 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80026f0:	6193      	str	r3, [r2, #24]
}
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4b51      	ldr	r3, [pc, #324]	; (8002858 <ETH_SetMACConfig+0x15c>)
 8002712:	4013      	ands	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	7c1b      	ldrb	r3, [r3, #16]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d102      	bne.n	8002724 <ETH_SetMACConfig+0x28>
 800271e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002722:	e000      	b.n	8002726 <ETH_SetMACConfig+0x2a>
 8002724:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	7c5b      	ldrb	r3, [r3, #17]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d102      	bne.n	8002734 <ETH_SetMACConfig+0x38>
 800272e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002732:	e000      	b.n	8002736 <ETH_SetMACConfig+0x3a>
 8002734:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002736:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800273c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	7fdb      	ldrb	r3, [r3, #31]
 8002742:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002744:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800274a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	7f92      	ldrb	r2, [r2, #30]
 8002750:	2a00      	cmp	r2, #0
 8002752:	d102      	bne.n	800275a <ETH_SetMACConfig+0x5e>
 8002754:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002758:	e000      	b.n	800275c <ETH_SetMACConfig+0x60>
 800275a:	2200      	movs	r2, #0
                        macconf->Speed |
 800275c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	7f1b      	ldrb	r3, [r3, #28]
 8002762:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002764:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800276a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	791b      	ldrb	r3, [r3, #4]
 8002770:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002772:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	f892 2020 	ldrb.w	r2, [r2, #32]
 800277a:	2a00      	cmp	r2, #0
 800277c:	d102      	bne.n	8002784 <ETH_SetMACConfig+0x88>
 800277e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002782:	e000      	b.n	8002786 <ETH_SetMACConfig+0x8a>
 8002784:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002786:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	7bdb      	ldrb	r3, [r3, #15]
 800278c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800278e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002794:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800279c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800279e:	4313      	orrs	r3, r2
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027b6:	2001      	movs	r0, #1
 80027b8:	f7ff f954 	bl	8001a64 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	f64f 7341 	movw	r3, #65345	; 0xff41
 80027d2:	4013      	ands	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027da:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80027e2:	2a00      	cmp	r2, #0
 80027e4:	d101      	bne.n	80027ea <ETH_SetMACConfig+0xee>
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	e000      	b.n	80027ec <ETH_SetMACConfig+0xf0>
 80027ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80027ec:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80027f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80027fa:	2a01      	cmp	r2, #1
 80027fc:	d101      	bne.n	8002802 <ETH_SetMACConfig+0x106>
 80027fe:	2208      	movs	r2, #8
 8002800:	e000      	b.n	8002804 <ETH_SetMACConfig+0x108>
 8002802:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002804:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800280c:	2a01      	cmp	r2, #1
 800280e:	d101      	bne.n	8002814 <ETH_SetMACConfig+0x118>
 8002810:	2204      	movs	r2, #4
 8002812:	e000      	b.n	8002816 <ETH_SetMACConfig+0x11a>
 8002814:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002816:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800281e:	2a01      	cmp	r2, #1
 8002820:	d101      	bne.n	8002826 <ETH_SetMACConfig+0x12a>
 8002822:	2202      	movs	r2, #2
 8002824:	e000      	b.n	8002828 <ETH_SetMACConfig+0x12c>
 8002826:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002828:	4313      	orrs	r3, r2
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4313      	orrs	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002840:	2001      	movs	r0, #1
 8002842:	f7ff f90f 	bl	8001a64 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	619a      	str	r2, [r3, #24]
}
 800284e:	bf00      	nop
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	ff20810f 	.word	0xff20810f

0800285c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4b3d      	ldr	r3, [pc, #244]	; (800296c <ETH_SetDMAConfig+0x110>)
 8002876:	4013      	ands	r3, r2
 8002878:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	7b1b      	ldrb	r3, [r3, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d102      	bne.n	8002888 <ETH_SetDMAConfig+0x2c>
 8002882:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002886:	e000      	b.n	800288a <ETH_SetDMAConfig+0x2e>
 8002888:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	7b5b      	ldrb	r3, [r3, #13]
 800288e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002890:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	7f52      	ldrb	r2, [r2, #29]
 8002896:	2a00      	cmp	r2, #0
 8002898:	d102      	bne.n	80028a0 <ETH_SetDMAConfig+0x44>
 800289a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800289e:	e000      	b.n	80028a2 <ETH_SetDMAConfig+0x46>
 80028a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80028a2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	7b9b      	ldrb	r3, [r3, #14]
 80028a8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80028aa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80028b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	7f1b      	ldrb	r3, [r3, #28]
 80028b6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80028b8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	7f9b      	ldrb	r3, [r3, #30]
 80028be:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80028c0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80028c6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ce:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80028d0:	4313      	orrs	r3, r2
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e0:	461a      	mov	r2, r3
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028f2:	2001      	movs	r0, #1
 80028f4:	f7ff f8b6 	bl	8001a64 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002900:	461a      	mov	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	791b      	ldrb	r3, [r3, #4]
 800290a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002910:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002916:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800291c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002924:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002926:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800292e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002934:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6812      	ldr	r2, [r2, #0]
 800293a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800293e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002942:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002950:	2001      	movs	r0, #1
 8002952:	f7ff f887 	bl	8001a64 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800295e:	461a      	mov	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6013      	str	r3, [r2, #0]
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	f8de3f23 	.word	0xf8de3f23

08002970 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b0a6      	sub	sp, #152	; 0x98
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002978:	2301      	movs	r3, #1
 800297a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002984:	2300      	movs	r3, #0
 8002986:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800298e:	2301      	movs	r3, #1
 8002990:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80029ac:	2300      	movs	r3, #0
 80029ae:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80029b6:	2300      	movs	r3, #0
 80029b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80029d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80029d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80029de:	2300      	movs	r3, #0
 80029e0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80029e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80029e8:	4619      	mov	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fe86 	bl	80026fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80029f0:	2301      	movs	r3, #1
 80029f2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80029f4:	2301      	movs	r3, #1
 80029f6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80029f8:	2301      	movs	r3, #1
 80029fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002a12:	2300      	movs	r3, #0
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002a16:	2301      	movs	r3, #1
 8002a18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002a20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a24:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a2a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a30:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002a40:	f107 0308 	add.w	r3, r7, #8
 8002a44:	4619      	mov	r1, r3
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ff08 	bl	800285c <ETH_SetDMAConfig>
}
 8002a4c:	bf00      	nop
 8002a4e:	3798      	adds	r7, #152	; 0x98
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3305      	adds	r3, #5
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	021b      	lsls	r3, r3, #8
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	3204      	adds	r2, #4
 8002a6c:	7812      	ldrb	r2, [r2, #0]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <ETH_MACAddressConfig+0x68>)
 8002a76:	4413      	add	r3, r2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3303      	adds	r3, #3
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	061a      	lsls	r2, r3, #24
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	3302      	adds	r3, #2
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	041b      	lsls	r3, r3, #16
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3301      	adds	r3, #1
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	021b      	lsls	r3, r3, #8
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	7812      	ldrb	r2, [r2, #0]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <ETH_MACAddressConfig+0x6c>)
 8002aa6:	4413      	add	r3, r2
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	6013      	str	r3, [r2, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	371c      	adds	r7, #28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40028040 	.word	0x40028040
 8002ac0:	40028044 	.word	0x40028044

08002ac4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	e03e      	b.n	8002b50 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68d9      	ldr	r1, [r3, #12]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	440b      	add	r3, r1
 8002ae2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2200      	movs	r2, #0
 8002afa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	3206      	adds	r2, #6
 8002b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d80c      	bhi.n	8002b34 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68d9      	ldr	r1, [r3, #12]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1c5a      	adds	r2, r3, #1
 8002b22:	4613      	mov	r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	440b      	add	r3, r1
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	e004      	b.n	8002b3e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	461a      	mov	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d9bd      	bls.n	8002ad2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b68:	611a      	str	r2, [r3, #16]
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b085      	sub	sp, #20
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	e046      	b.n	8002c12 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6919      	ldr	r1, [r3, #16]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4413      	add	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	440b      	add	r3, r1
 8002b94:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	2200      	movs	r2, #0
 8002bac:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002bc0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002bc8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002bd6:	68b9      	ldr	r1, [r7, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	3212      	adds	r2, #18
 8002bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d80c      	bhi.n	8002c02 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6919      	ldr	r1, [r3, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	440b      	add	r3, r1
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	60da      	str	r2, [r3, #12]
 8002c00:	e004      	b.n	8002c0c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	461a      	mov	r2, r3
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d9b5      	bls.n	8002b84 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691a      	ldr	r2, [r3, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c42:	60da      	str	r2, [r3, #12]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b08d      	sub	sp, #52	; 0x34
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	3318      	adds	r3, #24
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c7a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c92:	d007      	beq.n	8002ca4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	3304      	adds	r3, #4
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e103      	b.n	8002eb0 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	3301      	adds	r3, #1
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002cc0:	f023 031f 	bic.w	r3, r3, #31
 8002cc4:	69fa      	ldr	r2, [r7, #28]
 8002cc6:	6852      	ldr	r2, [r2, #4]
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0301 	and.w	r3, r3, #1
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002d22:	6a3b      	ldr	r3, [r7, #32]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d2e:	f3bf 8f5f 	dmb	sy
}
 8002d32:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002d40:	e084      	b.n	8002e4c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d006      	beq.n	8002d62 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	601a      	str	r2, [r3, #0]
 8002d60:	e005      	b.n	8002d6e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d70:	3301      	adds	r3, #1
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d902      	bls.n	8002d80 <ETH_Prepare_Tx_Descriptors+0x130>
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	3b04      	subs	r3, #4
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d88:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002da2:	d007      	beq.n	8002db4 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da8:	3304      	adds	r3, #4
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d029      	beq.n	8002e08 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dc6:	e019      	b.n	8002dfc <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002dc8:	f3bf 8f5f 	dmb	sy
}
 8002dcc:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dd6:	6a3b      	ldr	r3, [r7, #32]
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ddc:	3301      	adds	r3, #1
 8002dde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d902      	bls.n	8002dec <ETH_Prepare_Tx_Descriptors+0x19c>
 8002de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de8:	3b04      	subs	r3, #4
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	3301      	adds	r3, #1
 8002dfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d3e1      	bcc.n	8002dc8 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002e04:	2302      	movs	r3, #2
 8002e06:	e053      	b.n	8002eb0 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002e26:	f023 031f 	bic.w	r3, r3, #31
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	6852      	ldr	r2, [r2, #4]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	3301      	adds	r3, #1
 8002e38:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e3a:	f3bf 8f5f 	dmb	sy
}
 8002e3e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f47f af76 	bne.w	8002d42 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d006      	beq.n	8002e6a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e64:	6a3b      	ldr	r3, [r7, #32]
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	e005      	b.n	8002e76 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e72:	6a3b      	ldr	r3, [r7, #32]
 8002e74:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e86:	6979      	ldr	r1, [r7, #20]
 8002e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e96:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e98:	b672      	cpsid	i
}
 8002e9a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002eaa:	b662      	cpsie	i
}
 8002eac:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3734      	adds	r7, #52	; 0x34
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	; 0x24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	e177      	b.n	80031c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ed8:	2201      	movs	r2, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	f040 8166 	bne.w	80031c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d005      	beq.n	8002f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d130      	bne.n	8002f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	2203      	movs	r2, #3
 8002f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f44:	2201      	movs	r2, #1
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	091b      	lsrs	r3, r3, #4
 8002f5a:	f003 0201 	and.w	r2, r3, #1
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 0303 	and.w	r3, r3, #3
 8002f78:	2b03      	cmp	r3, #3
 8002f7a:	d017      	beq.n	8002fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	2203      	movs	r2, #3
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d123      	bne.n	8003000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	08da      	lsrs	r2, r3, #3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3208      	adds	r2, #8
 8002fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	220f      	movs	r2, #15
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	691a      	ldr	r2, [r3, #16]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	08da      	lsrs	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	3208      	adds	r2, #8
 8002ffa:	69b9      	ldr	r1, [r7, #24]
 8002ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	2203      	movs	r2, #3
 800300c:	fa02 f303 	lsl.w	r3, r2, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f003 0203 	and.w	r2, r3, #3
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 80c0 	beq.w	80031c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	4b66      	ldr	r3, [pc, #408]	; (80031e0 <HAL_GPIO_Init+0x324>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	4a65      	ldr	r2, [pc, #404]	; (80031e0 <HAL_GPIO_Init+0x324>)
 800304c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003050:	6453      	str	r3, [r2, #68]	; 0x44
 8003052:	4b63      	ldr	r3, [pc, #396]	; (80031e0 <HAL_GPIO_Init+0x324>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800305e:	4a61      	ldr	r2, [pc, #388]	; (80031e4 <HAL_GPIO_Init+0x328>)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	089b      	lsrs	r3, r3, #2
 8003064:	3302      	adds	r3, #2
 8003066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	220f      	movs	r2, #15
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <HAL_GPIO_Init+0x32c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d037      	beq.n	80030fa <HAL_GPIO_Init+0x23e>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a57      	ldr	r2, [pc, #348]	; (80031ec <HAL_GPIO_Init+0x330>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d031      	beq.n	80030f6 <HAL_GPIO_Init+0x23a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a56      	ldr	r2, [pc, #344]	; (80031f0 <HAL_GPIO_Init+0x334>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d02b      	beq.n	80030f2 <HAL_GPIO_Init+0x236>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a55      	ldr	r2, [pc, #340]	; (80031f4 <HAL_GPIO_Init+0x338>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d025      	beq.n	80030ee <HAL_GPIO_Init+0x232>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a54      	ldr	r2, [pc, #336]	; (80031f8 <HAL_GPIO_Init+0x33c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01f      	beq.n	80030ea <HAL_GPIO_Init+0x22e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a53      	ldr	r2, [pc, #332]	; (80031fc <HAL_GPIO_Init+0x340>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d019      	beq.n	80030e6 <HAL_GPIO_Init+0x22a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a52      	ldr	r2, [pc, #328]	; (8003200 <HAL_GPIO_Init+0x344>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_GPIO_Init+0x226>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a51      	ldr	r2, [pc, #324]	; (8003204 <HAL_GPIO_Init+0x348>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00d      	beq.n	80030de <HAL_GPIO_Init+0x222>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a50      	ldr	r2, [pc, #320]	; (8003208 <HAL_GPIO_Init+0x34c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d007      	beq.n	80030da <HAL_GPIO_Init+0x21e>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a4f      	ldr	r2, [pc, #316]	; (800320c <HAL_GPIO_Init+0x350>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_GPIO_Init+0x21a>
 80030d2:	2309      	movs	r3, #9
 80030d4:	e012      	b.n	80030fc <HAL_GPIO_Init+0x240>
 80030d6:	230a      	movs	r3, #10
 80030d8:	e010      	b.n	80030fc <HAL_GPIO_Init+0x240>
 80030da:	2308      	movs	r3, #8
 80030dc:	e00e      	b.n	80030fc <HAL_GPIO_Init+0x240>
 80030de:	2307      	movs	r3, #7
 80030e0:	e00c      	b.n	80030fc <HAL_GPIO_Init+0x240>
 80030e2:	2306      	movs	r3, #6
 80030e4:	e00a      	b.n	80030fc <HAL_GPIO_Init+0x240>
 80030e6:	2305      	movs	r3, #5
 80030e8:	e008      	b.n	80030fc <HAL_GPIO_Init+0x240>
 80030ea:	2304      	movs	r3, #4
 80030ec:	e006      	b.n	80030fc <HAL_GPIO_Init+0x240>
 80030ee:	2303      	movs	r3, #3
 80030f0:	e004      	b.n	80030fc <HAL_GPIO_Init+0x240>
 80030f2:	2302      	movs	r3, #2
 80030f4:	e002      	b.n	80030fc <HAL_GPIO_Init+0x240>
 80030f6:	2301      	movs	r3, #1
 80030f8:	e000      	b.n	80030fc <HAL_GPIO_Init+0x240>
 80030fa:	2300      	movs	r3, #0
 80030fc:	69fa      	ldr	r2, [r7, #28]
 80030fe:	f002 0203 	and.w	r2, r2, #3
 8003102:	0092      	lsls	r2, r2, #2
 8003104:	4093      	lsls	r3, r2
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800310c:	4935      	ldr	r1, [pc, #212]	; (80031e4 <HAL_GPIO_Init+0x328>)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	089b      	lsrs	r3, r3, #2
 8003112:	3302      	adds	r3, #2
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800311a:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <HAL_GPIO_Init+0x354>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	43db      	mvns	r3, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4013      	ands	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800313e:	4a34      	ldr	r2, [pc, #208]	; (8003210 <HAL_GPIO_Init+0x354>)
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003144:	4b32      	ldr	r3, [pc, #200]	; (8003210 <HAL_GPIO_Init+0x354>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	43db      	mvns	r3, r3
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4013      	ands	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003168:	4a29      	ldr	r2, [pc, #164]	; (8003210 <HAL_GPIO_Init+0x354>)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800316e:	4b28      	ldr	r3, [pc, #160]	; (8003210 <HAL_GPIO_Init+0x354>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003192:	4a1f      	ldr	r2, [pc, #124]	; (8003210 <HAL_GPIO_Init+0x354>)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <HAL_GPIO_Init+0x354>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031bc:	4a14      	ldr	r2, [pc, #80]	; (8003210 <HAL_GPIO_Init+0x354>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	3301      	adds	r3, #1
 80031c6:	61fb      	str	r3, [r7, #28]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	2b0f      	cmp	r3, #15
 80031cc:	f67f ae84 	bls.w	8002ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop
 80031d4:	3724      	adds	r7, #36	; 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40013800 	.word	0x40013800
 80031e8:	40020000 	.word	0x40020000
 80031ec:	40020400 	.word	0x40020400
 80031f0:	40020800 	.word	0x40020800
 80031f4:	40020c00 	.word	0x40020c00
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40021400 	.word	0x40021400
 8003200:	40021800 	.word	0x40021800
 8003204:	40021c00 	.word	0x40021c00
 8003208:	40022000 	.word	0x40022000
 800320c:	40022400 	.word	0x40022400
 8003210:	40013c00 	.word	0x40013c00

08003214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]
 8003220:	4613      	mov	r3, r2
 8003222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003224:	787b      	ldrb	r3, [r7, #1]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322a:	887a      	ldrh	r2, [r7, #2]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003230:	e003      	b.n	800323a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003232:	887b      	ldrh	r3, [r7, #2]
 8003234:	041a      	lsls	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	619a      	str	r2, [r3, #24]
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800325e:	4a05      	ldr	r2, [pc, #20]	; (8003274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe f9d2 	bl	8001610 <HAL_GPIO_EXTI_Callback>
  }
}
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40013c00 	.word	0x40013c00

08003278 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003282:	2300      	movs	r3, #0
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4b20      	ldr	r3, [pc, #128]	; (8003308 <HAL_PWREx_EnableOverDrive+0x90>)
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4a1f      	ldr	r2, [pc, #124]	; (8003308 <HAL_PWREx_EnableOverDrive+0x90>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6413      	str	r3, [r2, #64]	; 0x40
 8003292:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <HAL_PWREx_EnableOverDrive+0x90>)
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_PWREx_EnableOverDrive+0x94>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a4:	f7fe fbd2 	bl	8001a4c <HAL_GetTick>
 80032a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032aa:	e009      	b.n	80032c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032ac:	f7fe fbce 	bl	8001a4c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ba:	d901      	bls.n	80032c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e01f      	b.n	8003300 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032c0:	4b13      	ldr	r3, [pc, #76]	; (8003310 <HAL_PWREx_EnableOverDrive+0x98>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d1ee      	bne.n	80032ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d4:	f7fe fbba 	bl	8001a4c <HAL_GetTick>
 80032d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032da:	e009      	b.n	80032f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032dc:	f7fe fbb6 	bl	8001a4c <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032ea:	d901      	bls.n	80032f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e007      	b.n	8003300 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032f0:	4b07      	ldr	r3, [pc, #28]	; (8003310 <HAL_PWREx_EnableOverDrive+0x98>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032fc:	d1ee      	bne.n	80032dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3708      	adds	r7, #8
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	40023800 	.word	0x40023800
 800330c:	420e0040 	.word	0x420e0040
 8003310:	40007000 	.word	0x40007000
 8003314:	420e0044 	.word	0x420e0044

08003318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e267      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d075      	beq.n	8003422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003336:	4b88      	ldr	r3, [pc, #544]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b04      	cmp	r3, #4
 8003340:	d00c      	beq.n	800335c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003342:	4b85      	ldr	r3, [pc, #532]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334a:	2b08      	cmp	r3, #8
 800334c:	d112      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334e:	4b82      	ldr	r3, [pc, #520]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800335a:	d10b      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	4b7e      	ldr	r3, [pc, #504]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d05b      	beq.n	8003420 <HAL_RCC_OscConfig+0x108>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d157      	bne.n	8003420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e242      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337c:	d106      	bne.n	800338c <HAL_RCC_OscConfig+0x74>
 800337e:	4b76      	ldr	r3, [pc, #472]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a75      	ldr	r2, [pc, #468]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e01d      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x98>
 8003396:	4b70      	ldr	r3, [pc, #448]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6f      	ldr	r2, [pc, #444]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 800339c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6c      	ldr	r2, [pc, #432]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 80033b0:	4b69      	ldr	r3, [pc, #420]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a68      	ldr	r2, [pc, #416]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b66      	ldr	r3, [pc, #408]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a65      	ldr	r2, [pc, #404]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fe fb3c 	bl	8001a4c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fe fb38 	bl	8001a4c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e207      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	4b5b      	ldr	r3, [pc, #364]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0xc0>
 80033f6:	e014      	b.n	8003422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe fb28 	bl	8001a4c <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003400:	f7fe fb24 	bl	8001a4c <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e1f3      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	4b51      	ldr	r3, [pc, #324]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0xe8>
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d063      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800342e:	4b4a      	ldr	r3, [pc, #296]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343a:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003442:	2b08      	cmp	r3, #8
 8003444:	d11c      	bne.n	8003480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003446:	4b44      	ldr	r3, [pc, #272]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d116      	bne.n	8003480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	4b41      	ldr	r3, [pc, #260]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_RCC_OscConfig+0x152>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d001      	beq.n	800346a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e1c7      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346a:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4937      	ldr	r1, [pc, #220]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	e03a      	b.n	80034f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d020      	beq.n	80034ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003488:	4b34      	ldr	r3, [pc, #208]	; (800355c <HAL_RCC_OscConfig+0x244>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348e:	f7fe fadd 	bl	8001a4c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003496:	f7fe fad9 	bl	8001a4c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e1a8      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b4:	4b28      	ldr	r3, [pc, #160]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4925      	ldr	r1, [pc, #148]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
 80034c8:	e015      	b.n	80034f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ca:	4b24      	ldr	r3, [pc, #144]	; (800355c <HAL_RCC_OscConfig+0x244>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe fabc 	bl	8001a4c <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d8:	f7fe fab8 	bl	8001a4c <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e187      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d036      	beq.n	8003570 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_RCC_OscConfig+0x248>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fe fa9c 	bl	8001a4c <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003518:	f7fe fa98 	bl	8001a4c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e167      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 800352c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x200>
 8003536:	e01b      	b.n	8003570 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003538:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_RCC_OscConfig+0x248>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353e:	f7fe fa85 	bl	8001a4c <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	e00e      	b.n	8003564 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003546:	f7fe fa81 	bl	8001a4c <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d907      	bls.n	8003564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e150      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
 8003558:	40023800 	.word	0x40023800
 800355c:	42470000 	.word	0x42470000
 8003560:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003564:	4b88      	ldr	r3, [pc, #544]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ea      	bne.n	8003546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 8097 	beq.w	80036ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003582:	4b81      	ldr	r3, [pc, #516]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10f      	bne.n	80035ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	4b7d      	ldr	r3, [pc, #500]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a7c      	ldr	r2, [pc, #496]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
 800359e:	4b7a      	ldr	r3, [pc, #488]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035aa:	2301      	movs	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ae:	4b77      	ldr	r3, [pc, #476]	; (800378c <HAL_RCC_OscConfig+0x474>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d118      	bne.n	80035ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ba:	4b74      	ldr	r3, [pc, #464]	; (800378c <HAL_RCC_OscConfig+0x474>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a73      	ldr	r2, [pc, #460]	; (800378c <HAL_RCC_OscConfig+0x474>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c6:	f7fe fa41 	bl	8001a4c <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ce:	f7fe fa3d 	bl	8001a4c <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e10c      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e0:	4b6a      	ldr	r3, [pc, #424]	; (800378c <HAL_RCC_OscConfig+0x474>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x2ea>
 80035f4:	4b64      	ldr	r3, [pc, #400]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	4a63      	ldr	r2, [pc, #396]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003600:	e01c      	b.n	800363c <HAL_RCC_OscConfig+0x324>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b05      	cmp	r3, #5
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x30c>
 800360a:	4b5f      	ldr	r3, [pc, #380]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	4a5e      	ldr	r2, [pc, #376]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003610:	f043 0304 	orr.w	r3, r3, #4
 8003614:	6713      	str	r3, [r2, #112]	; 0x70
 8003616:	4b5c      	ldr	r3, [pc, #368]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	4a5b      	ldr	r2, [pc, #364]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	6713      	str	r3, [r2, #112]	; 0x70
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0x324>
 8003624:	4b58      	ldr	r3, [pc, #352]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a57      	ldr	r2, [pc, #348]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 800362a:	f023 0301 	bic.w	r3, r3, #1
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
 8003630:	4b55      	ldr	r3, [pc, #340]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	4a54      	ldr	r2, [pc, #336]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003636:	f023 0304 	bic.w	r3, r3, #4
 800363a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d015      	beq.n	8003670 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fe fa02 	bl	8001a4c <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fe f9fe 	bl	8001a4c <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e0cb      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003662:	4b49      	ldr	r3, [pc, #292]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0ee      	beq.n	800364c <HAL_RCC_OscConfig+0x334>
 800366e:	e014      	b.n	800369a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003670:	f7fe f9ec 	bl	8001a4c <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003676:	e00a      	b.n	800368e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003678:	f7fe f9e8 	bl	8001a4c <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	; 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e0b5      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368e:	4b3e      	ldr	r3, [pc, #248]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1ee      	bne.n	8003678 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800369a:	7dfb      	ldrb	r3, [r7, #23]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d105      	bne.n	80036ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a0:	4b39      	ldr	r3, [pc, #228]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	4a38      	ldr	r2, [pc, #224]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80036a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80a1 	beq.w	80037f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036b6:	4b34      	ldr	r3, [pc, #208]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d05c      	beq.n	800377c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d141      	bne.n	800374e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ca:	4b31      	ldr	r3, [pc, #196]	; (8003790 <HAL_RCC_OscConfig+0x478>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7fe f9bc 	bl	8001a4c <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fe f9b8 	bl	8001a4c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e087      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	4b27      	ldr	r3, [pc, #156]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69da      	ldr	r2, [r3, #28]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	019b      	lsls	r3, r3, #6
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	3b01      	subs	r3, #1
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	491b      	ldr	r1, [pc, #108]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003720:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <HAL_RCC_OscConfig+0x478>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003726:	f7fe f991 	bl	8001a4c <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800372e:	f7fe f98d 	bl	8001a4c <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e05c      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x416>
 800374c:	e054      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <HAL_RCC_OscConfig+0x478>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003754:	f7fe f97a 	bl	8001a4c <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375c:	f7fe f976 	bl	8001a4c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e045      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x444>
 800377a:	e03d      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d107      	bne.n	8003794 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e038      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
 8003788:	40023800 	.word	0x40023800
 800378c:	40007000 	.word	0x40007000
 8003790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d028      	beq.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d121      	bne.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d11a      	bne.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037c4:	4013      	ands	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d111      	bne.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	3b01      	subs	r3, #1
 80037de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0cc      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800381c:	4b68      	ldr	r3, [pc, #416]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 030f 	and.w	r3, r3, #15
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d90c      	bls.n	8003844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b65      	ldr	r3, [pc, #404]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b63      	ldr	r3, [pc, #396]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0b8      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800385c:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a58      	ldr	r2, [pc, #352]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003874:	4b53      	ldr	r3, [pc, #332]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a52      	ldr	r2, [pc, #328]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800387e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003880:	4b50      	ldr	r3, [pc, #320]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	494d      	ldr	r1, [pc, #308]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d044      	beq.n	8003928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	4b47      	ldr	r3, [pc, #284]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d119      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e07f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d003      	beq.n	80038c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c6:	4b3f      	ldr	r3, [pc, #252]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e06f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d6:	4b3b      	ldr	r3, [pc, #236]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e067      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038e6:	4b37      	ldr	r3, [pc, #220]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4934      	ldr	r1, [pc, #208]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f8:	f7fe f8a8 	bl	8001a4c <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003900:	f7fe f8a4 	bl	8001a4c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e04f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	4b2b      	ldr	r3, [pc, #172]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 020c 	and.w	r2, r3, #12
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	429a      	cmp	r2, r3
 8003926:	d1eb      	bne.n	8003900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d20c      	bcs.n	8003950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e032      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4916      	ldr	r1, [pc, #88]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	490e      	ldr	r1, [pc, #56]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800398e:	f000 f821 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8003992:	4602      	mov	r2, r0
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	490a      	ldr	r1, [pc, #40]	; (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	5ccb      	ldrb	r3, [r1, r3]
 80039a2:	fa22 f303 	lsr.w	r3, r2, r3
 80039a6:	4a09      	ldr	r2, [pc, #36]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80039a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fe f808 	bl	80019c4 <HAL_InitTick>

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023c00 	.word	0x40023c00
 80039c4:	40023800 	.word	0x40023800
 80039c8:	08013b20 	.word	0x08013b20
 80039cc:	20000000 	.word	0x20000000
 80039d0:	20000004 	.word	0x20000004

080039d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d8:	b090      	sub	sp, #64	; 0x40
 80039da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	637b      	str	r3, [r7, #52]	; 0x34
 80039e0:	2300      	movs	r3, #0
 80039e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039e4:	2300      	movs	r3, #0
 80039e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ec:	4b59      	ldr	r3, [pc, #356]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 030c 	and.w	r3, r3, #12
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d00d      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x40>
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	f200 80a1 	bhi.w	8003b40 <HAL_RCC_GetSysClockFreq+0x16c>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x34>
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d003      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a06:	e09b      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b53      	ldr	r3, [pc, #332]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a0a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a0c:	e09b      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a0e:	4b53      	ldr	r3, [pc, #332]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a12:	e098      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a14:	4b4f      	ldr	r3, [pc, #316]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a1e:	4b4d      	ldr	r3, [pc, #308]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d028      	beq.n	8003a7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2a:	4b4a      	ldr	r3, [pc, #296]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	2200      	movs	r2, #0
 8003a32:	623b      	str	r3, [r7, #32]
 8003a34:	627a      	str	r2, [r7, #36]	; 0x24
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a40:	fb03 f201 	mul.w	r2, r3, r1
 8003a44:	2300      	movs	r3, #0
 8003a46:	fb00 f303 	mul.w	r3, r0, r3
 8003a4a:	4413      	add	r3, r2
 8003a4c:	4a43      	ldr	r2, [pc, #268]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a4e:	fba0 1202 	umull	r1, r2, r0, r2
 8003a52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a54:	460a      	mov	r2, r1
 8003a56:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a5a:	4413      	add	r3, r2
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a60:	2200      	movs	r2, #0
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	61fa      	str	r2, [r7, #28]
 8003a66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a6e:	f7fc fc27 	bl	80002c0 <__aeabi_uldivmod>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	4613      	mov	r3, r2
 8003a78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a7a:	e053      	b.n	8003b24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a7c:	4b35      	ldr	r3, [pc, #212]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	099b      	lsrs	r3, r3, #6
 8003a82:	2200      	movs	r2, #0
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	617a      	str	r2, [r7, #20]
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a8e:	f04f 0b00 	mov.w	fp, #0
 8003a92:	4652      	mov	r2, sl
 8003a94:	465b      	mov	r3, fp
 8003a96:	f04f 0000 	mov.w	r0, #0
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	0159      	lsls	r1, r3, #5
 8003aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa4:	0150      	lsls	r0, r2, #5
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	ebb2 080a 	subs.w	r8, r2, sl
 8003aae:	eb63 090b 	sbc.w	r9, r3, fp
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003abe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ac2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ac6:	ebb2 0408 	subs.w	r4, r2, r8
 8003aca:	eb63 0509 	sbc.w	r5, r3, r9
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	00eb      	lsls	r3, r5, #3
 8003ad8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003adc:	00e2      	lsls	r2, r4, #3
 8003ade:	4614      	mov	r4, r2
 8003ae0:	461d      	mov	r5, r3
 8003ae2:	eb14 030a 	adds.w	r3, r4, sl
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	eb45 030b 	adc.w	r3, r5, fp
 8003aec:	607b      	str	r3, [r7, #4]
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003afa:	4629      	mov	r1, r5
 8003afc:	028b      	lsls	r3, r1, #10
 8003afe:	4621      	mov	r1, r4
 8003b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b04:	4621      	mov	r1, r4
 8003b06:	028a      	lsls	r2, r1, #10
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0e:	2200      	movs	r2, #0
 8003b10:	60bb      	str	r3, [r7, #8]
 8003b12:	60fa      	str	r2, [r7, #12]
 8003b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b18:	f7fc fbd2 	bl	80002c0 <__aeabi_uldivmod>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4613      	mov	r3, r2
 8003b22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	0c1b      	lsrs	r3, r3, #16
 8003b2a:	f003 0303 	and.w	r3, r3, #3
 8003b2e:	3301      	adds	r3, #1
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b3e:	e002      	b.n	8003b46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3740      	adds	r7, #64	; 0x40
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b52:	bf00      	nop
 8003b54:	40023800 	.word	0x40023800
 8003b58:	00f42400 	.word	0x00f42400
 8003b5c:	017d7840 	.word	0x017d7840

08003b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b64:	4b03      	ldr	r3, [pc, #12]	; (8003b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b66:	681b      	ldr	r3, [r3, #0]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	20000000 	.word	0x20000000

08003b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e041      	b.n	8003c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d106      	bne.n	8003ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7fc ffee 	bl	8000b80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	3304      	adds	r3, #4
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4610      	mov	r0, r2
 8003bb8:	f000 fb40 	bl	800423c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e041      	b.n	8003cac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d106      	bne.n	8003c42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7fc ffe3 	bl	8000c08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2202      	movs	r2, #2
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f000 faf1 	bl	800423c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d11b      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0202 	mvn.w	r2, #2
 8003ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fa81 	bl	80041fe <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 fa73 	bl	80041ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 fa84 	bl	8004212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	2b04      	cmp	r3, #4
 8003d1c:	d122      	bne.n	8003d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d11b      	bne.n	8003d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0204 	mvn.w	r2, #4
 8003d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fa57 	bl	80041fe <HAL_TIM_IC_CaptureCallback>
 8003d50:	e005      	b.n	8003d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 fa49 	bl	80041ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 fa5a 	bl	8004212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d122      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d11b      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f06f 0208 	mvn.w	r2, #8
 8003d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 fa2d 	bl	80041fe <HAL_TIM_IC_CaptureCallback>
 8003da4:	e005      	b.n	8003db2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fa1f 	bl	80041ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fa30 	bl	8004212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0310 	and.w	r3, r3, #16
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d122      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0310 	and.w	r3, r3, #16
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d11b      	bne.n	8003e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0210 	mvn.w	r2, #16
 8003ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2208      	movs	r2, #8
 8003de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa03 	bl	80041fe <HAL_TIM_IC_CaptureCallback>
 8003df8:	e005      	b.n	8003e06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f9f5 	bl	80041ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fa06 	bl	8004212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d10e      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d107      	bne.n	8003e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f06f 0201 	mvn.w	r2, #1
 8003e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f9cf 	bl	80041d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e42:	2b80      	cmp	r3, #128	; 0x80
 8003e44:	d10e      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	2b80      	cmp	r3, #128	; 0x80
 8003e52:	d107      	bne.n	8003e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fd5c 	bl	800491c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d10e      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d107      	bne.n	8003e90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f9cb 	bl	8004226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d10e      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b20      	cmp	r3, #32
 8003eaa:	d107      	bne.n	8003ebc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f06f 0220 	mvn.w	r2, #32
 8003eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fd26 	bl	8004908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ebc:	bf00      	nop
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e0ae      	b.n	8004040 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b0c      	cmp	r3, #12
 8003eee:	f200 809f 	bhi.w	8004030 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ef2:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef8:	08003f2d 	.word	0x08003f2d
 8003efc:	08004031 	.word	0x08004031
 8003f00:	08004031 	.word	0x08004031
 8003f04:	08004031 	.word	0x08004031
 8003f08:	08003f6d 	.word	0x08003f6d
 8003f0c:	08004031 	.word	0x08004031
 8003f10:	08004031 	.word	0x08004031
 8003f14:	08004031 	.word	0x08004031
 8003f18:	08003faf 	.word	0x08003faf
 8003f1c:	08004031 	.word	0x08004031
 8003f20:	08004031 	.word	0x08004031
 8003f24:	08004031 	.word	0x08004031
 8003f28:	08003fef 	.word	0x08003fef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fa22 	bl	800437c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0208 	orr.w	r2, r2, #8
 8003f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699a      	ldr	r2, [r3, #24]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0204 	bic.w	r2, r2, #4
 8003f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6999      	ldr	r1, [r3, #24]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	691a      	ldr	r2, [r3, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	619a      	str	r2, [r3, #24]
      break;
 8003f6a:	e064      	b.n	8004036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fa72 	bl	800445c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	699a      	ldr	r2, [r3, #24]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6999      	ldr	r1, [r3, #24]
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	021a      	lsls	r2, r3, #8
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	619a      	str	r2, [r3, #24]
      break;
 8003fac:	e043      	b.n	8004036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68b9      	ldr	r1, [r7, #8]
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fac7 	bl	8004548 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 0208 	orr.w	r2, r2, #8
 8003fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69da      	ldr	r2, [r3, #28]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0204 	bic.w	r2, r2, #4
 8003fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69d9      	ldr	r1, [r3, #28]
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	61da      	str	r2, [r3, #28]
      break;
 8003fec:	e023      	b.n	8004036 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fb1b 	bl	8004630 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69da      	ldr	r2, [r3, #28]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	69d9      	ldr	r1, [r3, #28]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	021a      	lsls	r2, r3, #8
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	61da      	str	r2, [r3, #28]
      break;
 800402e:	e002      	b.n	8004036 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	75fb      	strb	r3, [r7, #23]
      break;
 8004034:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800403e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800405c:	2b01      	cmp	r3, #1
 800405e:	d101      	bne.n	8004064 <HAL_TIM_ConfigClockSource+0x1c>
 8004060:	2302      	movs	r3, #2
 8004062:	e0b4      	b.n	80041ce <HAL_TIM_ConfigClockSource+0x186>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800408a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409c:	d03e      	beq.n	800411c <HAL_TIM_ConfigClockSource+0xd4>
 800409e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040a2:	f200 8087 	bhi.w	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040aa:	f000 8086 	beq.w	80041ba <HAL_TIM_ConfigClockSource+0x172>
 80040ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040b2:	d87f      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040b4:	2b70      	cmp	r3, #112	; 0x70
 80040b6:	d01a      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0xa6>
 80040b8:	2b70      	cmp	r3, #112	; 0x70
 80040ba:	d87b      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040bc:	2b60      	cmp	r3, #96	; 0x60
 80040be:	d050      	beq.n	8004162 <HAL_TIM_ConfigClockSource+0x11a>
 80040c0:	2b60      	cmp	r3, #96	; 0x60
 80040c2:	d877      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040c4:	2b50      	cmp	r3, #80	; 0x50
 80040c6:	d03c      	beq.n	8004142 <HAL_TIM_ConfigClockSource+0xfa>
 80040c8:	2b50      	cmp	r3, #80	; 0x50
 80040ca:	d873      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d058      	beq.n	8004182 <HAL_TIM_ConfigClockSource+0x13a>
 80040d0:	2b40      	cmp	r3, #64	; 0x40
 80040d2:	d86f      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040d4:	2b30      	cmp	r3, #48	; 0x30
 80040d6:	d064      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x15a>
 80040d8:	2b30      	cmp	r3, #48	; 0x30
 80040da:	d86b      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d060      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x15a>
 80040e0:	2b20      	cmp	r3, #32
 80040e2:	d867      	bhi.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d05c      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x15a>
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d05a      	beq.n	80041a2 <HAL_TIM_ConfigClockSource+0x15a>
 80040ec:	e062      	b.n	80041b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6899      	ldr	r1, [r3, #8]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f000 fb67 	bl	80047d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	609a      	str	r2, [r3, #8]
      break;
 800411a:	e04f      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	6899      	ldr	r1, [r3, #8]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f000 fb50 	bl	80047d0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800413e:	609a      	str	r2, [r3, #8]
      break;
 8004140:	e03c      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	6859      	ldr	r1, [r3, #4]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	461a      	mov	r2, r3
 8004150:	f000 fac4 	bl	80046dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2150      	movs	r1, #80	; 0x50
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fb1d 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 8004160:	e02c      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	6859      	ldr	r1, [r3, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	461a      	mov	r2, r3
 8004170:	f000 fae3 	bl	800473a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2160      	movs	r1, #96	; 0x60
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fb0d 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 8004180:	e01c      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	461a      	mov	r2, r3
 8004190:	f000 faa4 	bl	80046dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2140      	movs	r1, #64	; 0x40
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fafd 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 80041a0:	e00c      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4619      	mov	r1, r3
 80041ac:	4610      	mov	r0, r2
 80041ae:	f000 faf4 	bl	800479a <TIM_ITRx_SetConfig>
      break;
 80041b2:	e003      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      break;
 80041b8:	e000      	b.n	80041bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3710      	adds	r7, #16
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
	...

0800423c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	4a40      	ldr	r2, [pc, #256]	; (8004350 <TIM_Base_SetConfig+0x114>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d013      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425a:	d00f      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a3d      	ldr	r2, [pc, #244]	; (8004354 <TIM_Base_SetConfig+0x118>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00b      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a3c      	ldr	r2, [pc, #240]	; (8004358 <TIM_Base_SetConfig+0x11c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d007      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a3b      	ldr	r2, [pc, #236]	; (800435c <TIM_Base_SetConfig+0x120>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_Base_SetConfig+0x40>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a3a      	ldr	r2, [pc, #232]	; (8004360 <TIM_Base_SetConfig+0x124>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d108      	bne.n	800428e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a2f      	ldr	r2, [pc, #188]	; (8004350 <TIM_Base_SetConfig+0x114>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d02b      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429c:	d027      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a2c      	ldr	r2, [pc, #176]	; (8004354 <TIM_Base_SetConfig+0x118>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d023      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a2b      	ldr	r2, [pc, #172]	; (8004358 <TIM_Base_SetConfig+0x11c>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d01f      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a2a      	ldr	r2, [pc, #168]	; (800435c <TIM_Base_SetConfig+0x120>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d01b      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a29      	ldr	r2, [pc, #164]	; (8004360 <TIM_Base_SetConfig+0x124>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d017      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a28      	ldr	r2, [pc, #160]	; (8004364 <TIM_Base_SetConfig+0x128>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a27      	ldr	r2, [pc, #156]	; (8004368 <TIM_Base_SetConfig+0x12c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d00f      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a26      	ldr	r2, [pc, #152]	; (800436c <TIM_Base_SetConfig+0x130>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00b      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a25      	ldr	r2, [pc, #148]	; (8004370 <TIM_Base_SetConfig+0x134>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d007      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a24      	ldr	r2, [pc, #144]	; (8004374 <TIM_Base_SetConfig+0x138>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d003      	beq.n	80042ee <TIM_Base_SetConfig+0xb2>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a23      	ldr	r2, [pc, #140]	; (8004378 <TIM_Base_SetConfig+0x13c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d108      	bne.n	8004300 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a0a      	ldr	r2, [pc, #40]	; (8004350 <TIM_Base_SetConfig+0x114>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d003      	beq.n	8004334 <TIM_Base_SetConfig+0xf8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a0c      	ldr	r2, [pc, #48]	; (8004360 <TIM_Base_SetConfig+0x124>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d103      	bne.n	800433c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	691a      	ldr	r2, [r3, #16]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	615a      	str	r2, [r3, #20]
}
 8004342:	bf00      	nop
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40010000 	.word	0x40010000
 8004354:	40000400 	.word	0x40000400
 8004358:	40000800 	.word	0x40000800
 800435c:	40000c00 	.word	0x40000c00
 8004360:	40010400 	.word	0x40010400
 8004364:	40014000 	.word	0x40014000
 8004368:	40014400 	.word	0x40014400
 800436c:	40014800 	.word	0x40014800
 8004370:	40001800 	.word	0x40001800
 8004374:	40001c00 	.word	0x40001c00
 8004378:	40002000 	.word	0x40002000

0800437c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800437c:	b480      	push	{r7}
 800437e:	b087      	sub	sp, #28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	f023 0201 	bic.w	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f023 0303 	bic.w	r3, r3, #3
 80043b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68fa      	ldr	r2, [r7, #12]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f023 0302 	bic.w	r3, r3, #2
 80043c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a20      	ldr	r2, [pc, #128]	; (8004454 <TIM_OC1_SetConfig+0xd8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_OC1_SetConfig+0x64>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a1f      	ldr	r2, [pc, #124]	; (8004458 <TIM_OC1_SetConfig+0xdc>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d10c      	bne.n	80043fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	f023 0308 	bic.w	r3, r3, #8
 80043e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f023 0304 	bic.w	r3, r3, #4
 80043f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a15      	ldr	r2, [pc, #84]	; (8004454 <TIM_OC1_SetConfig+0xd8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d003      	beq.n	800440a <TIM_OC1_SetConfig+0x8e>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a14      	ldr	r2, [pc, #80]	; (8004458 <TIM_OC1_SetConfig+0xdc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d111      	bne.n	800442e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	4313      	orrs	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	693a      	ldr	r2, [r7, #16]
 800442a:	4313      	orrs	r3, r2
 800442c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	621a      	str	r2, [r3, #32]
}
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40010000 	.word	0x40010000
 8004458:	40010400 	.word	0x40010400

0800445c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800445c:	b480      	push	{r7}
 800445e:	b087      	sub	sp, #28
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	f023 0210 	bic.w	r2, r3, #16
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800448a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004492:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	021b      	lsls	r3, r3, #8
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4313      	orrs	r3, r2
 800449e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f023 0320 	bic.w	r3, r3, #32
 80044a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a22      	ldr	r2, [pc, #136]	; (8004540 <TIM_OC2_SetConfig+0xe4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_OC2_SetConfig+0x68>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <TIM_OC2_SetConfig+0xe8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10d      	bne.n	80044e0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a17      	ldr	r2, [pc, #92]	; (8004540 <TIM_OC2_SetConfig+0xe4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_OC2_SetConfig+0x94>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a16      	ldr	r2, [pc, #88]	; (8004544 <TIM_OC2_SetConfig+0xe8>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d113      	bne.n	8004518 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	68fa      	ldr	r2, [r7, #12]
 8004522:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40010000 	.word	0x40010000
 8004544:	40010400 	.word	0x40010400

08004548 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	69db      	ldr	r3, [r3, #28]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	021b      	lsls	r3, r3, #8
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a21      	ldr	r2, [pc, #132]	; (8004628 <TIM_OC3_SetConfig+0xe0>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d003      	beq.n	80045ae <TIM_OC3_SetConfig+0x66>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a20      	ldr	r2, [pc, #128]	; (800462c <TIM_OC3_SetConfig+0xe4>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d10d      	bne.n	80045ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	021b      	lsls	r3, r3, #8
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a16      	ldr	r2, [pc, #88]	; (8004628 <TIM_OC3_SetConfig+0xe0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_OC3_SetConfig+0x92>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a15      	ldr	r2, [pc, #84]	; (800462c <TIM_OC3_SetConfig+0xe4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d113      	bne.n	8004602 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	621a      	str	r2, [r3, #32]
}
 800461c:	bf00      	nop
 800461e:	371c      	adds	r7, #28
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40010000 	.word	0x40010000
 800462c:	40010400 	.word	0x40010400

08004630 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004630:	b480      	push	{r7}
 8004632:	b087      	sub	sp, #28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	021b      	lsls	r3, r3, #8
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4313      	orrs	r3, r2
 8004672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800467a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a12      	ldr	r2, [pc, #72]	; (80046d4 <TIM_OC4_SetConfig+0xa4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_OC4_SetConfig+0x68>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a11      	ldr	r2, [pc, #68]	; (80046d8 <TIM_OC4_SetConfig+0xa8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d109      	bne.n	80046ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800469e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	019b      	lsls	r3, r3, #6
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	bf00      	nop
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40010000 	.word	0x40010000
 80046d8:	40010400 	.word	0x40010400

080046dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	f023 0201 	bic.w	r2, r3, #1
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f023 030a 	bic.w	r3, r3, #10
 8004718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	621a      	str	r2, [r3, #32]
}
 800472e:	bf00      	nop
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473a:	b480      	push	{r7}
 800473c:	b087      	sub	sp, #28
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f023 0210 	bic.w	r2, r3, #16
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	031b      	lsls	r3, r3, #12
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4313      	orrs	r3, r2
 800476e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004776:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	621a      	str	r2, [r3, #32]
}
 800478e:	bf00      	nop
 8004790:	371c      	adds	r7, #28
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047b2:	683a      	ldr	r2, [r7, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	f043 0307 	orr.w	r3, r3, #7
 80047bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	609a      	str	r2, [r3, #8]
}
 80047c4:	bf00      	nop
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	021a      	lsls	r2, r3, #8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	609a      	str	r2, [r3, #8]
}
 8004804:	bf00      	nop
 8004806:	371c      	adds	r7, #28
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004824:	2302      	movs	r3, #2
 8004826:	e05a      	b.n	80048de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	4313      	orrs	r3, r2
 8004858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a21      	ldr	r2, [pc, #132]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d022      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004874:	d01d      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1d      	ldr	r2, [pc, #116]	; (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d018      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d013      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1a      	ldr	r2, [pc, #104]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00e      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a18      	ldr	r2, [pc, #96]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d009      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a17      	ldr	r2, [pc, #92]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d004      	beq.n	80048b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a15      	ldr	r2, [pc, #84]	; (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d10c      	bne.n	80048cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40010000 	.word	0x40010000
 80048f0:	40000400 	.word	0x40000400
 80048f4:	40000800 	.word	0x40000800
 80048f8:	40000c00 	.word	0x40000c00
 80048fc:	40010400 	.word	0x40010400
 8004900:	40014000 	.word	0x40014000
 8004904:	40001800 	.word	0x40001800

08004908 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004936:	4b8d      	ldr	r3, [pc, #564]	; (8004b6c <MX_LWIP_Init+0x23c>)
 8004938:	22c0      	movs	r2, #192	; 0xc0
 800493a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800493c:	4b8b      	ldr	r3, [pc, #556]	; (8004b6c <MX_LWIP_Init+0x23c>)
 800493e:	22a8      	movs	r2, #168	; 0xa8
 8004940:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8004942:	4b8a      	ldr	r3, [pc, #552]	; (8004b6c <MX_LWIP_Init+0x23c>)
 8004944:	2200      	movs	r2, #0
 8004946:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8004948:	4b88      	ldr	r3, [pc, #544]	; (8004b6c <MX_LWIP_Init+0x23c>)
 800494a:	2202      	movs	r2, #2
 800494c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800494e:	4b88      	ldr	r3, [pc, #544]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004950:	22ff      	movs	r2, #255	; 0xff
 8004952:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004954:	4b86      	ldr	r3, [pc, #536]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004956:	22ff      	movs	r2, #255	; 0xff
 8004958:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800495a:	4b85      	ldr	r3, [pc, #532]	; (8004b70 <MX_LWIP_Init+0x240>)
 800495c:	22ff      	movs	r2, #255	; 0xff
 800495e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004960:	4b83      	ldr	r3, [pc, #524]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004962:	2200      	movs	r2, #0
 8004964:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004966:	4b83      	ldr	r3, [pc, #524]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004968:	22c0      	movs	r2, #192	; 0xc0
 800496a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800496c:	4b81      	ldr	r3, [pc, #516]	; (8004b74 <MX_LWIP_Init+0x244>)
 800496e:	22a8      	movs	r2, #168	; 0xa8
 8004970:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8004972:	4b80      	ldr	r3, [pc, #512]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004974:	2200      	movs	r2, #0
 8004976:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004978:	4b7e      	ldr	r3, [pc, #504]	; (8004b74 <MX_LWIP_Init+0x244>)
 800497a:	2201      	movs	r2, #1
 800497c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800497e:	f000 fd1d 	bl	80053bc <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004982:	4b7a      	ldr	r3, [pc, #488]	; (8004b6c <MX_LWIP_Init+0x23c>)
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	061a      	lsls	r2, r3, #24
 8004988:	4b78      	ldr	r3, [pc, #480]	; (8004b6c <MX_LWIP_Init+0x23c>)
 800498a:	785b      	ldrb	r3, [r3, #1]
 800498c:	041b      	lsls	r3, r3, #16
 800498e:	431a      	orrs	r2, r3
 8004990:	4b76      	ldr	r3, [pc, #472]	; (8004b6c <MX_LWIP_Init+0x23c>)
 8004992:	789b      	ldrb	r3, [r3, #2]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	4313      	orrs	r3, r2
 8004998:	4a74      	ldr	r2, [pc, #464]	; (8004b6c <MX_LWIP_Init+0x23c>)
 800499a:	78d2      	ldrb	r2, [r2, #3]
 800499c:	4313      	orrs	r3, r2
 800499e:	061a      	lsls	r2, r3, #24
 80049a0:	4b72      	ldr	r3, [pc, #456]	; (8004b6c <MX_LWIP_Init+0x23c>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	0619      	lsls	r1, r3, #24
 80049a6:	4b71      	ldr	r3, [pc, #452]	; (8004b6c <MX_LWIP_Init+0x23c>)
 80049a8:	785b      	ldrb	r3, [r3, #1]
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	4319      	orrs	r1, r3
 80049ae:	4b6f      	ldr	r3, [pc, #444]	; (8004b6c <MX_LWIP_Init+0x23c>)
 80049b0:	789b      	ldrb	r3, [r3, #2]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	430b      	orrs	r3, r1
 80049b6:	496d      	ldr	r1, [pc, #436]	; (8004b6c <MX_LWIP_Init+0x23c>)
 80049b8:	78c9      	ldrb	r1, [r1, #3]
 80049ba:	430b      	orrs	r3, r1
 80049bc:	021b      	lsls	r3, r3, #8
 80049be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80049c2:	431a      	orrs	r2, r3
 80049c4:	4b69      	ldr	r3, [pc, #420]	; (8004b6c <MX_LWIP_Init+0x23c>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	0619      	lsls	r1, r3, #24
 80049ca:	4b68      	ldr	r3, [pc, #416]	; (8004b6c <MX_LWIP_Init+0x23c>)
 80049cc:	785b      	ldrb	r3, [r3, #1]
 80049ce:	041b      	lsls	r3, r3, #16
 80049d0:	4319      	orrs	r1, r3
 80049d2:	4b66      	ldr	r3, [pc, #408]	; (8004b6c <MX_LWIP_Init+0x23c>)
 80049d4:	789b      	ldrb	r3, [r3, #2]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	430b      	orrs	r3, r1
 80049da:	4964      	ldr	r1, [pc, #400]	; (8004b6c <MX_LWIP_Init+0x23c>)
 80049dc:	78c9      	ldrb	r1, [r1, #3]
 80049de:	430b      	orrs	r3, r1
 80049e0:	0a1b      	lsrs	r3, r3, #8
 80049e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80049e6:	431a      	orrs	r2, r3
 80049e8:	4b60      	ldr	r3, [pc, #384]	; (8004b6c <MX_LWIP_Init+0x23c>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	0619      	lsls	r1, r3, #24
 80049ee:	4b5f      	ldr	r3, [pc, #380]	; (8004b6c <MX_LWIP_Init+0x23c>)
 80049f0:	785b      	ldrb	r3, [r3, #1]
 80049f2:	041b      	lsls	r3, r3, #16
 80049f4:	4319      	orrs	r1, r3
 80049f6:	4b5d      	ldr	r3, [pc, #372]	; (8004b6c <MX_LWIP_Init+0x23c>)
 80049f8:	789b      	ldrb	r3, [r3, #2]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	430b      	orrs	r3, r1
 80049fe:	495b      	ldr	r1, [pc, #364]	; (8004b6c <MX_LWIP_Init+0x23c>)
 8004a00:	78c9      	ldrb	r1, [r1, #3]
 8004a02:	430b      	orrs	r3, r1
 8004a04:	0e1b      	lsrs	r3, r3, #24
 8004a06:	4313      	orrs	r3, r2
 8004a08:	4a5b      	ldr	r2, [pc, #364]	; (8004b78 <MX_LWIP_Init+0x248>)
 8004a0a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004a0c:	4b58      	ldr	r3, [pc, #352]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	061a      	lsls	r2, r3, #24
 8004a12:	4b57      	ldr	r3, [pc, #348]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a14:	785b      	ldrb	r3, [r3, #1]
 8004a16:	041b      	lsls	r3, r3, #16
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	4b55      	ldr	r3, [pc, #340]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a1c:	789b      	ldrb	r3, [r3, #2]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	4313      	orrs	r3, r2
 8004a22:	4a53      	ldr	r2, [pc, #332]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a24:	78d2      	ldrb	r2, [r2, #3]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	061a      	lsls	r2, r3, #24
 8004a2a:	4b51      	ldr	r3, [pc, #324]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	0619      	lsls	r1, r3, #24
 8004a30:	4b4f      	ldr	r3, [pc, #316]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a32:	785b      	ldrb	r3, [r3, #1]
 8004a34:	041b      	lsls	r3, r3, #16
 8004a36:	4319      	orrs	r1, r3
 8004a38:	4b4d      	ldr	r3, [pc, #308]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a3a:	789b      	ldrb	r3, [r3, #2]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	430b      	orrs	r3, r1
 8004a40:	494b      	ldr	r1, [pc, #300]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a42:	78c9      	ldrb	r1, [r1, #3]
 8004a44:	430b      	orrs	r3, r1
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004a4c:	431a      	orrs	r2, r3
 8004a4e:	4b48      	ldr	r3, [pc, #288]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	0619      	lsls	r1, r3, #24
 8004a54:	4b46      	ldr	r3, [pc, #280]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	041b      	lsls	r3, r3, #16
 8004a5a:	4319      	orrs	r1, r3
 8004a5c:	4b44      	ldr	r3, [pc, #272]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a5e:	789b      	ldrb	r3, [r3, #2]
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	430b      	orrs	r3, r1
 8004a64:	4942      	ldr	r1, [pc, #264]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a66:	78c9      	ldrb	r1, [r1, #3]
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004a70:	431a      	orrs	r2, r3
 8004a72:	4b3f      	ldr	r3, [pc, #252]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	0619      	lsls	r1, r3, #24
 8004a78:	4b3d      	ldr	r3, [pc, #244]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a7a:	785b      	ldrb	r3, [r3, #1]
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	4319      	orrs	r1, r3
 8004a80:	4b3b      	ldr	r3, [pc, #236]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a82:	789b      	ldrb	r3, [r3, #2]
 8004a84:	021b      	lsls	r3, r3, #8
 8004a86:	430b      	orrs	r3, r1
 8004a88:	4939      	ldr	r1, [pc, #228]	; (8004b70 <MX_LWIP_Init+0x240>)
 8004a8a:	78c9      	ldrb	r1, [r1, #3]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	0e1b      	lsrs	r3, r3, #24
 8004a90:	4313      	orrs	r3, r2
 8004a92:	4a3a      	ldr	r2, [pc, #232]	; (8004b7c <MX_LWIP_Init+0x24c>)
 8004a94:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004a96:	4b37      	ldr	r3, [pc, #220]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	061a      	lsls	r2, r3, #24
 8004a9c:	4b35      	ldr	r3, [pc, #212]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	041b      	lsls	r3, r3, #16
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	4b33      	ldr	r3, [pc, #204]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004aa6:	789b      	ldrb	r3, [r3, #2]
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	4a31      	ldr	r2, [pc, #196]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004aae:	78d2      	ldrb	r2, [r2, #3]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	061a      	lsls	r2, r3, #24
 8004ab4:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	0619      	lsls	r1, r3, #24
 8004aba:	4b2e      	ldr	r3, [pc, #184]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004abc:	785b      	ldrb	r3, [r3, #1]
 8004abe:	041b      	lsls	r3, r3, #16
 8004ac0:	4319      	orrs	r1, r3
 8004ac2:	4b2c      	ldr	r3, [pc, #176]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004ac4:	789b      	ldrb	r3, [r3, #2]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	430b      	orrs	r3, r1
 8004aca:	492a      	ldr	r1, [pc, #168]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004acc:	78c9      	ldrb	r1, [r1, #3]
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ad6:	431a      	orrs	r2, r3
 8004ad8:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	0619      	lsls	r1, r3, #24
 8004ade:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004ae0:	785b      	ldrb	r3, [r3, #1]
 8004ae2:	041b      	lsls	r3, r3, #16
 8004ae4:	4319      	orrs	r1, r3
 8004ae6:	4b23      	ldr	r3, [pc, #140]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004ae8:	789b      	ldrb	r3, [r3, #2]
 8004aea:	021b      	lsls	r3, r3, #8
 8004aec:	430b      	orrs	r3, r1
 8004aee:	4921      	ldr	r1, [pc, #132]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004af0:	78c9      	ldrb	r1, [r1, #3]
 8004af2:	430b      	orrs	r3, r1
 8004af4:	0a1b      	lsrs	r3, r3, #8
 8004af6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004afa:	431a      	orrs	r2, r3
 8004afc:	4b1d      	ldr	r3, [pc, #116]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	0619      	lsls	r1, r3, #24
 8004b02:	4b1c      	ldr	r3, [pc, #112]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004b04:	785b      	ldrb	r3, [r3, #1]
 8004b06:	041b      	lsls	r3, r3, #16
 8004b08:	4319      	orrs	r1, r3
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004b0c:	789b      	ldrb	r3, [r3, #2]
 8004b0e:	021b      	lsls	r3, r3, #8
 8004b10:	430b      	orrs	r3, r1
 8004b12:	4918      	ldr	r1, [pc, #96]	; (8004b74 <MX_LWIP_Init+0x244>)
 8004b14:	78c9      	ldrb	r1, [r1, #3]
 8004b16:	430b      	orrs	r3, r1
 8004b18:	0e1b      	lsrs	r3, r3, #24
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	4a18      	ldr	r2, [pc, #96]	; (8004b80 <MX_LWIP_Init+0x250>)
 8004b1e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004b20:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <MX_LWIP_Init+0x254>)
 8004b22:	9302      	str	r3, [sp, #8]
 8004b24:	4b18      	ldr	r3, [pc, #96]	; (8004b88 <MX_LWIP_Init+0x258>)
 8004b26:	9301      	str	r3, [sp, #4]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	9300      	str	r3, [sp, #0]
 8004b2c:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <MX_LWIP_Init+0x250>)
 8004b2e:	4a13      	ldr	r2, [pc, #76]	; (8004b7c <MX_LWIP_Init+0x24c>)
 8004b30:	4911      	ldr	r1, [pc, #68]	; (8004b78 <MX_LWIP_Init+0x248>)
 8004b32:	4816      	ldr	r0, [pc, #88]	; (8004b8c <MX_LWIP_Init+0x25c>)
 8004b34:	f001 f92e 	bl	8005d94 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004b38:	4814      	ldr	r0, [pc, #80]	; (8004b8c <MX_LWIP_Init+0x25c>)
 8004b3a:	f001 fadd 	bl	80060f8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <MX_LWIP_Init+0x25c>)
 8004b40:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b44:	089b      	lsrs	r3, r3, #2
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004b50:	480e      	ldr	r0, [pc, #56]	; (8004b8c <MX_LWIP_Init+0x25c>)
 8004b52:	f001 fae1 	bl	8006118 <netif_set_up>
 8004b56:	e002      	b.n	8004b5e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004b58:	480c      	ldr	r0, [pc, #48]	; (8004b8c <MX_LWIP_Init+0x25c>)
 8004b5a:	f001 fb49 	bl	80061f0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004b5e:	490c      	ldr	r1, [pc, #48]	; (8004b90 <MX_LWIP_Init+0x260>)
 8004b60:	480a      	ldr	r0, [pc, #40]	; (8004b8c <MX_LWIP_Init+0x25c>)
 8004b62:	f001 fbdb 	bl	800631c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004b66:	bf00      	nop
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	20000238 	.word	0x20000238
 8004b70:	2000023c 	.word	0x2000023c
 8004b74:	20000240 	.word	0x20000240
 8004b78:	2000022c 	.word	0x2000022c
 8004b7c:	20000230 	.word	0x20000230
 8004b80:	20000234 	.word	0x20000234
 8004b84:	0800f985 	.word	0x0800f985
 8004b88:	08004ea1 	.word	0x08004ea1
 8004b8c:	20000184 	.word	0x20000184
 8004b90:	08004be5 	.word	0x08004be5

08004b94 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004b9c:	f7fc ff56 	bl	8001a4c <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <Ethernet_Link_Periodic_Handle+0x30>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b63      	cmp	r3, #99	; 0x63
 8004baa:	d907      	bls.n	8004bbc <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004bac:	f7fc ff4e 	bl	8001a4c <HAL_GetTick>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4a04      	ldr	r2, [pc, #16]	; (8004bc4 <Ethernet_Link_Periodic_Handle+0x30>)
 8004bb4:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fad6 	bl	8005168 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000228 	.word	0x20000228

08004bc8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004bcc:	4804      	ldr	r0, [pc, #16]	; (8004be0 <MX_LWIP_Process+0x18>)
 8004bce:	f000 f947 	bl	8004e60 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004bd2:	f008 faeb 	bl	800d1ac <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004bd6:	4802      	ldr	r0, [pc, #8]	; (8004be0 <MX_LWIP_Process+0x18>)
 8004bd8:	f7ff ffdc 	bl	8004b94 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004bdc:	bf00      	nop
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20000184 	.word	0x20000184

08004be4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004bec:	bf00      	nop
 8004bee:	370c      	adds	r7, #12
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004c04:	4b40      	ldr	r3, [pc, #256]	; (8004d08 <low_level_init+0x110>)
 8004c06:	4a41      	ldr	r2, [pc, #260]	; (8004d0c <low_level_init+0x114>)
 8004c08:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004c0e:	2380      	movs	r3, #128	; 0x80
 8004c10:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004c12:	23e1      	movs	r3, #225	; 0xe1
 8004c14:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004c16:	2300      	movs	r3, #0
 8004c18:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004c22:	4a39      	ldr	r2, [pc, #228]	; (8004d08 <low_level_init+0x110>)
 8004c24:	f107 0308 	add.w	r3, r7, #8
 8004c28:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004c2a:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <low_level_init+0x110>)
 8004c2c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004c30:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004c32:	4b35      	ldr	r3, [pc, #212]	; (8004d08 <low_level_init+0x110>)
 8004c34:	4a36      	ldr	r2, [pc, #216]	; (8004d10 <low_level_init+0x118>)
 8004c36:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004c38:	4b33      	ldr	r3, [pc, #204]	; (8004d08 <low_level_init+0x110>)
 8004c3a:	4a36      	ldr	r2, [pc, #216]	; (8004d14 <low_level_init+0x11c>)
 8004c3c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004c3e:	4b32      	ldr	r3, [pc, #200]	; (8004d08 <low_level_init+0x110>)
 8004c40:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004c44:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004c46:	4830      	ldr	r0, [pc, #192]	; (8004d08 <low_level_init+0x110>)
 8004c48:	f7fd f842 	bl	8001cd0 <HAL_ETH_Init>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004c50:	2238      	movs	r2, #56	; 0x38
 8004c52:	2100      	movs	r1, #0
 8004c54:	4830      	ldr	r0, [pc, #192]	; (8004d18 <low_level_init+0x120>)
 8004c56:	f00a ffc7 	bl	800fbe8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004c5a:	4b2f      	ldr	r3, [pc, #188]	; (8004d18 <low_level_init+0x120>)
 8004c5c:	2221      	movs	r2, #33	; 0x21
 8004c5e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004c60:	4b2d      	ldr	r3, [pc, #180]	; (8004d18 <low_level_init+0x120>)
 8004c62:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004c66:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004c68:	4b2b      	ldr	r3, [pc, #172]	; (8004d18 <low_level_init+0x120>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004c6e:	482b      	ldr	r0, [pc, #172]	; (8004d1c <low_level_init+0x124>)
 8004c70:	f000 ff58 	bl	8005b24 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2206      	movs	r2, #6
 8004c78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004c7c:	4b22      	ldr	r3, [pc, #136]	; (8004d08 <low_level_init+0x110>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	781a      	ldrb	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004c88:	4b1f      	ldr	r3, [pc, #124]	; (8004d08 <low_level_init+0x110>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	785a      	ldrb	r2, [r3, #1]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004c94:	4b1c      	ldr	r3, [pc, #112]	; (8004d08 <low_level_init+0x110>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	789a      	ldrb	r2, [r3, #2]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004ca0:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <low_level_init+0x110>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	78da      	ldrb	r2, [r3, #3]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004cac:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <low_level_init+0x110>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	791a      	ldrb	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004cb8:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <low_level_init+0x110>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	795a      	ldrb	r2, [r3, #5]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004cca:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004cd2:	f043 030a 	orr.w	r3, r3, #10
 8004cd6:	b2da      	uxtb	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004cde:	4910      	ldr	r1, [pc, #64]	; (8004d20 <low_level_init+0x128>)
 8004ce0:	4810      	ldr	r0, [pc, #64]	; (8004d24 <low_level_init+0x12c>)
 8004ce2:	f7fc fcec 	bl	80016be <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004ce6:	480f      	ldr	r0, [pc, #60]	; (8004d24 <low_level_init+0x12c>)
 8004ce8:	f7fc fd1b 	bl	8001722 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d103      	bne.n	8004cfa <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fa38 	bl	8005168 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004cf8:	e001      	b.n	8004cfe <low_level_init+0x106>
    Error_Handler();
 8004cfa:	f7fb ff13 	bl	8000b24 <Error_Handler>
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20004d10 	.word	0x20004d10
 8004d0c:	40028000 	.word	0x40028000
 8004d10:	20004c70 	.word	0x20004c70
 8004d14:	20004bd0 	.word	0x20004bd0
 8004d18:	20004dc0 	.word	0x20004dc0
 8004d1c:	08013b30 	.word	0x08013b30
 8004d20:	2000000c 	.word	0x2000000c
 8004d24:	20004df8 	.word	0x20004df8

08004d28 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b092      	sub	sp, #72	; 0x48
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8004d36:	2300      	movs	r3, #0
 8004d38:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8004d40:	f107 030c 	add.w	r3, r7, #12
 8004d44:	2230      	movs	r2, #48	; 0x30
 8004d46:	2100      	movs	r1, #0
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f00a ff4d 	bl	800fbe8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8004d4e:	f107 030c 	add.w	r3, r7, #12
 8004d52:	2230      	movs	r2, #48	; 0x30
 8004d54:	2100      	movs	r1, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f00a ff46 	bl	800fbe8 <memset>

  for(q = p; q != NULL; q = q->next)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	643b      	str	r3, [r7, #64]	; 0x40
 8004d60:	e045      	b.n	8004dee <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8004d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d64:	2b03      	cmp	r3, #3
 8004d66:	d902      	bls.n	8004d6e <low_level_output+0x46>
      return ERR_IF;
 8004d68:	f06f 030b 	mvn.w	r3, #11
 8004d6c:	e055      	b.n	8004e1a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8004d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d70:	6859      	ldr	r1, [r3, #4]
 8004d72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d74:	4613      	mov	r3, r2
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	4413      	add	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	3348      	adds	r3, #72	; 0x48
 8004d7e:	443b      	add	r3, r7
 8004d80:	3b3c      	subs	r3, #60	; 0x3c
 8004d82:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8004d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d86:	895b      	ldrh	r3, [r3, #10]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	3348      	adds	r3, #72	; 0x48
 8004d96:	443b      	add	r3, r7
 8004d98:	3b38      	subs	r3, #56	; 0x38
 8004d9a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d011      	beq.n	8004dc6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da4:	1e5a      	subs	r2, r3, #1
 8004da6:	f107 000c 	add.w	r0, r7, #12
 8004daa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dac:	460b      	mov	r3, r1
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	440b      	add	r3, r1
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	18c1      	adds	r1, r0, r3
 8004db6:	4613      	mov	r3, r2
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	3348      	adds	r3, #72	; 0x48
 8004dc0:	443b      	add	r3, r7
 8004dc2:	3b34      	subs	r3, #52	; 0x34
 8004dc4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d109      	bne.n	8004de2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8004dce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	3348      	adds	r3, #72	; 0x48
 8004dda:	443b      	add	r3, r7
 8004ddc:	3b34      	subs	r3, #52	; 0x34
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de4:	3301      	adds	r3, #1
 8004de6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	643b      	str	r3, [r7, #64]	; 0x40
 8004dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1b6      	bne.n	8004d62 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	891b      	ldrh	r3, [r3, #8]
 8004df8:	461a      	mov	r2, r3
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <low_level_output+0xfc>)
 8004dfc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004dfe:	4a09      	ldr	r2, [pc, #36]	; (8004e24 <low_level_output+0xfc>)
 8004e00:	f107 030c 	add.w	r3, r7, #12
 8004e04:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004e06:	4a07      	ldr	r2, [pc, #28]	; (8004e24 <low_level_output+0xfc>)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004e0c:	2214      	movs	r2, #20
 8004e0e:	4905      	ldr	r1, [pc, #20]	; (8004e24 <low_level_output+0xfc>)
 8004e10:	4805      	ldr	r0, [pc, #20]	; (8004e28 <low_level_output+0x100>)
 8004e12:	f7fd f893 	bl	8001f3c <HAL_ETH_Transmit>

  return errval;
 8004e16:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3748      	adds	r7, #72	; 0x48
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20004dc0 	.word	0x20004dc0
 8004e28:	20004d10 	.word	0x20004d10

08004e2c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004e38:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <low_level_input+0x2c>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d105      	bne.n	8004e4c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004e40:	f107 030c 	add.w	r3, r7, #12
 8004e44:	4619      	mov	r1, r3
 8004e46:	4805      	ldr	r0, [pc, #20]	; (8004e5c <low_level_input+0x30>)
 8004e48:	f7fd f90c 	bl	8002064 <HAL_ETH_ReadData>
  }

  return p;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20004bcc 	.word	0x20004bcc
 8004e5c:	20004d10 	.word	0x20004d10

08004e60 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f7ff ffdd 	bl	8004e2c <low_level_input>
 8004e72:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	4798      	blx	r3
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f001 fdc6 	bl	8006a1c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1ea      	bne.n	8004e6c <ethernetif_input+0xc>
}
 8004e96:	bf00      	nop
 8004e98:	bf00      	nop
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <ethernetif_init+0x1c>
 8004eae:	4b0e      	ldr	r3, [pc, #56]	; (8004ee8 <ethernetif_init+0x48>)
 8004eb0:	f240 126b 	movw	r2, #363	; 0x16b
 8004eb4:	490d      	ldr	r1, [pc, #52]	; (8004eec <ethernetif_init+0x4c>)
 8004eb6:	480e      	ldr	r0, [pc, #56]	; (8004ef0 <ethernetif_init+0x50>)
 8004eb8:	f00a fe9e 	bl	800fbf8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2273      	movs	r2, #115	; 0x73
 8004ec0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2274      	movs	r2, #116	; 0x74
 8004ec8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	4a09      	ldr	r2, [pc, #36]	; (8004ef4 <ethernetif_init+0x54>)
 8004ed0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a08      	ldr	r2, [pc, #32]	; (8004ef8 <ethernetif_init+0x58>)
 8004ed6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff fe8d 	bl	8004bf8 <low_level_init>

  return ERR_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	08011140 	.word	0x08011140
 8004eec:	0801115c 	.word	0x0801115c
 8004ef0:	0801116c 	.word	0x0801116c
 8004ef4:	0800de3d 	.word	0x0800de3d
 8004ef8:	08004d29 	.word	0x08004d29

08004efc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004f08:	68f9      	ldr	r1, [r7, #12]
 8004f0a:	4807      	ldr	r0, [pc, #28]	; (8004f28 <pbuf_free_custom+0x2c>)
 8004f0c:	f000 feec 	bl	8005ce8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004f10:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <pbuf_free_custom+0x30>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d102      	bne.n	8004f1e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004f18:	4b04      	ldr	r3, [pc, #16]	; (8004f2c <pbuf_free_custom+0x30>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
  }
}
 8004f1e:	bf00      	nop
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	08013b30 	.word	0x08013b30
 8004f2c:	20004bcc 	.word	0x20004bcc

08004f30 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004f34:	f7fc fd8a 	bl	8001a4c <HAL_GetTick>
 8004f38:	4603      	mov	r3, r0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08e      	sub	sp, #56	; 0x38
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	605a      	str	r2, [r3, #4]
 8004f52:	609a      	str	r2, [r3, #8]
 8004f54:	60da      	str	r2, [r3, #12]
 8004f56:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a55      	ldr	r2, [pc, #340]	; (80050b4 <HAL_ETH_MspInit+0x174>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	f040 80a4 	bne.w	80050ac <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004f64:	2300      	movs	r3, #0
 8004f66:	623b      	str	r3, [r7, #32]
 8004f68:	4b53      	ldr	r3, [pc, #332]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6c:	4a52      	ldr	r2, [pc, #328]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004f6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f72:	6313      	str	r3, [r2, #48]	; 0x30
 8004f74:	4b50      	ldr	r3, [pc, #320]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7c:	623b      	str	r3, [r7, #32]
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	2300      	movs	r3, #0
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	4b4c      	ldr	r3, [pc, #304]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f88:	4a4b      	ldr	r2, [pc, #300]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004f8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f90:	4b49      	ldr	r3, [pc, #292]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	4b45      	ldr	r3, [pc, #276]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	4a44      	ldr	r2, [pc, #272]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004fa6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004faa:	6313      	str	r3, [r2, #48]	; 0x30
 8004fac:	4b42      	ldr	r3, [pc, #264]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fb4:	61bb      	str	r3, [r7, #24]
 8004fb6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fb8:	2300      	movs	r3, #0
 8004fba:	617b      	str	r3, [r7, #20]
 8004fbc:	4b3e      	ldr	r3, [pc, #248]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	4a3d      	ldr	r2, [pc, #244]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004fc2:	f043 0304 	orr.w	r3, r3, #4
 8004fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8004fc8:	4b3b      	ldr	r3, [pc, #236]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	4b37      	ldr	r3, [pc, #220]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	4a36      	ldr	r2, [pc, #216]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004fde:	f043 0301 	orr.w	r3, r3, #1
 8004fe2:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe4:	4b34      	ldr	r3, [pc, #208]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	4b30      	ldr	r3, [pc, #192]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff8:	4a2f      	ldr	r2, [pc, #188]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8004ffa:	f043 0302 	orr.w	r3, r3, #2
 8004ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8005000:	4b2d      	ldr	r3, [pc, #180]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	60fb      	str	r3, [r7, #12]
 800500a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800500c:	2300      	movs	r3, #0
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	4b29      	ldr	r3, [pc, #164]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	4a28      	ldr	r2, [pc, #160]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 8005016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800501a:	6313      	str	r3, [r2, #48]	; 0x30
 800501c:	4b26      	ldr	r3, [pc, #152]	; (80050b8 <HAL_ETH_MspInit+0x178>)
 800501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005028:	2332      	movs	r3, #50	; 0x32
 800502a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800502c:	2302      	movs	r3, #2
 800502e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005030:	2300      	movs	r3, #0
 8005032:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005034:	2303      	movs	r3, #3
 8005036:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005038:	230b      	movs	r3, #11
 800503a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800503c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005040:	4619      	mov	r1, r3
 8005042:	481e      	ldr	r0, [pc, #120]	; (80050bc <HAL_ETH_MspInit+0x17c>)
 8005044:	f7fd ff3a 	bl	8002ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005048:	2386      	movs	r3, #134	; 0x86
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504c:	2302      	movs	r3, #2
 800504e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005050:	2300      	movs	r3, #0
 8005052:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005054:	2303      	movs	r3, #3
 8005056:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005058:	230b      	movs	r3, #11
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800505c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005060:	4619      	mov	r1, r3
 8005062:	4817      	ldr	r0, [pc, #92]	; (80050c0 <HAL_ETH_MspInit+0x180>)
 8005064:	f7fd ff2a 	bl	8002ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506e:	2302      	movs	r3, #2
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005072:	2300      	movs	r3, #0
 8005074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005076:	2303      	movs	r3, #3
 8005078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800507a:	230b      	movs	r3, #11
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800507e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005082:	4619      	mov	r1, r3
 8005084:	480f      	ldr	r0, [pc, #60]	; (80050c4 <HAL_ETH_MspInit+0x184>)
 8005086:	f7fd ff19 	bl	8002ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800508a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005090:	2302      	movs	r3, #2
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005094:	2300      	movs	r3, #0
 8005096:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005098:	2303      	movs	r3, #3
 800509a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800509c:	230b      	movs	r3, #11
 800509e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80050a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80050a4:	4619      	mov	r1, r3
 80050a6:	4808      	ldr	r0, [pc, #32]	; (80050c8 <HAL_ETH_MspInit+0x188>)
 80050a8:	f7fd ff08 	bl	8002ebc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80050ac:	bf00      	nop
 80050ae:	3738      	adds	r7, #56	; 0x38
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40028000 	.word	0x40028000
 80050b8:	40023800 	.word	0x40023800
 80050bc:	40020800 	.word	0x40020800
 80050c0:	40020000 	.word	0x40020000
 80050c4:	40020400 	.word	0x40020400
 80050c8:	40021800 	.word	0x40021800

080050cc <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80050d0:	4802      	ldr	r0, [pc, #8]	; (80050dc <ETH_PHY_IO_Init+0x10>)
 80050d2:	f7fd fa97 	bl	8002604 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20004d10 	.word	0x20004d10

080050e0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  return 0;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	4807      	ldr	r0, [pc, #28]	; (8005120 <ETH_PHY_IO_ReadReg+0x30>)
 8005104:	f7fd f8e6 	bl	80022d4 <HAL_ETH_ReadPHYRegister>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800510e:	f04f 33ff 	mov.w	r3, #4294967295
 8005112:	e000      	b.n	8005116 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	20004d10 	.word	0x20004d10

08005124 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68ba      	ldr	r2, [r7, #8]
 8005134:	68f9      	ldr	r1, [r7, #12]
 8005136:	4807      	ldr	r0, [pc, #28]	; (8005154 <ETH_PHY_IO_WriteReg+0x30>)
 8005138:	f7fd f917 	bl	800236a <HAL_ETH_WritePHYRegister>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005142:	f04f 33ff 	mov.w	r3, #4294967295
 8005146:	e000      	b.n	800514a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20004d10 	.word	0x20004d10

08005158 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800515c:	f7fc fc76 	bl	8001a4c <HAL_GetTick>
 8005160:	4603      	mov	r3, r0
}
 8005162:	4618      	mov	r0, r3
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b0a0      	sub	sp, #128	; 0x80
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005170:	f107 030c 	add.w	r3, r7, #12
 8005174:	2264      	movs	r2, #100	; 0x64
 8005176:	2100      	movs	r1, #0
 8005178:	4618      	mov	r0, r3
 800517a:	f00a fd35 	bl	800fbe8 <memset>
  int32_t PHYLinkState = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005186:	2300      	movs	r3, #0
 8005188:	67bb      	str	r3, [r7, #120]	; 0x78
 800518a:	2300      	movs	r3, #0
 800518c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800518e:	483a      	ldr	r0, [pc, #232]	; (8005278 <ethernet_link_check_state+0x110>)
 8005190:	f7fc fb6f 	bl	8001872 <LAN8742_GetLinkState>
 8005194:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800519c:	089b      	lsrs	r3, r3, #2
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d00c      	beq.n	80051c2 <ethernet_link_check_state+0x5a>
 80051a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	dc09      	bgt.n	80051c2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 80051ae:	4833      	ldr	r0, [pc, #204]	; (800527c <ethernet_link_check_state+0x114>)
 80051b0:	f7fc fe6b 	bl	8001e8a <HAL_ETH_Stop>
    netif_set_down(netif);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f001 f81b 	bl	80061f0 <netif_set_down>
    netif_set_link_down(netif);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f001 f87e 	bl	80062bc <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 80051c0:	e055      	b.n	800526e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d14e      	bne.n	800526e <ethernet_link_check_state+0x106>
 80051d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	dd4b      	ble.n	800526e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80051d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051d8:	3b02      	subs	r3, #2
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d82a      	bhi.n	8005234 <ethernet_link_check_state+0xcc>
 80051de:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <ethernet_link_check_state+0x7c>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	080051f5 	.word	0x080051f5
 80051e8:	08005207 	.word	0x08005207
 80051ec:	08005217 	.word	0x08005217
 80051f0:	08005227 	.word	0x08005227
      duplex = ETH_FULLDUPLEX_MODE;
 80051f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80051f8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80051fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80051fe:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005200:	2301      	movs	r3, #1
 8005202:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005204:	e017      	b.n	8005236 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005206:	2300      	movs	r3, #0
 8005208:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800520a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800520e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005210:	2301      	movs	r3, #1
 8005212:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005214:	e00f      	b.n	8005236 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8005216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800521a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800521c:	2300      	movs	r3, #0
 800521e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005220:	2301      	movs	r3, #1
 8005222:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005224:	e007      	b.n	8005236 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8005226:	2300      	movs	r3, #0
 8005228:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800522a:	2300      	movs	r3, #0
 800522c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800522e:	2301      	movs	r3, #1
 8005230:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005232:	e000      	b.n	8005236 <ethernet_link_check_state+0xce>
      break;
 8005234:	bf00      	nop
    if(linkchanged)
 8005236:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d018      	beq.n	800526e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800523c:	f107 030c 	add.w	r3, r7, #12
 8005240:	4619      	mov	r1, r3
 8005242:	480e      	ldr	r0, [pc, #56]	; (800527c <ethernet_link_check_state+0x114>)
 8005244:	f7fd f8da 	bl	80023fc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005248:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800524c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800524e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005250:	f107 030c 	add.w	r3, r7, #12
 8005254:	4619      	mov	r1, r3
 8005256:	4809      	ldr	r0, [pc, #36]	; (800527c <ethernet_link_check_state+0x114>)
 8005258:	f7fd f9ba 	bl	80025d0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800525c:	4807      	ldr	r0, [pc, #28]	; (800527c <ethernet_link_check_state+0x114>)
 800525e:	f7fc fdb5 	bl	8001dcc <HAL_ETH_Start>
      netif_set_up(netif);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 ff58 	bl	8006118 <netif_set_up>
      netif_set_link_up(netif);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 fff3 	bl	8006254 <netif_set_link_up>
}
 800526e:	bf00      	nop
 8005270:	3780      	adds	r7, #128	; 0x80
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	20004df8 	.word	0x20004df8
 800527c:	20004d10 	.word	0x20004d10

08005280 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b086      	sub	sp, #24
 8005284:	af02      	add	r7, sp, #8
 8005286:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005288:	4812      	ldr	r0, [pc, #72]	; (80052d4 <HAL_ETH_RxAllocateCallback+0x54>)
 800528a:	f000 fcbf 	bl	8005c0c <memp_malloc_pool>
 800528e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d014      	beq.n	80052c0 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f103 0220 	add.w	r2, r3, #32
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4a0d      	ldr	r2, [pc, #52]	; (80052d8 <HAL_ETH_RxAllocateCallback+0x58>)
 80052a4:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80052ae:	9201      	str	r2, [sp, #4]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2241      	movs	r2, #65	; 0x41
 80052b6:	2100      	movs	r1, #0
 80052b8:	2000      	movs	r0, #0
 80052ba:	f001 f9f5 	bl	80066a8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80052be:	e005      	b.n	80052cc <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80052c0:	4b06      	ldr	r3, [pc, #24]	; (80052dc <HAL_ETH_RxAllocateCallback+0x5c>)
 80052c2:	2201      	movs	r2, #1
 80052c4:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
}
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	08013b30 	.word	0x08013b30
 80052d8:	08004efd 	.word	0x08004efd
 80052dc:	20004bcc 	.word	0x20004bcc

080052e0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b089      	sub	sp, #36	; 0x24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3b20      	subs	r3, #32
 80052fe:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	2200      	movs	r2, #0
 800530a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	887a      	ldrh	r2, [r7, #2]
 8005310:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d103      	bne.n	8005322 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e003      	b.n	800532a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	69fa      	ldr	r2, [r7, #28]
 800532e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	61fb      	str	r3, [r7, #28]
 8005336:	e009      	b.n	800534c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	891a      	ldrh	r2, [r3, #8]
 800533c:	887b      	ldrh	r3, [r7, #2]
 800533e:	4413      	add	r3, r2
 8005340:	b29a      	uxth	r2, r3
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	61fb      	str	r3, [r7, #28]
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f2      	bne.n	8005338 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	3724      	adds	r7, #36	; 0x24
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	4603      	mov	r3, r0
 8005368:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	021b      	lsls	r3, r3, #8
 800536e:	b21a      	sxth	r2, r3
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	0a1b      	lsrs	r3, r3, #8
 8005374:	b29b      	uxth	r3, r3
 8005376:	b21b      	sxth	r3, r3
 8005378:	4313      	orrs	r3, r2
 800537a:	b21b      	sxth	r3, r3
 800537c:	b29b      	uxth	r3, r3
}
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	061a      	lsls	r2, r3, #24
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	0a1b      	lsrs	r3, r3, #8
 80053a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	0e1b      	lsrs	r3, r3, #24
 80053ae:	4313      	orrs	r3, r2
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80053c2:	2300      	movs	r3, #0
 80053c4:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80053c6:	f000 f8d5 	bl	8005574 <mem_init>
  memp_init();
 80053ca:	f000 fbdb 	bl	8005b84 <memp_init>
  pbuf_init();
  netif_init();
 80053ce:	f000 fcd9 	bl	8005d84 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80053d2:	f007 ff2d 	bl	800d230 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80053d6:	f001 fe41 	bl	800705c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80053da:	f007 fe9f 	bl	800d11c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <ptr_to_mem+0x20>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	88fb      	ldrh	r3, [r7, #6]
 80053f8:	4413      	add	r3, r2
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	20005484 	.word	0x20005484

0800540c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <mem_to_ptr+0x20>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	1ad3      	subs	r3, r2, r3
 800541c:	b29b      	uxth	r3, r3
}
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	20005484 	.word	0x20005484

08005430 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005430:	b590      	push	{r4, r7, lr}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005438:	4b45      	ldr	r3, [pc, #276]	; (8005550 <plug_holes+0x120>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	d206      	bcs.n	8005450 <plug_holes+0x20>
 8005442:	4b44      	ldr	r3, [pc, #272]	; (8005554 <plug_holes+0x124>)
 8005444:	f240 12df 	movw	r2, #479	; 0x1df
 8005448:	4943      	ldr	r1, [pc, #268]	; (8005558 <plug_holes+0x128>)
 800544a:	4844      	ldr	r0, [pc, #272]	; (800555c <plug_holes+0x12c>)
 800544c:	f00a fbd4 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005450:	4b43      	ldr	r3, [pc, #268]	; (8005560 <plug_holes+0x130>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	429a      	cmp	r2, r3
 8005458:	d306      	bcc.n	8005468 <plug_holes+0x38>
 800545a:	4b3e      	ldr	r3, [pc, #248]	; (8005554 <plug_holes+0x124>)
 800545c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005460:	4940      	ldr	r1, [pc, #256]	; (8005564 <plug_holes+0x134>)
 8005462:	483e      	ldr	r0, [pc, #248]	; (800555c <plug_holes+0x12c>)
 8005464:	f00a fbc8 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	791b      	ldrb	r3, [r3, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d006      	beq.n	800547e <plug_holes+0x4e>
 8005470:	4b38      	ldr	r3, [pc, #224]	; (8005554 <plug_holes+0x124>)
 8005472:	f240 12e1 	movw	r2, #481	; 0x1e1
 8005476:	493c      	ldr	r1, [pc, #240]	; (8005568 <plug_holes+0x138>)
 8005478:	4838      	ldr	r0, [pc, #224]	; (800555c <plug_holes+0x12c>)
 800547a:	f00a fbbd 	bl	800fbf8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005486:	d906      	bls.n	8005496 <plug_holes+0x66>
 8005488:	4b32      	ldr	r3, [pc, #200]	; (8005554 <plug_holes+0x124>)
 800548a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800548e:	4937      	ldr	r1, [pc, #220]	; (800556c <plug_holes+0x13c>)
 8005490:	4832      	ldr	r0, [pc, #200]	; (800555c <plug_holes+0x12c>)
 8005492:	f00a fbb1 	bl	800fbf8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff ffa4 	bl	80053e8 <ptr_to_mem>
 80054a0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d024      	beq.n	80054f4 <plug_holes+0xc4>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	791b      	ldrb	r3, [r3, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d120      	bne.n	80054f4 <plug_holes+0xc4>
 80054b2:	4b2b      	ldr	r3, [pc, #172]	; (8005560 <plug_holes+0x130>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d01b      	beq.n	80054f4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80054bc:	4b2c      	ldr	r3, [pc, #176]	; (8005570 <plug_holes+0x140>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68fa      	ldr	r2, [r7, #12]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d102      	bne.n	80054cc <plug_holes+0x9c>
      lfree = mem;
 80054c6:	4a2a      	ldr	r2, [pc, #168]	; (8005570 <plug_holes+0x140>)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	881a      	ldrh	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80054dc:	d00a      	beq.n	80054f4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff ff80 	bl	80053e8 <ptr_to_mem>
 80054e8:	4604      	mov	r4, r0
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7ff ff8e 	bl	800540c <mem_to_ptr>
 80054f0:	4603      	mov	r3, r0
 80054f2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	885b      	ldrh	r3, [r3, #2]
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff ff75 	bl	80053e8 <ptr_to_mem>
 80054fe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	429a      	cmp	r2, r3
 8005506:	d01f      	beq.n	8005548 <plug_holes+0x118>
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	791b      	ldrb	r3, [r3, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d11b      	bne.n	8005548 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005510:	4b17      	ldr	r3, [pc, #92]	; (8005570 <plug_holes+0x140>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	429a      	cmp	r2, r3
 8005518:	d102      	bne.n	8005520 <plug_holes+0xf0>
      lfree = pmem;
 800551a:	4a15      	ldr	r2, [pc, #84]	; (8005570 <plug_holes+0x140>)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	881a      	ldrh	r2, [r3, #0]
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005530:	d00a      	beq.n	8005548 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	881b      	ldrh	r3, [r3, #0]
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff ff56 	bl	80053e8 <ptr_to_mem>
 800553c:	4604      	mov	r4, r0
 800553e:	68b8      	ldr	r0, [r7, #8]
 8005540:	f7ff ff64 	bl	800540c <mem_to_ptr>
 8005544:	4603      	mov	r3, r0
 8005546:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	bd90      	pop	{r4, r7, pc}
 8005550:	20005484 	.word	0x20005484
 8005554:	08011194 	.word	0x08011194
 8005558:	080111c4 	.word	0x080111c4
 800555c:	080111dc 	.word	0x080111dc
 8005560:	20005488 	.word	0x20005488
 8005564:	08011204 	.word	0x08011204
 8005568:	08011220 	.word	0x08011220
 800556c:	0801123c 	.word	0x0801123c
 8005570:	2000548c 	.word	0x2000548c

08005574 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800557a:	4b18      	ldr	r3, [pc, #96]	; (80055dc <mem_init+0x68>)
 800557c:	3303      	adds	r3, #3
 800557e:	f023 0303 	bic.w	r3, r3, #3
 8005582:	461a      	mov	r2, r3
 8005584:	4b16      	ldr	r3, [pc, #88]	; (80055e0 <mem_init+0x6c>)
 8005586:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005588:	4b15      	ldr	r3, [pc, #84]	; (80055e0 <mem_init+0x6c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005594:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80055a2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80055a6:	f7ff ff1f 	bl	80053e8 <ptr_to_mem>
 80055aa:	4603      	mov	r3, r0
 80055ac:	4a0d      	ldr	r2, [pc, #52]	; (80055e4 <mem_init+0x70>)
 80055ae:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <mem_init+0x70>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2201      	movs	r2, #1
 80055b6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <mem_init+0x70>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80055c0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80055c2:	4b08      	ldr	r3, [pc, #32]	; (80055e4 <mem_init+0x70>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80055ca:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80055cc:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <mem_init+0x6c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a05      	ldr	r2, [pc, #20]	; (80055e8 <mem_init+0x74>)
 80055d2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	20004e30 	.word	0x20004e30
 80055e0:	20005484 	.word	0x20005484
 80055e4:	20005488 	.word	0x20005488
 80055e8:	2000548c 	.word	0x2000548c

080055ec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b086      	sub	sp, #24
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ff09 	bl	800540c <mem_to_ptr>
 80055fa:	4603      	mov	r3, r0
 80055fc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f7ff fef0 	bl	80053e8 <ptr_to_mem>
 8005608:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	885b      	ldrh	r3, [r3, #2]
 800560e:	4618      	mov	r0, r3
 8005610:	f7ff feea 	bl	80053e8 <ptr_to_mem>
 8005614:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800561e:	d818      	bhi.n	8005652 <mem_link_valid+0x66>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	885b      	ldrh	r3, [r3, #2]
 8005624:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005628:	d813      	bhi.n	8005652 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800562e:	8afa      	ldrh	r2, [r7, #22]
 8005630:	429a      	cmp	r2, r3
 8005632:	d004      	beq.n	800563e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	8afa      	ldrh	r2, [r7, #22]
 800563a:	429a      	cmp	r2, r3
 800563c:	d109      	bne.n	8005652 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800563e:	4b08      	ldr	r3, [pc, #32]	; (8005660 <mem_link_valid+0x74>)
 8005640:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	429a      	cmp	r2, r3
 8005646:	d006      	beq.n	8005656 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	885b      	ldrh	r3, [r3, #2]
 800564c:	8afa      	ldrh	r2, [r7, #22]
 800564e:	429a      	cmp	r2, r3
 8005650:	d001      	beq.n	8005656 <mem_link_valid+0x6a>
    return 0;
 8005652:	2300      	movs	r3, #0
 8005654:	e000      	b.n	8005658 <mem_link_valid+0x6c>
  }
  return 1;
 8005656:	2301      	movs	r3, #1
}
 8005658:	4618      	mov	r0, r3
 800565a:	3718      	adds	r7, #24
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20005488 	.word	0x20005488

08005664 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d04c      	beq.n	800570c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d007      	beq.n	800568c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800567c:	4b25      	ldr	r3, [pc, #148]	; (8005714 <mem_free+0xb0>)
 800567e:	f240 2273 	movw	r2, #627	; 0x273
 8005682:	4925      	ldr	r1, [pc, #148]	; (8005718 <mem_free+0xb4>)
 8005684:	4825      	ldr	r0, [pc, #148]	; (800571c <mem_free+0xb8>)
 8005686:	f00a fab7 	bl	800fbf8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800568a:	e040      	b.n	800570e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3b08      	subs	r3, #8
 8005690:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005692:	4b23      	ldr	r3, [pc, #140]	; (8005720 <mem_free+0xbc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	429a      	cmp	r2, r3
 800569a:	d306      	bcc.n	80056aa <mem_free+0x46>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f103 020c 	add.w	r2, r3, #12
 80056a2:	4b20      	ldr	r3, [pc, #128]	; (8005724 <mem_free+0xc0>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d907      	bls.n	80056ba <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80056aa:	4b1a      	ldr	r3, [pc, #104]	; (8005714 <mem_free+0xb0>)
 80056ac:	f240 227f 	movw	r2, #639	; 0x27f
 80056b0:	491d      	ldr	r1, [pc, #116]	; (8005728 <mem_free+0xc4>)
 80056b2:	481a      	ldr	r0, [pc, #104]	; (800571c <mem_free+0xb8>)
 80056b4:	f00a faa0 	bl	800fbf8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80056b8:	e029      	b.n	800570e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	791b      	ldrb	r3, [r3, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d107      	bne.n	80056d2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80056c2:	4b14      	ldr	r3, [pc, #80]	; (8005714 <mem_free+0xb0>)
 80056c4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80056c8:	4918      	ldr	r1, [pc, #96]	; (800572c <mem_free+0xc8>)
 80056ca:	4814      	ldr	r0, [pc, #80]	; (800571c <mem_free+0xb8>)
 80056cc:	f00a fa94 	bl	800fbf8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80056d0:	e01d      	b.n	800570e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff ff8a 	bl	80055ec <mem_link_valid>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d107      	bne.n	80056ee <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80056de:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <mem_free+0xb0>)
 80056e0:	f240 2295 	movw	r2, #661	; 0x295
 80056e4:	4912      	ldr	r1, [pc, #72]	; (8005730 <mem_free+0xcc>)
 80056e6:	480d      	ldr	r0, [pc, #52]	; (800571c <mem_free+0xb8>)
 80056e8:	f00a fa86 	bl	800fbf8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80056ec:	e00f      	b.n	800570e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80056f4:	4b0f      	ldr	r3, [pc, #60]	; (8005734 <mem_free+0xd0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d202      	bcs.n	8005704 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80056fe:	4a0d      	ldr	r2, [pc, #52]	; (8005734 <mem_free+0xd0>)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005704:	68f8      	ldr	r0, [r7, #12]
 8005706:	f7ff fe93 	bl	8005430 <plug_holes>
 800570a:	e000      	b.n	800570e <mem_free+0xaa>
    return;
 800570c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	08011194 	.word	0x08011194
 8005718:	08011268 	.word	0x08011268
 800571c:	080111dc 	.word	0x080111dc
 8005720:	20005484 	.word	0x20005484
 8005724:	20005488 	.word	0x20005488
 8005728:	0801128c 	.word	0x0801128c
 800572c:	080112a8 	.word	0x080112a8
 8005730:	080112d0 	.word	0x080112d0
 8005734:	2000548c 	.word	0x2000548c

08005738 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005744:	887b      	ldrh	r3, [r7, #2]
 8005746:	3303      	adds	r3, #3
 8005748:	b29b      	uxth	r3, r3
 800574a:	f023 0303 	bic.w	r3, r3, #3
 800574e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005750:	8bfb      	ldrh	r3, [r7, #30]
 8005752:	2b0b      	cmp	r3, #11
 8005754:	d801      	bhi.n	800575a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005756:	230c      	movs	r3, #12
 8005758:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800575a:	8bfb      	ldrh	r3, [r7, #30]
 800575c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005760:	d803      	bhi.n	800576a <mem_trim+0x32>
 8005762:	8bfa      	ldrh	r2, [r7, #30]
 8005764:	887b      	ldrh	r3, [r7, #2]
 8005766:	429a      	cmp	r2, r3
 8005768:	d201      	bcs.n	800576e <mem_trim+0x36>
    return NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	e0cc      	b.n	8005908 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800576e:	4b68      	ldr	r3, [pc, #416]	; (8005910 <mem_trim+0x1d8>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	429a      	cmp	r2, r3
 8005776:	d304      	bcc.n	8005782 <mem_trim+0x4a>
 8005778:	4b66      	ldr	r3, [pc, #408]	; (8005914 <mem_trim+0x1dc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	429a      	cmp	r2, r3
 8005780:	d306      	bcc.n	8005790 <mem_trim+0x58>
 8005782:	4b65      	ldr	r3, [pc, #404]	; (8005918 <mem_trim+0x1e0>)
 8005784:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005788:	4964      	ldr	r1, [pc, #400]	; (800591c <mem_trim+0x1e4>)
 800578a:	4865      	ldr	r0, [pc, #404]	; (8005920 <mem_trim+0x1e8>)
 800578c:	f00a fa34 	bl	800fbf8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005790:	4b5f      	ldr	r3, [pc, #380]	; (8005910 <mem_trim+0x1d8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	429a      	cmp	r2, r3
 8005798:	d304      	bcc.n	80057a4 <mem_trim+0x6c>
 800579a:	4b5e      	ldr	r3, [pc, #376]	; (8005914 <mem_trim+0x1dc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d301      	bcc.n	80057a8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	e0af      	b.n	8005908 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3b08      	subs	r3, #8
 80057ac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80057ae:	69b8      	ldr	r0, [r7, #24]
 80057b0:	f7ff fe2c 	bl	800540c <mem_to_ptr>
 80057b4:	4603      	mov	r3, r0
 80057b6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	881a      	ldrh	r2, [r3, #0]
 80057bc:	8afb      	ldrh	r3, [r7, #22]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b08      	subs	r3, #8
 80057c4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80057c6:	8bfa      	ldrh	r2, [r7, #30]
 80057c8:	8abb      	ldrh	r3, [r7, #20]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d906      	bls.n	80057dc <mem_trim+0xa4>
 80057ce:	4b52      	ldr	r3, [pc, #328]	; (8005918 <mem_trim+0x1e0>)
 80057d0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80057d4:	4953      	ldr	r1, [pc, #332]	; (8005924 <mem_trim+0x1ec>)
 80057d6:	4852      	ldr	r0, [pc, #328]	; (8005920 <mem_trim+0x1e8>)
 80057d8:	f00a fa0e 	bl	800fbf8 <iprintf>
  if (newsize > size) {
 80057dc:	8bfa      	ldrh	r2, [r7, #30]
 80057de:	8abb      	ldrh	r3, [r7, #20]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d901      	bls.n	80057e8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	e08f      	b.n	8005908 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80057e8:	8bfa      	ldrh	r2, [r7, #30]
 80057ea:	8abb      	ldrh	r3, [r7, #20]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d101      	bne.n	80057f4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	e089      	b.n	8005908 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7ff fdf5 	bl	80053e8 <ptr_to_mem>
 80057fe:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	791b      	ldrb	r3, [r3, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d13f      	bne.n	8005888 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005810:	d106      	bne.n	8005820 <mem_trim+0xe8>
 8005812:	4b41      	ldr	r3, [pc, #260]	; (8005918 <mem_trim+0x1e0>)
 8005814:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005818:	4943      	ldr	r1, [pc, #268]	; (8005928 <mem_trim+0x1f0>)
 800581a:	4841      	ldr	r0, [pc, #260]	; (8005920 <mem_trim+0x1e8>)
 800581c:	f00a f9ec 	bl	800fbf8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	881b      	ldrh	r3, [r3, #0]
 8005824:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005826:	8afa      	ldrh	r2, [r7, #22]
 8005828:	8bfb      	ldrh	r3, [r7, #30]
 800582a:	4413      	add	r3, r2
 800582c:	b29b      	uxth	r3, r3
 800582e:	3308      	adds	r3, #8
 8005830:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005832:	4b3e      	ldr	r3, [pc, #248]	; (800592c <mem_trim+0x1f4>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	429a      	cmp	r2, r3
 800583a:	d106      	bne.n	800584a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800583c:	89fb      	ldrh	r3, [r7, #14]
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff fdd2 	bl	80053e8 <ptr_to_mem>
 8005844:	4603      	mov	r3, r0
 8005846:	4a39      	ldr	r2, [pc, #228]	; (800592c <mem_trim+0x1f4>)
 8005848:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800584a:	89fb      	ldrh	r3, [r7, #14]
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff fdcb 	bl	80053e8 <ptr_to_mem>
 8005852:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	2200      	movs	r2, #0
 8005858:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	89ba      	ldrh	r2, [r7, #12]
 800585e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	8afa      	ldrh	r2, [r7, #22]
 8005864:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	89fa      	ldrh	r2, [r7, #14]
 800586a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005874:	d047      	beq.n	8005906 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff fdb4 	bl	80053e8 <ptr_to_mem>
 8005880:	4602      	mov	r2, r0
 8005882:	89fb      	ldrh	r3, [r7, #14]
 8005884:	8053      	strh	r3, [r2, #2]
 8005886:	e03e      	b.n	8005906 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005888:	8bfb      	ldrh	r3, [r7, #30]
 800588a:	f103 0214 	add.w	r2, r3, #20
 800588e:	8abb      	ldrh	r3, [r7, #20]
 8005890:	429a      	cmp	r2, r3
 8005892:	d838      	bhi.n	8005906 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005894:	8afa      	ldrh	r2, [r7, #22]
 8005896:	8bfb      	ldrh	r3, [r7, #30]
 8005898:	4413      	add	r3, r2
 800589a:	b29b      	uxth	r3, r3
 800589c:	3308      	adds	r3, #8
 800589e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	881b      	ldrh	r3, [r3, #0]
 80058a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058a8:	d106      	bne.n	80058b8 <mem_trim+0x180>
 80058aa:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <mem_trim+0x1e0>)
 80058ac:	f240 3216 	movw	r2, #790	; 0x316
 80058b0:	491d      	ldr	r1, [pc, #116]	; (8005928 <mem_trim+0x1f0>)
 80058b2:	481b      	ldr	r0, [pc, #108]	; (8005920 <mem_trim+0x1e8>)
 80058b4:	f00a f9a0 	bl	800fbf8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80058b8:	89fb      	ldrh	r3, [r7, #14]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff fd94 	bl	80053e8 <ptr_to_mem>
 80058c0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80058c2:	4b1a      	ldr	r3, [pc, #104]	; (800592c <mem_trim+0x1f4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	693a      	ldr	r2, [r7, #16]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d202      	bcs.n	80058d2 <mem_trim+0x19a>
      lfree = mem2;
 80058cc:	4a17      	ldr	r2, [pc, #92]	; (800592c <mem_trim+0x1f4>)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	2200      	movs	r2, #0
 80058d6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	881a      	ldrh	r2, [r3, #0]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	8afa      	ldrh	r2, [r7, #22]
 80058e4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	89fa      	ldrh	r2, [r7, #14]
 80058ea:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80058f4:	d007      	beq.n	8005906 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff fd74 	bl	80053e8 <ptr_to_mem>
 8005900:	4602      	mov	r2, r0
 8005902:	89fb      	ldrh	r3, [r7, #14]
 8005904:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005906:	687b      	ldr	r3, [r7, #4]
}
 8005908:	4618      	mov	r0, r3
 800590a:	3720      	adds	r7, #32
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20005484 	.word	0x20005484
 8005914:	20005488 	.word	0x20005488
 8005918:	08011194 	.word	0x08011194
 800591c:	08011304 	.word	0x08011304
 8005920:	080111dc 	.word	0x080111dc
 8005924:	0801131c 	.word	0x0801131c
 8005928:	0801133c 	.word	0x0801133c
 800592c:	2000548c 	.word	0x2000548c

08005930 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af00      	add	r7, sp, #0
 8005936:	4603      	mov	r3, r0
 8005938:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800593a:	88fb      	ldrh	r3, [r7, #6]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <mem_malloc+0x14>
    return NULL;
 8005940:	2300      	movs	r3, #0
 8005942:	e0d9      	b.n	8005af8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	3303      	adds	r3, #3
 8005948:	b29b      	uxth	r3, r3
 800594a:	f023 0303 	bic.w	r3, r3, #3
 800594e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005950:	8bbb      	ldrh	r3, [r7, #28]
 8005952:	2b0b      	cmp	r3, #11
 8005954:	d801      	bhi.n	800595a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005956:	230c      	movs	r3, #12
 8005958:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800595a:	8bbb      	ldrh	r3, [r7, #28]
 800595c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005960:	d803      	bhi.n	800596a <mem_malloc+0x3a>
 8005962:	8bba      	ldrh	r2, [r7, #28]
 8005964:	88fb      	ldrh	r3, [r7, #6]
 8005966:	429a      	cmp	r2, r3
 8005968:	d201      	bcs.n	800596e <mem_malloc+0x3e>
    return NULL;
 800596a:	2300      	movs	r3, #0
 800596c:	e0c4      	b.n	8005af8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800596e:	4b64      	ldr	r3, [pc, #400]	; (8005b00 <mem_malloc+0x1d0>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4618      	mov	r0, r3
 8005974:	f7ff fd4a 	bl	800540c <mem_to_ptr>
 8005978:	4603      	mov	r3, r0
 800597a:	83fb      	strh	r3, [r7, #30]
 800597c:	e0b4      	b.n	8005ae8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800597e:	8bfb      	ldrh	r3, [r7, #30]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff fd31 	bl	80053e8 <ptr_to_mem>
 8005986:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	791b      	ldrb	r3, [r3, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	f040 80a4 	bne.w	8005ada <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	8bfb      	ldrh	r3, [r7, #30]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	f1a3 0208 	sub.w	r2, r3, #8
 80059a0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80059a2:	429a      	cmp	r2, r3
 80059a4:	f0c0 8099 	bcc.w	8005ada <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	8bfb      	ldrh	r3, [r7, #30]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	f1a3 0208 	sub.w	r2, r3, #8
 80059b6:	8bbb      	ldrh	r3, [r7, #28]
 80059b8:	3314      	adds	r3, #20
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d333      	bcc.n	8005a26 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80059be:	8bfa      	ldrh	r2, [r7, #30]
 80059c0:	8bbb      	ldrh	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	3308      	adds	r3, #8
 80059c8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80059ca:	8a7b      	ldrh	r3, [r7, #18]
 80059cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80059d0:	d106      	bne.n	80059e0 <mem_malloc+0xb0>
 80059d2:	4b4c      	ldr	r3, [pc, #304]	; (8005b04 <mem_malloc+0x1d4>)
 80059d4:	f240 3287 	movw	r2, #903	; 0x387
 80059d8:	494b      	ldr	r1, [pc, #300]	; (8005b08 <mem_malloc+0x1d8>)
 80059da:	484c      	ldr	r0, [pc, #304]	; (8005b0c <mem_malloc+0x1dc>)
 80059dc:	f00a f90c 	bl	800fbf8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80059e0:	8a7b      	ldrh	r3, [r7, #18]
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff fd00 	bl	80053e8 <ptr_to_mem>
 80059e8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	881a      	ldrh	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	8bfa      	ldrh	r2, [r7, #30]
 80059fc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	8a7a      	ldrh	r2, [r7, #18]
 8005a02:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2201      	movs	r2, #1
 8005a08:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005a12:	d00b      	beq.n	8005a2c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7ff fce5 	bl	80053e8 <ptr_to_mem>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	8a7b      	ldrh	r3, [r7, #18]
 8005a22:	8053      	strh	r3, [r2, #2]
 8005a24:	e002      	b.n	8005a2c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005a2c:	4b34      	ldr	r3, [pc, #208]	; (8005b00 <mem_malloc+0x1d0>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d127      	bne.n	8005a86 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005a36:	4b32      	ldr	r3, [pc, #200]	; (8005b00 <mem_malloc+0x1d0>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005a3c:	e005      	b.n	8005a4a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7ff fcd0 	bl	80053e8 <ptr_to_mem>
 8005a48:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	791b      	ldrb	r3, [r3, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d004      	beq.n	8005a5c <mem_malloc+0x12c>
 8005a52:	4b2f      	ldr	r3, [pc, #188]	; (8005b10 <mem_malloc+0x1e0>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69ba      	ldr	r2, [r7, #24]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d1f0      	bne.n	8005a3e <mem_malloc+0x10e>
          }
          lfree = cur;
 8005a5c:	4a28      	ldr	r2, [pc, #160]	; (8005b00 <mem_malloc+0x1d0>)
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005a62:	4b27      	ldr	r3, [pc, #156]	; (8005b00 <mem_malloc+0x1d0>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b2a      	ldr	r3, [pc, #168]	; (8005b10 <mem_malloc+0x1e0>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d00b      	beq.n	8005a86 <mem_malloc+0x156>
 8005a6e:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <mem_malloc+0x1d0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	791b      	ldrb	r3, [r3, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d006      	beq.n	8005a86 <mem_malloc+0x156>
 8005a78:	4b22      	ldr	r3, [pc, #136]	; (8005b04 <mem_malloc+0x1d4>)
 8005a7a:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005a7e:	4925      	ldr	r1, [pc, #148]	; (8005b14 <mem_malloc+0x1e4>)
 8005a80:	4822      	ldr	r0, [pc, #136]	; (8005b0c <mem_malloc+0x1dc>)
 8005a82:	f00a f8b9 	bl	800fbf8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005a86:	8bba      	ldrh	r2, [r7, #28]
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3308      	adds	r3, #8
 8005a8e:	4a20      	ldr	r2, [pc, #128]	; (8005b10 <mem_malloc+0x1e0>)
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d906      	bls.n	8005aa4 <mem_malloc+0x174>
 8005a96:	4b1b      	ldr	r3, [pc, #108]	; (8005b04 <mem_malloc+0x1d4>)
 8005a98:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005a9c:	491e      	ldr	r1, [pc, #120]	; (8005b18 <mem_malloc+0x1e8>)
 8005a9e:	481b      	ldr	r0, [pc, #108]	; (8005b0c <mem_malloc+0x1dc>)
 8005aa0:	f00a f8aa 	bl	800fbf8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d006      	beq.n	8005abc <mem_malloc+0x18c>
 8005aae:	4b15      	ldr	r3, [pc, #84]	; (8005b04 <mem_malloc+0x1d4>)
 8005ab0:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005ab4:	4919      	ldr	r1, [pc, #100]	; (8005b1c <mem_malloc+0x1ec>)
 8005ab6:	4815      	ldr	r0, [pc, #84]	; (8005b0c <mem_malloc+0x1dc>)
 8005ab8:	f00a f89e 	bl	800fbf8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d006      	beq.n	8005ad4 <mem_malloc+0x1a4>
 8005ac6:	4b0f      	ldr	r3, [pc, #60]	; (8005b04 <mem_malloc+0x1d4>)
 8005ac8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005acc:	4914      	ldr	r1, [pc, #80]	; (8005b20 <mem_malloc+0x1f0>)
 8005ace:	480f      	ldr	r0, [pc, #60]	; (8005b0c <mem_malloc+0x1dc>)
 8005ad0:	f00a f892 	bl	800fbf8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	3308      	adds	r3, #8
 8005ad8:	e00e      	b.n	8005af8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005ada:	8bfb      	ldrh	r3, [r7, #30]
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff fc83 	bl	80053e8 <ptr_to_mem>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005ae8:	8bfa      	ldrh	r2, [r7, #30]
 8005aea:	8bbb      	ldrh	r3, [r7, #28]
 8005aec:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005af0:	429a      	cmp	r2, r3
 8005af2:	f4ff af44 	bcc.w	800597e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3720      	adds	r7, #32
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	2000548c 	.word	0x2000548c
 8005b04:	08011194 	.word	0x08011194
 8005b08:	0801133c 	.word	0x0801133c
 8005b0c:	080111dc 	.word	0x080111dc
 8005b10:	20005488 	.word	0x20005488
 8005b14:	08011350 	.word	0x08011350
 8005b18:	0801136c 	.word	0x0801136c
 8005b1c:	0801139c 	.word	0x0801139c
 8005b20:	080113cc 	.word	0x080113cc

08005b24 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	3303      	adds	r3, #3
 8005b3a:	f023 0303 	bic.w	r3, r3, #3
 8005b3e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005b40:	2300      	movs	r3, #0
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	e011      	b.n	8005b6a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	881b      	ldrh	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4413      	add	r3, r2
 8005b62:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3301      	adds	r3, #1
 8005b68:	60fb      	str	r3, [r7, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	885b      	ldrh	r3, [r3, #2]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4293      	cmp	r3, r2
 8005b74:	dbe7      	blt.n	8005b46 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	80fb      	strh	r3, [r7, #6]
 8005b8e:	e009      	b.n	8005ba4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005b90:	88fb      	ldrh	r3, [r7, #6]
 8005b92:	4a08      	ldr	r2, [pc, #32]	; (8005bb4 <memp_init+0x30>)
 8005b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f7ff ffc3 	bl	8005b24 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005b9e:	88fb      	ldrh	r3, [r7, #6]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	80fb      	strh	r3, [r7, #6]
 8005ba4:	88fb      	ldrh	r3, [r7, #6]
 8005ba6:	2b08      	cmp	r3, #8
 8005ba8:	d9f2      	bls.n	8005b90 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005baa:	bf00      	nop
 8005bac:	bf00      	nop
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	08013ba8 	.word	0x08013ba8

08005bb8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b084      	sub	sp, #16
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d012      	beq.n	8005bf4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 0303 	and.w	r3, r3, #3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d006      	beq.n	8005bf0 <do_memp_malloc_pool+0x38>
 8005be2:	4b07      	ldr	r3, [pc, #28]	; (8005c00 <do_memp_malloc_pool+0x48>)
 8005be4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005be8:	4906      	ldr	r1, [pc, #24]	; (8005c04 <do_memp_malloc_pool+0x4c>)
 8005bea:	4807      	ldr	r0, [pc, #28]	; (8005c08 <do_memp_malloc_pool+0x50>)
 8005bec:	f00a f804 	bl	800fbf8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	e000      	b.n	8005bf6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3710      	adds	r7, #16
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	080113f0 	.word	0x080113f0
 8005c04:	08011420 	.word	0x08011420
 8005c08:	08011444 	.word	0x08011444

08005c0c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <memp_malloc_pool+0x1c>
 8005c1a:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <memp_malloc_pool+0x38>)
 8005c1c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005c20:	4909      	ldr	r1, [pc, #36]	; (8005c48 <memp_malloc_pool+0x3c>)
 8005c22:	480a      	ldr	r0, [pc, #40]	; (8005c4c <memp_malloc_pool+0x40>)
 8005c24:	f009 ffe8 	bl	800fbf8 <iprintf>
  if (desc == NULL) {
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <memp_malloc_pool+0x26>
    return NULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	e003      	b.n	8005c3a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff ffc0 	bl	8005bb8 <do_memp_malloc_pool>
 8005c38:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	080113f0 	.word	0x080113f0
 8005c48:	0801146c 	.word	0x0801146c
 8005c4c:	08011444 	.word	0x08011444

08005c50 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	4603      	mov	r3, r0
 8005c58:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d908      	bls.n	8005c72 <memp_malloc+0x22>
 8005c60:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <memp_malloc+0x3c>)
 8005c62:	f240 1257 	movw	r2, #343	; 0x157
 8005c66:	490a      	ldr	r1, [pc, #40]	; (8005c90 <memp_malloc+0x40>)
 8005c68:	480a      	ldr	r0, [pc, #40]	; (8005c94 <memp_malloc+0x44>)
 8005c6a:	f009 ffc5 	bl	800fbf8 <iprintf>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e008      	b.n	8005c84 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	4a08      	ldr	r2, [pc, #32]	; (8005c98 <memp_malloc+0x48>)
 8005c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff ff9c 	bl	8005bb8 <do_memp_malloc_pool>
 8005c80:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005c82:	68fb      	ldr	r3, [r7, #12]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	080113f0 	.word	0x080113f0
 8005c90:	08011480 	.word	0x08011480
 8005c94:	08011444 	.word	0x08011444
 8005c98:	08013ba8 	.word	0x08013ba8

08005c9c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	f003 0303 	and.w	r3, r3, #3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d006      	beq.n	8005cbe <do_memp_free_pool+0x22>
 8005cb0:	4b0a      	ldr	r3, [pc, #40]	; (8005cdc <do_memp_free_pool+0x40>)
 8005cb2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005cb6:	490a      	ldr	r1, [pc, #40]	; (8005ce0 <do_memp_free_pool+0x44>)
 8005cb8:	480a      	ldr	r0, [pc, #40]	; (8005ce4 <do_memp_free_pool+0x48>)
 8005cba:	f009 ff9d 	bl	800fbf8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005cd4:	bf00      	nop
 8005cd6:	3710      	adds	r7, #16
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	080113f0 	.word	0x080113f0
 8005ce0:	080114a0 	.word	0x080114a0
 8005ce4:	08011444 	.word	0x08011444

08005ce8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d106      	bne.n	8005d06 <memp_free_pool+0x1e>
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <memp_free_pool+0x3c>)
 8005cfa:	f240 1295 	movw	r2, #405	; 0x195
 8005cfe:	490a      	ldr	r1, [pc, #40]	; (8005d28 <memp_free_pool+0x40>)
 8005d00:	480a      	ldr	r0, [pc, #40]	; (8005d2c <memp_free_pool+0x44>)
 8005d02:	f009 ff79 	bl	800fbf8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d007      	beq.n	8005d1c <memp_free_pool+0x34>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d004      	beq.n	8005d1c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f7ff ffc1 	bl	8005c9c <do_memp_free_pool>
 8005d1a:	e000      	b.n	8005d1e <memp_free_pool+0x36>
    return;
 8005d1c:	bf00      	nop
}
 8005d1e:	3708      	adds	r7, #8
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	080113f0 	.word	0x080113f0
 8005d28:	0801146c 	.word	0x0801146c
 8005d2c:	08011444 	.word	0x08011444

08005d30 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	4603      	mov	r3, r0
 8005d38:	6039      	str	r1, [r7, #0]
 8005d3a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d907      	bls.n	8005d52 <memp_free+0x22>
 8005d42:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <memp_free+0x44>)
 8005d44:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005d48:	490b      	ldr	r1, [pc, #44]	; (8005d78 <memp_free+0x48>)
 8005d4a:	480c      	ldr	r0, [pc, #48]	; (8005d7c <memp_free+0x4c>)
 8005d4c:	f009 ff54 	bl	800fbf8 <iprintf>
 8005d50:	e00c      	b.n	8005d6c <memp_free+0x3c>

  if (mem == NULL) {
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005d58:	79fb      	ldrb	r3, [r7, #7]
 8005d5a:	4a09      	ldr	r2, [pc, #36]	; (8005d80 <memp_free+0x50>)
 8005d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff ff9a 	bl	8005c9c <do_memp_free_pool>
 8005d68:	e000      	b.n	8005d6c <memp_free+0x3c>
    return;
 8005d6a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	080113f0 	.word	0x080113f0
 8005d78:	080114c0 	.word	0x080114c0
 8005d7c:	08011444 	.word	0x08011444
 8005d80:	08013ba8 	.word	0x08013ba8

08005d84 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005d88:	bf00      	nop
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
	...

08005d94 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
 8005da0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d108      	bne.n	8005dba <netif_add+0x26>
 8005da8:	4b57      	ldr	r3, [pc, #348]	; (8005f08 <netif_add+0x174>)
 8005daa:	f240 1227 	movw	r2, #295	; 0x127
 8005dae:	4957      	ldr	r1, [pc, #348]	; (8005f0c <netif_add+0x178>)
 8005db0:	4857      	ldr	r0, [pc, #348]	; (8005f10 <netif_add+0x17c>)
 8005db2:	f009 ff21 	bl	800fbf8 <iprintf>
 8005db6:	2300      	movs	r3, #0
 8005db8:	e0a2      	b.n	8005f00 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d108      	bne.n	8005dd2 <netif_add+0x3e>
 8005dc0:	4b51      	ldr	r3, [pc, #324]	; (8005f08 <netif_add+0x174>)
 8005dc2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005dc6:	4953      	ldr	r1, [pc, #332]	; (8005f14 <netif_add+0x180>)
 8005dc8:	4851      	ldr	r0, [pc, #324]	; (8005f10 <netif_add+0x17c>)
 8005dca:	f009 ff15 	bl	800fbf8 <iprintf>
 8005dce:	2300      	movs	r3, #0
 8005dd0:	e096      	b.n	8005f00 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005dd8:	4b4f      	ldr	r3, [pc, #316]	; (8005f18 <netif_add+0x184>)
 8005dda:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005de2:	4b4d      	ldr	r3, [pc, #308]	; (8005f18 <netif_add+0x184>)
 8005de4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d101      	bne.n	8005df0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005dec:	4b4a      	ldr	r3, [pc, #296]	; (8005f18 <netif_add+0x184>)
 8005dee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4a45      	ldr	r2, [pc, #276]	; (8005f1c <netif_add+0x188>)
 8005e06:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6a3a      	ldr	r2, [r7, #32]
 8005e20:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005e22:	4b3f      	ldr	r3, [pc, #252]	; (8005f20 <netif_add+0x18c>)
 8005e24:	781a      	ldrb	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e30:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	68b9      	ldr	r1, [r7, #8]
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f913 	bl	8006064 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	4798      	blx	r3
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <netif_add+0xba>
    return NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	e058      	b.n	8005f00 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e54:	2bff      	cmp	r3, #255	; 0xff
 8005e56:	d103      	bne.n	8005e60 <netif_add+0xcc>
        netif->num = 0;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005e64:	4b2f      	ldr	r3, [pc, #188]	; (8005f24 <netif_add+0x190>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	e02b      	b.n	8005ec4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d106      	bne.n	8005e82 <netif_add+0xee>
 8005e74:	4b24      	ldr	r3, [pc, #144]	; (8005f08 <netif_add+0x174>)
 8005e76:	f240 128b 	movw	r2, #395	; 0x18b
 8005e7a:	492b      	ldr	r1, [pc, #172]	; (8005f28 <netif_add+0x194>)
 8005e7c:	4824      	ldr	r0, [pc, #144]	; (8005f10 <netif_add+0x17c>)
 8005e7e:	f009 febb 	bl	800fbf8 <iprintf>
        num_netifs++;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	3301      	adds	r3, #1
 8005e86:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	2bff      	cmp	r3, #255	; 0xff
 8005e8c:	dd06      	ble.n	8005e9c <netif_add+0x108>
 8005e8e:	4b1e      	ldr	r3, [pc, #120]	; (8005f08 <netif_add+0x174>)
 8005e90:	f240 128d 	movw	r2, #397	; 0x18d
 8005e94:	4925      	ldr	r1, [pc, #148]	; (8005f2c <netif_add+0x198>)
 8005e96:	481e      	ldr	r0, [pc, #120]	; (8005f10 <netif_add+0x17c>)
 8005e98:	f009 feae 	bl	800fbf8 <iprintf>
        if (netif2->num == netif->num) {
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d108      	bne.n	8005ebe <netif_add+0x12a>
          netif->num++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	b2da      	uxtb	r2, r3
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005ebc:	e005      	b.n	8005eca <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1d0      	bne.n	8005e6c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1be      	bne.n	8005e4e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ed6:	2bfe      	cmp	r3, #254	; 0xfe
 8005ed8:	d103      	bne.n	8005ee2 <netif_add+0x14e>
    netif_num = 0;
 8005eda:	4b11      	ldr	r3, [pc, #68]	; (8005f20 <netif_add+0x18c>)
 8005edc:	2200      	movs	r2, #0
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	e006      	b.n	8005ef0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ee8:	3301      	adds	r3, #1
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <netif_add+0x18c>)
 8005eee:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005ef0:	4b0c      	ldr	r3, [pc, #48]	; (8005f24 <netif_add+0x190>)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005ef8:	4a0a      	ldr	r2, [pc, #40]	; (8005f24 <netif_add+0x190>)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005efe:	68fb      	ldr	r3, [r7, #12]
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3718      	adds	r7, #24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	080114dc 	.word	0x080114dc
 8005f0c:	08011570 	.word	0x08011570
 8005f10:	0801152c 	.word	0x0801152c
 8005f14:	0801158c 	.word	0x0801158c
 8005f18:	08013c0c 	.word	0x08013c0c
 8005f1c:	0800633f 	.word	0x0800633f
 8005f20:	20008384 	.word	0x20008384
 8005f24:	2000837c 	.word	0x2000837c
 8005f28:	080115b0 	.word	0x080115b0
 8005f2c:	080115c4 	.word	0x080115c4

08005f30 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005f3a:	6839      	ldr	r1, [r7, #0]
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f002 fdc1 	bl	8008ac4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f007 fafd 	bl	800d544 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <netif_do_set_ipaddr+0x20>
 8005f66:	4b1d      	ldr	r3, [pc, #116]	; (8005fdc <netif_do_set_ipaddr+0x88>)
 8005f68:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005f6c:	491c      	ldr	r1, [pc, #112]	; (8005fe0 <netif_do_set_ipaddr+0x8c>)
 8005f6e:	481d      	ldr	r0, [pc, #116]	; (8005fe4 <netif_do_set_ipaddr+0x90>)
 8005f70:	f009 fe42 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <netif_do_set_ipaddr+0x34>
 8005f7a:	4b18      	ldr	r3, [pc, #96]	; (8005fdc <netif_do_set_ipaddr+0x88>)
 8005f7c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005f80:	4917      	ldr	r1, [pc, #92]	; (8005fe0 <netif_do_set_ipaddr+0x8c>)
 8005f82:	4818      	ldr	r0, [pc, #96]	; (8005fe4 <netif_do_set_ipaddr+0x90>)
 8005f84:	f009 fe38 	bl	800fbf8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d01c      	beq.n	8005fd0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005fa6:	f107 0314 	add.w	r3, r7, #20
 8005faa:	4619      	mov	r1, r3
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f7ff ffbf 	bl	8005f30 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <netif_do_set_ipaddr+0x6a>
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	e000      	b.n	8005fc0 <netif_do_set_ipaddr+0x6c>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 f8d2 	bl	8006170 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e000      	b.n	8005fd2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	080114dc 	.word	0x080114dc
 8005fe0:	080115f4 	.word	0x080115f4
 8005fe4:	0801152c 	.word	0x0801152c

08005fe8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d00a      	beq.n	8006018 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <netif_do_set_netmask+0x26>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	e000      	b.n	8006010 <netif_do_set_netmask+0x28>
 800600e:	2300      	movs	r3, #0
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006026:	b480      	push	{r7}
 8006028:	b085      	sub	sp, #20
 800602a:	af00      	add	r7, sp, #0
 800602c:	60f8      	str	r0, [r7, #12]
 800602e:	60b9      	str	r1, [r7, #8]
 8006030:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	330c      	adds	r3, #12
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	429a      	cmp	r2, r3
 800603e:	d00a      	beq.n	8006056 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d002      	beq.n	800604c <netif_do_set_gw+0x26>
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	e000      	b.n	800604e <netif_do_set_gw+0x28>
 800604c:	2300      	movs	r3, #0
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b088      	sub	sp, #32
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8006076:	2300      	movs	r3, #0
 8006078:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8006080:	4b1c      	ldr	r3, [pc, #112]	; (80060f4 <netif_set_addr+0x90>)
 8006082:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800608a:	4b1a      	ldr	r3, [pc, #104]	; (80060f4 <netif_set_addr+0x90>)
 800608c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8006094:	4b17      	ldr	r3, [pc, #92]	; (80060f4 <netif_set_addr+0x90>)
 8006096:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <netif_set_addr+0x42>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <netif_set_addr+0x46>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <netif_set_addr+0x48>
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
  if (remove) {
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d006      	beq.n	80060c2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80060b4:	f107 0310 	add.w	r3, r7, #16
 80060b8:	461a      	mov	r2, r3
 80060ba:	68b9      	ldr	r1, [r7, #8]
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff ff49 	bl	8005f54 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f7ff ff8e 	bl	8005fe8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	6839      	ldr	r1, [r7, #0]
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f7ff ffa8 	bl	8006026 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d106      	bne.n	80060ea <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80060dc:	f107 0310 	add.w	r3, r7, #16
 80060e0:	461a      	mov	r2, r3
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff ff35 	bl	8005f54 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80060ea:	bf00      	nop
 80060ec:	3720      	adds	r7, #32
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	08013c0c 	.word	0x08013c0c

080060f8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8006100:	4a04      	ldr	r2, [pc, #16]	; (8006114 <netif_set_default+0x1c>)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006106:	bf00      	nop
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	20008380 	.word	0x20008380

08006118 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d107      	bne.n	8006136 <netif_set_up+0x1e>
 8006126:	4b0f      	ldr	r3, [pc, #60]	; (8006164 <netif_set_up+0x4c>)
 8006128:	f44f 7254 	mov.w	r2, #848	; 0x350
 800612c:	490e      	ldr	r1, [pc, #56]	; (8006168 <netif_set_up+0x50>)
 800612e:	480f      	ldr	r0, [pc, #60]	; (800616c <netif_set_up+0x54>)
 8006130:	f009 fd62 	bl	800fbf8 <iprintf>
 8006134:	e013      	b.n	800615e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10c      	bne.n	800615e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800614a:	f043 0301 	orr.w	r3, r3, #1
 800614e:	b2da      	uxtb	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006156:	2103      	movs	r1, #3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 f809 	bl	8006170 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	080114dc 	.word	0x080114dc
 8006168:	08011664 	.word	0x08011664
 800616c:	0801152c 	.word	0x0801152c

08006170 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <netif_issue_reports+0x20>
 8006182:	4b18      	ldr	r3, [pc, #96]	; (80061e4 <netif_issue_reports+0x74>)
 8006184:	f240 326d 	movw	r2, #877	; 0x36d
 8006188:	4917      	ldr	r1, [pc, #92]	; (80061e8 <netif_issue_reports+0x78>)
 800618a:	4818      	ldr	r0, [pc, #96]	; (80061ec <netif_issue_reports+0x7c>)
 800618c:	f009 fd34 	bl	800fbf8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01e      	beq.n	80061dc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061a4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d017      	beq.n	80061dc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80061ac:	78fb      	ldrb	r3, [r7, #3]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d013      	beq.n	80061de <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3304      	adds	r3, #4
 80061ba:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00e      	beq.n	80061de <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80061c6:	f003 0308 	and.w	r3, r3, #8
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d007      	beq.n	80061de <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	3304      	adds	r3, #4
 80061d2:	4619      	mov	r1, r3
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f008 f91f 	bl	800e418 <etharp_request>
 80061da:	e000      	b.n	80061de <netif_issue_reports+0x6e>
    return;
 80061dc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	080114dc 	.word	0x080114dc
 80061e8:	08011680 	.word	0x08011680
 80061ec:	0801152c 	.word	0x0801152c

080061f0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d107      	bne.n	800620e <netif_set_down+0x1e>
 80061fe:	4b12      	ldr	r3, [pc, #72]	; (8006248 <netif_set_down+0x58>)
 8006200:	f240 329b 	movw	r2, #923	; 0x39b
 8006204:	4911      	ldr	r1, [pc, #68]	; (800624c <netif_set_down+0x5c>)
 8006206:	4812      	ldr	r0, [pc, #72]	; (8006250 <netif_set_down+0x60>)
 8006208:	f009 fcf6 	bl	800fbf8 <iprintf>
 800620c:	e019      	b.n	8006242 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006214:	f003 0301 	and.w	r3, r3, #1
 8006218:	2b00      	cmp	r3, #0
 800621a:	d012      	beq.n	8006242 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006222:	f023 0301 	bic.w	r3, r3, #1
 8006226:	b2da      	uxtb	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006234:	f003 0308 	and.w	r3, r3, #8
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f007 fca9 	bl	800db94 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	080114dc 	.word	0x080114dc
 800624c:	080116a4 	.word	0x080116a4
 8006250:	0801152c 	.word	0x0801152c

08006254 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d107      	bne.n	8006272 <netif_set_link_up+0x1e>
 8006262:	4b13      	ldr	r3, [pc, #76]	; (80062b0 <netif_set_link_up+0x5c>)
 8006264:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8006268:	4912      	ldr	r1, [pc, #72]	; (80062b4 <netif_set_link_up+0x60>)
 800626a:	4813      	ldr	r0, [pc, #76]	; (80062b8 <netif_set_link_up+0x64>)
 800626c:	f009 fcc4 	bl	800fbf8 <iprintf>
 8006270:	e01b      	b.n	80062aa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	2b00      	cmp	r3, #0
 800627e:	d114      	bne.n	80062aa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006286:	f043 0304 	orr.w	r3, r3, #4
 800628a:	b2da      	uxtb	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006292:	2103      	movs	r1, #3
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7ff ff6b 	bl	8006170 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <netif_set_link_up+0x56>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}
 80062b0:	080114dc 	.word	0x080114dc
 80062b4:	080116c4 	.word	0x080116c4
 80062b8:	0801152c 	.word	0x0801152c

080062bc <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b082      	sub	sp, #8
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d107      	bne.n	80062da <netif_set_link_down+0x1e>
 80062ca:	4b11      	ldr	r3, [pc, #68]	; (8006310 <netif_set_link_down+0x54>)
 80062cc:	f240 4206 	movw	r2, #1030	; 0x406
 80062d0:	4910      	ldr	r1, [pc, #64]	; (8006314 <netif_set_link_down+0x58>)
 80062d2:	4811      	ldr	r0, [pc, #68]	; (8006318 <netif_set_link_down+0x5c>)
 80062d4:	f009 fc90 	bl	800fbf8 <iprintf>
 80062d8:	e017      	b.n	800630a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062e0:	f003 0304 	and.w	r3, r3, #4
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d010      	beq.n	800630a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80062ee:	f023 0304 	bic.w	r3, r3, #4
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <netif_set_link_down+0x4e>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800630a:	3708      	adds	r7, #8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}
 8006310:	080114dc 	.word	0x080114dc
 8006314:	080116e8 	.word	0x080116e8
 8006318:	0801152c 	.word	0x0801152c

0800631c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	61da      	str	r2, [r3, #28]
  }
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	60f8      	str	r0, [r7, #12]
 8006346:	60b9      	str	r1, [r7, #8]
 8006348:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800634a:	f06f 030b 	mvn.w	r3, #11
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
	...

0800635c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	4603      	mov	r3, r0
 8006364:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d013      	beq.n	8006394 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800636c:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <netif_get_by_index+0x48>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	e00c      	b.n	800638e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800637a:	3301      	adds	r3, #1
 800637c:	b2db      	uxtb	r3, r3
 800637e:	79fa      	ldrb	r2, [r7, #7]
 8006380:	429a      	cmp	r2, r3
 8006382:	d101      	bne.n	8006388 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	e006      	b.n	8006396 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1ef      	bne.n	8006374 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006394:	2300      	movs	r3, #0
}
 8006396:	4618      	mov	r0, r3
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	2000837c 	.word	0x2000837c

080063a8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80063ae:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <pbuf_free_ooseq+0x38>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80063b4:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <pbuf_free_ooseq+0x3c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	607b      	str	r3, [r7, #4]
 80063ba:	e00a      	b.n	80063d2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f002 fbbb 	bl	8008b40 <tcp_free_ooseq>
      return;
 80063ca:	e005      	b.n	80063d8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	607b      	str	r3, [r7, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1f1      	bne.n	80063bc <pbuf_free_ooseq+0x14>
    }
  }
}
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20008385 	.word	0x20008385
 80063e4:	20008394 	.word	0x20008394

080063e8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80063ec:	4b03      	ldr	r3, [pc, #12]	; (80063fc <pbuf_pool_is_empty+0x14>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80063f2:	bf00      	nop
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	20008385 	.word	0x20008385

08006400 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4611      	mov	r1, r2
 800640c:	461a      	mov	r2, r3
 800640e:	460b      	mov	r3, r1
 8006410:	80fb      	strh	r3, [r7, #6]
 8006412:	4613      	mov	r3, r2
 8006414:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	88fa      	ldrh	r2, [r7, #6]
 8006426:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	88ba      	ldrh	r2, [r7, #4]
 800642c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800642e:	8b3b      	ldrh	r3, [r7, #24]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	7f3a      	ldrb	r2, [r7, #28]
 800643a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2201      	movs	r2, #1
 8006440:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	73da      	strb	r2, [r3, #15]
}
 8006448:	bf00      	nop
 800644a:	3714      	adds	r7, #20
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08c      	sub	sp, #48	; 0x30
 8006458:	af02      	add	r7, sp, #8
 800645a:	4603      	mov	r3, r0
 800645c:	71fb      	strb	r3, [r7, #7]
 800645e:	460b      	mov	r3, r1
 8006460:	80bb      	strh	r3, [r7, #4]
 8006462:	4613      	mov	r3, r2
 8006464:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006466:	79fb      	ldrb	r3, [r7, #7]
 8006468:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800646a:	887b      	ldrh	r3, [r7, #2]
 800646c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006470:	d07f      	beq.n	8006572 <pbuf_alloc+0x11e>
 8006472:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006476:	f300 80c8 	bgt.w	800660a <pbuf_alloc+0x1b6>
 800647a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800647e:	d010      	beq.n	80064a2 <pbuf_alloc+0x4e>
 8006480:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006484:	f300 80c1 	bgt.w	800660a <pbuf_alloc+0x1b6>
 8006488:	2b01      	cmp	r3, #1
 800648a:	d002      	beq.n	8006492 <pbuf_alloc+0x3e>
 800648c:	2b41      	cmp	r3, #65	; 0x41
 800648e:	f040 80bc 	bne.w	800660a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006492:	887a      	ldrh	r2, [r7, #2]
 8006494:	88bb      	ldrh	r3, [r7, #4]
 8006496:	4619      	mov	r1, r3
 8006498:	2000      	movs	r0, #0
 800649a:	f000 f8d1 	bl	8006640 <pbuf_alloc_reference>
 800649e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80064a0:	e0bd      	b.n	800661e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80064a2:	2300      	movs	r3, #0
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80064aa:	88bb      	ldrh	r3, [r7, #4]
 80064ac:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80064ae:	2008      	movs	r0, #8
 80064b0:	f7ff fbce 	bl	8005c50 <memp_malloc>
 80064b4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d109      	bne.n	80064d0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80064bc:	f7ff ff94 	bl	80063e8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <pbuf_alloc+0x78>
            pbuf_free(p);
 80064c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80064c8:	f000 faa8 	bl	8006a1c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80064cc:	2300      	movs	r3, #0
 80064ce:	e0a7      	b.n	8006620 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80064d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064d2:	3303      	adds	r3, #3
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f023 0303 	bic.w	r3, r3, #3
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	8b7a      	ldrh	r2, [r7, #26]
 80064e4:	4293      	cmp	r3, r2
 80064e6:	bf28      	it	cs
 80064e8:	4613      	movcs	r3, r2
 80064ea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80064ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064ee:	3310      	adds	r3, #16
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	4413      	add	r3, r2
 80064f4:	3303      	adds	r3, #3
 80064f6:	f023 0303 	bic.w	r3, r3, #3
 80064fa:	4618      	mov	r0, r3
 80064fc:	89f9      	ldrh	r1, [r7, #14]
 80064fe:	8b7a      	ldrh	r2, [r7, #26]
 8006500:	2300      	movs	r3, #0
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	887b      	ldrh	r3, [r7, #2]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	460b      	mov	r3, r1
 800650a:	4601      	mov	r1, r0
 800650c:	6938      	ldr	r0, [r7, #16]
 800650e:	f7ff ff77 	bl	8006400 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d006      	beq.n	800652c <pbuf_alloc+0xd8>
 800651e:	4b42      	ldr	r3, [pc, #264]	; (8006628 <pbuf_alloc+0x1d4>)
 8006520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006524:	4941      	ldr	r1, [pc, #260]	; (800662c <pbuf_alloc+0x1d8>)
 8006526:	4842      	ldr	r0, [pc, #264]	; (8006630 <pbuf_alloc+0x1dc>)
 8006528:	f009 fb66 	bl	800fbf8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800652c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800652e:	3303      	adds	r3, #3
 8006530:	f023 0303 	bic.w	r3, r3, #3
 8006534:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006538:	d106      	bne.n	8006548 <pbuf_alloc+0xf4>
 800653a:	4b3b      	ldr	r3, [pc, #236]	; (8006628 <pbuf_alloc+0x1d4>)
 800653c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006540:	493c      	ldr	r1, [pc, #240]	; (8006634 <pbuf_alloc+0x1e0>)
 8006542:	483b      	ldr	r0, [pc, #236]	; (8006630 <pbuf_alloc+0x1dc>)
 8006544:	f009 fb58 	bl	800fbf8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	2b00      	cmp	r3, #0
 800654c:	d102      	bne.n	8006554 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	627b      	str	r3, [r7, #36]	; 0x24
 8006552:	e002      	b.n	800655a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800655e:	8b7a      	ldrh	r2, [r7, #26]
 8006560:	89fb      	ldrh	r3, [r7, #14]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006566:	2300      	movs	r3, #0
 8006568:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800656a:	8b7b      	ldrh	r3, [r7, #26]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d19e      	bne.n	80064ae <pbuf_alloc+0x5a>
      break;
 8006570:	e055      	b.n	800661e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006572:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006574:	3303      	adds	r3, #3
 8006576:	b29b      	uxth	r3, r3
 8006578:	f023 0303 	bic.w	r3, r3, #3
 800657c:	b29a      	uxth	r2, r3
 800657e:	88bb      	ldrh	r3, [r7, #4]
 8006580:	3303      	adds	r3, #3
 8006582:	b29b      	uxth	r3, r3
 8006584:	f023 0303 	bic.w	r3, r3, #3
 8006588:	b29b      	uxth	r3, r3
 800658a:	4413      	add	r3, r2
 800658c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800658e:	8b3b      	ldrh	r3, [r7, #24]
 8006590:	3310      	adds	r3, #16
 8006592:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006594:	8b3a      	ldrh	r2, [r7, #24]
 8006596:	88bb      	ldrh	r3, [r7, #4]
 8006598:	3303      	adds	r3, #3
 800659a:	f023 0303 	bic.w	r3, r3, #3
 800659e:	429a      	cmp	r2, r3
 80065a0:	d306      	bcc.n	80065b0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80065a2:	8afa      	ldrh	r2, [r7, #22]
 80065a4:	88bb      	ldrh	r3, [r7, #4]
 80065a6:	3303      	adds	r3, #3
 80065a8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d201      	bcs.n	80065b4 <pbuf_alloc+0x160>
        return NULL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	e035      	b.n	8006620 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80065b4:	8afb      	ldrh	r3, [r7, #22]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff f9ba 	bl	8005930 <mem_malloc>
 80065bc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <pbuf_alloc+0x174>
        return NULL;
 80065c4:	2300      	movs	r3, #0
 80065c6:	e02b      	b.n	8006620 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80065c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80065ca:	3310      	adds	r3, #16
 80065cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ce:	4413      	add	r3, r2
 80065d0:	3303      	adds	r3, #3
 80065d2:	f023 0303 	bic.w	r3, r3, #3
 80065d6:	4618      	mov	r0, r3
 80065d8:	88b9      	ldrh	r1, [r7, #4]
 80065da:	88ba      	ldrh	r2, [r7, #4]
 80065dc:	2300      	movs	r3, #0
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	887b      	ldrh	r3, [r7, #2]
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	460b      	mov	r3, r1
 80065e6:	4601      	mov	r1, r0
 80065e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80065ea:	f7ff ff09 	bl	8006400 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80065ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d010      	beq.n	800661c <pbuf_alloc+0x1c8>
 80065fa:	4b0b      	ldr	r3, [pc, #44]	; (8006628 <pbuf_alloc+0x1d4>)
 80065fc:	f44f 7291 	mov.w	r2, #290	; 0x122
 8006600:	490d      	ldr	r1, [pc, #52]	; (8006638 <pbuf_alloc+0x1e4>)
 8006602:	480b      	ldr	r0, [pc, #44]	; (8006630 <pbuf_alloc+0x1dc>)
 8006604:	f009 faf8 	bl	800fbf8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006608:	e008      	b.n	800661c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800660a:	4b07      	ldr	r3, [pc, #28]	; (8006628 <pbuf_alloc+0x1d4>)
 800660c:	f240 1227 	movw	r2, #295	; 0x127
 8006610:	490a      	ldr	r1, [pc, #40]	; (800663c <pbuf_alloc+0x1e8>)
 8006612:	4807      	ldr	r0, [pc, #28]	; (8006630 <pbuf_alloc+0x1dc>)
 8006614:	f009 faf0 	bl	800fbf8 <iprintf>
      return NULL;
 8006618:	2300      	movs	r3, #0
 800661a:	e001      	b.n	8006620 <pbuf_alloc+0x1cc>
      break;
 800661c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800661e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006620:	4618      	mov	r0, r3
 8006622:	3728      	adds	r7, #40	; 0x28
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	0801170c 	.word	0x0801170c
 800662c:	0801173c 	.word	0x0801173c
 8006630:	0801176c 	.word	0x0801176c
 8006634:	08011794 	.word	0x08011794
 8006638:	080117c8 	.word	0x080117c8
 800663c:	080117f4 	.word	0x080117f4

08006640 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af02      	add	r7, sp, #8
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	460b      	mov	r3, r1
 800664a:	807b      	strh	r3, [r7, #2]
 800664c:	4613      	mov	r3, r2
 800664e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006650:	883b      	ldrh	r3, [r7, #0]
 8006652:	2b41      	cmp	r3, #65	; 0x41
 8006654:	d009      	beq.n	800666a <pbuf_alloc_reference+0x2a>
 8006656:	883b      	ldrh	r3, [r7, #0]
 8006658:	2b01      	cmp	r3, #1
 800665a:	d006      	beq.n	800666a <pbuf_alloc_reference+0x2a>
 800665c:	4b0f      	ldr	r3, [pc, #60]	; (800669c <pbuf_alloc_reference+0x5c>)
 800665e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006662:	490f      	ldr	r1, [pc, #60]	; (80066a0 <pbuf_alloc_reference+0x60>)
 8006664:	480f      	ldr	r0, [pc, #60]	; (80066a4 <pbuf_alloc_reference+0x64>)
 8006666:	f009 fac7 	bl	800fbf8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800666a:	2007      	movs	r0, #7
 800666c:	f7ff faf0 	bl	8005c50 <memp_malloc>
 8006670:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d101      	bne.n	800667c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006678:	2300      	movs	r3, #0
 800667a:	e00b      	b.n	8006694 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800667c:	8879      	ldrh	r1, [r7, #2]
 800667e:	887a      	ldrh	r2, [r7, #2]
 8006680:	2300      	movs	r3, #0
 8006682:	9301      	str	r3, [sp, #4]
 8006684:	883b      	ldrh	r3, [r7, #0]
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	460b      	mov	r3, r1
 800668a:	6879      	ldr	r1, [r7, #4]
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f7ff feb7 	bl	8006400 <pbuf_init_alloced_pbuf>
  return p;
 8006692:	68fb      	ldr	r3, [r7, #12]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	0801170c 	.word	0x0801170c
 80066a0:	08011810 	.word	0x08011810
 80066a4:	0801176c 	.word	0x0801176c

080066a8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	607b      	str	r3, [r7, #4]
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]
 80066b4:	460b      	mov	r3, r1
 80066b6:	81bb      	strh	r3, [r7, #12]
 80066b8:	4613      	mov	r3, r2
 80066ba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80066c0:	8a7b      	ldrh	r3, [r7, #18]
 80066c2:	3303      	adds	r3, #3
 80066c4:	f023 0203 	bic.w	r2, r3, #3
 80066c8:	89bb      	ldrh	r3, [r7, #12]
 80066ca:	441a      	add	r2, r3
 80066cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d901      	bls.n	80066d6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e018      	b.n	8006708 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d007      	beq.n	80066ec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80066dc:	8a7b      	ldrh	r3, [r7, #18]
 80066de:	3303      	adds	r3, #3
 80066e0:	f023 0303 	bic.w	r3, r3, #3
 80066e4:	6a3a      	ldr	r2, [r7, #32]
 80066e6:	4413      	add	r3, r2
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	e001      	b.n	80066f0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	89b9      	ldrh	r1, [r7, #12]
 80066f4:	89ba      	ldrh	r2, [r7, #12]
 80066f6:	2302      	movs	r3, #2
 80066f8:	9301      	str	r3, [sp, #4]
 80066fa:	897b      	ldrh	r3, [r7, #10]
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	460b      	mov	r3, r1
 8006700:	6979      	ldr	r1, [r7, #20]
 8006702:	f7ff fe7d 	bl	8006400 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006706:	687b      	ldr	r3, [r7, #4]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <pbuf_realloc+0x20>
 8006722:	4b3a      	ldr	r3, [pc, #232]	; (800680c <pbuf_realloc+0xfc>)
 8006724:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006728:	4939      	ldr	r1, [pc, #228]	; (8006810 <pbuf_realloc+0x100>)
 800672a:	483a      	ldr	r0, [pc, #232]	; (8006814 <pbuf_realloc+0x104>)
 800672c:	f009 fa64 	bl	800fbf8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	891b      	ldrh	r3, [r3, #8]
 8006734:	887a      	ldrh	r2, [r7, #2]
 8006736:	429a      	cmp	r2, r3
 8006738:	d263      	bcs.n	8006802 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	891a      	ldrh	r2, [r3, #8]
 800673e:	887b      	ldrh	r3, [r7, #2]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006744:	887b      	ldrh	r3, [r7, #2]
 8006746:	817b      	strh	r3, [r7, #10]
  q = p;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800674c:	e018      	b.n	8006780 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	895b      	ldrh	r3, [r3, #10]
 8006752:	897a      	ldrh	r2, [r7, #10]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	891a      	ldrh	r2, [r3, #8]
 800675c:	893b      	ldrh	r3, [r7, #8]
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d106      	bne.n	8006780 <pbuf_realloc+0x70>
 8006772:	4b26      	ldr	r3, [pc, #152]	; (800680c <pbuf_realloc+0xfc>)
 8006774:	f240 12af 	movw	r2, #431	; 0x1af
 8006778:	4927      	ldr	r1, [pc, #156]	; (8006818 <pbuf_realloc+0x108>)
 800677a:	4826      	ldr	r0, [pc, #152]	; (8006814 <pbuf_realloc+0x104>)
 800677c:	f009 fa3c 	bl	800fbf8 <iprintf>
  while (rem_len > q->len) {
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	895b      	ldrh	r3, [r3, #10]
 8006784:	897a      	ldrh	r2, [r7, #10]
 8006786:	429a      	cmp	r2, r3
 8006788:	d8e1      	bhi.n	800674e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	7b1b      	ldrb	r3, [r3, #12]
 800678e:	f003 030f 	and.w	r3, r3, #15
 8006792:	2b00      	cmp	r3, #0
 8006794:	d121      	bne.n	80067da <pbuf_realloc+0xca>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	895b      	ldrh	r3, [r3, #10]
 800679a:	897a      	ldrh	r2, [r7, #10]
 800679c:	429a      	cmp	r2, r3
 800679e:	d01c      	beq.n	80067da <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	7b5b      	ldrb	r3, [r3, #13]
 80067a4:	f003 0302 	and.w	r3, r3, #2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d116      	bne.n	80067da <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	897b      	ldrh	r3, [r7, #10]
 80067b8:	4413      	add	r3, r2
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	4619      	mov	r1, r3
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f7fe ffba 	bl	8005738 <mem_trim>
 80067c4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d106      	bne.n	80067da <pbuf_realloc+0xca>
 80067cc:	4b0f      	ldr	r3, [pc, #60]	; (800680c <pbuf_realloc+0xfc>)
 80067ce:	f240 12bd 	movw	r2, #445	; 0x1bd
 80067d2:	4912      	ldr	r1, [pc, #72]	; (800681c <pbuf_realloc+0x10c>)
 80067d4:	480f      	ldr	r0, [pc, #60]	; (8006814 <pbuf_realloc+0x104>)
 80067d6:	f009 fa0f 	bl	800fbf8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	897a      	ldrh	r2, [r7, #10]
 80067de:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	895a      	ldrh	r2, [r3, #10]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 f911 	bl	8006a1c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	e000      	b.n	8006804 <pbuf_realloc+0xf4>
    return;
 8006802:	bf00      	nop

}
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	0801170c 	.word	0x0801170c
 8006810:	08011824 	.word	0x08011824
 8006814:	0801176c 	.word	0x0801176c
 8006818:	0801183c 	.word	0x0801183c
 800681c:	08011854 	.word	0x08011854

08006820 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	4613      	mov	r3, r2
 800682c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d106      	bne.n	8006842 <pbuf_add_header_impl+0x22>
 8006834:	4b2b      	ldr	r3, [pc, #172]	; (80068e4 <pbuf_add_header_impl+0xc4>)
 8006836:	f240 12df 	movw	r2, #479	; 0x1df
 800683a:	492b      	ldr	r1, [pc, #172]	; (80068e8 <pbuf_add_header_impl+0xc8>)
 800683c:	482b      	ldr	r0, [pc, #172]	; (80068ec <pbuf_add_header_impl+0xcc>)
 800683e:	f009 f9db 	bl	800fbf8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <pbuf_add_header_impl+0x30>
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800684e:	d301      	bcc.n	8006854 <pbuf_add_header_impl+0x34>
    return 1;
 8006850:	2301      	movs	r3, #1
 8006852:	e043      	b.n	80068dc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <pbuf_add_header_impl+0x3e>
    return 0;
 800685a:	2300      	movs	r3, #0
 800685c:	e03e      	b.n	80068dc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	891a      	ldrh	r2, [r3, #8]
 8006866:	8a7b      	ldrh	r3, [r7, #18]
 8006868:	4413      	add	r3, r2
 800686a:	b29b      	uxth	r3, r3
 800686c:	8a7a      	ldrh	r2, [r7, #18]
 800686e:	429a      	cmp	r2, r3
 8006870:	d901      	bls.n	8006876 <pbuf_add_header_impl+0x56>
    return 1;
 8006872:	2301      	movs	r3, #1
 8006874:	e032      	b.n	80068dc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	7b1b      	ldrb	r3, [r3, #12]
 800687a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800687c:	8a3b      	ldrh	r3, [r7, #16]
 800687e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00c      	beq.n	80068a0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	425b      	negs	r3, r3
 800688e:	4413      	add	r3, r2
 8006890:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3310      	adds	r3, #16
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	429a      	cmp	r2, r3
 800689a:	d20d      	bcs.n	80068b8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800689c:	2301      	movs	r3, #1
 800689e:	e01d      	b.n	80068dc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d006      	beq.n	80068b4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685a      	ldr	r2, [r3, #4]
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	425b      	negs	r3, r3
 80068ae:	4413      	add	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]
 80068b2:	e001      	b.n	80068b8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e011      	b.n	80068dc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	895a      	ldrh	r2, [r3, #10]
 80068c2:	8a7b      	ldrh	r3, [r7, #18]
 80068c4:	4413      	add	r3, r2
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	891a      	ldrh	r2, [r3, #8]
 80068d0:	8a7b      	ldrh	r3, [r7, #18]
 80068d2:	4413      	add	r3, r2
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	811a      	strh	r2, [r3, #8]


  return 0;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	0801170c 	.word	0x0801170c
 80068e8:	08011870 	.word	0x08011870
 80068ec:	0801176c 	.word	0x0801176c

080068f0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80068fa:	2200      	movs	r2, #0
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff ff8e 	bl	8006820 <pbuf_add_header_impl>
 8006904:	4603      	mov	r3, r0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d106      	bne.n	800692e <pbuf_remove_header+0x1e>
 8006920:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <pbuf_remove_header+0x94>)
 8006922:	f240 224b 	movw	r2, #587	; 0x24b
 8006926:	4920      	ldr	r1, [pc, #128]	; (80069a8 <pbuf_remove_header+0x98>)
 8006928:	4820      	ldr	r0, [pc, #128]	; (80069ac <pbuf_remove_header+0x9c>)
 800692a:	f009 f965 	bl	800fbf8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <pbuf_remove_header+0x2c>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800693a:	d301      	bcc.n	8006940 <pbuf_remove_header+0x30>
    return 1;
 800693c:	2301      	movs	r3, #1
 800693e:	e02c      	b.n	800699a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d101      	bne.n	800694a <pbuf_remove_header+0x3a>
    return 0;
 8006946:	2300      	movs	r3, #0
 8006948:	e027      	b.n	800699a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	895b      	ldrh	r3, [r3, #10]
 8006952:	89fa      	ldrh	r2, [r7, #14]
 8006954:	429a      	cmp	r2, r3
 8006956:	d908      	bls.n	800696a <pbuf_remove_header+0x5a>
 8006958:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <pbuf_remove_header+0x94>)
 800695a:	f240 2255 	movw	r2, #597	; 0x255
 800695e:	4914      	ldr	r1, [pc, #80]	; (80069b0 <pbuf_remove_header+0xa0>)
 8006960:	4812      	ldr	r0, [pc, #72]	; (80069ac <pbuf_remove_header+0x9c>)
 8006962:	f009 f949 	bl	800fbf8 <iprintf>
 8006966:	2301      	movs	r3, #1
 8006968:	e017      	b.n	800699a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	441a      	add	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	895a      	ldrh	r2, [r3, #10]
 8006980:	89fb      	ldrh	r3, [r7, #14]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	b29a      	uxth	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	891a      	ldrh	r2, [r3, #8]
 800698e:	89fb      	ldrh	r3, [r7, #14]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	b29a      	uxth	r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	0801170c 	.word	0x0801170c
 80069a8:	08011870 	.word	0x08011870
 80069ac:	0801176c 	.word	0x0801176c
 80069b0:	0801187c 	.word	0x0801187c

080069b4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	460b      	mov	r3, r1
 80069be:	807b      	strh	r3, [r7, #2]
 80069c0:	4613      	mov	r3, r2
 80069c2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80069c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da08      	bge.n	80069de <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80069cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069d0:	425b      	negs	r3, r3
 80069d2:	4619      	mov	r1, r3
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7ff ff9b 	bl	8006910 <pbuf_remove_header>
 80069da:	4603      	mov	r3, r0
 80069dc:	e007      	b.n	80069ee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80069de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80069e2:	787a      	ldrb	r2, [r7, #1]
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7ff ff1a 	bl	8006820 <pbuf_add_header_impl>
 80069ec:	4603      	mov	r3, r0
  }
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3708      	adds	r7, #8
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b082      	sub	sp, #8
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
 80069fe:	460b      	mov	r3, r1
 8006a00:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006a02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006a06:	2201      	movs	r2, #1
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7ff ffd2 	bl	80069b4 <pbuf_header_impl>
 8006a10:	4603      	mov	r3, r0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b086      	sub	sp, #24
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d106      	bne.n	8006a3e <pbuf_free+0x22>
 8006a30:	4b38      	ldr	r3, [pc, #224]	; (8006b14 <pbuf_free+0xf8>)
 8006a32:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006a36:	4938      	ldr	r1, [pc, #224]	; (8006b18 <pbuf_free+0xfc>)
 8006a38:	4838      	ldr	r0, [pc, #224]	; (8006b1c <pbuf_free+0x100>)
 8006a3a:	f009 f8dd 	bl	800fbf8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	e063      	b.n	8006b0a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006a46:	e05c      	b.n	8006b02 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	7b9b      	ldrb	r3, [r3, #14]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d106      	bne.n	8006a5e <pbuf_free+0x42>
 8006a50:	4b30      	ldr	r3, [pc, #192]	; (8006b14 <pbuf_free+0xf8>)
 8006a52:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006a56:	4932      	ldr	r1, [pc, #200]	; (8006b20 <pbuf_free+0x104>)
 8006a58:	4830      	ldr	r0, [pc, #192]	; (8006b1c <pbuf_free+0x100>)
 8006a5a:	f009 f8cd 	bl	800fbf8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	7b9b      	ldrb	r3, [r3, #14]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	739a      	strb	r2, [r3, #14]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	7b9b      	ldrb	r3, [r3, #14]
 8006a6e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006a70:	7dbb      	ldrb	r3, [r7, #22]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d143      	bne.n	8006afe <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	7b1b      	ldrb	r3, [r3, #12]
 8006a80:	f003 030f 	and.w	r3, r3, #15
 8006a84:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	7b5b      	ldrb	r3, [r3, #13]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d011      	beq.n	8006ab6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d106      	bne.n	8006aac <pbuf_free+0x90>
 8006a9e:	4b1d      	ldr	r3, [pc, #116]	; (8006b14 <pbuf_free+0xf8>)
 8006aa0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006aa4:	491f      	ldr	r1, [pc, #124]	; (8006b24 <pbuf_free+0x108>)
 8006aa6:	481d      	ldr	r0, [pc, #116]	; (8006b1c <pbuf_free+0x100>)
 8006aa8:	f009 f8a6 	bl	800fbf8 <iprintf>
        pc->custom_free_function(p);
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
 8006ab4:	e01d      	b.n	8006af2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d104      	bne.n	8006ac6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	2008      	movs	r0, #8
 8006ac0:	f7ff f936 	bl	8005d30 <memp_free>
 8006ac4:	e015      	b.n	8006af2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d104      	bne.n	8006ad6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	2007      	movs	r0, #7
 8006ad0:	f7ff f92e 	bl	8005d30 <memp_free>
 8006ad4:	e00d      	b.n	8006af2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d103      	bne.n	8006ae4 <pbuf_free+0xc8>
          mem_free(p);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7fe fdc1 	bl	8005664 <mem_free>
 8006ae2:	e006      	b.n	8006af2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006ae4:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <pbuf_free+0xf8>)
 8006ae6:	f240 320f 	movw	r2, #783	; 0x30f
 8006aea:	490f      	ldr	r1, [pc, #60]	; (8006b28 <pbuf_free+0x10c>)
 8006aec:	480b      	ldr	r0, [pc, #44]	; (8006b1c <pbuf_free+0x100>)
 8006aee:	f009 f883 	bl	800fbf8 <iprintf>
        }
      }
      count++;
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
 8006af4:	3301      	adds	r3, #1
 8006af6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	607b      	str	r3, [r7, #4]
 8006afc:	e001      	b.n	8006b02 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d19f      	bne.n	8006a48 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	0801170c 	.word	0x0801170c
 8006b18:	08011870 	.word	0x08011870
 8006b1c:	0801176c 	.word	0x0801176c
 8006b20:	0801189c 	.word	0x0801189c
 8006b24:	080118b4 	.word	0x080118b4
 8006b28:	080118d8 	.word	0x080118d8

08006b2c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006b38:	e005      	b.n	8006b46 <pbuf_clen+0x1a>
    ++len;
 8006b3a:	89fb      	ldrh	r3, [r7, #14]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1f6      	bne.n	8006b3a <pbuf_clen+0xe>
  }
  return len;
 8006b4c:	89fb      	ldrh	r3, [r7, #14]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3714      	adds	r7, #20
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
	...

08006b5c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d010      	beq.n	8006b8c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	7b9b      	ldrb	r3, [r3, #14]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	7b9b      	ldrb	r3, [r3, #14]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d106      	bne.n	8006b8c <pbuf_ref+0x30>
 8006b7e:	4b05      	ldr	r3, [pc, #20]	; (8006b94 <pbuf_ref+0x38>)
 8006b80:	f240 3242 	movw	r2, #834	; 0x342
 8006b84:	4904      	ldr	r1, [pc, #16]	; (8006b98 <pbuf_ref+0x3c>)
 8006b86:	4805      	ldr	r0, [pc, #20]	; (8006b9c <pbuf_ref+0x40>)
 8006b88:	f009 f836 	bl	800fbf8 <iprintf>
  }
}
 8006b8c:	bf00      	nop
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	0801170c 	.word	0x0801170c
 8006b98:	080118ec 	.word	0x080118ec
 8006b9c:	0801176c 	.word	0x0801176c

08006ba0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d002      	beq.n	8006bb6 <pbuf_cat+0x16>
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d107      	bne.n	8006bc6 <pbuf_cat+0x26>
 8006bb6:	4b20      	ldr	r3, [pc, #128]	; (8006c38 <pbuf_cat+0x98>)
 8006bb8:	f240 3259 	movw	r2, #857	; 0x359
 8006bbc:	491f      	ldr	r1, [pc, #124]	; (8006c3c <pbuf_cat+0x9c>)
 8006bbe:	4820      	ldr	r0, [pc, #128]	; (8006c40 <pbuf_cat+0xa0>)
 8006bc0:	f009 f81a 	bl	800fbf8 <iprintf>
 8006bc4:	e034      	b.n	8006c30 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	e00a      	b.n	8006be2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	891a      	ldrh	r2, [r3, #8]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	891b      	ldrh	r3, [r3, #8]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d1f0      	bne.n	8006bcc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	891a      	ldrh	r2, [r3, #8]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	895b      	ldrh	r3, [r3, #10]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d006      	beq.n	8006c04 <pbuf_cat+0x64>
 8006bf6:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <pbuf_cat+0x98>)
 8006bf8:	f240 3262 	movw	r2, #866	; 0x362
 8006bfc:	4911      	ldr	r1, [pc, #68]	; (8006c44 <pbuf_cat+0xa4>)
 8006bfe:	4810      	ldr	r0, [pc, #64]	; (8006c40 <pbuf_cat+0xa0>)
 8006c00:	f008 fffa 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <pbuf_cat+0x7a>
 8006c0c:	4b0a      	ldr	r3, [pc, #40]	; (8006c38 <pbuf_cat+0x98>)
 8006c0e:	f240 3263 	movw	r2, #867	; 0x363
 8006c12:	490d      	ldr	r1, [pc, #52]	; (8006c48 <pbuf_cat+0xa8>)
 8006c14:	480a      	ldr	r0, [pc, #40]	; (8006c40 <pbuf_cat+0xa0>)
 8006c16:	f008 ffef 	bl	800fbf8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	891a      	ldrh	r2, [r3, #8]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	891b      	ldrh	r3, [r3, #8]
 8006c22:	4413      	add	r3, r2
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	0801170c 	.word	0x0801170c
 8006c3c:	08011900 	.word	0x08011900
 8006c40:	0801176c 	.word	0x0801176c
 8006c44:	08011938 	.word	0x08011938
 8006c48:	08011968 	.word	0x08011968

08006c4c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006c56:	2300      	movs	r3, #0
 8006c58:	617b      	str	r3, [r7, #20]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d008      	beq.n	8006c76 <pbuf_copy+0x2a>
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <pbuf_copy+0x2a>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	891a      	ldrh	r2, [r3, #8]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	891b      	ldrh	r3, [r3, #8]
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d209      	bcs.n	8006c8a <pbuf_copy+0x3e>
 8006c76:	4b57      	ldr	r3, [pc, #348]	; (8006dd4 <pbuf_copy+0x188>)
 8006c78:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006c7c:	4956      	ldr	r1, [pc, #344]	; (8006dd8 <pbuf_copy+0x18c>)
 8006c7e:	4857      	ldr	r0, [pc, #348]	; (8006ddc <pbuf_copy+0x190>)
 8006c80:	f008 ffba 	bl	800fbf8 <iprintf>
 8006c84:	f06f 030f 	mvn.w	r3, #15
 8006c88:	e09f      	b.n	8006dca <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	895b      	ldrh	r3, [r3, #10]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	1ad2      	subs	r2, r2, r3
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	895b      	ldrh	r3, [r3, #10]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	1acb      	subs	r3, r1, r3
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d306      	bcc.n	8006cb0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	895b      	ldrh	r3, [r3, #10]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	e005      	b.n	8006cbc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	895b      	ldrh	r3, [r3, #10]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	18d0      	adds	r0, r2, r3
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	4413      	add	r3, r2
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	f008 ff62 	bl	800fb98 <memcpy>
    offset_to += len;
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006cdc:	693a      	ldr	r2, [r7, #16]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	895b      	ldrh	r3, [r3, #10]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d906      	bls.n	8006cfe <pbuf_copy+0xb2>
 8006cf0:	4b38      	ldr	r3, [pc, #224]	; (8006dd4 <pbuf_copy+0x188>)
 8006cf2:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006cf6:	493a      	ldr	r1, [pc, #232]	; (8006de0 <pbuf_copy+0x194>)
 8006cf8:	4838      	ldr	r0, [pc, #224]	; (8006ddc <pbuf_copy+0x190>)
 8006cfa:	f008 ff7d 	bl	800fbf8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	895b      	ldrh	r3, [r3, #10]
 8006d02:	461a      	mov	r2, r3
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d906      	bls.n	8006d18 <pbuf_copy+0xcc>
 8006d0a:	4b32      	ldr	r3, [pc, #200]	; (8006dd4 <pbuf_copy+0x188>)
 8006d0c:	f240 32da 	movw	r2, #986	; 0x3da
 8006d10:	4934      	ldr	r1, [pc, #208]	; (8006de4 <pbuf_copy+0x198>)
 8006d12:	4832      	ldr	r0, [pc, #200]	; (8006ddc <pbuf_copy+0x190>)
 8006d14:	f008 ff70 	bl	800fbf8 <iprintf>
    if (offset_from >= p_from->len) {
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	895b      	ldrh	r3, [r3, #10]
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d304      	bcc.n	8006d2e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	895b      	ldrh	r3, [r3, #10]
 8006d32:	461a      	mov	r2, r3
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d114      	bne.n	8006d64 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10c      	bne.n	8006d64 <pbuf_copy+0x118>
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d009      	beq.n	8006d64 <pbuf_copy+0x118>
 8006d50:	4b20      	ldr	r3, [pc, #128]	; (8006dd4 <pbuf_copy+0x188>)
 8006d52:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006d56:	4924      	ldr	r1, [pc, #144]	; (8006de8 <pbuf_copy+0x19c>)
 8006d58:	4820      	ldr	r0, [pc, #128]	; (8006ddc <pbuf_copy+0x190>)
 8006d5a:	f008 ff4d 	bl	800fbf8 <iprintf>
 8006d5e:	f06f 030f 	mvn.w	r3, #15
 8006d62:	e032      	b.n	8006dca <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d013      	beq.n	8006d92 <pbuf_copy+0x146>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	895a      	ldrh	r2, [r3, #10]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	891b      	ldrh	r3, [r3, #8]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d10d      	bne.n	8006d92 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d009      	beq.n	8006d92 <pbuf_copy+0x146>
 8006d7e:	4b15      	ldr	r3, [pc, #84]	; (8006dd4 <pbuf_copy+0x188>)
 8006d80:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006d84:	4919      	ldr	r1, [pc, #100]	; (8006dec <pbuf_copy+0x1a0>)
 8006d86:	4815      	ldr	r0, [pc, #84]	; (8006ddc <pbuf_copy+0x190>)
 8006d88:	f008 ff36 	bl	800fbf8 <iprintf>
 8006d8c:	f06f 0305 	mvn.w	r3, #5
 8006d90:	e01b      	b.n	8006dca <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d013      	beq.n	8006dc0 <pbuf_copy+0x174>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	895a      	ldrh	r2, [r3, #10]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	891b      	ldrh	r3, [r3, #8]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d10d      	bne.n	8006dc0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d009      	beq.n	8006dc0 <pbuf_copy+0x174>
 8006dac:	4b09      	ldr	r3, [pc, #36]	; (8006dd4 <pbuf_copy+0x188>)
 8006dae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006db2:	490e      	ldr	r1, [pc, #56]	; (8006dec <pbuf_copy+0x1a0>)
 8006db4:	4809      	ldr	r0, [pc, #36]	; (8006ddc <pbuf_copy+0x190>)
 8006db6:	f008 ff1f 	bl	800fbf8 <iprintf>
 8006dba:	f06f 0305 	mvn.w	r3, #5
 8006dbe:	e004      	b.n	8006dca <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f47f af61 	bne.w	8006c8a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	0801170c 	.word	0x0801170c
 8006dd8:	080119b4 	.word	0x080119b4
 8006ddc:	0801176c 	.word	0x0801176c
 8006de0:	080119e4 	.word	0x080119e4
 8006de4:	080119fc 	.word	0x080119fc
 8006de8:	08011a18 	.word	0x08011a18
 8006dec:	08011a28 	.word	0x08011a28

08006df0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b088      	sub	sp, #32
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	460b      	mov	r3, r1
 8006e00:	80fb      	strh	r3, [r7, #6]
 8006e02:	4613      	mov	r3, r2
 8006e04:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d108      	bne.n	8006e26 <pbuf_copy_partial+0x36>
 8006e14:	4b2b      	ldr	r3, [pc, #172]	; (8006ec4 <pbuf_copy_partial+0xd4>)
 8006e16:	f240 420a 	movw	r2, #1034	; 0x40a
 8006e1a:	492b      	ldr	r1, [pc, #172]	; (8006ec8 <pbuf_copy_partial+0xd8>)
 8006e1c:	482b      	ldr	r0, [pc, #172]	; (8006ecc <pbuf_copy_partial+0xdc>)
 8006e1e:	f008 feeb 	bl	800fbf8 <iprintf>
 8006e22:	2300      	movs	r3, #0
 8006e24:	e04a      	b.n	8006ebc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d108      	bne.n	8006e3e <pbuf_copy_partial+0x4e>
 8006e2c:	4b25      	ldr	r3, [pc, #148]	; (8006ec4 <pbuf_copy_partial+0xd4>)
 8006e2e:	f240 420b 	movw	r2, #1035	; 0x40b
 8006e32:	4927      	ldr	r1, [pc, #156]	; (8006ed0 <pbuf_copy_partial+0xe0>)
 8006e34:	4825      	ldr	r0, [pc, #148]	; (8006ecc <pbuf_copy_partial+0xdc>)
 8006e36:	f008 fedf 	bl	800fbf8 <iprintf>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e03e      	b.n	8006ebc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	61fb      	str	r3, [r7, #28]
 8006e42:	e034      	b.n	8006eae <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006e44:	88bb      	ldrh	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00a      	beq.n	8006e60 <pbuf_copy_partial+0x70>
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	895b      	ldrh	r3, [r3, #10]
 8006e4e:	88ba      	ldrh	r2, [r7, #4]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d305      	bcc.n	8006e60 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	895b      	ldrh	r3, [r3, #10]
 8006e58:	88ba      	ldrh	r2, [r7, #4]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	80bb      	strh	r3, [r7, #4]
 8006e5e:	e023      	b.n	8006ea8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	895a      	ldrh	r2, [r3, #10]
 8006e64:	88bb      	ldrh	r3, [r7, #4]
 8006e66:	1ad3      	subs	r3, r2, r3
 8006e68:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006e6a:	8b3a      	ldrh	r2, [r7, #24]
 8006e6c:	88fb      	ldrh	r3, [r7, #6]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d901      	bls.n	8006e76 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006e72:	88fb      	ldrh	r3, [r7, #6]
 8006e74:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006e76:	8b7b      	ldrh	r3, [r7, #26]
 8006e78:	68ba      	ldr	r2, [r7, #8]
 8006e7a:	18d0      	adds	r0, r2, r3
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	685a      	ldr	r2, [r3, #4]
 8006e80:	88bb      	ldrh	r3, [r7, #4]
 8006e82:	4413      	add	r3, r2
 8006e84:	8b3a      	ldrh	r2, [r7, #24]
 8006e86:	4619      	mov	r1, r3
 8006e88:	f008 fe86 	bl	800fb98 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006e8c:	8afa      	ldrh	r2, [r7, #22]
 8006e8e:	8b3b      	ldrh	r3, [r7, #24]
 8006e90:	4413      	add	r3, r2
 8006e92:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006e94:	8b7a      	ldrh	r2, [r7, #26]
 8006e96:	8b3b      	ldrh	r3, [r7, #24]
 8006e98:	4413      	add	r3, r2
 8006e9a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006e9c:	88fa      	ldrh	r2, [r7, #6]
 8006e9e:	8b3b      	ldrh	r3, [r7, #24]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	61fb      	str	r3, [r7, #28]
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <pbuf_copy_partial+0xca>
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1c4      	bne.n	8006e44 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006eba:	8afb      	ldrh	r3, [r7, #22]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3720      	adds	r7, #32
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	0801170c 	.word	0x0801170c
 8006ec8:	08011a54 	.word	0x08011a54
 8006ecc:	0801176c 	.word	0x0801176c
 8006ed0:	08011a74 	.word	0x08011a74

08006ed4 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8006ee2:	88fb      	ldrh	r3, [r7, #6]
 8006ee4:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d109      	bne.n	8006f04 <pbuf_take+0x30>
 8006ef0:	4b3a      	ldr	r3, [pc, #232]	; (8006fdc <pbuf_take+0x108>)
 8006ef2:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8006ef6:	493a      	ldr	r1, [pc, #232]	; (8006fe0 <pbuf_take+0x10c>)
 8006ef8:	483a      	ldr	r0, [pc, #232]	; (8006fe4 <pbuf_take+0x110>)
 8006efa:	f008 fe7d 	bl	800fbf8 <iprintf>
 8006efe:	f06f 030f 	mvn.w	r3, #15
 8006f02:	e067      	b.n	8006fd4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d109      	bne.n	8006f1e <pbuf_take+0x4a>
 8006f0a:	4b34      	ldr	r3, [pc, #208]	; (8006fdc <pbuf_take+0x108>)
 8006f0c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8006f10:	4935      	ldr	r1, [pc, #212]	; (8006fe8 <pbuf_take+0x114>)
 8006f12:	4834      	ldr	r0, [pc, #208]	; (8006fe4 <pbuf_take+0x110>)
 8006f14:	f008 fe70 	bl	800fbf8 <iprintf>
 8006f18:	f06f 030f 	mvn.w	r3, #15
 8006f1c:	e05a      	b.n	8006fd4 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	891b      	ldrh	r3, [r3, #8]
 8006f22:	88fa      	ldrh	r2, [r7, #6]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d909      	bls.n	8006f3c <pbuf_take+0x68>
 8006f28:	4b2c      	ldr	r3, [pc, #176]	; (8006fdc <pbuf_take+0x108>)
 8006f2a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8006f2e:	492f      	ldr	r1, [pc, #188]	; (8006fec <pbuf_take+0x118>)
 8006f30:	482c      	ldr	r0, [pc, #176]	; (8006fe4 <pbuf_take+0x110>)
 8006f32:	f008 fe61 	bl	800fbf8 <iprintf>
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3a:	e04b      	b.n	8006fd4 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d007      	beq.n	8006f52 <pbuf_take+0x7e>
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d004      	beq.n	8006f52 <pbuf_take+0x7e>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	891b      	ldrh	r3, [r3, #8]
 8006f4c:	88fa      	ldrh	r2, [r7, #6]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d902      	bls.n	8006f58 <pbuf_take+0x84>
    return ERR_ARG;
 8006f52:	f06f 030f 	mvn.w	r3, #15
 8006f56:	e03d      	b.n	8006fd4 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	61fb      	str	r3, [r7, #28]
 8006f5c:	e028      	b.n	8006fb0 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d106      	bne.n	8006f72 <pbuf_take+0x9e>
 8006f64:	4b1d      	ldr	r3, [pc, #116]	; (8006fdc <pbuf_take+0x108>)
 8006f66:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8006f6a:	4921      	ldr	r1, [pc, #132]	; (8006ff0 <pbuf_take+0x11c>)
 8006f6c:	481d      	ldr	r0, [pc, #116]	; (8006fe4 <pbuf_take+0x110>)
 8006f6e:	f008 fe43 	bl	800fbf8 <iprintf>
    buf_copy_len = total_copy_len;
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	895b      	ldrh	r3, [r3, #10]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d902      	bls.n	8006f88 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	895b      	ldrh	r3, [r3, #10]
 8006f86:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8006f88:	69fb      	ldr	r3, [r7, #28]
 8006f8a:	6858      	ldr	r0, [r3, #4]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	4413      	add	r3, r2
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	4619      	mov	r1, r3
 8006f96:	f008 fdff 	bl	800fb98 <memcpy>
    total_copy_len -= buf_copy_len;
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1d3      	bne.n	8006f5e <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <pbuf_take+0xf0>
 8006fbc:	88fb      	ldrh	r3, [r7, #6]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d006      	beq.n	8006fd2 <pbuf_take+0xfe>
 8006fc4:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <pbuf_take+0x108>)
 8006fc6:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8006fca:	490a      	ldr	r1, [pc, #40]	; (8006ff4 <pbuf_take+0x120>)
 8006fcc:	4805      	ldr	r0, [pc, #20]	; (8006fe4 <pbuf_take+0x110>)
 8006fce:	f008 fe13 	bl	800fbf8 <iprintf>
  return ERR_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3720      	adds	r7, #32
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	0801170c 	.word	0x0801170c
 8006fe0:	08011ae4 	.word	0x08011ae4
 8006fe4:	0801176c 	.word	0x0801176c
 8006fe8:	08011afc 	.word	0x08011afc
 8006fec:	08011b18 	.word	0x08011b18
 8006ff0:	08011b38 	.word	0x08011b38
 8006ff4:	08011b50 	.word	0x08011b50

08006ff8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	4603      	mov	r3, r0
 8007000:	603a      	str	r2, [r7, #0]
 8007002:	71fb      	strb	r3, [r7, #7]
 8007004:	460b      	mov	r3, r1
 8007006:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	8919      	ldrh	r1, [r3, #8]
 800700c:	88ba      	ldrh	r2, [r7, #4]
 800700e:	79fb      	ldrb	r3, [r7, #7]
 8007010:	4618      	mov	r0, r3
 8007012:	f7ff fa1f 	bl	8006454 <pbuf_alloc>
 8007016:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <pbuf_clone+0x2a>
    return NULL;
 800701e:	2300      	movs	r3, #0
 8007020:	e011      	b.n	8007046 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff fe11 	bl	8006c4c <pbuf_copy>
 800702a:	4603      	mov	r3, r0
 800702c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800702e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d006      	beq.n	8007044 <pbuf_clone+0x4c>
 8007036:	4b06      	ldr	r3, [pc, #24]	; (8007050 <pbuf_clone+0x58>)
 8007038:	f240 5224 	movw	r2, #1316	; 0x524
 800703c:	4905      	ldr	r1, [pc, #20]	; (8007054 <pbuf_clone+0x5c>)
 800703e:	4806      	ldr	r0, [pc, #24]	; (8007058 <pbuf_clone+0x60>)
 8007040:	f008 fdda 	bl	800fbf8 <iprintf>
  return q;
 8007044:	68fb      	ldr	r3, [r7, #12]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	0801170c 	.word	0x0801170c
 8007054:	08011b80 	.word	0x08011b80
 8007058:	0801176c 	.word	0x0801176c

0800705c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007060:	f008 fde2 	bl	800fc28 <rand>
 8007064:	4603      	mov	r3, r0
 8007066:	b29b      	uxth	r3, r3
 8007068:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800706c:	b29b      	uxth	r3, r3
 800706e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8007072:	b29a      	uxth	r2, r3
 8007074:	4b01      	ldr	r3, [pc, #4]	; (800707c <tcp_init+0x20>)
 8007076:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8007078:	bf00      	nop
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000020 	.word	0x20000020

08007080 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7d1b      	ldrb	r3, [r3, #20]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d105      	bne.n	800709c <tcp_free+0x1c>
 8007090:	4b06      	ldr	r3, [pc, #24]	; (80070ac <tcp_free+0x2c>)
 8007092:	22d4      	movs	r2, #212	; 0xd4
 8007094:	4906      	ldr	r1, [pc, #24]	; (80070b0 <tcp_free+0x30>)
 8007096:	4807      	ldr	r0, [pc, #28]	; (80070b4 <tcp_free+0x34>)
 8007098:	f008 fdae 	bl	800fbf8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800709c:	6879      	ldr	r1, [r7, #4]
 800709e:	2001      	movs	r0, #1
 80070a0:	f7fe fe46 	bl	8005d30 <memp_free>
}
 80070a4:	bf00      	nop
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	08011c0c 	.word	0x08011c0c
 80070b0:	08011c3c 	.word	0x08011c3c
 80070b4:	08011c50 	.word	0x08011c50

080070b8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	7d1b      	ldrb	r3, [r3, #20]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d105      	bne.n	80070d4 <tcp_free_listen+0x1c>
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <tcp_free_listen+0x2c>)
 80070ca:	22df      	movs	r2, #223	; 0xdf
 80070cc:	4906      	ldr	r1, [pc, #24]	; (80070e8 <tcp_free_listen+0x30>)
 80070ce:	4807      	ldr	r0, [pc, #28]	; (80070ec <tcp_free_listen+0x34>)
 80070d0:	f008 fd92 	bl	800fbf8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80070d4:	6879      	ldr	r1, [r7, #4]
 80070d6:	2002      	movs	r0, #2
 80070d8:	f7fe fe2a 	bl	8005d30 <memp_free>
}
 80070dc:	bf00      	nop
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	08011c0c 	.word	0x08011c0c
 80070e8:	08011c78 	.word	0x08011c78
 80070ec:	08011c50 	.word	0x08011c50

080070f0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80070f4:	f001 f800 	bl	80080f8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80070f8:	4b07      	ldr	r3, [pc, #28]	; (8007118 <tcp_tmr+0x28>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	3301      	adds	r3, #1
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	4b05      	ldr	r3, [pc, #20]	; (8007118 <tcp_tmr+0x28>)
 8007102:	701a      	strb	r2, [r3, #0]
 8007104:	4b04      	ldr	r3, [pc, #16]	; (8007118 <tcp_tmr+0x28>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007110:	f000 fcb2 	bl	8007a78 <tcp_slowtmr>
  }
}
 8007114:	bf00      	nop
 8007116:	bd80      	pop	{r7, pc}
 8007118:	2000839d 	.word	0x2000839d

0800711c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d105      	bne.n	8007138 <tcp_remove_listener+0x1c>
 800712c:	4b0d      	ldr	r3, [pc, #52]	; (8007164 <tcp_remove_listener+0x48>)
 800712e:	22ff      	movs	r2, #255	; 0xff
 8007130:	490d      	ldr	r1, [pc, #52]	; (8007168 <tcp_remove_listener+0x4c>)
 8007132:	480e      	ldr	r0, [pc, #56]	; (800716c <tcp_remove_listener+0x50>)
 8007134:	f008 fd60 	bl	800fbf8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	e00a      	b.n	8007154 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	429a      	cmp	r2, r3
 8007146:	d102      	bne.n	800714e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1f1      	bne.n	800713e <tcp_remove_listener+0x22>
    }
  }
}
 800715a:	bf00      	nop
 800715c:	bf00      	nop
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	08011c0c 	.word	0x08011c0c
 8007168:	08011c94 	.word	0x08011c94
 800716c:	08011c50 	.word	0x08011c50

08007170 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d106      	bne.n	800718c <tcp_listen_closed+0x1c>
 800717e:	4b14      	ldr	r3, [pc, #80]	; (80071d0 <tcp_listen_closed+0x60>)
 8007180:	f240 1211 	movw	r2, #273	; 0x111
 8007184:	4913      	ldr	r1, [pc, #76]	; (80071d4 <tcp_listen_closed+0x64>)
 8007186:	4814      	ldr	r0, [pc, #80]	; (80071d8 <tcp_listen_closed+0x68>)
 8007188:	f008 fd36 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	7d1b      	ldrb	r3, [r3, #20]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d006      	beq.n	80071a2 <tcp_listen_closed+0x32>
 8007194:	4b0e      	ldr	r3, [pc, #56]	; (80071d0 <tcp_listen_closed+0x60>)
 8007196:	f44f 7289 	mov.w	r2, #274	; 0x112
 800719a:	4910      	ldr	r1, [pc, #64]	; (80071dc <tcp_listen_closed+0x6c>)
 800719c:	480e      	ldr	r0, [pc, #56]	; (80071d8 <tcp_listen_closed+0x68>)
 800719e:	f008 fd2b 	bl	800fbf8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80071a2:	2301      	movs	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	e00b      	b.n	80071c0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80071a8:	4a0d      	ldr	r2, [pc, #52]	; (80071e0 <tcp_listen_closed+0x70>)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6879      	ldr	r1, [r7, #4]
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff ffb1 	bl	800711c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3301      	adds	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2b03      	cmp	r3, #3
 80071c4:	d9f0      	bls.n	80071a8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80071c6:	bf00      	nop
 80071c8:	bf00      	nop
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	08011c0c 	.word	0x08011c0c
 80071d4:	08011cbc 	.word	0x08011cbc
 80071d8:	08011c50 	.word	0x08011c50
 80071dc:	08011cc8 	.word	0x08011cc8
 80071e0:	08013be4 	.word	0x08013be4

080071e4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80071e4:	b5b0      	push	{r4, r5, r7, lr}
 80071e6:	b088      	sub	sp, #32
 80071e8:	af04      	add	r7, sp, #16
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	460b      	mov	r3, r1
 80071ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d106      	bne.n	8007204 <tcp_close_shutdown+0x20>
 80071f6:	4b63      	ldr	r3, [pc, #396]	; (8007384 <tcp_close_shutdown+0x1a0>)
 80071f8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80071fc:	4962      	ldr	r1, [pc, #392]	; (8007388 <tcp_close_shutdown+0x1a4>)
 80071fe:	4863      	ldr	r0, [pc, #396]	; (800738c <tcp_close_shutdown+0x1a8>)
 8007200:	f008 fcfa 	bl	800fbf8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d066      	beq.n	80072d8 <tcp_close_shutdown+0xf4>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7d1b      	ldrb	r3, [r3, #20]
 800720e:	2b04      	cmp	r3, #4
 8007210:	d003      	beq.n	800721a <tcp_close_shutdown+0x36>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	7d1b      	ldrb	r3, [r3, #20]
 8007216:	2b07      	cmp	r3, #7
 8007218:	d15e      	bne.n	80072d8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800721e:	2b00      	cmp	r3, #0
 8007220:	d104      	bne.n	800722c <tcp_close_shutdown+0x48>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007226:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800722a:	d055      	beq.n	80072d8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	8b5b      	ldrh	r3, [r3, #26]
 8007230:	f003 0310 	and.w	r3, r3, #16
 8007234:	2b00      	cmp	r3, #0
 8007236:	d106      	bne.n	8007246 <tcp_close_shutdown+0x62>
 8007238:	4b52      	ldr	r3, [pc, #328]	; (8007384 <tcp_close_shutdown+0x1a0>)
 800723a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800723e:	4954      	ldr	r1, [pc, #336]	; (8007390 <tcp_close_shutdown+0x1ac>)
 8007240:	4852      	ldr	r0, [pc, #328]	; (800738c <tcp_close_shutdown+0x1a8>)
 8007242:	f008 fcd9 	bl	800fbf8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800724e:	687d      	ldr	r5, [r7, #4]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	8ad2      	ldrh	r2, [r2, #22]
 8007258:	6879      	ldr	r1, [r7, #4]
 800725a:	8b09      	ldrh	r1, [r1, #24]
 800725c:	9102      	str	r1, [sp, #8]
 800725e:	9201      	str	r2, [sp, #4]
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	462b      	mov	r3, r5
 8007264:	4622      	mov	r2, r4
 8007266:	4601      	mov	r1, r0
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f005 fcd5 	bl	800cc18 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f001 fab2 	bl	80087d8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007274:	4b47      	ldr	r3, [pc, #284]	; (8007394 <tcp_close_shutdown+0x1b0>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	429a      	cmp	r2, r3
 800727c:	d105      	bne.n	800728a <tcp_close_shutdown+0xa6>
 800727e:	4b45      	ldr	r3, [pc, #276]	; (8007394 <tcp_close_shutdown+0x1b0>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	4a43      	ldr	r2, [pc, #268]	; (8007394 <tcp_close_shutdown+0x1b0>)
 8007286:	6013      	str	r3, [r2, #0]
 8007288:	e013      	b.n	80072b2 <tcp_close_shutdown+0xce>
 800728a:	4b42      	ldr	r3, [pc, #264]	; (8007394 <tcp_close_shutdown+0x1b0>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	60fb      	str	r3, [r7, #12]
 8007290:	e00c      	b.n	80072ac <tcp_close_shutdown+0xc8>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	429a      	cmp	r2, r3
 800729a:	d104      	bne.n	80072a6 <tcp_close_shutdown+0xc2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	60da      	str	r2, [r3, #12]
 80072a4:	e005      	b.n	80072b2 <tcp_close_shutdown+0xce>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1ef      	bne.n	8007292 <tcp_close_shutdown+0xae>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	60da      	str	r2, [r3, #12]
 80072b8:	4b37      	ldr	r3, [pc, #220]	; (8007398 <tcp_close_shutdown+0x1b4>)
 80072ba:	2201      	movs	r2, #1
 80072bc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80072be:	4b37      	ldr	r3, [pc, #220]	; (800739c <tcp_close_shutdown+0x1b8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d102      	bne.n	80072ce <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80072c8:	f003 ff4a 	bl	800b160 <tcp_trigger_input_pcb_close>
 80072cc:	e002      	b.n	80072d4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f7ff fed6 	bl	8007080 <tcp_free>
      }
      return ERR_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	e050      	b.n	800737a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	7d1b      	ldrb	r3, [r3, #20]
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d03b      	beq.n	8007358 <tcp_close_shutdown+0x174>
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	dc44      	bgt.n	800736e <tcp_close_shutdown+0x18a>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d002      	beq.n	80072ee <tcp_close_shutdown+0x10a>
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d02a      	beq.n	8007342 <tcp_close_shutdown+0x15e>
 80072ec:	e03f      	b.n	800736e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	8adb      	ldrh	r3, [r3, #22]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d021      	beq.n	800733a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80072f6:	4b2a      	ldr	r3, [pc, #168]	; (80073a0 <tcp_close_shutdown+0x1bc>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d105      	bne.n	800730c <tcp_close_shutdown+0x128>
 8007300:	4b27      	ldr	r3, [pc, #156]	; (80073a0 <tcp_close_shutdown+0x1bc>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	4a26      	ldr	r2, [pc, #152]	; (80073a0 <tcp_close_shutdown+0x1bc>)
 8007308:	6013      	str	r3, [r2, #0]
 800730a:	e013      	b.n	8007334 <tcp_close_shutdown+0x150>
 800730c:	4b24      	ldr	r3, [pc, #144]	; (80073a0 <tcp_close_shutdown+0x1bc>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	e00c      	b.n	800732e <tcp_close_shutdown+0x14a>
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d104      	bne.n	8007328 <tcp_close_shutdown+0x144>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	60da      	str	r2, [r3, #12]
 8007326:	e005      	b.n	8007334 <tcp_close_shutdown+0x150>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	60bb      	str	r3, [r7, #8]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1ef      	bne.n	8007314 <tcp_close_shutdown+0x130>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f7ff fea0 	bl	8007080 <tcp_free>
      break;
 8007340:	e01a      	b.n	8007378 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff ff14 	bl	8007170 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	4816      	ldr	r0, [pc, #88]	; (80073a4 <tcp_close_shutdown+0x1c0>)
 800734c:	f001 fa94 	bl	8008878 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff feb1 	bl	80070b8 <tcp_free_listen>
      break;
 8007356:	e00f      	b.n	8007378 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	480e      	ldr	r0, [pc, #56]	; (8007394 <tcp_close_shutdown+0x1b0>)
 800735c:	f001 fa8c 	bl	8008878 <tcp_pcb_remove>
 8007360:	4b0d      	ldr	r3, [pc, #52]	; (8007398 <tcp_close_shutdown+0x1b4>)
 8007362:	2201      	movs	r2, #1
 8007364:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f7ff fe8a 	bl	8007080 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800736c:	e004      	b.n	8007378 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f81a 	bl	80073a8 <tcp_close_shutdown_fin>
 8007374:	4603      	mov	r3, r0
 8007376:	e000      	b.n	800737a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bdb0      	pop	{r4, r5, r7, pc}
 8007382:	bf00      	nop
 8007384:	08011c0c 	.word	0x08011c0c
 8007388:	08011ce0 	.word	0x08011ce0
 800738c:	08011c50 	.word	0x08011c50
 8007390:	08011d00 	.word	0x08011d00
 8007394:	20008394 	.word	0x20008394
 8007398:	2000839c 	.word	0x2000839c
 800739c:	200083d4 	.word	0x200083d4
 80073a0:	2000838c 	.word	0x2000838c
 80073a4:	20008390 	.word	0x20008390

080073a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <tcp_close_shutdown_fin+0x1c>
 80073b6:	4b2e      	ldr	r3, [pc, #184]	; (8007470 <tcp_close_shutdown_fin+0xc8>)
 80073b8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80073bc:	492d      	ldr	r1, [pc, #180]	; (8007474 <tcp_close_shutdown_fin+0xcc>)
 80073be:	482e      	ldr	r0, [pc, #184]	; (8007478 <tcp_close_shutdown_fin+0xd0>)
 80073c0:	f008 fc1a 	bl	800fbf8 <iprintf>

  switch (pcb->state) {
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	7d1b      	ldrb	r3, [r3, #20]
 80073c8:	2b07      	cmp	r3, #7
 80073ca:	d020      	beq.n	800740e <tcp_close_shutdown_fin+0x66>
 80073cc:	2b07      	cmp	r3, #7
 80073ce:	dc2b      	bgt.n	8007428 <tcp_close_shutdown_fin+0x80>
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d002      	beq.n	80073da <tcp_close_shutdown_fin+0x32>
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d00d      	beq.n	80073f4 <tcp_close_shutdown_fin+0x4c>
 80073d8:	e026      	b.n	8007428 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f004 fd2a 	bl	800be34 <tcp_send_fin>
 80073e0:	4603      	mov	r3, r0
 80073e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80073e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d11f      	bne.n	800742c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2205      	movs	r2, #5
 80073f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80073f2:	e01b      	b.n	800742c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f004 fd1d 	bl	800be34 <tcp_send_fin>
 80073fa:	4603      	mov	r3, r0
 80073fc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80073fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d114      	bne.n	8007430 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2205      	movs	r2, #5
 800740a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800740c:	e010      	b.n	8007430 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f004 fd10 	bl	800be34 <tcp_send_fin>
 8007414:	4603      	mov	r3, r0
 8007416:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d109      	bne.n	8007434 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2209      	movs	r2, #9
 8007424:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007426:	e005      	b.n	8007434 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007428:	2300      	movs	r3, #0
 800742a:	e01c      	b.n	8007466 <tcp_close_shutdown_fin+0xbe>
      break;
 800742c:	bf00      	nop
 800742e:	e002      	b.n	8007436 <tcp_close_shutdown_fin+0x8e>
      break;
 8007430:	bf00      	nop
 8007432:	e000      	b.n	8007436 <tcp_close_shutdown_fin+0x8e>
      break;
 8007434:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d103      	bne.n	8007446 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f004 fe36 	bl	800c0b0 <tcp_output>
 8007444:	e00d      	b.n	8007462 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800744a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800744e:	d108      	bne.n	8007462 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	8b5b      	ldrh	r3, [r3, #26]
 8007454:	f043 0308 	orr.w	r3, r3, #8
 8007458:	b29a      	uxth	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	e001      	b.n	8007466 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8007462:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007466:	4618      	mov	r0, r3
 8007468:	3710      	adds	r7, #16
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	08011c0c 	.word	0x08011c0c
 8007474:	08011cbc 	.word	0x08011cbc
 8007478:	08011c50 	.word	0x08011c50

0800747c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <tcp_close+0x22>
 800748a:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <tcp_close+0x4c>)
 800748c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8007490:	490e      	ldr	r1, [pc, #56]	; (80074cc <tcp_close+0x50>)
 8007492:	480f      	ldr	r0, [pc, #60]	; (80074d0 <tcp_close+0x54>)
 8007494:	f008 fbb0 	bl	800fbf8 <iprintf>
 8007498:	f06f 030f 	mvn.w	r3, #15
 800749c:	e00f      	b.n	80074be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	7d1b      	ldrb	r3, [r3, #20]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d006      	beq.n	80074b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	8b5b      	ldrh	r3, [r3, #26]
 80074aa:	f043 0310 	orr.w	r3, r3, #16
 80074ae:	b29a      	uxth	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80074b4:	2101      	movs	r1, #1
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff fe94 	bl	80071e4 <tcp_close_shutdown>
 80074bc:	4603      	mov	r3, r0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	08011c0c 	.word	0x08011c0c
 80074cc:	08011d1c 	.word	0x08011d1c
 80074d0:	08011c50 	.word	0x08011c50

080074d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08e      	sub	sp, #56	; 0x38
 80074d8:	af04      	add	r7, sp, #16
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d107      	bne.n	80074f4 <tcp_abandon+0x20>
 80074e4:	4b52      	ldr	r3, [pc, #328]	; (8007630 <tcp_abandon+0x15c>)
 80074e6:	f240 223d 	movw	r2, #573	; 0x23d
 80074ea:	4952      	ldr	r1, [pc, #328]	; (8007634 <tcp_abandon+0x160>)
 80074ec:	4852      	ldr	r0, [pc, #328]	; (8007638 <tcp_abandon+0x164>)
 80074ee:	f008 fb83 	bl	800fbf8 <iprintf>
 80074f2:	e099      	b.n	8007628 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	7d1b      	ldrb	r3, [r3, #20]
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d106      	bne.n	800750a <tcp_abandon+0x36>
 80074fc:	4b4c      	ldr	r3, [pc, #304]	; (8007630 <tcp_abandon+0x15c>)
 80074fe:	f44f 7210 	mov.w	r2, #576	; 0x240
 8007502:	494e      	ldr	r1, [pc, #312]	; (800763c <tcp_abandon+0x168>)
 8007504:	484c      	ldr	r0, [pc, #304]	; (8007638 <tcp_abandon+0x164>)
 8007506:	f008 fb77 	bl	800fbf8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	7d1b      	ldrb	r3, [r3, #20]
 800750e:	2b0a      	cmp	r3, #10
 8007510:	d107      	bne.n	8007522 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	484a      	ldr	r0, [pc, #296]	; (8007640 <tcp_abandon+0x16c>)
 8007516:	f001 f9af 	bl	8008878 <tcp_pcb_remove>
    tcp_free(pcb);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff fdb0 	bl	8007080 <tcp_free>
 8007520:	e082      	b.n	8007628 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007534:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800753c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	7d1b      	ldrb	r3, [r3, #20]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d126      	bne.n	800759a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	8adb      	ldrh	r3, [r3, #22]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d02e      	beq.n	80075b2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007554:	4b3b      	ldr	r3, [pc, #236]	; (8007644 <tcp_abandon+0x170>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	429a      	cmp	r2, r3
 800755c:	d105      	bne.n	800756a <tcp_abandon+0x96>
 800755e:	4b39      	ldr	r3, [pc, #228]	; (8007644 <tcp_abandon+0x170>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	4a37      	ldr	r2, [pc, #220]	; (8007644 <tcp_abandon+0x170>)
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	e013      	b.n	8007592 <tcp_abandon+0xbe>
 800756a:	4b36      	ldr	r3, [pc, #216]	; (8007644 <tcp_abandon+0x170>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	61fb      	str	r3, [r7, #28]
 8007570:	e00c      	b.n	800758c <tcp_abandon+0xb8>
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	429a      	cmp	r2, r3
 800757a:	d104      	bne.n	8007586 <tcp_abandon+0xb2>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68da      	ldr	r2, [r3, #12]
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	60da      	str	r2, [r3, #12]
 8007584:	e005      	b.n	8007592 <tcp_abandon+0xbe>
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	61fb      	str	r3, [r7, #28]
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1ef      	bne.n	8007572 <tcp_abandon+0x9e>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	60da      	str	r2, [r3, #12]
 8007598:	e00b      	b.n	80075b2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	8adb      	ldrh	r3, [r3, #22]
 80075a2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80075a4:	6879      	ldr	r1, [r7, #4]
 80075a6:	4828      	ldr	r0, [pc, #160]	; (8007648 <tcp_abandon+0x174>)
 80075a8:	f001 f966 	bl	8008878 <tcp_pcb_remove>
 80075ac:	4b27      	ldr	r3, [pc, #156]	; (800764c <tcp_abandon+0x178>)
 80075ae:	2201      	movs	r2, #1
 80075b0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d004      	beq.n	80075c4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fe7a 	bl	80082b8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d004      	beq.n	80075d6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fe71 	bl	80082b8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d004      	beq.n	80075e8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 fe68 	bl	80082b8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00e      	beq.n	800760c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80075ee:	6879      	ldr	r1, [r7, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	3304      	adds	r3, #4
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	8b12      	ldrh	r2, [r2, #24]
 80075f8:	9202      	str	r2, [sp, #8]
 80075fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80075fc:	9201      	str	r2, [sp, #4]
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	460b      	mov	r3, r1
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	69b9      	ldr	r1, [r7, #24]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f005 fb06 	bl	800cc18 <tcp_rst>
    }
    last_state = pcb->state;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	7d1b      	ldrb	r3, [r3, #20]
 8007610:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7ff fd34 	bl	8007080 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d004      	beq.n	8007628 <tcp_abandon+0x154>
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	f06f 010c 	mvn.w	r1, #12
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	4798      	blx	r3
  }
}
 8007628:	3728      	adds	r7, #40	; 0x28
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	08011c0c 	.word	0x08011c0c
 8007634:	08011d50 	.word	0x08011d50
 8007638:	08011c50 	.word	0x08011c50
 800763c:	08011d6c 	.word	0x08011d6c
 8007640:	20008398 	.word	0x20008398
 8007644:	2000838c 	.word	0x2000838c
 8007648:	20008394 	.word	0x20008394
 800764c:	2000839c 	.word	0x2000839c

08007650 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007658:	2101      	movs	r1, #1
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff ff3a 	bl	80074d4 <tcp_abandon>
}
 8007660:	bf00      	nop
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d106      	bne.n	8007684 <tcp_update_rcv_ann_wnd+0x1c>
 8007676:	4b25      	ldr	r3, [pc, #148]	; (800770c <tcp_update_rcv_ann_wnd+0xa4>)
 8007678:	f240 32a6 	movw	r2, #934	; 0x3a6
 800767c:	4924      	ldr	r1, [pc, #144]	; (8007710 <tcp_update_rcv_ann_wnd+0xa8>)
 800767e:	4825      	ldr	r0, [pc, #148]	; (8007714 <tcp_update_rcv_ann_wnd+0xac>)
 8007680:	f008 faba 	bl	800fbf8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800768c:	4413      	add	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8007698:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800769c:	bf28      	it	cs
 800769e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80076a2:	b292      	uxth	r2, r2
 80076a4:	4413      	add	r3, r2
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	db08      	blt.n	80076c0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	e020      	b.n	8007702 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	dd03      	ble.n	80076d6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076d4:	e014      	b.n	8007700 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076e8:	d306      	bcc.n	80076f8 <tcp_update_rcv_ann_wnd+0x90>
 80076ea:	4b08      	ldr	r3, [pc, #32]	; (800770c <tcp_update_rcv_ann_wnd+0xa4>)
 80076ec:	f240 32b6 	movw	r2, #950	; 0x3b6
 80076f0:	4909      	ldr	r1, [pc, #36]	; (8007718 <tcp_update_rcv_ann_wnd+0xb0>)
 80076f2:	4808      	ldr	r0, [pc, #32]	; (8007714 <tcp_update_rcv_ann_wnd+0xac>)
 80076f4:	f008 fa80 	bl	800fbf8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007700:	2300      	movs	r3, #0
  }
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	08011c0c 	.word	0x08011c0c
 8007710:	08011e68 	.word	0x08011e68
 8007714:	08011c50 	.word	0x08011c50
 8007718:	08011e8c 	.word	0x08011e8c

0800771c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d107      	bne.n	800773e <tcp_recved+0x22>
 800772e:	4b1f      	ldr	r3, [pc, #124]	; (80077ac <tcp_recved+0x90>)
 8007730:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007734:	491e      	ldr	r1, [pc, #120]	; (80077b0 <tcp_recved+0x94>)
 8007736:	481f      	ldr	r0, [pc, #124]	; (80077b4 <tcp_recved+0x98>)
 8007738:	f008 fa5e 	bl	800fbf8 <iprintf>
 800773c:	e032      	b.n	80077a4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	7d1b      	ldrb	r3, [r3, #20]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d106      	bne.n	8007754 <tcp_recved+0x38>
 8007746:	4b19      	ldr	r3, [pc, #100]	; (80077ac <tcp_recved+0x90>)
 8007748:	f240 32d2 	movw	r2, #978	; 0x3d2
 800774c:	491a      	ldr	r1, [pc, #104]	; (80077b8 <tcp_recved+0x9c>)
 800774e:	4819      	ldr	r0, [pc, #100]	; (80077b4 <tcp_recved+0x98>)
 8007750:	f008 fa52 	bl	800fbf8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007758:	887b      	ldrh	r3, [r7, #2]
 800775a:	4413      	add	r3, r2
 800775c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800775e:	89fb      	ldrh	r3, [r7, #14]
 8007760:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007764:	d804      	bhi.n	8007770 <tcp_recved+0x54>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800776a:	89fa      	ldrh	r2, [r7, #14]
 800776c:	429a      	cmp	r2, r3
 800776e:	d204      	bcs.n	800777a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007776:	851a      	strh	r2, [r3, #40]	; 0x28
 8007778:	e002      	b.n	8007780 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	89fa      	ldrh	r2, [r7, #14]
 800777e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f7ff ff71 	bl	8007668 <tcp_update_rcv_ann_wnd>
 8007786:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800778e:	d309      	bcc.n	80077a4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	8b5b      	ldrh	r3, [r3, #26]
 8007794:	f043 0302 	orr.w	r3, r3, #2
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f004 fc86 	bl	800c0b0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	08011c0c 	.word	0x08011c0c
 80077b0:	08011ea8 	.word	0x08011ea8
 80077b4:	08011c50 	.word	0x08011c50
 80077b8:	08011ec0 	.word	0x08011ec0

080077bc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80077c2:	2300      	movs	r3, #0
 80077c4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80077c6:	4b1e      	ldr	r3, [pc, #120]	; (8007840 <tcp_new_port+0x84>)
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	3301      	adds	r3, #1
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	4b1c      	ldr	r3, [pc, #112]	; (8007840 <tcp_new_port+0x84>)
 80077d0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80077d2:	4b1b      	ldr	r3, [pc, #108]	; (8007840 <tcp_new_port+0x84>)
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077da:	4293      	cmp	r3, r2
 80077dc:	d103      	bne.n	80077e6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80077de:	4b18      	ldr	r3, [pc, #96]	; (8007840 <tcp_new_port+0x84>)
 80077e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80077e4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80077e6:	2300      	movs	r3, #0
 80077e8:	71fb      	strb	r3, [r7, #7]
 80077ea:	e01e      	b.n	800782a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80077ec:	79fb      	ldrb	r3, [r7, #7]
 80077ee:	4a15      	ldr	r2, [pc, #84]	; (8007844 <tcp_new_port+0x88>)
 80077f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	e011      	b.n	800781e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	8ada      	ldrh	r2, [r3, #22]
 80077fe:	4b10      	ldr	r3, [pc, #64]	; (8007840 <tcp_new_port+0x84>)
 8007800:	881b      	ldrh	r3, [r3, #0]
 8007802:	429a      	cmp	r2, r3
 8007804:	d108      	bne.n	8007818 <tcp_new_port+0x5c>
        n++;
 8007806:	88bb      	ldrh	r3, [r7, #4]
 8007808:	3301      	adds	r3, #1
 800780a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800780c:	88bb      	ldrh	r3, [r7, #4]
 800780e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007812:	d3d8      	bcc.n	80077c6 <tcp_new_port+0xa>
          return 0;
 8007814:	2300      	movs	r3, #0
 8007816:	e00d      	b.n	8007834 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	603b      	str	r3, [r7, #0]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1ea      	bne.n	80077fa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8007824:	79fb      	ldrb	r3, [r7, #7]
 8007826:	3301      	adds	r3, #1
 8007828:	71fb      	strb	r3, [r7, #7]
 800782a:	79fb      	ldrb	r3, [r7, #7]
 800782c:	2b03      	cmp	r3, #3
 800782e:	d9dd      	bls.n	80077ec <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007830:	4b03      	ldr	r3, [pc, #12]	; (8007840 <tcp_new_port+0x84>)
 8007832:	881b      	ldrh	r3, [r3, #0]
}
 8007834:	4618      	mov	r0, r3
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	20000020 	.word	0x20000020
 8007844:	08013be4 	.word	0x08013be4

08007848 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b08a      	sub	sp, #40	; 0x28
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	603b      	str	r3, [r7, #0]
 8007854:	4613      	mov	r3, r2
 8007856:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8007858:	2300      	movs	r3, #0
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d109      	bne.n	8007876 <tcp_connect+0x2e>
 8007862:	4b7d      	ldr	r3, [pc, #500]	; (8007a58 <tcp_connect+0x210>)
 8007864:	f240 4235 	movw	r2, #1077	; 0x435
 8007868:	497c      	ldr	r1, [pc, #496]	; (8007a5c <tcp_connect+0x214>)
 800786a:	487d      	ldr	r0, [pc, #500]	; (8007a60 <tcp_connect+0x218>)
 800786c:	f008 f9c4 	bl	800fbf8 <iprintf>
 8007870:	f06f 030f 	mvn.w	r3, #15
 8007874:	e0ec      	b.n	8007a50 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d109      	bne.n	8007890 <tcp_connect+0x48>
 800787c:	4b76      	ldr	r3, [pc, #472]	; (8007a58 <tcp_connect+0x210>)
 800787e:	f240 4236 	movw	r2, #1078	; 0x436
 8007882:	4978      	ldr	r1, [pc, #480]	; (8007a64 <tcp_connect+0x21c>)
 8007884:	4876      	ldr	r0, [pc, #472]	; (8007a60 <tcp_connect+0x218>)
 8007886:	f008 f9b7 	bl	800fbf8 <iprintf>
 800788a:	f06f 030f 	mvn.w	r3, #15
 800788e:	e0df      	b.n	8007a50 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	7d1b      	ldrb	r3, [r3, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d009      	beq.n	80078ac <tcp_connect+0x64>
 8007898:	4b6f      	ldr	r3, [pc, #444]	; (8007a58 <tcp_connect+0x210>)
 800789a:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800789e:	4972      	ldr	r1, [pc, #456]	; (8007a68 <tcp_connect+0x220>)
 80078a0:	486f      	ldr	r0, [pc, #444]	; (8007a60 <tcp_connect+0x218>)
 80078a2:	f008 f9a9 	bl	800fbf8 <iprintf>
 80078a6:	f06f 0309 	mvn.w	r3, #9
 80078aa:	e0d1      	b.n	8007a50 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <tcp_connect+0x70>
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	e000      	b.n	80078ba <tcp_connect+0x72>
 80078b8:	2300      	movs	r3, #0
 80078ba:	68fa      	ldr	r2, [r7, #12]
 80078bc:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	88fa      	ldrh	r2, [r7, #6]
 80078c2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	7a1b      	ldrb	r3, [r3, #8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d006      	beq.n	80078da <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	7a1b      	ldrb	r3, [r3, #8]
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe fd43 	bl	800635c <netif_get_by_index>
 80078d6:	6278      	str	r0, [r7, #36]	; 0x24
 80078d8:	e005      	b.n	80078e6 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3304      	adds	r3, #4
 80078de:	4618      	mov	r0, r3
 80078e0:	f006 ff3a 	bl	800e758 <ip4_route>
 80078e4:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 80078ec:	f06f 0303 	mvn.w	r3, #3
 80078f0:	e0ae      	b.n	8007a50 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d003      	beq.n	8007900 <tcp_connect+0xb8>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d111      	bne.n	8007924 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	2b00      	cmp	r3, #0
 8007904:	d002      	beq.n	800790c <tcp_connect+0xc4>
 8007906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007908:	3304      	adds	r3, #4
 800790a:	e000      	b.n	800790e <tcp_connect+0xc6>
 800790c:	2300      	movs	r3, #0
 800790e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d102      	bne.n	800791c <tcp_connect+0xd4>
      return ERR_RTE;
 8007916:	f06f 0303 	mvn.w	r3, #3
 800791a:	e099      	b.n	8007a50 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	8adb      	ldrh	r3, [r3, #22]
 8007928:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	8adb      	ldrh	r3, [r3, #22]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10c      	bne.n	800794c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8007932:	f7ff ff43 	bl	80077bc <tcp_new_port>
 8007936:	4603      	mov	r3, r0
 8007938:	461a      	mov	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8adb      	ldrh	r3, [r3, #22]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d102      	bne.n	800794c <tcp_connect+0x104>
      return ERR_BUF;
 8007946:	f06f 0301 	mvn.w	r3, #1
 800794a:	e081      	b.n	8007a50 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f001 f827 	bl	80089a0 <tcp_next_iss>
 8007952:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	1e5a      	subs	r2, r3, #1
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	1e5a      	subs	r2, r3, #1
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	1e5a      	subs	r2, r3, #1
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800797e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8007996:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f44f 7206 	mov.w	r2, #536	; 0x218
 80079a0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3304      	adds	r3, #4
 80079aa:	461a      	mov	r2, r3
 80079ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80079ae:	f001 f81d 	bl	80089ec <tcp_eff_send_mss_netif>
 80079b2:	4603      	mov	r3, r0
 80079b4:	461a      	mov	r2, r3
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2201      	movs	r2, #1
 80079be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 80079ca:	2102      	movs	r1, #2
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f004 fa81 	bl	800bed4 <tcp_enqueue_flags>
 80079d2:	4603      	mov	r3, r0
 80079d4:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 80079d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d136      	bne.n	8007a4c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2202      	movs	r2, #2
 80079e2:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 80079e4:	8b7b      	ldrh	r3, [r7, #26]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d021      	beq.n	8007a2e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80079ea:	4b20      	ldr	r3, [pc, #128]	; (8007a6c <tcp_connect+0x224>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d105      	bne.n	8007a00 <tcp_connect+0x1b8>
 80079f4:	4b1d      	ldr	r3, [pc, #116]	; (8007a6c <tcp_connect+0x224>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	4a1c      	ldr	r2, [pc, #112]	; (8007a6c <tcp_connect+0x224>)
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	e013      	b.n	8007a28 <tcp_connect+0x1e0>
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <tcp_connect+0x224>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	623b      	str	r3, [r7, #32]
 8007a06:	e00c      	b.n	8007a22 <tcp_connect+0x1da>
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d104      	bne.n	8007a1c <tcp_connect+0x1d4>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	60da      	str	r2, [r3, #12]
 8007a1a:	e005      	b.n	8007a28 <tcp_connect+0x1e0>
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	623b      	str	r3, [r7, #32]
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1ef      	bne.n	8007a08 <tcp_connect+0x1c0>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8007a2e:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <tcp_connect+0x228>)
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	60da      	str	r2, [r3, #12]
 8007a36:	4a0e      	ldr	r2, [pc, #56]	; (8007a70 <tcp_connect+0x228>)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6013      	str	r3, [r2, #0]
 8007a3c:	f005 faae 	bl	800cf9c <tcp_timer_needed>
 8007a40:	4b0c      	ldr	r3, [pc, #48]	; (8007a74 <tcp_connect+0x22c>)
 8007a42:	2201      	movs	r2, #1
 8007a44:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f004 fb32 	bl	800c0b0 <tcp_output>
  }
  return ret;
 8007a4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3728      	adds	r7, #40	; 0x28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	08011c0c 	.word	0x08011c0c
 8007a5c:	08011ee8 	.word	0x08011ee8
 8007a60:	08011c50 	.word	0x08011c50
 8007a64:	08011f04 	.word	0x08011f04
 8007a68:	08011f20 	.word	0x08011f20
 8007a6c:	2000838c 	.word	0x2000838c
 8007a70:	20008394 	.word	0x20008394
 8007a74:	2000839c 	.word	0x2000839c

08007a78 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8007a78:	b5b0      	push	{r4, r5, r7, lr}
 8007a7a:	b090      	sub	sp, #64	; 0x40
 8007a7c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007a84:	4b94      	ldr	r3, [pc, #592]	; (8007cd8 <tcp_slowtmr+0x260>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	4a93      	ldr	r2, [pc, #588]	; (8007cd8 <tcp_slowtmr+0x260>)
 8007a8c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007a8e:	4b93      	ldr	r3, [pc, #588]	; (8007cdc <tcp_slowtmr+0x264>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	3301      	adds	r3, #1
 8007a94:	b2da      	uxtb	r2, r3
 8007a96:	4b91      	ldr	r3, [pc, #580]	; (8007cdc <tcp_slowtmr+0x264>)
 8007a98:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007a9e:	4b90      	ldr	r3, [pc, #576]	; (8007ce0 <tcp_slowtmr+0x268>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007aa4:	e29f      	b.n	8007fe6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	7d1b      	ldrb	r3, [r3, #20]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <tcp_slowtmr+0x44>
 8007aae:	4b8d      	ldr	r3, [pc, #564]	; (8007ce4 <tcp_slowtmr+0x26c>)
 8007ab0:	f240 42be 	movw	r2, #1214	; 0x4be
 8007ab4:	498c      	ldr	r1, [pc, #560]	; (8007ce8 <tcp_slowtmr+0x270>)
 8007ab6:	488d      	ldr	r0, [pc, #564]	; (8007cec <tcp_slowtmr+0x274>)
 8007ab8:	f008 f89e 	bl	800fbf8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abe:	7d1b      	ldrb	r3, [r3, #20]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d106      	bne.n	8007ad2 <tcp_slowtmr+0x5a>
 8007ac4:	4b87      	ldr	r3, [pc, #540]	; (8007ce4 <tcp_slowtmr+0x26c>)
 8007ac6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007aca:	4989      	ldr	r1, [pc, #548]	; (8007cf0 <tcp_slowtmr+0x278>)
 8007acc:	4887      	ldr	r0, [pc, #540]	; (8007cec <tcp_slowtmr+0x274>)
 8007ace:	f008 f893 	bl	800fbf8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	7d1b      	ldrb	r3, [r3, #20]
 8007ad6:	2b0a      	cmp	r3, #10
 8007ad8:	d106      	bne.n	8007ae8 <tcp_slowtmr+0x70>
 8007ada:	4b82      	ldr	r3, [pc, #520]	; (8007ce4 <tcp_slowtmr+0x26c>)
 8007adc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007ae0:	4984      	ldr	r1, [pc, #528]	; (8007cf4 <tcp_slowtmr+0x27c>)
 8007ae2:	4882      	ldr	r0, [pc, #520]	; (8007cec <tcp_slowtmr+0x274>)
 8007ae4:	f008 f888 	bl	800fbf8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aea:	7f9a      	ldrb	r2, [r3, #30]
 8007aec:	4b7b      	ldr	r3, [pc, #492]	; (8007cdc <tcp_slowtmr+0x264>)
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d105      	bne.n	8007b00 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afa:	68db      	ldr	r3, [r3, #12]
 8007afc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007afe:	e272      	b.n	8007fe6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007b00:	4b76      	ldr	r3, [pc, #472]	; (8007cdc <tcp_slowtmr+0x264>)
 8007b02:	781a      	ldrb	r2, [r3, #0]
 8007b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b06:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	7d1b      	ldrb	r3, [r3, #20]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d10a      	bne.n	8007b32 <tcp_slowtmr+0xba>
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b22:	2b05      	cmp	r3, #5
 8007b24:	d905      	bls.n	8007b32 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007b26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b30:	e11e      	b.n	8007d70 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007b38:	2b0b      	cmp	r3, #11
 8007b3a:	d905      	bls.n	8007b48 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b40:	3301      	adds	r3, #1
 8007b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b46:	e113      	b.n	8007d70 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d075      	beq.n	8007c3e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d006      	beq.n	8007b68 <tcp_slowtmr+0xf0>
 8007b5a:	4b62      	ldr	r3, [pc, #392]	; (8007ce4 <tcp_slowtmr+0x26c>)
 8007b5c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007b60:	4965      	ldr	r1, [pc, #404]	; (8007cf8 <tcp_slowtmr+0x280>)
 8007b62:	4862      	ldr	r0, [pc, #392]	; (8007cec <tcp_slowtmr+0x274>)
 8007b64:	f008 f848 	bl	800fbf8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d106      	bne.n	8007b7e <tcp_slowtmr+0x106>
 8007b70:	4b5c      	ldr	r3, [pc, #368]	; (8007ce4 <tcp_slowtmr+0x26c>)
 8007b72:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007b76:	4961      	ldr	r1, [pc, #388]	; (8007cfc <tcp_slowtmr+0x284>)
 8007b78:	485c      	ldr	r0, [pc, #368]	; (8007cec <tcp_slowtmr+0x274>)
 8007b7a:	f008 f83d 	bl	800fbf8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007b84:	2b0b      	cmp	r3, #11
 8007b86:	d905      	bls.n	8007b94 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b92:	e0ed      	b.n	8007d70 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b96:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007b9a:	3b01      	subs	r3, #1
 8007b9c:	4a58      	ldr	r2, [pc, #352]	; (8007d00 <tcp_slowtmr+0x288>)
 8007b9e:	5cd3      	ldrb	r3, [r2, r3]
 8007ba0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007ba8:	7c7a      	ldrb	r2, [r7, #17]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d907      	bls.n	8007bbe <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007bc4:	7c7a      	ldrb	r2, [r7, #17]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	f200 80d2 	bhi.w	8007d70 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007bcc:	2301      	movs	r3, #1
 8007bce:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d108      	bne.n	8007bec <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007bda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bdc:	f005 f910 	bl	800ce00 <tcp_zero_window_probe>
 8007be0:	4603      	mov	r3, r0
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d014      	beq.n	8007c10 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007be6:	2300      	movs	r3, #0
 8007be8:	623b      	str	r3, [r7, #32]
 8007bea:	e011      	b.n	8007c10 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bf6:	f003 ffd5 	bl	800bba4 <tcp_split_unsent_seg>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d107      	bne.n	8007c10 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007c00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c02:	f004 fa55 	bl	800c0b0 <tcp_output>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007c10:	6a3b      	ldr	r3, [r7, #32]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 80ac 	beq.w	8007d70 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c22:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007c26:	2b06      	cmp	r3, #6
 8007c28:	f200 80a2 	bhi.w	8007d70 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007c32:	3301      	adds	r3, #1
 8007c34:	b2da      	uxtb	r2, r3
 8007c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c38:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007c3c:	e098      	b.n	8007d70 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	db0f      	blt.n	8007c68 <tcp_slowtmr+0x1f0>
 8007c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007c4e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d008      	beq.n	8007c68 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c58:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	3301      	adds	r3, #1
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	b21a      	sxth	r2, r3
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007c74:	429a      	cmp	r2, r3
 8007c76:	db7b      	blt.n	8007d70 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007c78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c7a:	f004 fd0b 	bl	800c694 <tcp_rexmit_rto_prepare>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d007      	beq.n	8007c94 <tcp_slowtmr+0x21c>
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d171      	bne.n	8007d70 <tcp_slowtmr+0x2f8>
 8007c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d06d      	beq.n	8007d70 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c96:	7d1b      	ldrb	r3, [r3, #20]
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d03a      	beq.n	8007d12 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ca2:	2b0c      	cmp	r3, #12
 8007ca4:	bf28      	it	cs
 8007ca6:	230c      	movcs	r3, #12
 8007ca8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cac:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007cb0:	10db      	asrs	r3, r3, #3
 8007cb2:	b21b      	sxth	r3, r3
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007cbc:	4413      	add	r3, r2
 8007cbe:	7efa      	ldrb	r2, [r7, #27]
 8007cc0:	4910      	ldr	r1, [pc, #64]	; (8007d04 <tcp_slowtmr+0x28c>)
 8007cc2:	5c8a      	ldrb	r2, [r1, r2]
 8007cc4:	4093      	lsls	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	dc1a      	bgt.n	8007d08 <tcp_slowtmr+0x290>
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	b21a      	sxth	r2, r3
 8007cd6:	e019      	b.n	8007d0c <tcp_slowtmr+0x294>
 8007cd8:	20008388 	.word	0x20008388
 8007cdc:	2000839e 	.word	0x2000839e
 8007ce0:	20008394 	.word	0x20008394
 8007ce4:	08011c0c 	.word	0x08011c0c
 8007ce8:	08011f50 	.word	0x08011f50
 8007cec:	08011c50 	.word	0x08011c50
 8007cf0:	08011f7c 	.word	0x08011f7c
 8007cf4:	08011fa8 	.word	0x08011fa8
 8007cf8:	08011fd8 	.word	0x08011fd8
 8007cfc:	0801200c 	.word	0x0801200c
 8007d00:	08013bdc 	.word	0x08013bdc
 8007d04:	08013bcc 	.word	0x08013bcc
 8007d08:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d14:	2200      	movs	r2, #0
 8007d16:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d20:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007d24:	4293      	cmp	r3, r2
 8007d26:	bf28      	it	cs
 8007d28:	4613      	movcs	r3, r2
 8007d2a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007d2c:	8a7b      	ldrh	r3, [r7, #18]
 8007d2e:	085b      	lsrs	r3, r3, #1
 8007d30:	b29a      	uxth	r2, r3
 8007d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d34:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d206      	bcs.n	8007d58 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007d4e:	005b      	lsls	r3, r3, #1
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d64:	2200      	movs	r2, #0
 8007d66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007d6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d6c:	f004 fd02 	bl	800c774 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d72:	7d1b      	ldrb	r3, [r3, #20]
 8007d74:	2b06      	cmp	r3, #6
 8007d76:	d111      	bne.n	8007d9c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7a:	8b5b      	ldrh	r3, [r3, #26]
 8007d7c:	f003 0310 	and.w	r3, r3, #16
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00b      	beq.n	8007d9c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d84:	4b9d      	ldr	r3, [pc, #628]	; (8007ffc <tcp_slowtmr+0x584>)
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b28      	cmp	r3, #40	; 0x28
 8007d90:	d904      	bls.n	8007d9c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007d92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d96:	3301      	adds	r3, #1
 8007d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9e:	7a5b      	ldrb	r3, [r3, #9]
 8007da0:	f003 0308 	and.w	r3, r3, #8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d04c      	beq.n	8007e42 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007daa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007dac:	2b04      	cmp	r3, #4
 8007dae:	d003      	beq.n	8007db8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007db4:	2b07      	cmp	r3, #7
 8007db6:	d144      	bne.n	8007e42 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007db8:	4b90      	ldr	r3, [pc, #576]	; (8007ffc <tcp_slowtmr+0x584>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	6a1b      	ldr	r3, [r3, #32]
 8007dc0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dc8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007dcc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007dd0:	498b      	ldr	r1, [pc, #556]	; (8008000 <tcp_slowtmr+0x588>)
 8007dd2:	fba1 1303 	umull	r1, r3, r1, r3
 8007dd6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d90a      	bls.n	8007df2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007de0:	3301      	adds	r3, #1
 8007de2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007de6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007dea:	3301      	adds	r3, #1
 8007dec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007df0:	e027      	b.n	8007e42 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007df2:	4b82      	ldr	r3, [pc, #520]	; (8007ffc <tcp_slowtmr+0x584>)
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	6a1b      	ldr	r3, [r3, #32]
 8007dfa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e04:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007e08:	4618      	mov	r0, r3
 8007e0a:	4b7e      	ldr	r3, [pc, #504]	; (8008004 <tcp_slowtmr+0x58c>)
 8007e0c:	fb00 f303 	mul.w	r3, r0, r3
 8007e10:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007e12:	497b      	ldr	r1, [pc, #492]	; (8008000 <tcp_slowtmr+0x588>)
 8007e14:	fba1 1303 	umull	r1, r3, r1, r3
 8007e18:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d911      	bls.n	8007e42 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007e1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e20:	f004 ffae 	bl	800cd80 <tcp_keepalive>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007e2a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d107      	bne.n	8007e42 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007e38:	3301      	adds	r3, #1
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d011      	beq.n	8007e6e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007e4a:	4b6c      	ldr	r3, [pc, #432]	; (8007ffc <tcp_slowtmr+0x584>)
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	1ad2      	subs	r2, r2, r3
 8007e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e56:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	440b      	add	r3, r1
 8007e62:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d302      	bcc.n	8007e6e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007e68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e6a:	f000 fe69 	bl	8008b40 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	7d1b      	ldrb	r3, [r3, #20]
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d10b      	bne.n	8007e8e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007e76:	4b61      	ldr	r3, [pc, #388]	; (8007ffc <tcp_slowtmr+0x584>)
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	1ad3      	subs	r3, r2, r3
 8007e80:	2b28      	cmp	r3, #40	; 0x28
 8007e82:	d904      	bls.n	8007e8e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e88:	3301      	adds	r3, #1
 8007e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e90:	7d1b      	ldrb	r3, [r3, #20]
 8007e92:	2b09      	cmp	r3, #9
 8007e94:	d10b      	bne.n	8007eae <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007e96:	4b59      	ldr	r3, [pc, #356]	; (8007ffc <tcp_slowtmr+0x584>)
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e9c:	6a1b      	ldr	r3, [r3, #32]
 8007e9e:	1ad3      	subs	r3, r2, r3
 8007ea0:	2bf0      	cmp	r3, #240	; 0xf0
 8007ea2:	d904      	bls.n	8007eae <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d060      	beq.n	8007f78 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ebc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ec0:	f000 fc8a 	bl	80087d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d010      	beq.n	8007eec <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007eca:	4b4f      	ldr	r3, [pc, #316]	; (8008008 <tcp_slowtmr+0x590>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d106      	bne.n	8007ee2 <tcp_slowtmr+0x46a>
 8007ed4:	4b4d      	ldr	r3, [pc, #308]	; (800800c <tcp_slowtmr+0x594>)
 8007ed6:	f240 526d 	movw	r2, #1389	; 0x56d
 8007eda:	494d      	ldr	r1, [pc, #308]	; (8008010 <tcp_slowtmr+0x598>)
 8007edc:	484d      	ldr	r0, [pc, #308]	; (8008014 <tcp_slowtmr+0x59c>)
 8007ede:	f007 fe8b 	bl	800fbf8 <iprintf>
        prev->next = pcb->next;
 8007ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee8:	60da      	str	r2, [r3, #12]
 8007eea:	e00f      	b.n	8007f0c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007eec:	4b46      	ldr	r3, [pc, #280]	; (8008008 <tcp_slowtmr+0x590>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d006      	beq.n	8007f04 <tcp_slowtmr+0x48c>
 8007ef6:	4b45      	ldr	r3, [pc, #276]	; (800800c <tcp_slowtmr+0x594>)
 8007ef8:	f240 5271 	movw	r2, #1393	; 0x571
 8007efc:	4946      	ldr	r1, [pc, #280]	; (8008018 <tcp_slowtmr+0x5a0>)
 8007efe:	4845      	ldr	r0, [pc, #276]	; (8008014 <tcp_slowtmr+0x59c>)
 8007f00:	f007 fe7a 	bl	800fbf8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	4a3f      	ldr	r2, [pc, #252]	; (8008008 <tcp_slowtmr+0x590>)
 8007f0a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007f0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d013      	beq.n	8007f3c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f16:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f1a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007f1c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f20:	3304      	adds	r3, #4
 8007f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f24:	8ad2      	ldrh	r2, [r2, #22]
 8007f26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f28:	8b09      	ldrh	r1, [r1, #24]
 8007f2a:	9102      	str	r1, [sp, #8]
 8007f2c:	9201      	str	r2, [sp, #4]
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	462b      	mov	r3, r5
 8007f32:	4622      	mov	r2, r4
 8007f34:	4601      	mov	r1, r0
 8007f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f38:	f004 fe6e 	bl	800cc18 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f44:	7d1b      	ldrb	r3, [r3, #20]
 8007f46:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007f52:	6838      	ldr	r0, [r7, #0]
 8007f54:	f7ff f894 	bl	8007080 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007f58:	4b30      	ldr	r3, [pc, #192]	; (800801c <tcp_slowtmr+0x5a4>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d004      	beq.n	8007f6e <tcp_slowtmr+0x4f6>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f06f 010c 	mvn.w	r1, #12
 8007f6a:	68b8      	ldr	r0, [r7, #8]
 8007f6c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007f6e:	4b2b      	ldr	r3, [pc, #172]	; (800801c <tcp_slowtmr+0x5a4>)
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d037      	beq.n	8007fe6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007f76:	e590      	b.n	8007a9a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f84:	7f1b      	ldrb	r3, [r3, #28]
 8007f86:	3301      	adds	r3, #1
 8007f88:	b2da      	uxtb	r2, r3
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f90:	7f1a      	ldrb	r2, [r3, #28]
 8007f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f94:	7f5b      	ldrb	r3, [r3, #29]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d325      	bcc.n	8007fe6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007fa0:	4b1e      	ldr	r3, [pc, #120]	; (800801c <tcp_slowtmr+0x5a4>)
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00b      	beq.n	8007fc8 <tcp_slowtmr+0x550>
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fb8:	6912      	ldr	r2, [r2, #16]
 8007fba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	4798      	blx	r3
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007fc6:	e002      	b.n	8007fce <tcp_slowtmr+0x556>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007fce:	4b13      	ldr	r3, [pc, #76]	; (800801c <tcp_slowtmr+0x5a4>)
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d000      	beq.n	8007fd8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8007fd6:	e560      	b.n	8007a9a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007fd8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d102      	bne.n	8007fe6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fe2:	f004 f865 	bl	800c0b0 <tcp_output>
  while (pcb != NULL) {
 8007fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f47f ad5c 	bne.w	8007aa6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007ff2:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <tcp_slowtmr+0x5a8>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007ff8:	e067      	b.n	80080ca <tcp_slowtmr+0x652>
 8007ffa:	bf00      	nop
 8007ffc:	20008388 	.word	0x20008388
 8008000:	10624dd3 	.word	0x10624dd3
 8008004:	000124f8 	.word	0x000124f8
 8008008:	20008394 	.word	0x20008394
 800800c:	08011c0c 	.word	0x08011c0c
 8008010:	08012044 	.word	0x08012044
 8008014:	08011c50 	.word	0x08011c50
 8008018:	08012070 	.word	0x08012070
 800801c:	2000839c 	.word	0x2000839c
 8008020:	20008398 	.word	0x20008398
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008026:	7d1b      	ldrb	r3, [r3, #20]
 8008028:	2b0a      	cmp	r3, #10
 800802a:	d006      	beq.n	800803a <tcp_slowtmr+0x5c2>
 800802c:	4b2b      	ldr	r3, [pc, #172]	; (80080dc <tcp_slowtmr+0x664>)
 800802e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8008032:	492b      	ldr	r1, [pc, #172]	; (80080e0 <tcp_slowtmr+0x668>)
 8008034:	482b      	ldr	r0, [pc, #172]	; (80080e4 <tcp_slowtmr+0x66c>)
 8008036:	f007 fddf 	bl	800fbf8 <iprintf>
    pcb_remove = 0;
 800803a:	2300      	movs	r3, #0
 800803c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008040:	4b29      	ldr	r3, [pc, #164]	; (80080e8 <tcp_slowtmr+0x670>)
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008046:	6a1b      	ldr	r3, [r3, #32]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	2bf0      	cmp	r3, #240	; 0xf0
 800804c:	d904      	bls.n	8008058 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800804e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008052:	3301      	adds	r3, #1
 8008054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8008058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800805c:	2b00      	cmp	r3, #0
 800805e:	d02f      	beq.n	80080c0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8008060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008062:	f000 fbb9 	bl	80087d8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8008066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008068:	2b00      	cmp	r3, #0
 800806a:	d010      	beq.n	800808e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800806c:	4b1f      	ldr	r3, [pc, #124]	; (80080ec <tcp_slowtmr+0x674>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008072:	429a      	cmp	r2, r3
 8008074:	d106      	bne.n	8008084 <tcp_slowtmr+0x60c>
 8008076:	4b19      	ldr	r3, [pc, #100]	; (80080dc <tcp_slowtmr+0x664>)
 8008078:	f240 52af 	movw	r2, #1455	; 0x5af
 800807c:	491c      	ldr	r1, [pc, #112]	; (80080f0 <tcp_slowtmr+0x678>)
 800807e:	4819      	ldr	r0, [pc, #100]	; (80080e4 <tcp_slowtmr+0x66c>)
 8008080:	f007 fdba 	bl	800fbf8 <iprintf>
        prev->next = pcb->next;
 8008084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008086:	68da      	ldr	r2, [r3, #12]
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	60da      	str	r2, [r3, #12]
 800808c:	e00f      	b.n	80080ae <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800808e:	4b17      	ldr	r3, [pc, #92]	; (80080ec <tcp_slowtmr+0x674>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008094:	429a      	cmp	r2, r3
 8008096:	d006      	beq.n	80080a6 <tcp_slowtmr+0x62e>
 8008098:	4b10      	ldr	r3, [pc, #64]	; (80080dc <tcp_slowtmr+0x664>)
 800809a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800809e:	4915      	ldr	r1, [pc, #84]	; (80080f4 <tcp_slowtmr+0x67c>)
 80080a0:	4810      	ldr	r0, [pc, #64]	; (80080e4 <tcp_slowtmr+0x66c>)
 80080a2:	f007 fda9 	bl	800fbf8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80080a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	4a10      	ldr	r2, [pc, #64]	; (80080ec <tcp_slowtmr+0x674>)
 80080ac:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80080ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80080b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80080b8:	69f8      	ldr	r0, [r7, #28]
 80080ba:	f7fe ffe1 	bl	8007080 <tcp_free>
 80080be:	e004      	b.n	80080ca <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80080c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80080c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80080ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1a9      	bne.n	8008024 <tcp_slowtmr+0x5ac>
    }
  }
}
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	3730      	adds	r7, #48	; 0x30
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bdb0      	pop	{r4, r5, r7, pc}
 80080da:	bf00      	nop
 80080dc:	08011c0c 	.word	0x08011c0c
 80080e0:	0801209c 	.word	0x0801209c
 80080e4:	08011c50 	.word	0x08011c50
 80080e8:	20008388 	.word	0x20008388
 80080ec:	20008398 	.word	0x20008398
 80080f0:	080120cc 	.word	0x080120cc
 80080f4:	080120f4 	.word	0x080120f4

080080f8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80080fe:	4b2d      	ldr	r3, [pc, #180]	; (80081b4 <tcp_fasttmr+0xbc>)
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	3301      	adds	r3, #1
 8008104:	b2da      	uxtb	r2, r3
 8008106:	4b2b      	ldr	r3, [pc, #172]	; (80081b4 <tcp_fasttmr+0xbc>)
 8008108:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800810a:	4b2b      	ldr	r3, [pc, #172]	; (80081b8 <tcp_fasttmr+0xc0>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008110:	e048      	b.n	80081a4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	7f9a      	ldrb	r2, [r3, #30]
 8008116:	4b27      	ldr	r3, [pc, #156]	; (80081b4 <tcp_fasttmr+0xbc>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d03f      	beq.n	800819e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800811e:	4b25      	ldr	r3, [pc, #148]	; (80081b4 <tcp_fasttmr+0xbc>)
 8008120:	781a      	ldrb	r2, [r3, #0]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	8b5b      	ldrh	r3, [r3, #26]
 800812a:	f003 0301 	and.w	r3, r3, #1
 800812e:	2b00      	cmp	r3, #0
 8008130:	d010      	beq.n	8008154 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	8b5b      	ldrh	r3, [r3, #26]
 8008136:	f043 0302 	orr.w	r3, r3, #2
 800813a:	b29a      	uxth	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f003 ffb5 	bl	800c0b0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	8b5b      	ldrh	r3, [r3, #26]
 800814a:	f023 0303 	bic.w	r3, r3, #3
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	8b5b      	ldrh	r3, [r3, #26]
 8008158:	f003 0308 	and.w	r3, r3, #8
 800815c:	2b00      	cmp	r3, #0
 800815e:	d009      	beq.n	8008174 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	8b5b      	ldrh	r3, [r3, #26]
 8008164:	f023 0308 	bic.w	r3, r3, #8
 8008168:	b29a      	uxth	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f7ff f91a 	bl	80073a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8008182:	4b0e      	ldr	r3, [pc, #56]	; (80081bc <tcp_fasttmr+0xc4>)
 8008184:	2200      	movs	r2, #0
 8008186:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f819 	bl	80081c0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800818e:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <tcp_fasttmr+0xc4>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d000      	beq.n	8008198 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008196:	e7b8      	b.n	800810a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	607b      	str	r3, [r7, #4]
 800819c:	e002      	b.n	80081a4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1b3      	bne.n	8008112 <tcp_fasttmr+0x1a>
    }
  }
}
 80081aa:	bf00      	nop
 80081ac:	bf00      	nop
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	2000839e 	.word	0x2000839e
 80081b8:	20008394 	.word	0x20008394
 80081bc:	2000839c 	.word	0x2000839c

080081c0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80081c0:	b590      	push	{r4, r7, lr}
 80081c2:	b085      	sub	sp, #20
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d109      	bne.n	80081e2 <tcp_process_refused_data+0x22>
 80081ce:	4b37      	ldr	r3, [pc, #220]	; (80082ac <tcp_process_refused_data+0xec>)
 80081d0:	f240 6209 	movw	r2, #1545	; 0x609
 80081d4:	4936      	ldr	r1, [pc, #216]	; (80082b0 <tcp_process_refused_data+0xf0>)
 80081d6:	4837      	ldr	r0, [pc, #220]	; (80082b4 <tcp_process_refused_data+0xf4>)
 80081d8:	f007 fd0e 	bl	800fbf8 <iprintf>
 80081dc:	f06f 030f 	mvn.w	r3, #15
 80081e0:	e060      	b.n	80082a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081e6:	7b5b      	ldrb	r3, [r3, #13]
 80081e8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081ee:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00b      	beq.n	8008218 <tcp_process_refused_data+0x58>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6918      	ldr	r0, [r3, #16]
 800820a:	2300      	movs	r3, #0
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	47a0      	blx	r4
 8008212:	4603      	mov	r3, r0
 8008214:	73fb      	strb	r3, [r7, #15]
 8008216:	e007      	b.n	8008228 <tcp_process_refused_data+0x68>
 8008218:	2300      	movs	r3, #0
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	6879      	ldr	r1, [r7, #4]
 800821e:	2000      	movs	r0, #0
 8008220:	f000 f8a4 	bl	800836c <tcp_recv_null>
 8008224:	4603      	mov	r3, r0
 8008226:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8008228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d12a      	bne.n	8008286 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008230:	7bbb      	ldrb	r3, [r7, #14]
 8008232:	f003 0320 	and.w	r3, r3, #32
 8008236:	2b00      	cmp	r3, #0
 8008238:	d033      	beq.n	80082a2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800823e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008242:	d005      	beq.n	8008250 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008248:	3301      	adds	r3, #1
 800824a:	b29a      	uxth	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00b      	beq.n	8008272 <tcp_process_refused_data+0xb2>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6918      	ldr	r0, [r3, #16]
 8008264:	2300      	movs	r3, #0
 8008266:	2200      	movs	r2, #0
 8008268:	6879      	ldr	r1, [r7, #4]
 800826a:	47a0      	blx	r4
 800826c:	4603      	mov	r3, r0
 800826e:	73fb      	strb	r3, [r7, #15]
 8008270:	e001      	b.n	8008276 <tcp_process_refused_data+0xb6>
 8008272:	2300      	movs	r3, #0
 8008274:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8008276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800827a:	f113 0f0d 	cmn.w	r3, #13
 800827e:	d110      	bne.n	80082a2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008280:	f06f 030c 	mvn.w	r3, #12
 8008284:	e00e      	b.n	80082a4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800828a:	f113 0f0d 	cmn.w	r3, #13
 800828e:	d102      	bne.n	8008296 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008290:	f06f 030c 	mvn.w	r3, #12
 8008294:	e006      	b.n	80082a4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800829c:	f06f 0304 	mvn.w	r3, #4
 80082a0:	e000      	b.n	80082a4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd90      	pop	{r4, r7, pc}
 80082ac:	08011c0c 	.word	0x08011c0c
 80082b0:	0801211c 	.word	0x0801211c
 80082b4:	08011c50 	.word	0x08011c50

080082b8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80082c0:	e007      	b.n	80082d2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f80a 	bl	80082e2 <tcp_seg_free>
    seg = next;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1f4      	bne.n	80082c2 <tcp_segs_free+0xa>
  }
}
 80082d8:	bf00      	nop
 80082da:	bf00      	nop
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b082      	sub	sp, #8
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00c      	beq.n	800830a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d004      	beq.n	8008302 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7fe fb8d 	bl	8006a1c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008302:	6879      	ldr	r1, [r7, #4]
 8008304:	2003      	movs	r0, #3
 8008306:	f7fd fd13 	bl	8005d30 <memp_free>
  }
}
 800830a:	bf00      	nop
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
	...

08008314 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d106      	bne.n	8008330 <tcp_seg_copy+0x1c>
 8008322:	4b0f      	ldr	r3, [pc, #60]	; (8008360 <tcp_seg_copy+0x4c>)
 8008324:	f240 6282 	movw	r2, #1666	; 0x682
 8008328:	490e      	ldr	r1, [pc, #56]	; (8008364 <tcp_seg_copy+0x50>)
 800832a:	480f      	ldr	r0, [pc, #60]	; (8008368 <tcp_seg_copy+0x54>)
 800832c:	f007 fc64 	bl	800fbf8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008330:	2003      	movs	r0, #3
 8008332:	f7fd fc8d 	bl	8005c50 <memp_malloc>
 8008336:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d101      	bne.n	8008342 <tcp_seg_copy+0x2e>
    return NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	e00a      	b.n	8008358 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008342:	2210      	movs	r2, #16
 8008344:	6879      	ldr	r1, [r7, #4]
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f007 fc26 	bl	800fb98 <memcpy>
  pbuf_ref(cseg->p);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe fc03 	bl	8006b5c <pbuf_ref>
  return cseg;
 8008356:	68fb      	ldr	r3, [r7, #12]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	08011c0c 	.word	0x08011c0c
 8008364:	08012160 	.word	0x08012160
 8008368:	08011c50 	.word	0x08011c50

0800836c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d109      	bne.n	8008394 <tcp_recv_null+0x28>
 8008380:	4b12      	ldr	r3, [pc, #72]	; (80083cc <tcp_recv_null+0x60>)
 8008382:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008386:	4912      	ldr	r1, [pc, #72]	; (80083d0 <tcp_recv_null+0x64>)
 8008388:	4812      	ldr	r0, [pc, #72]	; (80083d4 <tcp_recv_null+0x68>)
 800838a:	f007 fc35 	bl	800fbf8 <iprintf>
 800838e:	f06f 030f 	mvn.w	r3, #15
 8008392:	e016      	b.n	80083c2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d009      	beq.n	80083ae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	891b      	ldrh	r3, [r3, #8]
 800839e:	4619      	mov	r1, r3
 80083a0:	68b8      	ldr	r0, [r7, #8]
 80083a2:	f7ff f9bb 	bl	800771c <tcp_recved>
    pbuf_free(p);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7fe fb38 	bl	8006a1c <pbuf_free>
 80083ac:	e008      	b.n	80083c0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80083ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d104      	bne.n	80083c0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80083b6:	68b8      	ldr	r0, [r7, #8]
 80083b8:	f7ff f860 	bl	800747c <tcp_close>
 80083bc:	4603      	mov	r3, r0
 80083be:	e000      	b.n	80083c2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	08011c0c 	.word	0x08011c0c
 80083d0:	0801217c 	.word	0x0801217c
 80083d4:	08011c50 	.word	0x08011c50

080083d8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	4603      	mov	r3, r0
 80083e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80083e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	db01      	blt.n	80083ee <tcp_kill_prio+0x16>
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	e000      	b.n	80083f0 <tcp_kill_prio+0x18>
 80083ee:	237f      	movs	r3, #127	; 0x7f
 80083f0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80083f2:	7afb      	ldrb	r3, [r7, #11]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d034      	beq.n	8008462 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80083f8:	7afb      	ldrb	r3, [r7, #11]
 80083fa:	3b01      	subs	r3, #1
 80083fc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008402:	2300      	movs	r3, #0
 8008404:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008406:	4b19      	ldr	r3, [pc, #100]	; (800846c <tcp_kill_prio+0x94>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	e01f      	b.n	800844e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	7d5b      	ldrb	r3, [r3, #21]
 8008412:	7afa      	ldrb	r2, [r7, #11]
 8008414:	429a      	cmp	r2, r3
 8008416:	d80c      	bhi.n	8008432 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800841c:	7afa      	ldrb	r2, [r7, #11]
 800841e:	429a      	cmp	r2, r3
 8008420:	d112      	bne.n	8008448 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008422:	4b13      	ldr	r3, [pc, #76]	; (8008470 <tcp_kill_prio+0x98>)
 8008424:	681a      	ldr	r2, [r3, #0]
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	1ad3      	subs	r3, r2, r3
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	429a      	cmp	r2, r3
 8008430:	d80a      	bhi.n	8008448 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008432:	4b0f      	ldr	r3, [pc, #60]	; (8008470 <tcp_kill_prio+0x98>)
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	7d5b      	ldrb	r3, [r3, #21]
 8008446:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1dc      	bne.n	800840e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d004      	beq.n	8008464 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800845a:	6938      	ldr	r0, [r7, #16]
 800845c:	f7ff f8f8 	bl	8007650 <tcp_abort>
 8008460:	e000      	b.n	8008464 <tcp_kill_prio+0x8c>
    return;
 8008462:	bf00      	nop
  }
}
 8008464:	3718      	adds	r7, #24
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	20008394 	.word	0x20008394
 8008470:	20008388 	.word	0x20008388

08008474 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	2b08      	cmp	r3, #8
 8008482:	d009      	beq.n	8008498 <tcp_kill_state+0x24>
 8008484:	79fb      	ldrb	r3, [r7, #7]
 8008486:	2b09      	cmp	r3, #9
 8008488:	d006      	beq.n	8008498 <tcp_kill_state+0x24>
 800848a:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <tcp_kill_state+0x80>)
 800848c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008490:	4919      	ldr	r1, [pc, #100]	; (80084f8 <tcp_kill_state+0x84>)
 8008492:	481a      	ldr	r0, [pc, #104]	; (80084fc <tcp_kill_state+0x88>)
 8008494:	f007 fbb0 	bl	800fbf8 <iprintf>

  inactivity = 0;
 8008498:	2300      	movs	r3, #0
 800849a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800849c:	2300      	movs	r3, #0
 800849e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80084a0:	4b17      	ldr	r3, [pc, #92]	; (8008500 <tcp_kill_state+0x8c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	e017      	b.n	80084d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	7d1b      	ldrb	r3, [r3, #20]
 80084ac:	79fa      	ldrb	r2, [r7, #7]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d10f      	bne.n	80084d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80084b2:	4b14      	ldr	r3, [pc, #80]	; (8008504 <tcp_kill_state+0x90>)
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	429a      	cmp	r2, r3
 80084c0:	d807      	bhi.n	80084d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80084c2:	4b10      	ldr	r3, [pc, #64]	; (8008504 <tcp_kill_state+0x90>)
 80084c4:	681a      	ldr	r2, [r3, #0]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	1ad3      	subs	r3, r2, r3
 80084cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	617b      	str	r3, [r7, #20]
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1e4      	bne.n	80084a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80084e4:	2100      	movs	r1, #0
 80084e6:	6938      	ldr	r0, [r7, #16]
 80084e8:	f7fe fff4 	bl	80074d4 <tcp_abandon>
  }
}
 80084ec:	bf00      	nop
 80084ee:	3718      	adds	r7, #24
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	08011c0c 	.word	0x08011c0c
 80084f8:	08012198 	.word	0x08012198
 80084fc:	08011c50 	.word	0x08011c50
 8008500:	20008394 	.word	0x20008394
 8008504:	20008388 	.word	0x20008388

08008508 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b084      	sub	sp, #16
 800850c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8008512:	2300      	movs	r3, #0
 8008514:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008516:	4b12      	ldr	r3, [pc, #72]	; (8008560 <tcp_kill_timewait+0x58>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	e012      	b.n	8008544 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800851e:	4b11      	ldr	r3, [pc, #68]	; (8008564 <tcp_kill_timewait+0x5c>)
 8008520:	681a      	ldr	r2, [r3, #0]
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	429a      	cmp	r2, r3
 800852c:	d807      	bhi.n	800853e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800852e:	4b0d      	ldr	r3, [pc, #52]	; (8008564 <tcp_kill_timewait+0x5c>)
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6a1b      	ldr	r3, [r3, #32]
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e9      	bne.n	800851e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d002      	beq.n	8008556 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008550:	68b8      	ldr	r0, [r7, #8]
 8008552:	f7ff f87d 	bl	8007650 <tcp_abort>
  }
}
 8008556:	bf00      	nop
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	20008398 	.word	0x20008398
 8008564:	20008388 	.word	0x20008388

08008568 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800856e:	4b10      	ldr	r3, [pc, #64]	; (80085b0 <tcp_handle_closepend+0x48>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008574:	e014      	b.n	80085a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	8b5b      	ldrh	r3, [r3, #26]
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b00      	cmp	r3, #0
 8008586:	d009      	beq.n	800859c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	8b5b      	ldrh	r3, [r3, #26]
 800858c:	f023 0308 	bic.w	r3, r3, #8
 8008590:	b29a      	uxth	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7fe ff06 	bl	80073a8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e7      	bne.n	8008576 <tcp_handle_closepend+0xe>
  }
}
 80085a6:	bf00      	nop
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	20008394 	.word	0x20008394

080085b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b084      	sub	sp, #16
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	4603      	mov	r3, r0
 80085bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80085be:	2001      	movs	r0, #1
 80085c0:	f7fd fb46 	bl	8005c50 <memp_malloc>
 80085c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d126      	bne.n	800861a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80085cc:	f7ff ffcc 	bl	8008568 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80085d0:	f7ff ff9a 	bl	8008508 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80085d4:	2001      	movs	r0, #1
 80085d6:	f7fd fb3b 	bl	8005c50 <memp_malloc>
 80085da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d11b      	bne.n	800861a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80085e2:	2009      	movs	r0, #9
 80085e4:	f7ff ff46 	bl	8008474 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80085e8:	2001      	movs	r0, #1
 80085ea:	f7fd fb31 	bl	8005c50 <memp_malloc>
 80085ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d111      	bne.n	800861a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80085f6:	2008      	movs	r0, #8
 80085f8:	f7ff ff3c 	bl	8008474 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80085fc:	2001      	movs	r0, #1
 80085fe:	f7fd fb27 	bl	8005c50 <memp_malloc>
 8008602:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d107      	bne.n	800861a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	4618      	mov	r0, r3
 800860e:	f7ff fee3 	bl	80083d8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008612:	2001      	movs	r0, #1
 8008614:	f7fd fb1c 	bl	8005c50 <memp_malloc>
 8008618:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d03f      	beq.n	80086a0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008620:	229c      	movs	r2, #156	; 0x9c
 8008622:	2100      	movs	r1, #0
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f007 fadf 	bl	800fbe8 <memset>
    pcb->prio = prio;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	79fa      	ldrb	r2, [r7, #7]
 800862e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008636:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008640:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	22ff      	movs	r2, #255	; 0xff
 800864e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008656:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2206      	movs	r2, #6
 800865c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2206      	movs	r2, #6
 8008664:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800866c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2201      	movs	r2, #1
 8008672:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008676:	4b0d      	ldr	r3, [pc, #52]	; (80086ac <tcp_alloc+0xf8>)
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800867e:	4b0c      	ldr	r3, [pc, #48]	; (80086b0 <tcp_alloc+0xfc>)
 8008680:	781a      	ldrb	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800868c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4a08      	ldr	r2, [pc, #32]	; (80086b4 <tcp_alloc+0x100>)
 8008694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4a07      	ldr	r2, [pc, #28]	; (80086b8 <tcp_alloc+0x104>)
 800869c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80086a0:	68fb      	ldr	r3, [r7, #12]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	20008388 	.word	0x20008388
 80086b0:	2000839e 	.word	0x2000839e
 80086b4:	0800836d 	.word	0x0800836d
 80086b8:	006ddd00 	.word	0x006ddd00

080086bc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80086c0:	2040      	movs	r0, #64	; 0x40
 80086c2:	f7ff ff77 	bl	80085b4 <tcp_alloc>
 80086c6:	4603      	mov	r3, r0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	bd80      	pop	{r7, pc}

080086cc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b083      	sub	sp, #12
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d002      	beq.n	80086e2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	611a      	str	r2, [r3, #16]
  }
}
 80086e2:	bf00      	nop
 80086e4:	370c      	adds	r7, #12
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
	...

080086f0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00e      	beq.n	800871e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	7d1b      	ldrb	r3, [r3, #20]
 8008704:	2b01      	cmp	r3, #1
 8008706:	d106      	bne.n	8008716 <tcp_recv+0x26>
 8008708:	4b07      	ldr	r3, [pc, #28]	; (8008728 <tcp_recv+0x38>)
 800870a:	f240 72df 	movw	r2, #2015	; 0x7df
 800870e:	4907      	ldr	r1, [pc, #28]	; (800872c <tcp_recv+0x3c>)
 8008710:	4807      	ldr	r0, [pc, #28]	; (8008730 <tcp_recv+0x40>)
 8008712:	f007 fa71 	bl	800fbf8 <iprintf>
    pcb->recv = recv;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	683a      	ldr	r2, [r7, #0]
 800871a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800871e:	bf00      	nop
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	08011c0c 	.word	0x08011c0c
 800872c:	080121a8 	.word	0x080121a8
 8008730:	08011c50 	.word	0x08011c50

08008734 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00e      	beq.n	8008762 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	7d1b      	ldrb	r3, [r3, #20]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d106      	bne.n	800875a <tcp_sent+0x26>
 800874c:	4b07      	ldr	r3, [pc, #28]	; (800876c <tcp_sent+0x38>)
 800874e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008752:	4907      	ldr	r1, [pc, #28]	; (8008770 <tcp_sent+0x3c>)
 8008754:	4807      	ldr	r0, [pc, #28]	; (8008774 <tcp_sent+0x40>)
 8008756:	f007 fa4f 	bl	800fbf8 <iprintf>
    pcb->sent = sent;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	683a      	ldr	r2, [r7, #0]
 800875e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	08011c0c 	.word	0x08011c0c
 8008770:	080121d0 	.word	0x080121d0
 8008774:	08011c50 	.word	0x08011c50

08008778 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	4613      	mov	r3, r2
 8008784:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d107      	bne.n	800879c <tcp_poll+0x24>
 800878c:	4b0e      	ldr	r3, [pc, #56]	; (80087c8 <tcp_poll+0x50>)
 800878e:	f640 023d 	movw	r2, #2109	; 0x83d
 8008792:	490e      	ldr	r1, [pc, #56]	; (80087cc <tcp_poll+0x54>)
 8008794:	480e      	ldr	r0, [pc, #56]	; (80087d0 <tcp_poll+0x58>)
 8008796:	f007 fa2f 	bl	800fbf8 <iprintf>
 800879a:	e011      	b.n	80087c0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	7d1b      	ldrb	r3, [r3, #20]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d106      	bne.n	80087b2 <tcp_poll+0x3a>
 80087a4:	4b08      	ldr	r3, [pc, #32]	; (80087c8 <tcp_poll+0x50>)
 80087a6:	f640 023e 	movw	r2, #2110	; 0x83e
 80087aa:	490a      	ldr	r1, [pc, #40]	; (80087d4 <tcp_poll+0x5c>)
 80087ac:	4808      	ldr	r0, [pc, #32]	; (80087d0 <tcp_poll+0x58>)
 80087ae:	f007 fa23 	bl	800fbf8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	79fa      	ldrb	r2, [r7, #7]
 80087be:	775a      	strb	r2, [r3, #29]
}
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	08011c0c 	.word	0x08011c0c
 80087cc:	08012220 	.word	0x08012220
 80087d0:	08011c50 	.word	0x08011c50
 80087d4:	08012238 	.word	0x08012238

080087d8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d107      	bne.n	80087f6 <tcp_pcb_purge+0x1e>
 80087e6:	4b21      	ldr	r3, [pc, #132]	; (800886c <tcp_pcb_purge+0x94>)
 80087e8:	f640 0251 	movw	r2, #2129	; 0x851
 80087ec:	4920      	ldr	r1, [pc, #128]	; (8008870 <tcp_pcb_purge+0x98>)
 80087ee:	4821      	ldr	r0, [pc, #132]	; (8008874 <tcp_pcb_purge+0x9c>)
 80087f0:	f007 fa02 	bl	800fbf8 <iprintf>
 80087f4:	e037      	b.n	8008866 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	7d1b      	ldrb	r3, [r3, #20]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d033      	beq.n	8008866 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008802:	2b0a      	cmp	r3, #10
 8008804:	d02f      	beq.n	8008866 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800880a:	2b01      	cmp	r3, #1
 800880c:	d02b      	beq.n	8008866 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008812:	2b00      	cmp	r3, #0
 8008814:	d007      	beq.n	8008826 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800881a:	4618      	mov	r0, r3
 800881c:	f7fe f8fe 	bl	8006a1c <pbuf_free>
      pcb->refused_data = NULL;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f986 	bl	8008b40 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800883a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff fd39 	bl	80082b8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff fd34 	bl	80082b8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	66da      	str	r2, [r3, #108]	; 0x6c
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	08011c0c 	.word	0x08011c0c
 8008870:	08012258 	.word	0x08012258
 8008874:	08011c50 	.word	0x08011c50

08008878 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d106      	bne.n	8008896 <tcp_pcb_remove+0x1e>
 8008888:	4b3e      	ldr	r3, [pc, #248]	; (8008984 <tcp_pcb_remove+0x10c>)
 800888a:	f640 0283 	movw	r2, #2179	; 0x883
 800888e:	493e      	ldr	r1, [pc, #248]	; (8008988 <tcp_pcb_remove+0x110>)
 8008890:	483e      	ldr	r0, [pc, #248]	; (800898c <tcp_pcb_remove+0x114>)
 8008892:	f007 f9b1 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d106      	bne.n	80088aa <tcp_pcb_remove+0x32>
 800889c:	4b39      	ldr	r3, [pc, #228]	; (8008984 <tcp_pcb_remove+0x10c>)
 800889e:	f640 0284 	movw	r2, #2180	; 0x884
 80088a2:	493b      	ldr	r1, [pc, #236]	; (8008990 <tcp_pcb_remove+0x118>)
 80088a4:	4839      	ldr	r0, [pc, #228]	; (800898c <tcp_pcb_remove+0x114>)
 80088a6:	f007 f9a7 	bl	800fbf8 <iprintf>

  TCP_RMV(pcblist, pcb);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d105      	bne.n	80088c0 <tcp_pcb_remove+0x48>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68da      	ldr	r2, [r3, #12]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	e013      	b.n	80088e8 <tcp_pcb_remove+0x70>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	60fb      	str	r3, [r7, #12]
 80088c6:	e00c      	b.n	80088e2 <tcp_pcb_remove+0x6a>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d104      	bne.n	80088dc <tcp_pcb_remove+0x64>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	60da      	str	r2, [r3, #12]
 80088da:	e005      	b.n	80088e8 <tcp_pcb_remove+0x70>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1ef      	bne.n	80088c8 <tcp_pcb_remove+0x50>
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2200      	movs	r2, #0
 80088ec:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80088ee:	6838      	ldr	r0, [r7, #0]
 80088f0:	f7ff ff72 	bl	80087d8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	7d1b      	ldrb	r3, [r3, #20]
 80088f8:	2b0a      	cmp	r3, #10
 80088fa:	d013      	beq.n	8008924 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008900:	2b01      	cmp	r3, #1
 8008902:	d00f      	beq.n	8008924 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	8b5b      	ldrh	r3, [r3, #26]
 8008908:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800890c:	2b00      	cmp	r3, #0
 800890e:	d009      	beq.n	8008924 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	8b5b      	ldrh	r3, [r3, #26]
 8008914:	f043 0302 	orr.w	r3, r3, #2
 8008918:	b29a      	uxth	r2, r3
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800891e:	6838      	ldr	r0, [r7, #0]
 8008920:	f003 fbc6 	bl	800c0b0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	7d1b      	ldrb	r3, [r3, #20]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d020      	beq.n	800896e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008930:	2b00      	cmp	r3, #0
 8008932:	d006      	beq.n	8008942 <tcp_pcb_remove+0xca>
 8008934:	4b13      	ldr	r3, [pc, #76]	; (8008984 <tcp_pcb_remove+0x10c>)
 8008936:	f640 0293 	movw	r2, #2195	; 0x893
 800893a:	4916      	ldr	r1, [pc, #88]	; (8008994 <tcp_pcb_remove+0x11c>)
 800893c:	4813      	ldr	r0, [pc, #76]	; (800898c <tcp_pcb_remove+0x114>)
 800893e:	f007 f95b 	bl	800fbf8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008946:	2b00      	cmp	r3, #0
 8008948:	d006      	beq.n	8008958 <tcp_pcb_remove+0xe0>
 800894a:	4b0e      	ldr	r3, [pc, #56]	; (8008984 <tcp_pcb_remove+0x10c>)
 800894c:	f640 0294 	movw	r2, #2196	; 0x894
 8008950:	4911      	ldr	r1, [pc, #68]	; (8008998 <tcp_pcb_remove+0x120>)
 8008952:	480e      	ldr	r0, [pc, #56]	; (800898c <tcp_pcb_remove+0x114>)
 8008954:	f007 f950 	bl	800fbf8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800895c:	2b00      	cmp	r3, #0
 800895e:	d006      	beq.n	800896e <tcp_pcb_remove+0xf6>
 8008960:	4b08      	ldr	r3, [pc, #32]	; (8008984 <tcp_pcb_remove+0x10c>)
 8008962:	f640 0296 	movw	r2, #2198	; 0x896
 8008966:	490d      	ldr	r1, [pc, #52]	; (800899c <tcp_pcb_remove+0x124>)
 8008968:	4808      	ldr	r0, [pc, #32]	; (800898c <tcp_pcb_remove+0x114>)
 800896a:	f007 f945 	bl	800fbf8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2200      	movs	r2, #0
 8008972:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	2200      	movs	r2, #0
 8008978:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800897a:	bf00      	nop
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	08011c0c 	.word	0x08011c0c
 8008988:	08012274 	.word	0x08012274
 800898c:	08011c50 	.word	0x08011c50
 8008990:	08012290 	.word	0x08012290
 8008994:	080122b0 	.word	0x080122b0
 8008998:	080122c8 	.word	0x080122c8
 800899c:	080122e4 	.word	0x080122e4

080089a0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d106      	bne.n	80089bc <tcp_next_iss+0x1c>
 80089ae:	4b0a      	ldr	r3, [pc, #40]	; (80089d8 <tcp_next_iss+0x38>)
 80089b0:	f640 02af 	movw	r2, #2223	; 0x8af
 80089b4:	4909      	ldr	r1, [pc, #36]	; (80089dc <tcp_next_iss+0x3c>)
 80089b6:	480a      	ldr	r0, [pc, #40]	; (80089e0 <tcp_next_iss+0x40>)
 80089b8:	f007 f91e 	bl	800fbf8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80089bc:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <tcp_next_iss+0x44>)
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	4b09      	ldr	r3, [pc, #36]	; (80089e8 <tcp_next_iss+0x48>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4413      	add	r3, r2
 80089c6:	4a07      	ldr	r2, [pc, #28]	; (80089e4 <tcp_next_iss+0x44>)
 80089c8:	6013      	str	r3, [r2, #0]
  return iss;
 80089ca:	4b06      	ldr	r3, [pc, #24]	; (80089e4 <tcp_next_iss+0x44>)
 80089cc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3708      	adds	r7, #8
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	08011c0c 	.word	0x08011c0c
 80089dc:	080122fc 	.word	0x080122fc
 80089e0:	08011c50 	.word	0x08011c50
 80089e4:	20000024 	.word	0x20000024
 80089e8:	20008388 	.word	0x20008388

080089ec <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
 80089f8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d106      	bne.n	8008a0e <tcp_eff_send_mss_netif+0x22>
 8008a00:	4b14      	ldr	r3, [pc, #80]	; (8008a54 <tcp_eff_send_mss_netif+0x68>)
 8008a02:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008a06:	4914      	ldr	r1, [pc, #80]	; (8008a58 <tcp_eff_send_mss_netif+0x6c>)
 8008a08:	4814      	ldr	r0, [pc, #80]	; (8008a5c <tcp_eff_send_mss_netif+0x70>)
 8008a0a:	f007 f8f5 	bl	800fbf8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d101      	bne.n	8008a18 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008a14:	89fb      	ldrh	r3, [r7, #14]
 8008a16:	e019      	b.n	8008a4c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a1c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008a1e:	8afb      	ldrh	r3, [r7, #22]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d012      	beq.n	8008a4a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008a24:	2328      	movs	r3, #40	; 0x28
 8008a26:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008a28:	8afa      	ldrh	r2, [r7, #22]
 8008a2a:	8abb      	ldrh	r3, [r7, #20]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d904      	bls.n	8008a3a <tcp_eff_send_mss_netif+0x4e>
 8008a30:	8afa      	ldrh	r2, [r7, #22]
 8008a32:	8abb      	ldrh	r3, [r7, #20]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	b29b      	uxth	r3, r3
 8008a38:	e000      	b.n	8008a3c <tcp_eff_send_mss_netif+0x50>
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008a3e:	8a7a      	ldrh	r2, [r7, #18]
 8008a40:	89fb      	ldrh	r3, [r7, #14]
 8008a42:	4293      	cmp	r3, r2
 8008a44:	bf28      	it	cs
 8008a46:	4613      	movcs	r3, r2
 8008a48:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8008a4a:	89fb      	ldrh	r3, [r7, #14]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3718      	adds	r7, #24
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}
 8008a54:	08011c0c 	.word	0x08011c0c
 8008a58:	08012318 	.word	0x08012318
 8008a5c:	08011c50 	.word	0x08011c50

08008a60 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d119      	bne.n	8008aa8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8008a74:	4b10      	ldr	r3, [pc, #64]	; (8008ab8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8008a76:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008a7a:	4910      	ldr	r1, [pc, #64]	; (8008abc <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8008a7c:	4810      	ldr	r0, [pc, #64]	; (8008ac0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8008a7e:	f007 f8bb 	bl	800fbf8 <iprintf>

  while (pcb != NULL) {
 8008a82:	e011      	b.n	8008aa8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d108      	bne.n	8008aa2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f7fe fdda 	bl	8007650 <tcp_abort>
      pcb = next;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	e002      	b.n	8008aa8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1ea      	bne.n	8008a84 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008aae:	bf00      	nop
 8008ab0:	bf00      	nop
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	08011c0c 	.word	0x08011c0c
 8008abc:	08012340 	.word	0x08012340
 8008ac0:	08011c50 	.word	0x08011c50

08008ac4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d02a      	beq.n	8008b2a <tcp_netif_ip_addr_changed+0x66>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d026      	beq.n	8008b2a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008adc:	4b15      	ldr	r3, [pc, #84]	; (8008b34 <tcp_netif_ip_addr_changed+0x70>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7ff ffbc 	bl	8008a60 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008ae8:	4b13      	ldr	r3, [pc, #76]	; (8008b38 <tcp_netif_ip_addr_changed+0x74>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4619      	mov	r1, r3
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f7ff ffb6 	bl	8008a60 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d017      	beq.n	8008b2a <tcp_netif_ip_addr_changed+0x66>
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d013      	beq.n	8008b2a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008b02:	4b0e      	ldr	r3, [pc, #56]	; (8008b3c <tcp_netif_ip_addr_changed+0x78>)
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	e00c      	b.n	8008b24 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	d103      	bne.n	8008b1e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	681a      	ldr	r2, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	68db      	ldr	r3, [r3, #12]
 8008b22:	60fb      	str	r3, [r7, #12]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1ef      	bne.n	8008b0a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8008b2a:	bf00      	nop
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	20008394 	.word	0x20008394
 8008b38:	2000838c 	.word	0x2000838c
 8008b3c:	20008390 	.word	0x20008390

08008b40 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d007      	beq.n	8008b60 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7ff fbaf 	bl	80082b8 <tcp_segs_free>
    pcb->ooseq = NULL;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008b60:	bf00      	nop
 8008b62:	3708      	adds	r7, #8
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}

08008b68 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8008b68:	b590      	push	{r4, r7, lr}
 8008b6a:	b08d      	sub	sp, #52	; 0x34
 8008b6c:	af04      	add	r7, sp, #16
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d105      	bne.n	8008b84 <tcp_input+0x1c>
 8008b78:	4b9b      	ldr	r3, [pc, #620]	; (8008de8 <tcp_input+0x280>)
 8008b7a:	2283      	movs	r2, #131	; 0x83
 8008b7c:	499b      	ldr	r1, [pc, #620]	; (8008dec <tcp_input+0x284>)
 8008b7e:	489c      	ldr	r0, [pc, #624]	; (8008df0 <tcp_input+0x288>)
 8008b80:	f007 f83a 	bl	800fbf8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	4a9a      	ldr	r2, [pc, #616]	; (8008df4 <tcp_input+0x28c>)
 8008b8a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	895b      	ldrh	r3, [r3, #10]
 8008b90:	2b13      	cmp	r3, #19
 8008b92:	f240 83d1 	bls.w	8009338 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008b96:	4b98      	ldr	r3, [pc, #608]	; (8008df8 <tcp_input+0x290>)
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	4a97      	ldr	r2, [pc, #604]	; (8008df8 <tcp_input+0x290>)
 8008b9c:	6812      	ldr	r2, [r2, #0]
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f006 f86f 	bl	800ec84 <ip4_addr_isbroadcast_u32>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f040 83c7 	bne.w	800933c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008bae:	4b92      	ldr	r3, [pc, #584]	; (8008df8 <tcp_input+0x290>)
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008bb6:	2be0      	cmp	r3, #224	; 0xe0
 8008bb8:	f000 83c0 	beq.w	800933c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008bbc:	4b8d      	ldr	r3, [pc, #564]	; (8008df4 <tcp_input+0x28c>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	899b      	ldrh	r3, [r3, #12]
 8008bc2:	b29b      	uxth	r3, r3
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fc fbcb 	bl	8005360 <lwip_htons>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	0b1b      	lsrs	r3, r3, #12
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008bd6:	7cbb      	ldrb	r3, [r7, #18]
 8008bd8:	2b13      	cmp	r3, #19
 8008bda:	f240 83b1 	bls.w	8009340 <tcp_input+0x7d8>
 8008bde:	7cbb      	ldrb	r3, [r7, #18]
 8008be0:	b29a      	uxth	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	891b      	ldrh	r3, [r3, #8]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	f200 83aa 	bhi.w	8009340 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008bec:	7cbb      	ldrb	r3, [r7, #18]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	3b14      	subs	r3, #20
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	4b81      	ldr	r3, [pc, #516]	; (8008dfc <tcp_input+0x294>)
 8008bf6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008bf8:	4b81      	ldr	r3, [pc, #516]	; (8008e00 <tcp_input+0x298>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	895a      	ldrh	r2, [r3, #10]
 8008c02:	7cbb      	ldrb	r3, [r7, #18]
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d309      	bcc.n	8008c1e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008c0a:	4b7c      	ldr	r3, [pc, #496]	; (8008dfc <tcp_input+0x294>)
 8008c0c:	881a      	ldrh	r2, [r3, #0]
 8008c0e:	4b7d      	ldr	r3, [pc, #500]	; (8008e04 <tcp_input+0x29c>)
 8008c10:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008c12:	7cbb      	ldrb	r3, [r7, #18]
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7fd fe7a 	bl	8006910 <pbuf_remove_header>
 8008c1c:	e04e      	b.n	8008cbc <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d105      	bne.n	8008c32 <tcp_input+0xca>
 8008c26:	4b70      	ldr	r3, [pc, #448]	; (8008de8 <tcp_input+0x280>)
 8008c28:	22c2      	movs	r2, #194	; 0xc2
 8008c2a:	4977      	ldr	r1, [pc, #476]	; (8008e08 <tcp_input+0x2a0>)
 8008c2c:	4870      	ldr	r0, [pc, #448]	; (8008df0 <tcp_input+0x288>)
 8008c2e:	f006 ffe3 	bl	800fbf8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008c32:	2114      	movs	r1, #20
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f7fd fe6b 	bl	8006910 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	895a      	ldrh	r2, [r3, #10]
 8008c3e:	4b71      	ldr	r3, [pc, #452]	; (8008e04 <tcp_input+0x29c>)
 8008c40:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008c42:	4b6e      	ldr	r3, [pc, #440]	; (8008dfc <tcp_input+0x294>)
 8008c44:	881a      	ldrh	r2, [r3, #0]
 8008c46:	4b6f      	ldr	r3, [pc, #444]	; (8008e04 <tcp_input+0x29c>)
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008c4e:	4b6d      	ldr	r3, [pc, #436]	; (8008e04 <tcp_input+0x29c>)
 8008c50:	881b      	ldrh	r3, [r3, #0]
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7fd fe5b 	bl	8006910 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	895b      	ldrh	r3, [r3, #10]
 8008c60:	8a3a      	ldrh	r2, [r7, #16]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	f200 836e 	bhi.w	8009344 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	4a64      	ldr	r2, [pc, #400]	; (8008e00 <tcp_input+0x298>)
 8008c70:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	8a3a      	ldrh	r2, [r7, #16]
 8008c78:	4611      	mov	r1, r2
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f7fd fe48 	bl	8006910 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	891a      	ldrh	r2, [r3, #8]
 8008c84:	8a3b      	ldrh	r3, [r7, #16]
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	895b      	ldrh	r3, [r3, #10]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d005      	beq.n	8008ca2 <tcp_input+0x13a>
 8008c96:	4b54      	ldr	r3, [pc, #336]	; (8008de8 <tcp_input+0x280>)
 8008c98:	22df      	movs	r2, #223	; 0xdf
 8008c9a:	495c      	ldr	r1, [pc, #368]	; (8008e0c <tcp_input+0x2a4>)
 8008c9c:	4854      	ldr	r0, [pc, #336]	; (8008df0 <tcp_input+0x288>)
 8008c9e:	f006 ffab 	bl	800fbf8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	891a      	ldrh	r2, [r3, #8]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	891b      	ldrh	r3, [r3, #8]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d005      	beq.n	8008cbc <tcp_input+0x154>
 8008cb0:	4b4d      	ldr	r3, [pc, #308]	; (8008de8 <tcp_input+0x280>)
 8008cb2:	22e0      	movs	r2, #224	; 0xe0
 8008cb4:	4956      	ldr	r1, [pc, #344]	; (8008e10 <tcp_input+0x2a8>)
 8008cb6:	484e      	ldr	r0, [pc, #312]	; (8008df0 <tcp_input+0x288>)
 8008cb8:	f006 ff9e 	bl	800fbf8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008cbc:	4b4d      	ldr	r3, [pc, #308]	; (8008df4 <tcp_input+0x28c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	881b      	ldrh	r3, [r3, #0]
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	4a4b      	ldr	r2, [pc, #300]	; (8008df4 <tcp_input+0x28c>)
 8008cc6:	6814      	ldr	r4, [r2, #0]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fc fb49 	bl	8005360 <lwip_htons>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008cd2:	4b48      	ldr	r3, [pc, #288]	; (8008df4 <tcp_input+0x28c>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	885b      	ldrh	r3, [r3, #2]
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	4a46      	ldr	r2, [pc, #280]	; (8008df4 <tcp_input+0x28c>)
 8008cdc:	6814      	ldr	r4, [r2, #0]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f7fc fb3e 	bl	8005360 <lwip_htons>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008ce8:	4b42      	ldr	r3, [pc, #264]	; (8008df4 <tcp_input+0x28c>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	4a41      	ldr	r2, [pc, #260]	; (8008df4 <tcp_input+0x28c>)
 8008cf0:	6814      	ldr	r4, [r2, #0]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fc fb49 	bl	800538a <lwip_htonl>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	6063      	str	r3, [r4, #4]
 8008cfc:	6863      	ldr	r3, [r4, #4]
 8008cfe:	4a45      	ldr	r2, [pc, #276]	; (8008e14 <tcp_input+0x2ac>)
 8008d00:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008d02:	4b3c      	ldr	r3, [pc, #240]	; (8008df4 <tcp_input+0x28c>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	4a3a      	ldr	r2, [pc, #232]	; (8008df4 <tcp_input+0x28c>)
 8008d0a:	6814      	ldr	r4, [r2, #0]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7fc fb3c 	bl	800538a <lwip_htonl>
 8008d12:	4603      	mov	r3, r0
 8008d14:	60a3      	str	r3, [r4, #8]
 8008d16:	68a3      	ldr	r3, [r4, #8]
 8008d18:	4a3f      	ldr	r2, [pc, #252]	; (8008e18 <tcp_input+0x2b0>)
 8008d1a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008d1c:	4b35      	ldr	r3, [pc, #212]	; (8008df4 <tcp_input+0x28c>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	89db      	ldrh	r3, [r3, #14]
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	4a33      	ldr	r2, [pc, #204]	; (8008df4 <tcp_input+0x28c>)
 8008d26:	6814      	ldr	r4, [r2, #0]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fc fb19 	bl	8005360 <lwip_htons>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008d32:	4b30      	ldr	r3, [pc, #192]	; (8008df4 <tcp_input+0x28c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	899b      	ldrh	r3, [r3, #12]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fc fb10 	bl	8005360 <lwip_htons>
 8008d40:	4603      	mov	r3, r0
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d48:	b2da      	uxtb	r2, r3
 8008d4a:	4b34      	ldr	r3, [pc, #208]	; (8008e1c <tcp_input+0x2b4>)
 8008d4c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	891a      	ldrh	r2, [r3, #8]
 8008d52:	4b33      	ldr	r3, [pc, #204]	; (8008e20 <tcp_input+0x2b8>)
 8008d54:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008d56:	4b31      	ldr	r3, [pc, #196]	; (8008e1c <tcp_input+0x2b4>)
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00c      	beq.n	8008d7c <tcp_input+0x214>
    tcplen++;
 8008d62:	4b2f      	ldr	r3, [pc, #188]	; (8008e20 <tcp_input+0x2b8>)
 8008d64:	881b      	ldrh	r3, [r3, #0]
 8008d66:	3301      	adds	r3, #1
 8008d68:	b29a      	uxth	r2, r3
 8008d6a:	4b2d      	ldr	r3, [pc, #180]	; (8008e20 <tcp_input+0x2b8>)
 8008d6c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	891a      	ldrh	r2, [r3, #8]
 8008d72:	4b2b      	ldr	r3, [pc, #172]	; (8008e20 <tcp_input+0x2b8>)
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	f200 82e6 	bhi.w	8009348 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d80:	4b28      	ldr	r3, [pc, #160]	; (8008e24 <tcp_input+0x2bc>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	61fb      	str	r3, [r7, #28]
 8008d86:	e09d      	b.n	8008ec4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008d88:	69fb      	ldr	r3, [r7, #28]
 8008d8a:	7d1b      	ldrb	r3, [r3, #20]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d105      	bne.n	8008d9c <tcp_input+0x234>
 8008d90:	4b15      	ldr	r3, [pc, #84]	; (8008de8 <tcp_input+0x280>)
 8008d92:	22fb      	movs	r2, #251	; 0xfb
 8008d94:	4924      	ldr	r1, [pc, #144]	; (8008e28 <tcp_input+0x2c0>)
 8008d96:	4816      	ldr	r0, [pc, #88]	; (8008df0 <tcp_input+0x288>)
 8008d98:	f006 ff2e 	bl	800fbf8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	7d1b      	ldrb	r3, [r3, #20]
 8008da0:	2b0a      	cmp	r3, #10
 8008da2:	d105      	bne.n	8008db0 <tcp_input+0x248>
 8008da4:	4b10      	ldr	r3, [pc, #64]	; (8008de8 <tcp_input+0x280>)
 8008da6:	22fc      	movs	r2, #252	; 0xfc
 8008da8:	4920      	ldr	r1, [pc, #128]	; (8008e2c <tcp_input+0x2c4>)
 8008daa:	4811      	ldr	r0, [pc, #68]	; (8008df0 <tcp_input+0x288>)
 8008dac:	f006 ff24 	bl	800fbf8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	7d1b      	ldrb	r3, [r3, #20]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d105      	bne.n	8008dc4 <tcp_input+0x25c>
 8008db8:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <tcp_input+0x280>)
 8008dba:	22fd      	movs	r2, #253	; 0xfd
 8008dbc:	491c      	ldr	r1, [pc, #112]	; (8008e30 <tcp_input+0x2c8>)
 8008dbe:	480c      	ldr	r0, [pc, #48]	; (8008df0 <tcp_input+0x288>)
 8008dc0:	f006 ff1a 	bl	800fbf8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	7a1b      	ldrb	r3, [r3, #8]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d033      	beq.n	8008e34 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	7a1a      	ldrb	r2, [r3, #8]
 8008dd0:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <tcp_input+0x290>)
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008dd8:	3301      	adds	r3, #1
 8008dda:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d029      	beq.n	8008e34 <tcp_input+0x2cc>
      prev = pcb;
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	61bb      	str	r3, [r7, #24]
      continue;
 8008de4:	e06b      	b.n	8008ebe <tcp_input+0x356>
 8008de6:	bf00      	nop
 8008de8:	08012374 	.word	0x08012374
 8008dec:	080123a8 	.word	0x080123a8
 8008df0:	080123c0 	.word	0x080123c0
 8008df4:	200083b0 	.word	0x200083b0
 8008df8:	20004e18 	.word	0x20004e18
 8008dfc:	200083b4 	.word	0x200083b4
 8008e00:	200083b8 	.word	0x200083b8
 8008e04:	200083b6 	.word	0x200083b6
 8008e08:	080123e8 	.word	0x080123e8
 8008e0c:	080123f8 	.word	0x080123f8
 8008e10:	08012404 	.word	0x08012404
 8008e14:	200083c0 	.word	0x200083c0
 8008e18:	200083c4 	.word	0x200083c4
 8008e1c:	200083cc 	.word	0x200083cc
 8008e20:	200083ca 	.word	0x200083ca
 8008e24:	20008394 	.word	0x20008394
 8008e28:	08012424 	.word	0x08012424
 8008e2c:	0801244c 	.word	0x0801244c
 8008e30:	08012478 	.word	0x08012478
    }

    if (pcb->remote_port == tcphdr->src &&
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	8b1a      	ldrh	r2, [r3, #24]
 8008e38:	4b72      	ldr	r3, [pc, #456]	; (8009004 <tcp_input+0x49c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	881b      	ldrh	r3, [r3, #0]
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d13a      	bne.n	8008eba <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	8ada      	ldrh	r2, [r3, #22]
 8008e48:	4b6e      	ldr	r3, [pc, #440]	; (8009004 <tcp_input+0x49c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	885b      	ldrh	r3, [r3, #2]
 8008e4e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d132      	bne.n	8008eba <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	4b6b      	ldr	r3, [pc, #428]	; (8009008 <tcp_input+0x4a0>)
 8008e5a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d12c      	bne.n	8008eba <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	681a      	ldr	r2, [r3, #0]
 8008e64:	4b68      	ldr	r3, [pc, #416]	; (8009008 <tcp_input+0x4a0>)
 8008e66:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d126      	bne.n	8008eba <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	69fa      	ldr	r2, [r7, #28]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d106      	bne.n	8008e84 <tcp_input+0x31c>
 8008e76:	4b65      	ldr	r3, [pc, #404]	; (800900c <tcp_input+0x4a4>)
 8008e78:	f240 120d 	movw	r2, #269	; 0x10d
 8008e7c:	4964      	ldr	r1, [pc, #400]	; (8009010 <tcp_input+0x4a8>)
 8008e7e:	4865      	ldr	r0, [pc, #404]	; (8009014 <tcp_input+0x4ac>)
 8008e80:	f006 feba 	bl	800fbf8 <iprintf>
      if (prev != NULL) {
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00a      	beq.n	8008ea0 <tcp_input+0x338>
        prev->next = pcb->next;
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008e92:	4b61      	ldr	r3, [pc, #388]	; (8009018 <tcp_input+0x4b0>)
 8008e94:	681a      	ldr	r2, [r3, #0]
 8008e96:	69fb      	ldr	r3, [r7, #28]
 8008e98:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008e9a:	4a5f      	ldr	r2, [pc, #380]	; (8009018 <tcp_input+0x4b0>)
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	69fa      	ldr	r2, [r7, #28]
 8008ea6:	429a      	cmp	r2, r3
 8008ea8:	d111      	bne.n	8008ece <tcp_input+0x366>
 8008eaa:	4b58      	ldr	r3, [pc, #352]	; (800900c <tcp_input+0x4a4>)
 8008eac:	f240 1215 	movw	r2, #277	; 0x115
 8008eb0:	495a      	ldr	r1, [pc, #360]	; (800901c <tcp_input+0x4b4>)
 8008eb2:	4858      	ldr	r0, [pc, #352]	; (8009014 <tcp_input+0x4ac>)
 8008eb4:	f006 fea0 	bl	800fbf8 <iprintf>
      break;
 8008eb8:	e009      	b.n	8008ece <tcp_input+0x366>
    }
    prev = pcb;
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	61fb      	str	r3, [r7, #28]
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f47f af5e 	bne.w	8008d88 <tcp_input+0x220>
 8008ecc:	e000      	b.n	8008ed0 <tcp_input+0x368>
      break;
 8008ece:	bf00      	nop
  }

  if (pcb == NULL) {
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f040 80aa 	bne.w	800902c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ed8:	4b51      	ldr	r3, [pc, #324]	; (8009020 <tcp_input+0x4b8>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	61fb      	str	r3, [r7, #28]
 8008ede:	e03f      	b.n	8008f60 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	7d1b      	ldrb	r3, [r3, #20]
 8008ee4:	2b0a      	cmp	r3, #10
 8008ee6:	d006      	beq.n	8008ef6 <tcp_input+0x38e>
 8008ee8:	4b48      	ldr	r3, [pc, #288]	; (800900c <tcp_input+0x4a4>)
 8008eea:	f240 121f 	movw	r2, #287	; 0x11f
 8008eee:	494d      	ldr	r1, [pc, #308]	; (8009024 <tcp_input+0x4bc>)
 8008ef0:	4848      	ldr	r0, [pc, #288]	; (8009014 <tcp_input+0x4ac>)
 8008ef2:	f006 fe81 	bl	800fbf8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	7a1b      	ldrb	r3, [r3, #8]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d009      	beq.n	8008f12 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	7a1a      	ldrb	r2, [r3, #8]
 8008f02:	4b41      	ldr	r3, [pc, #260]	; (8009008 <tcp_input+0x4a0>)
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d122      	bne.n	8008f58 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	8b1a      	ldrh	r2, [r3, #24]
 8008f16:	4b3b      	ldr	r3, [pc, #236]	; (8009004 <tcp_input+0x49c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	881b      	ldrh	r3, [r3, #0]
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d11b      	bne.n	8008f5a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	8ada      	ldrh	r2, [r3, #22]
 8008f26:	4b37      	ldr	r3, [pc, #220]	; (8009004 <tcp_input+0x49c>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	885b      	ldrh	r3, [r3, #2]
 8008f2c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d113      	bne.n	8008f5a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f32:	69fb      	ldr	r3, [r7, #28]
 8008f34:	685a      	ldr	r2, [r3, #4]
 8008f36:	4b34      	ldr	r3, [pc, #208]	; (8009008 <tcp_input+0x4a0>)
 8008f38:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	d10d      	bne.n	8008f5a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	681a      	ldr	r2, [r3, #0]
 8008f42:	4b31      	ldr	r3, [pc, #196]	; (8009008 <tcp_input+0x4a0>)
 8008f44:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d107      	bne.n	8008f5a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008f4a:	69f8      	ldr	r0, [r7, #28]
 8008f4c:	f000 fb56 	bl	80095fc <tcp_timewait_input>
        }
        pbuf_free(p);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7fd fd63 	bl	8006a1c <pbuf_free>
        return;
 8008f56:	e1fd      	b.n	8009354 <tcp_input+0x7ec>
        continue;
 8008f58:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	61fb      	str	r3, [r7, #28]
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1bc      	bne.n	8008ee0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008f6a:	4b2f      	ldr	r3, [pc, #188]	; (8009028 <tcp_input+0x4c0>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	617b      	str	r3, [r7, #20]
 8008f70:	e02a      	b.n	8008fc8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	7a1b      	ldrb	r3, [r3, #8]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00c      	beq.n	8008f94 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	7a1a      	ldrb	r2, [r3, #8]
 8008f7e:	4b22      	ldr	r3, [pc, #136]	; (8009008 <tcp_input+0x4a0>)
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f86:	3301      	adds	r3, #1
 8008f88:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d002      	beq.n	8008f94 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	61bb      	str	r3, [r7, #24]
        continue;
 8008f92:	e016      	b.n	8008fc2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	8ada      	ldrh	r2, [r3, #22]
 8008f98:	4b1a      	ldr	r3, [pc, #104]	; (8009004 <tcp_input+0x49c>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	885b      	ldrh	r3, [r3, #2]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d10c      	bne.n	8008fbe <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	4b17      	ldr	r3, [pc, #92]	; (8009008 <tcp_input+0x4a0>)
 8008faa:	695b      	ldr	r3, [r3, #20]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d00f      	beq.n	8008fd0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00d      	beq.n	8008fd2 <tcp_input+0x46a>
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d009      	beq.n	8008fd2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	617b      	str	r3, [r7, #20]
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1d1      	bne.n	8008f72 <tcp_input+0x40a>
 8008fce:	e000      	b.n	8008fd2 <tcp_input+0x46a>
            break;
 8008fd0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d029      	beq.n	800902c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00a      	beq.n	8008ff4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	68da      	ldr	r2, [r3, #12]
 8008fe2:	69bb      	ldr	r3, [r7, #24]
 8008fe4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008fe6:	4b10      	ldr	r3, [pc, #64]	; (8009028 <tcp_input+0x4c0>)
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008fee:	4a0e      	ldr	r2, [pc, #56]	; (8009028 <tcp_input+0x4c0>)
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008ff4:	6978      	ldr	r0, [r7, #20]
 8008ff6:	f000 fa03 	bl	8009400 <tcp_listen_input>
      }
      pbuf_free(p);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7fd fd0e 	bl	8006a1c <pbuf_free>
      return;
 8009000:	e1a8      	b.n	8009354 <tcp_input+0x7ec>
 8009002:	bf00      	nop
 8009004:	200083b0 	.word	0x200083b0
 8009008:	20004e18 	.word	0x20004e18
 800900c:	08012374 	.word	0x08012374
 8009010:	080124a0 	.word	0x080124a0
 8009014:	080123c0 	.word	0x080123c0
 8009018:	20008394 	.word	0x20008394
 800901c:	080124cc 	.word	0x080124cc
 8009020:	20008398 	.word	0x20008398
 8009024:	080124f8 	.word	0x080124f8
 8009028:	20008390 	.word	0x20008390
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f000 8158 	beq.w	80092e4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8009034:	4b95      	ldr	r3, [pc, #596]	; (800928c <tcp_input+0x724>)
 8009036:	2200      	movs	r2, #0
 8009038:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	891a      	ldrh	r2, [r3, #8]
 800903e:	4b93      	ldr	r3, [pc, #588]	; (800928c <tcp_input+0x724>)
 8009040:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8009042:	4a92      	ldr	r2, [pc, #584]	; (800928c <tcp_input+0x724>)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8009048:	4b91      	ldr	r3, [pc, #580]	; (8009290 <tcp_input+0x728>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a8f      	ldr	r2, [pc, #572]	; (800928c <tcp_input+0x724>)
 800904e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8009050:	4b90      	ldr	r3, [pc, #576]	; (8009294 <tcp_input+0x72c>)
 8009052:	2200      	movs	r2, #0
 8009054:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8009056:	4b90      	ldr	r3, [pc, #576]	; (8009298 <tcp_input+0x730>)
 8009058:	2200      	movs	r2, #0
 800905a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800905c:	4b8f      	ldr	r3, [pc, #572]	; (800929c <tcp_input+0x734>)
 800905e:	2200      	movs	r2, #0
 8009060:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8009062:	4b8f      	ldr	r3, [pc, #572]	; (80092a0 <tcp_input+0x738>)
 8009064:	781b      	ldrb	r3, [r3, #0]
 8009066:	f003 0308 	and.w	r3, r3, #8
 800906a:	2b00      	cmp	r3, #0
 800906c:	d006      	beq.n	800907c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	7b5b      	ldrb	r3, [r3, #13]
 8009072:	f043 0301 	orr.w	r3, r3, #1
 8009076:	b2da      	uxtb	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009080:	2b00      	cmp	r3, #0
 8009082:	d017      	beq.n	80090b4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009084:	69f8      	ldr	r0, [r7, #28]
 8009086:	f7ff f89b 	bl	80081c0 <tcp_process_refused_data>
 800908a:	4603      	mov	r3, r0
 800908c:	f113 0f0d 	cmn.w	r3, #13
 8009090:	d007      	beq.n	80090a2 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8009096:	2b00      	cmp	r3, #0
 8009098:	d00c      	beq.n	80090b4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800909a:	4b82      	ldr	r3, [pc, #520]	; (80092a4 <tcp_input+0x73c>)
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d008      	beq.n	80090b4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f040 80e3 	bne.w	8009272 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80090ac:	69f8      	ldr	r0, [r7, #28]
 80090ae:	f003 fe05 	bl	800ccbc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80090b2:	e0de      	b.n	8009272 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80090b4:	4a7c      	ldr	r2, [pc, #496]	; (80092a8 <tcp_input+0x740>)
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80090ba:	69f8      	ldr	r0, [r7, #28]
 80090bc:	f000 fb18 	bl	80096f0 <tcp_process>
 80090c0:	4603      	mov	r3, r0
 80090c2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80090c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090c8:	f113 0f0d 	cmn.w	r3, #13
 80090cc:	f000 80d3 	beq.w	8009276 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80090d0:	4b71      	ldr	r3, [pc, #452]	; (8009298 <tcp_input+0x730>)
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	f003 0308 	and.w	r3, r3, #8
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d015      	beq.n	8009108 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d008      	beq.n	80090f8 <tcp_input+0x590>
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090ec:	69fa      	ldr	r2, [r7, #28]
 80090ee:	6912      	ldr	r2, [r2, #16]
 80090f0:	f06f 010d 	mvn.w	r1, #13
 80090f4:	4610      	mov	r0, r2
 80090f6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80090f8:	69f9      	ldr	r1, [r7, #28]
 80090fa:	486c      	ldr	r0, [pc, #432]	; (80092ac <tcp_input+0x744>)
 80090fc:	f7ff fbbc 	bl	8008878 <tcp_pcb_remove>
        tcp_free(pcb);
 8009100:	69f8      	ldr	r0, [r7, #28]
 8009102:	f7fd ffbd 	bl	8007080 <tcp_free>
 8009106:	e0da      	b.n	80092be <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800910c:	4b63      	ldr	r3, [pc, #396]	; (800929c <tcp_input+0x734>)
 800910e:	881b      	ldrh	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d01d      	beq.n	8009150 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8009114:	4b61      	ldr	r3, [pc, #388]	; (800929c <tcp_input+0x734>)
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009120:	2b00      	cmp	r3, #0
 8009122:	d00a      	beq.n	800913a <tcp_input+0x5d2>
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800912a:	69fa      	ldr	r2, [r7, #28]
 800912c:	6910      	ldr	r0, [r2, #16]
 800912e:	89fa      	ldrh	r2, [r7, #14]
 8009130:	69f9      	ldr	r1, [r7, #28]
 8009132:	4798      	blx	r3
 8009134:	4603      	mov	r3, r0
 8009136:	74fb      	strb	r3, [r7, #19]
 8009138:	e001      	b.n	800913e <tcp_input+0x5d6>
 800913a:	2300      	movs	r3, #0
 800913c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800913e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009142:	f113 0f0d 	cmn.w	r3, #13
 8009146:	f000 8098 	beq.w	800927a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800914a:	4b54      	ldr	r3, [pc, #336]	; (800929c <tcp_input+0x734>)
 800914c:	2200      	movs	r2, #0
 800914e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8009150:	69f8      	ldr	r0, [r7, #28]
 8009152:	f000 f915 	bl	8009380 <tcp_input_delayed_close>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	f040 8090 	bne.w	800927e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800915e:	4b4d      	ldr	r3, [pc, #308]	; (8009294 <tcp_input+0x72c>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d041      	beq.n	80091ea <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800916a:	2b00      	cmp	r3, #0
 800916c:	d006      	beq.n	800917c <tcp_input+0x614>
 800916e:	4b50      	ldr	r3, [pc, #320]	; (80092b0 <tcp_input+0x748>)
 8009170:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009174:	494f      	ldr	r1, [pc, #316]	; (80092b4 <tcp_input+0x74c>)
 8009176:	4850      	ldr	r0, [pc, #320]	; (80092b8 <tcp_input+0x750>)
 8009178:	f006 fd3e 	bl	800fbf8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	8b5b      	ldrh	r3, [r3, #26]
 8009180:	f003 0310 	and.w	r3, r3, #16
 8009184:	2b00      	cmp	r3, #0
 8009186:	d008      	beq.n	800919a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8009188:	4b42      	ldr	r3, [pc, #264]	; (8009294 <tcp_input+0x72c>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4618      	mov	r0, r3
 800918e:	f7fd fc45 	bl	8006a1c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8009192:	69f8      	ldr	r0, [r7, #28]
 8009194:	f7fe fa5c 	bl	8007650 <tcp_abort>
            goto aborted;
 8009198:	e091      	b.n	80092be <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00c      	beq.n	80091be <tcp_input+0x656>
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80091aa:	69fb      	ldr	r3, [r7, #28]
 80091ac:	6918      	ldr	r0, [r3, #16]
 80091ae:	4b39      	ldr	r3, [pc, #228]	; (8009294 <tcp_input+0x72c>)
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	2300      	movs	r3, #0
 80091b4:	69f9      	ldr	r1, [r7, #28]
 80091b6:	47a0      	blx	r4
 80091b8:	4603      	mov	r3, r0
 80091ba:	74fb      	strb	r3, [r7, #19]
 80091bc:	e008      	b.n	80091d0 <tcp_input+0x668>
 80091be:	4b35      	ldr	r3, [pc, #212]	; (8009294 <tcp_input+0x72c>)
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	2300      	movs	r3, #0
 80091c4:	69f9      	ldr	r1, [r7, #28]
 80091c6:	2000      	movs	r0, #0
 80091c8:	f7ff f8d0 	bl	800836c <tcp_recv_null>
 80091cc:	4603      	mov	r3, r0
 80091ce:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80091d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091d4:	f113 0f0d 	cmn.w	r3, #13
 80091d8:	d053      	beq.n	8009282 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80091da:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d003      	beq.n	80091ea <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80091e2:	4b2c      	ldr	r3, [pc, #176]	; (8009294 <tcp_input+0x72c>)
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80091ea:	4b2b      	ldr	r3, [pc, #172]	; (8009298 <tcp_input+0x730>)
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	f003 0320 	and.w	r3, r3, #32
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d030      	beq.n	8009258 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d009      	beq.n	8009212 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80091fe:	69fb      	ldr	r3, [r7, #28]
 8009200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009202:	7b5a      	ldrb	r2, [r3, #13]
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009208:	f042 0220 	orr.w	r2, r2, #32
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	735a      	strb	r2, [r3, #13]
 8009210:	e022      	b.n	8009258 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009216:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800921a:	d005      	beq.n	8009228 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009220:	3301      	adds	r3, #1
 8009222:	b29a      	uxth	r2, r3
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00b      	beq.n	800924a <tcp_input+0x6e2>
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	6918      	ldr	r0, [r3, #16]
 800923c:	2300      	movs	r3, #0
 800923e:	2200      	movs	r2, #0
 8009240:	69f9      	ldr	r1, [r7, #28]
 8009242:	47a0      	blx	r4
 8009244:	4603      	mov	r3, r0
 8009246:	74fb      	strb	r3, [r7, #19]
 8009248:	e001      	b.n	800924e <tcp_input+0x6e6>
 800924a:	2300      	movs	r3, #0
 800924c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800924e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009252:	f113 0f0d 	cmn.w	r3, #13
 8009256:	d016      	beq.n	8009286 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8009258:	4b13      	ldr	r3, [pc, #76]	; (80092a8 <tcp_input+0x740>)
 800925a:	2200      	movs	r2, #0
 800925c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800925e:	69f8      	ldr	r0, [r7, #28]
 8009260:	f000 f88e 	bl	8009380 <tcp_input_delayed_close>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d128      	bne.n	80092bc <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800926a:	69f8      	ldr	r0, [r7, #28]
 800926c:	f002 ff20 	bl	800c0b0 <tcp_output>
 8009270:	e025      	b.n	80092be <tcp_input+0x756>
        goto aborted;
 8009272:	bf00      	nop
 8009274:	e023      	b.n	80092be <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8009276:	bf00      	nop
 8009278:	e021      	b.n	80092be <tcp_input+0x756>
              goto aborted;
 800927a:	bf00      	nop
 800927c:	e01f      	b.n	80092be <tcp_input+0x756>
          goto aborted;
 800927e:	bf00      	nop
 8009280:	e01d      	b.n	80092be <tcp_input+0x756>
            goto aborted;
 8009282:	bf00      	nop
 8009284:	e01b      	b.n	80092be <tcp_input+0x756>
              goto aborted;
 8009286:	bf00      	nop
 8009288:	e019      	b.n	80092be <tcp_input+0x756>
 800928a:	bf00      	nop
 800928c:	200083a0 	.word	0x200083a0
 8009290:	200083b0 	.word	0x200083b0
 8009294:	200083d0 	.word	0x200083d0
 8009298:	200083cd 	.word	0x200083cd
 800929c:	200083c8 	.word	0x200083c8
 80092a0:	200083cc 	.word	0x200083cc
 80092a4:	200083ca 	.word	0x200083ca
 80092a8:	200083d4 	.word	0x200083d4
 80092ac:	20008394 	.word	0x20008394
 80092b0:	08012374 	.word	0x08012374
 80092b4:	08012528 	.word	0x08012528
 80092b8:	080123c0 	.word	0x080123c0
          goto aborted;
 80092bc:	bf00      	nop
    tcp_input_pcb = NULL;
 80092be:	4b27      	ldr	r3, [pc, #156]	; (800935c <tcp_input+0x7f4>)
 80092c0:	2200      	movs	r2, #0
 80092c2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80092c4:	4b26      	ldr	r3, [pc, #152]	; (8009360 <tcp_input+0x7f8>)
 80092c6:	2200      	movs	r2, #0
 80092c8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80092ca:	4b26      	ldr	r3, [pc, #152]	; (8009364 <tcp_input+0x7fc>)
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d03f      	beq.n	8009352 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80092d2:	4b24      	ldr	r3, [pc, #144]	; (8009364 <tcp_input+0x7fc>)
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7fd fba0 	bl	8006a1c <pbuf_free>
      inseg.p = NULL;
 80092dc:	4b21      	ldr	r3, [pc, #132]	; (8009364 <tcp_input+0x7fc>)
 80092de:	2200      	movs	r2, #0
 80092e0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80092e2:	e036      	b.n	8009352 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80092e4:	4b20      	ldr	r3, [pc, #128]	; (8009368 <tcp_input+0x800>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	899b      	ldrh	r3, [r3, #12]
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fc f837 	bl	8005360 <lwip_htons>
 80092f2:	4603      	mov	r3, r0
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	f003 0304 	and.w	r3, r3, #4
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d118      	bne.n	8009330 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092fe:	4b1b      	ldr	r3, [pc, #108]	; (800936c <tcp_input+0x804>)
 8009300:	6819      	ldr	r1, [r3, #0]
 8009302:	4b1b      	ldr	r3, [pc, #108]	; (8009370 <tcp_input+0x808>)
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	461a      	mov	r2, r3
 8009308:	4b1a      	ldr	r3, [pc, #104]	; (8009374 <tcp_input+0x80c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800930e:	4b16      	ldr	r3, [pc, #88]	; (8009368 <tcp_input+0x800>)
 8009310:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009312:	885b      	ldrh	r3, [r3, #2]
 8009314:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009316:	4a14      	ldr	r2, [pc, #80]	; (8009368 <tcp_input+0x800>)
 8009318:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800931a:	8812      	ldrh	r2, [r2, #0]
 800931c:	b292      	uxth	r2, r2
 800931e:	9202      	str	r2, [sp, #8]
 8009320:	9301      	str	r3, [sp, #4]
 8009322:	4b15      	ldr	r3, [pc, #84]	; (8009378 <tcp_input+0x810>)
 8009324:	9300      	str	r3, [sp, #0]
 8009326:	4b15      	ldr	r3, [pc, #84]	; (800937c <tcp_input+0x814>)
 8009328:	4602      	mov	r2, r0
 800932a:	2000      	movs	r0, #0
 800932c:	f003 fc74 	bl	800cc18 <tcp_rst>
    pbuf_free(p);
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7fd fb73 	bl	8006a1c <pbuf_free>
  return;
 8009336:	e00c      	b.n	8009352 <tcp_input+0x7ea>
    goto dropped;
 8009338:	bf00      	nop
 800933a:	e006      	b.n	800934a <tcp_input+0x7e2>
    goto dropped;
 800933c:	bf00      	nop
 800933e:	e004      	b.n	800934a <tcp_input+0x7e2>
    goto dropped;
 8009340:	bf00      	nop
 8009342:	e002      	b.n	800934a <tcp_input+0x7e2>
      goto dropped;
 8009344:	bf00      	nop
 8009346:	e000      	b.n	800934a <tcp_input+0x7e2>
      goto dropped;
 8009348:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f7fd fb66 	bl	8006a1c <pbuf_free>
 8009350:	e000      	b.n	8009354 <tcp_input+0x7ec>
  return;
 8009352:	bf00      	nop
}
 8009354:	3724      	adds	r7, #36	; 0x24
 8009356:	46bd      	mov	sp, r7
 8009358:	bd90      	pop	{r4, r7, pc}
 800935a:	bf00      	nop
 800935c:	200083d4 	.word	0x200083d4
 8009360:	200083d0 	.word	0x200083d0
 8009364:	200083a0 	.word	0x200083a0
 8009368:	200083b0 	.word	0x200083b0
 800936c:	200083c4 	.word	0x200083c4
 8009370:	200083ca 	.word	0x200083ca
 8009374:	200083c0 	.word	0x200083c0
 8009378:	20004e28 	.word	0x20004e28
 800937c:	20004e2c 	.word	0x20004e2c

08009380 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d106      	bne.n	800939c <tcp_input_delayed_close+0x1c>
 800938e:	4b17      	ldr	r3, [pc, #92]	; (80093ec <tcp_input_delayed_close+0x6c>)
 8009390:	f240 225a 	movw	r2, #602	; 0x25a
 8009394:	4916      	ldr	r1, [pc, #88]	; (80093f0 <tcp_input_delayed_close+0x70>)
 8009396:	4817      	ldr	r0, [pc, #92]	; (80093f4 <tcp_input_delayed_close+0x74>)
 8009398:	f006 fc2e 	bl	800fbf8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800939c:	4b16      	ldr	r3, [pc, #88]	; (80093f8 <tcp_input_delayed_close+0x78>)
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	f003 0310 	and.w	r3, r3, #16
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01c      	beq.n	80093e2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	8b5b      	ldrh	r3, [r3, #26]
 80093ac:	f003 0310 	and.w	r3, r3, #16
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10d      	bne.n	80093d0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d008      	beq.n	80093d0 <tcp_input_delayed_close+0x50>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	6912      	ldr	r2, [r2, #16]
 80093c8:	f06f 010e 	mvn.w	r1, #14
 80093cc:	4610      	mov	r0, r2
 80093ce:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80093d0:	6879      	ldr	r1, [r7, #4]
 80093d2:	480a      	ldr	r0, [pc, #40]	; (80093fc <tcp_input_delayed_close+0x7c>)
 80093d4:	f7ff fa50 	bl	8008878 <tcp_pcb_remove>
    tcp_free(pcb);
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f7fd fe51 	bl	8007080 <tcp_free>
    return 1;
 80093de:	2301      	movs	r3, #1
 80093e0:	e000      	b.n	80093e4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	08012374 	.word	0x08012374
 80093f0:	08012544 	.word	0x08012544
 80093f4:	080123c0 	.word	0x080123c0
 80093f8:	200083cd 	.word	0x200083cd
 80093fc:	20008394 	.word	0x20008394

08009400 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009400:	b590      	push	{r4, r7, lr}
 8009402:	b08b      	sub	sp, #44	; 0x2c
 8009404:	af04      	add	r7, sp, #16
 8009406:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009408:	4b6f      	ldr	r3, [pc, #444]	; (80095c8 <tcp_listen_input+0x1c8>)
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b00      	cmp	r3, #0
 8009412:	f040 80d2 	bne.w	80095ba <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d106      	bne.n	800942a <tcp_listen_input+0x2a>
 800941c:	4b6b      	ldr	r3, [pc, #428]	; (80095cc <tcp_listen_input+0x1cc>)
 800941e:	f240 2281 	movw	r2, #641	; 0x281
 8009422:	496b      	ldr	r1, [pc, #428]	; (80095d0 <tcp_listen_input+0x1d0>)
 8009424:	486b      	ldr	r0, [pc, #428]	; (80095d4 <tcp_listen_input+0x1d4>)
 8009426:	f006 fbe7 	bl	800fbf8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800942a:	4b67      	ldr	r3, [pc, #412]	; (80095c8 <tcp_listen_input+0x1c8>)
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	f003 0310 	and.w	r3, r3, #16
 8009432:	2b00      	cmp	r3, #0
 8009434:	d019      	beq.n	800946a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009436:	4b68      	ldr	r3, [pc, #416]	; (80095d8 <tcp_listen_input+0x1d8>)
 8009438:	6819      	ldr	r1, [r3, #0]
 800943a:	4b68      	ldr	r3, [pc, #416]	; (80095dc <tcp_listen_input+0x1dc>)
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	4b67      	ldr	r3, [pc, #412]	; (80095e0 <tcp_listen_input+0x1e0>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009446:	4b67      	ldr	r3, [pc, #412]	; (80095e4 <tcp_listen_input+0x1e4>)
 8009448:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800944a:	885b      	ldrh	r3, [r3, #2]
 800944c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800944e:	4a65      	ldr	r2, [pc, #404]	; (80095e4 <tcp_listen_input+0x1e4>)
 8009450:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009452:	8812      	ldrh	r2, [r2, #0]
 8009454:	b292      	uxth	r2, r2
 8009456:	9202      	str	r2, [sp, #8]
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	4b63      	ldr	r3, [pc, #396]	; (80095e8 <tcp_listen_input+0x1e8>)
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	4b63      	ldr	r3, [pc, #396]	; (80095ec <tcp_listen_input+0x1ec>)
 8009460:	4602      	mov	r2, r0
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f003 fbd8 	bl	800cc18 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8009468:	e0a9      	b.n	80095be <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800946a:	4b57      	ldr	r3, [pc, #348]	; (80095c8 <tcp_listen_input+0x1c8>)
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b00      	cmp	r3, #0
 8009474:	f000 80a3 	beq.w	80095be <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	7d5b      	ldrb	r3, [r3, #21]
 800947c:	4618      	mov	r0, r3
 800947e:	f7ff f899 	bl	80085b4 <tcp_alloc>
 8009482:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d111      	bne.n	80094ae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <tcp_listen_input+0xa8>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	6910      	ldr	r0, [r2, #16]
 800949a:	f04f 32ff 	mov.w	r2, #4294967295
 800949e:	2100      	movs	r1, #0
 80094a0:	4798      	blx	r3
 80094a2:	4603      	mov	r3, r0
 80094a4:	73bb      	strb	r3, [r7, #14]
      return;
 80094a6:	e08b      	b.n	80095c0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80094a8:	23f0      	movs	r3, #240	; 0xf0
 80094aa:	73bb      	strb	r3, [r7, #14]
      return;
 80094ac:	e088      	b.n	80095c0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80094ae:	4b50      	ldr	r3, [pc, #320]	; (80095f0 <tcp_listen_input+0x1f0>)
 80094b0:	695a      	ldr	r2, [r3, #20]
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80094b6:	4b4e      	ldr	r3, [pc, #312]	; (80095f0 <tcp_listen_input+0x1f0>)
 80094b8:	691a      	ldr	r2, [r3, #16]
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	8ada      	ldrh	r2, [r3, #22]
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80094c6:	4b47      	ldr	r3, [pc, #284]	; (80095e4 <tcp_listen_input+0x1e4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	2203      	movs	r2, #3
 80094d6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80094d8:	4b41      	ldr	r3, [pc, #260]	; (80095e0 <tcp_listen_input+0x1e0>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80094ea:	6978      	ldr	r0, [r7, #20]
 80094ec:	f7ff fa58 	bl	80089a0 <tcp_next_iss>
 80094f0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800950a:	4b35      	ldr	r3, [pc, #212]	; (80095e0 <tcp_listen_input+0x1e0>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	1e5a      	subs	r2, r3, #1
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	691a      	ldr	r2, [r3, #16]
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	7a5b      	ldrb	r3, [r3, #9]
 8009526:	f003 030c 	and.w	r3, r3, #12
 800952a:	b2da      	uxtb	r2, r3
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	7a1a      	ldrb	r2, [r3, #8]
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009538:	4b2e      	ldr	r3, [pc, #184]	; (80095f4 <tcp_listen_input+0x1f4>)
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	60da      	str	r2, [r3, #12]
 8009540:	4a2c      	ldr	r2, [pc, #176]	; (80095f4 <tcp_listen_input+0x1f4>)
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	6013      	str	r3, [r2, #0]
 8009546:	f003 fd29 	bl	800cf9c <tcp_timer_needed>
 800954a:	4b2b      	ldr	r3, [pc, #172]	; (80095f8 <tcp_listen_input+0x1f8>)
 800954c:	2201      	movs	r2, #1
 800954e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8009550:	6978      	ldr	r0, [r7, #20]
 8009552:	f001 fd8f 	bl	800b074 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8009556:	4b23      	ldr	r3, [pc, #140]	; (80095e4 <tcp_listen_input+0x1e4>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	89db      	ldrh	r3, [r3, #14]
 800955c:	b29a      	uxth	r2, r3
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	3304      	adds	r3, #4
 8009578:	4618      	mov	r0, r3
 800957a:	f005 f8ed 	bl	800e758 <ip4_route>
 800957e:	4601      	mov	r1, r0
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	3304      	adds	r3, #4
 8009584:	461a      	mov	r2, r3
 8009586:	4620      	mov	r0, r4
 8009588:	f7ff fa30 	bl	80089ec <tcp_eff_send_mss_netif>
 800958c:	4603      	mov	r3, r0
 800958e:	461a      	mov	r2, r3
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8009594:	2112      	movs	r1, #18
 8009596:	6978      	ldr	r0, [r7, #20]
 8009598:	f002 fc9c 	bl	800bed4 <tcp_enqueue_flags>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80095a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d004      	beq.n	80095b2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80095a8:	2100      	movs	r1, #0
 80095aa:	6978      	ldr	r0, [r7, #20]
 80095ac:	f7fd ff92 	bl	80074d4 <tcp_abandon>
      return;
 80095b0:	e006      	b.n	80095c0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80095b2:	6978      	ldr	r0, [r7, #20]
 80095b4:	f002 fd7c 	bl	800c0b0 <tcp_output>
  return;
 80095b8:	e001      	b.n	80095be <tcp_listen_input+0x1be>
    return;
 80095ba:	bf00      	nop
 80095bc:	e000      	b.n	80095c0 <tcp_listen_input+0x1c0>
  return;
 80095be:	bf00      	nop
}
 80095c0:	371c      	adds	r7, #28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd90      	pop	{r4, r7, pc}
 80095c6:	bf00      	nop
 80095c8:	200083cc 	.word	0x200083cc
 80095cc:	08012374 	.word	0x08012374
 80095d0:	0801256c 	.word	0x0801256c
 80095d4:	080123c0 	.word	0x080123c0
 80095d8:	200083c4 	.word	0x200083c4
 80095dc:	200083ca 	.word	0x200083ca
 80095e0:	200083c0 	.word	0x200083c0
 80095e4:	200083b0 	.word	0x200083b0
 80095e8:	20004e28 	.word	0x20004e28
 80095ec:	20004e2c 	.word	0x20004e2c
 80095f0:	20004e18 	.word	0x20004e18
 80095f4:	20008394 	.word	0x20008394
 80095f8:	2000839c 	.word	0x2000839c

080095fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af04      	add	r7, sp, #16
 8009602:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009604:	4b2f      	ldr	r3, [pc, #188]	; (80096c4 <tcp_timewait_input+0xc8>)
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	f003 0304 	and.w	r3, r3, #4
 800960c:	2b00      	cmp	r3, #0
 800960e:	d153      	bne.n	80096b8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d106      	bne.n	8009624 <tcp_timewait_input+0x28>
 8009616:	4b2c      	ldr	r3, [pc, #176]	; (80096c8 <tcp_timewait_input+0xcc>)
 8009618:	f240 22ee 	movw	r2, #750	; 0x2ee
 800961c:	492b      	ldr	r1, [pc, #172]	; (80096cc <tcp_timewait_input+0xd0>)
 800961e:	482c      	ldr	r0, [pc, #176]	; (80096d0 <tcp_timewait_input+0xd4>)
 8009620:	f006 faea 	bl	800fbf8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009624:	4b27      	ldr	r3, [pc, #156]	; (80096c4 <tcp_timewait_input+0xc8>)
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	f003 0302 	and.w	r3, r3, #2
 800962c:	2b00      	cmp	r3, #0
 800962e:	d02a      	beq.n	8009686 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009630:	4b28      	ldr	r3, [pc, #160]	; (80096d4 <tcp_timewait_input+0xd8>)
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009638:	1ad3      	subs	r3, r2, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	db2d      	blt.n	800969a <tcp_timewait_input+0x9e>
 800963e:	4b25      	ldr	r3, [pc, #148]	; (80096d4 <tcp_timewait_input+0xd8>)
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	6879      	ldr	r1, [r7, #4]
 8009648:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800964a:	440b      	add	r3, r1
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	2b00      	cmp	r3, #0
 8009650:	dc23      	bgt.n	800969a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009652:	4b21      	ldr	r3, [pc, #132]	; (80096d8 <tcp_timewait_input+0xdc>)
 8009654:	6819      	ldr	r1, [r3, #0]
 8009656:	4b21      	ldr	r3, [pc, #132]	; (80096dc <tcp_timewait_input+0xe0>)
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	4b1d      	ldr	r3, [pc, #116]	; (80096d4 <tcp_timewait_input+0xd8>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009662:	4b1f      	ldr	r3, [pc, #124]	; (80096e0 <tcp_timewait_input+0xe4>)
 8009664:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009666:	885b      	ldrh	r3, [r3, #2]
 8009668:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800966a:	4a1d      	ldr	r2, [pc, #116]	; (80096e0 <tcp_timewait_input+0xe4>)
 800966c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800966e:	8812      	ldrh	r2, [r2, #0]
 8009670:	b292      	uxth	r2, r2
 8009672:	9202      	str	r2, [sp, #8]
 8009674:	9301      	str	r3, [sp, #4]
 8009676:	4b1b      	ldr	r3, [pc, #108]	; (80096e4 <tcp_timewait_input+0xe8>)
 8009678:	9300      	str	r3, [sp, #0]
 800967a:	4b1b      	ldr	r3, [pc, #108]	; (80096e8 <tcp_timewait_input+0xec>)
 800967c:	4602      	mov	r2, r0
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f003 faca 	bl	800cc18 <tcp_rst>
      return;
 8009684:	e01b      	b.n	80096be <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8009686:	4b0f      	ldr	r3, [pc, #60]	; (80096c4 <tcp_timewait_input+0xc8>)
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b00      	cmp	r3, #0
 8009690:	d003      	beq.n	800969a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8009692:	4b16      	ldr	r3, [pc, #88]	; (80096ec <tcp_timewait_input+0xf0>)
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800969a:	4b10      	ldr	r3, [pc, #64]	; (80096dc <tcp_timewait_input+0xe0>)
 800969c:	881b      	ldrh	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00c      	beq.n	80096bc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	8b5b      	ldrh	r3, [r3, #26]
 80096a6:	f043 0302 	orr.w	r3, r3, #2
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f002 fcfd 	bl	800c0b0 <tcp_output>
  }
  return;
 80096b6:	e001      	b.n	80096bc <tcp_timewait_input+0xc0>
    return;
 80096b8:	bf00      	nop
 80096ba:	e000      	b.n	80096be <tcp_timewait_input+0xc2>
  return;
 80096bc:	bf00      	nop
}
 80096be:	3708      	adds	r7, #8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	200083cc 	.word	0x200083cc
 80096c8:	08012374 	.word	0x08012374
 80096cc:	0801258c 	.word	0x0801258c
 80096d0:	080123c0 	.word	0x080123c0
 80096d4:	200083c0 	.word	0x200083c0
 80096d8:	200083c4 	.word	0x200083c4
 80096dc:	200083ca 	.word	0x200083ca
 80096e0:	200083b0 	.word	0x200083b0
 80096e4:	20004e28 	.word	0x20004e28
 80096e8:	20004e2c 	.word	0x20004e2c
 80096ec:	20008388 	.word	0x20008388

080096f0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80096f0:	b590      	push	{r4, r7, lr}
 80096f2:	b08d      	sub	sp, #52	; 0x34
 80096f4:	af04      	add	r7, sp, #16
 80096f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80096f8:	2300      	movs	r3, #0
 80096fa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d106      	bne.n	8009714 <tcp_process+0x24>
 8009706:	4b9d      	ldr	r3, [pc, #628]	; (800997c <tcp_process+0x28c>)
 8009708:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800970c:	499c      	ldr	r1, [pc, #624]	; (8009980 <tcp_process+0x290>)
 800970e:	489d      	ldr	r0, [pc, #628]	; (8009984 <tcp_process+0x294>)
 8009710:	f006 fa72 	bl	800fbf8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009714:	4b9c      	ldr	r3, [pc, #624]	; (8009988 <tcp_process+0x298>)
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	f003 0304 	and.w	r3, r3, #4
 800971c:	2b00      	cmp	r3, #0
 800971e:	d04e      	beq.n	80097be <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	7d1b      	ldrb	r3, [r3, #20]
 8009724:	2b02      	cmp	r3, #2
 8009726:	d108      	bne.n	800973a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800972c:	4b97      	ldr	r3, [pc, #604]	; (800998c <tcp_process+0x29c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	429a      	cmp	r2, r3
 8009732:	d123      	bne.n	800977c <tcp_process+0x8c>
        acceptable = 1;
 8009734:	2301      	movs	r3, #1
 8009736:	76fb      	strb	r3, [r7, #27]
 8009738:	e020      	b.n	800977c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800973e:	4b94      	ldr	r3, [pc, #592]	; (8009990 <tcp_process+0x2a0>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d102      	bne.n	800974c <tcp_process+0x5c>
        acceptable = 1;
 8009746:	2301      	movs	r3, #1
 8009748:	76fb      	strb	r3, [r7, #27]
 800974a:	e017      	b.n	800977c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800974c:	4b90      	ldr	r3, [pc, #576]	; (8009990 <tcp_process+0x2a0>)
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	db10      	blt.n	800977c <tcp_process+0x8c>
 800975a:	4b8d      	ldr	r3, [pc, #564]	; (8009990 <tcp_process+0x2a0>)
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009766:	440b      	add	r3, r1
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	dc06      	bgt.n	800977c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	8b5b      	ldrh	r3, [r3, #26]
 8009772:	f043 0302 	orr.w	r3, r3, #2
 8009776:	b29a      	uxth	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800977c:	7efb      	ldrb	r3, [r7, #27]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d01b      	beq.n	80097ba <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	7d1b      	ldrb	r3, [r3, #20]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d106      	bne.n	8009798 <tcp_process+0xa8>
 800978a:	4b7c      	ldr	r3, [pc, #496]	; (800997c <tcp_process+0x28c>)
 800978c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8009790:	4980      	ldr	r1, [pc, #512]	; (8009994 <tcp_process+0x2a4>)
 8009792:	487c      	ldr	r0, [pc, #496]	; (8009984 <tcp_process+0x294>)
 8009794:	f006 fa30 	bl	800fbf8 <iprintf>
      recv_flags |= TF_RESET;
 8009798:	4b7f      	ldr	r3, [pc, #508]	; (8009998 <tcp_process+0x2a8>)
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	f043 0308 	orr.w	r3, r3, #8
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	4b7d      	ldr	r3, [pc, #500]	; (8009998 <tcp_process+0x2a8>)
 80097a4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	8b5b      	ldrh	r3, [r3, #26]
 80097aa:	f023 0301 	bic.w	r3, r3, #1
 80097ae:	b29a      	uxth	r2, r3
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80097b4:	f06f 030d 	mvn.w	r3, #13
 80097b8:	e37a      	b.n	8009eb0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80097ba:	2300      	movs	r3, #0
 80097bc:	e378      	b.n	8009eb0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80097be:	4b72      	ldr	r3, [pc, #456]	; (8009988 <tcp_process+0x298>)
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	f003 0302 	and.w	r3, r3, #2
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d010      	beq.n	80097ec <tcp_process+0xfc>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	7d1b      	ldrb	r3, [r3, #20]
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d00c      	beq.n	80097ec <tcp_process+0xfc>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	7d1b      	ldrb	r3, [r3, #20]
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	d008      	beq.n	80097ec <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	8b5b      	ldrh	r3, [r3, #26]
 80097de:	f043 0302 	orr.w	r3, r3, #2
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	e361      	b.n	8009eb0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	8b5b      	ldrh	r3, [r3, #26]
 80097f0:	f003 0310 	and.w	r3, r3, #16
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d103      	bne.n	8009800 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80097f8:	4b68      	ldr	r3, [pc, #416]	; (800999c <tcp_process+0x2ac>)
 80097fa:	681a      	ldr	r2, [r3, #0]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f001 fc2f 	bl	800b074 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	7d1b      	ldrb	r3, [r3, #20]
 800981a:	3b02      	subs	r3, #2
 800981c:	2b07      	cmp	r3, #7
 800981e:	f200 8337 	bhi.w	8009e90 <tcp_process+0x7a0>
 8009822:	a201      	add	r2, pc, #4	; (adr r2, 8009828 <tcp_process+0x138>)
 8009824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009828:	08009849 	.word	0x08009849
 800982c:	08009a79 	.word	0x08009a79
 8009830:	08009bf1 	.word	0x08009bf1
 8009834:	08009c1b 	.word	0x08009c1b
 8009838:	08009d3f 	.word	0x08009d3f
 800983c:	08009bf1 	.word	0x08009bf1
 8009840:	08009dcb 	.word	0x08009dcb
 8009844:	08009e5b 	.word	0x08009e5b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009848:	4b4f      	ldr	r3, [pc, #316]	; (8009988 <tcp_process+0x298>)
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	f003 0310 	and.w	r3, r3, #16
 8009850:	2b00      	cmp	r3, #0
 8009852:	f000 80e4 	beq.w	8009a1e <tcp_process+0x32e>
 8009856:	4b4c      	ldr	r3, [pc, #304]	; (8009988 <tcp_process+0x298>)
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	f003 0302 	and.w	r3, r3, #2
 800985e:	2b00      	cmp	r3, #0
 8009860:	f000 80dd 	beq.w	8009a1e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009868:	1c5a      	adds	r2, r3, #1
 800986a:	4b48      	ldr	r3, [pc, #288]	; (800998c <tcp_process+0x29c>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	429a      	cmp	r2, r3
 8009870:	f040 80d5 	bne.w	8009a1e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8009874:	4b46      	ldr	r3, [pc, #280]	; (8009990 <tcp_process+0x2a0>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	1c5a      	adds	r2, r3, #1
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8009886:	4b41      	ldr	r3, [pc, #260]	; (800998c <tcp_process+0x29c>)
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800988e:	4b44      	ldr	r3, [pc, #272]	; (80099a0 <tcp_process+0x2b0>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	89db      	ldrh	r3, [r3, #14]
 8009894:	b29a      	uxth	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80098a8:	4b39      	ldr	r3, [pc, #228]	; (8009990 <tcp_process+0x2a0>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	1e5a      	subs	r2, r3, #1
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2204      	movs	r2, #4
 80098b6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	3304      	adds	r3, #4
 80098c0:	4618      	mov	r0, r3
 80098c2:	f004 ff49 	bl	800e758 <ip4_route>
 80098c6:	4601      	mov	r1, r0
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3304      	adds	r3, #4
 80098cc:	461a      	mov	r2, r3
 80098ce:	4620      	mov	r0, r4
 80098d0:	f7ff f88c 	bl	80089ec <tcp_eff_send_mss_netif>
 80098d4:	4603      	mov	r3, r0
 80098d6:	461a      	mov	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098e0:	009a      	lsls	r2, r3, #2
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	f241 111c 	movw	r1, #4380	; 0x111c
 80098ec:	428b      	cmp	r3, r1
 80098ee:	bf38      	it	cc
 80098f0:	460b      	movcc	r3, r1
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d204      	bcs.n	8009900 <tcp_process+0x210>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	e00d      	b.n	800991c <tcp_process+0x22c>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009904:	005b      	lsls	r3, r3, #1
 8009906:	f241 121c 	movw	r2, #4380	; 0x111c
 800990a:	4293      	cmp	r3, r2
 800990c:	d904      	bls.n	8009918 <tcp_process+0x228>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009912:	005b      	lsls	r3, r3, #1
 8009914:	b29b      	uxth	r3, r3
 8009916:	e001      	b.n	800991c <tcp_process+0x22c>
 8009918:	f241 131c 	movw	r3, #4380	; 0x111c
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009928:	2b00      	cmp	r3, #0
 800992a:	d106      	bne.n	800993a <tcp_process+0x24a>
 800992c:	4b13      	ldr	r3, [pc, #76]	; (800997c <tcp_process+0x28c>)
 800992e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009932:	491c      	ldr	r1, [pc, #112]	; (80099a4 <tcp_process+0x2b4>)
 8009934:	4813      	ldr	r0, [pc, #76]	; (8009984 <tcp_process+0x294>)
 8009936:	f006 f95f 	bl	800fbf8 <iprintf>
        --pcb->snd_queuelen;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009940:	3b01      	subs	r3, #1
 8009942:	b29a      	uxth	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800994e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d12a      	bne.n	80099ac <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800995a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d106      	bne.n	8009970 <tcp_process+0x280>
 8009962:	4b06      	ldr	r3, [pc, #24]	; (800997c <tcp_process+0x28c>)
 8009964:	f44f 725d 	mov.w	r2, #884	; 0x374
 8009968:	490f      	ldr	r1, [pc, #60]	; (80099a8 <tcp_process+0x2b8>)
 800996a:	4806      	ldr	r0, [pc, #24]	; (8009984 <tcp_process+0x294>)
 800996c:	f006 f944 	bl	800fbf8 <iprintf>
          pcb->unsent = rseg->next;
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	66da      	str	r2, [r3, #108]	; 0x6c
 8009978:	e01c      	b.n	80099b4 <tcp_process+0x2c4>
 800997a:	bf00      	nop
 800997c:	08012374 	.word	0x08012374
 8009980:	080125ac 	.word	0x080125ac
 8009984:	080123c0 	.word	0x080123c0
 8009988:	200083cc 	.word	0x200083cc
 800998c:	200083c4 	.word	0x200083c4
 8009990:	200083c0 	.word	0x200083c0
 8009994:	080125c8 	.word	0x080125c8
 8009998:	200083cd 	.word	0x200083cd
 800999c:	20008388 	.word	0x20008388
 80099a0:	200083b0 	.word	0x200083b0
 80099a4:	080125e8 	.word	0x080125e8
 80099a8:	08012600 	.word	0x08012600
        } else {
          pcb->unacked = rseg->next;
 80099ac:	69fb      	ldr	r3, [r7, #28]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80099b4:	69f8      	ldr	r0, [r7, #28]
 80099b6:	f7fe fc94 	bl	80082e2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d104      	bne.n	80099cc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099c8:	861a      	strh	r2, [r3, #48]	; 0x30
 80099ca:	e006      	b.n	80099da <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d00a      	beq.n	80099fa <tcp_process+0x30a>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	6910      	ldr	r0, [r2, #16]
 80099ee:	2200      	movs	r2, #0
 80099f0:	6879      	ldr	r1, [r7, #4]
 80099f2:	4798      	blx	r3
 80099f4:	4603      	mov	r3, r0
 80099f6:	76bb      	strb	r3, [r7, #26]
 80099f8:	e001      	b.n	80099fe <tcp_process+0x30e>
 80099fa:	2300      	movs	r3, #0
 80099fc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80099fe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009a02:	f113 0f0d 	cmn.w	r3, #13
 8009a06:	d102      	bne.n	8009a0e <tcp_process+0x31e>
          return ERR_ABRT;
 8009a08:	f06f 030c 	mvn.w	r3, #12
 8009a0c:	e250      	b.n	8009eb0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	8b5b      	ldrh	r3, [r3, #26]
 8009a12:	f043 0302 	orr.w	r3, r3, #2
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009a1c:	e23a      	b.n	8009e94 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009a1e:	4b98      	ldr	r3, [pc, #608]	; (8009c80 <tcp_process+0x590>)
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	f003 0310 	and.w	r3, r3, #16
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f000 8234 	beq.w	8009e94 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a2c:	4b95      	ldr	r3, [pc, #596]	; (8009c84 <tcp_process+0x594>)
 8009a2e:	6819      	ldr	r1, [r3, #0]
 8009a30:	4b95      	ldr	r3, [pc, #596]	; (8009c88 <tcp_process+0x598>)
 8009a32:	881b      	ldrh	r3, [r3, #0]
 8009a34:	461a      	mov	r2, r3
 8009a36:	4b95      	ldr	r3, [pc, #596]	; (8009c8c <tcp_process+0x59c>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a3c:	4b94      	ldr	r3, [pc, #592]	; (8009c90 <tcp_process+0x5a0>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a40:	885b      	ldrh	r3, [r3, #2]
 8009a42:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a44:	4a92      	ldr	r2, [pc, #584]	; (8009c90 <tcp_process+0x5a0>)
 8009a46:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a48:	8812      	ldrh	r2, [r2, #0]
 8009a4a:	b292      	uxth	r2, r2
 8009a4c:	9202      	str	r2, [sp, #8]
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	4b90      	ldr	r3, [pc, #576]	; (8009c94 <tcp_process+0x5a4>)
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	4b90      	ldr	r3, [pc, #576]	; (8009c98 <tcp_process+0x5a8>)
 8009a56:	4602      	mov	r2, r0
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f003 f8dd 	bl	800cc18 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009a64:	2b05      	cmp	r3, #5
 8009a66:	f200 8215 	bhi.w	8009e94 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f002 fea7 	bl	800c7c4 <tcp_rexmit_rto>
      break;
 8009a76:	e20d      	b.n	8009e94 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8009a78:	4b81      	ldr	r3, [pc, #516]	; (8009c80 <tcp_process+0x590>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	f003 0310 	and.w	r3, r3, #16
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	f000 80a1 	beq.w	8009bc8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009a86:	4b7f      	ldr	r3, [pc, #508]	; (8009c84 <tcp_process+0x594>)
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	3b01      	subs	r3, #1
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	db7e      	blt.n	8009b94 <tcp_process+0x4a4>
 8009a96:	4b7b      	ldr	r3, [pc, #492]	; (8009c84 <tcp_process+0x594>)
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	dc77      	bgt.n	8009b94 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2204      	movs	r2, #4
 8009aa8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d102      	bne.n	8009ab8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009ab2:	23fa      	movs	r3, #250	; 0xfa
 8009ab4:	76bb      	strb	r3, [r7, #26]
 8009ab6:	e01d      	b.n	8009af4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d106      	bne.n	8009ad0 <tcp_process+0x3e0>
 8009ac2:	4b76      	ldr	r3, [pc, #472]	; (8009c9c <tcp_process+0x5ac>)
 8009ac4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009ac8:	4975      	ldr	r1, [pc, #468]	; (8009ca0 <tcp_process+0x5b0>)
 8009aca:	4876      	ldr	r0, [pc, #472]	; (8009ca4 <tcp_process+0x5b4>)
 8009acc:	f006 f894 	bl	800fbf8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ad4:	699b      	ldr	r3, [r3, #24]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00a      	beq.n	8009af0 <tcp_process+0x400>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	687a      	ldr	r2, [r7, #4]
 8009ae2:	6910      	ldr	r0, [r2, #16]
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	6879      	ldr	r1, [r7, #4]
 8009ae8:	4798      	blx	r3
 8009aea:	4603      	mov	r3, r0
 8009aec:	76bb      	strb	r3, [r7, #26]
 8009aee:	e001      	b.n	8009af4 <tcp_process+0x404>
 8009af0:	23f0      	movs	r3, #240	; 0xf0
 8009af2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009af4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00a      	beq.n	8009b12 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009afc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009b00:	f113 0f0d 	cmn.w	r3, #13
 8009b04:	d002      	beq.n	8009b0c <tcp_process+0x41c>
              tcp_abort(pcb);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7fd fda2 	bl	8007650 <tcp_abort>
            }
            return ERR_ABRT;
 8009b0c:	f06f 030c 	mvn.w	r3, #12
 8009b10:	e1ce      	b.n	8009eb0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fae0 	bl	800a0d8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009b18:	4b63      	ldr	r3, [pc, #396]	; (8009ca8 <tcp_process+0x5b8>)
 8009b1a:	881b      	ldrh	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d005      	beq.n	8009b2c <tcp_process+0x43c>
            recv_acked--;
 8009b20:	4b61      	ldr	r3, [pc, #388]	; (8009ca8 <tcp_process+0x5b8>)
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	3b01      	subs	r3, #1
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	4b5f      	ldr	r3, [pc, #380]	; (8009ca8 <tcp_process+0x5b8>)
 8009b2a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b30:	009a      	lsls	r2, r3, #2
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	f241 111c 	movw	r1, #4380	; 0x111c
 8009b3c:	428b      	cmp	r3, r1
 8009b3e:	bf38      	it	cc
 8009b40:	460b      	movcc	r3, r1
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d204      	bcs.n	8009b50 <tcp_process+0x460>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	e00d      	b.n	8009b6c <tcp_process+0x47c>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	f241 121c 	movw	r2, #4380	; 0x111c
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d904      	bls.n	8009b68 <tcp_process+0x478>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b62:	005b      	lsls	r3, r3, #1
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	e001      	b.n	8009b6c <tcp_process+0x47c>
 8009b68:	f241 131c 	movw	r3, #4380	; 0x111c
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8009b72:	4b4e      	ldr	r3, [pc, #312]	; (8009cac <tcp_process+0x5bc>)
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	f003 0320 	and.w	r3, r3, #32
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d037      	beq.n	8009bee <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	8b5b      	ldrh	r3, [r3, #26]
 8009b82:	f043 0302 	orr.w	r3, r3, #2
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2207      	movs	r2, #7
 8009b90:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8009b92:	e02c      	b.n	8009bee <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009b94:	4b3b      	ldr	r3, [pc, #236]	; (8009c84 <tcp_process+0x594>)
 8009b96:	6819      	ldr	r1, [r3, #0]
 8009b98:	4b3b      	ldr	r3, [pc, #236]	; (8009c88 <tcp_process+0x598>)
 8009b9a:	881b      	ldrh	r3, [r3, #0]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	4b3b      	ldr	r3, [pc, #236]	; (8009c8c <tcp_process+0x59c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009ba4:	4b3a      	ldr	r3, [pc, #232]	; (8009c90 <tcp_process+0x5a0>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009ba8:	885b      	ldrh	r3, [r3, #2]
 8009baa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009bac:	4a38      	ldr	r2, [pc, #224]	; (8009c90 <tcp_process+0x5a0>)
 8009bae:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009bb0:	8812      	ldrh	r2, [r2, #0]
 8009bb2:	b292      	uxth	r2, r2
 8009bb4:	9202      	str	r2, [sp, #8]
 8009bb6:	9301      	str	r3, [sp, #4]
 8009bb8:	4b36      	ldr	r3, [pc, #216]	; (8009c94 <tcp_process+0x5a4>)
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	4b36      	ldr	r3, [pc, #216]	; (8009c98 <tcp_process+0x5a8>)
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f003 f829 	bl	800cc18 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009bc6:	e167      	b.n	8009e98 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009bc8:	4b2d      	ldr	r3, [pc, #180]	; (8009c80 <tcp_process+0x590>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 8161 	beq.w	8009e98 <tcp_process+0x7a8>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bda:	1e5a      	subs	r2, r3, #1
 8009bdc:	4b2b      	ldr	r3, [pc, #172]	; (8009c8c <tcp_process+0x59c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	f040 8159 	bne.w	8009e98 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f002 fe0e 	bl	800c808 <tcp_rexmit>
      break;
 8009bec:	e154      	b.n	8009e98 <tcp_process+0x7a8>
 8009bee:	e153      	b.n	8009e98 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fa71 	bl	800a0d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009bf6:	4b2d      	ldr	r3, [pc, #180]	; (8009cac <tcp_process+0x5bc>)
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	f003 0320 	and.w	r3, r3, #32
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 814c 	beq.w	8009e9c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	8b5b      	ldrh	r3, [r3, #26]
 8009c08:	f043 0302 	orr.w	r3, r3, #2
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2207      	movs	r2, #7
 8009c16:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009c18:	e140      	b.n	8009e9c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fa5c 	bl	800a0d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009c20:	4b22      	ldr	r3, [pc, #136]	; (8009cac <tcp_process+0x5bc>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	f003 0320 	and.w	r3, r3, #32
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d071      	beq.n	8009d10 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c2c:	4b14      	ldr	r3, [pc, #80]	; (8009c80 <tcp_process+0x590>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	f003 0310 	and.w	r3, r3, #16
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d060      	beq.n	8009cfa <tcp_process+0x60a>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c3c:	4b11      	ldr	r3, [pc, #68]	; (8009c84 <tcp_process+0x594>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d15a      	bne.n	8009cfa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d156      	bne.n	8009cfa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	8b5b      	ldrh	r3, [r3, #26]
 8009c50:	f043 0302 	orr.w	r3, r3, #2
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7fe fdbc 	bl	80087d8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009c60:	4b13      	ldr	r3, [pc, #76]	; (8009cb0 <tcp_process+0x5c0>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d105      	bne.n	8009c76 <tcp_process+0x586>
 8009c6a:	4b11      	ldr	r3, [pc, #68]	; (8009cb0 <tcp_process+0x5c0>)
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68db      	ldr	r3, [r3, #12]
 8009c70:	4a0f      	ldr	r2, [pc, #60]	; (8009cb0 <tcp_process+0x5c0>)
 8009c72:	6013      	str	r3, [r2, #0]
 8009c74:	e02e      	b.n	8009cd4 <tcp_process+0x5e4>
 8009c76:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <tcp_process+0x5c0>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	617b      	str	r3, [r7, #20]
 8009c7c:	e027      	b.n	8009cce <tcp_process+0x5de>
 8009c7e:	bf00      	nop
 8009c80:	200083cc 	.word	0x200083cc
 8009c84:	200083c4 	.word	0x200083c4
 8009c88:	200083ca 	.word	0x200083ca
 8009c8c:	200083c0 	.word	0x200083c0
 8009c90:	200083b0 	.word	0x200083b0
 8009c94:	20004e28 	.word	0x20004e28
 8009c98:	20004e2c 	.word	0x20004e2c
 8009c9c:	08012374 	.word	0x08012374
 8009ca0:	08012614 	.word	0x08012614
 8009ca4:	080123c0 	.word	0x080123c0
 8009ca8:	200083c8 	.word	0x200083c8
 8009cac:	200083cd 	.word	0x200083cd
 8009cb0:	20008394 	.word	0x20008394
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d104      	bne.n	8009cc8 <tcp_process+0x5d8>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68da      	ldr	r2, [r3, #12]
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	60da      	str	r2, [r3, #12]
 8009cc6:	e005      	b.n	8009cd4 <tcp_process+0x5e4>
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	617b      	str	r3, [r7, #20]
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d1ef      	bne.n	8009cb4 <tcp_process+0x5c4>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	60da      	str	r2, [r3, #12]
 8009cda:	4b77      	ldr	r3, [pc, #476]	; (8009eb8 <tcp_process+0x7c8>)
 8009cdc:	2201      	movs	r2, #1
 8009cde:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	220a      	movs	r2, #10
 8009ce4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009ce6:	4b75      	ldr	r3, [pc, #468]	; (8009ebc <tcp_process+0x7cc>)
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	60da      	str	r2, [r3, #12]
 8009cee:	4a73      	ldr	r2, [pc, #460]	; (8009ebc <tcp_process+0x7cc>)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	6013      	str	r3, [r2, #0]
 8009cf4:	f003 f952 	bl	800cf9c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009cf8:	e0d2      	b.n	8009ea0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	8b5b      	ldrh	r3, [r3, #26]
 8009cfe:	f043 0302 	orr.w	r3, r3, #2
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2208      	movs	r2, #8
 8009d0c:	751a      	strb	r2, [r3, #20]
      break;
 8009d0e:	e0c7      	b.n	8009ea0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d10:	4b6b      	ldr	r3, [pc, #428]	; (8009ec0 <tcp_process+0x7d0>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	f003 0310 	and.w	r3, r3, #16
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f000 80c1 	beq.w	8009ea0 <tcp_process+0x7b0>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009d22:	4b68      	ldr	r3, [pc, #416]	; (8009ec4 <tcp_process+0x7d4>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	f040 80ba 	bne.w	8009ea0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	f040 80b5 	bne.w	8009ea0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2206      	movs	r2, #6
 8009d3a:	751a      	strb	r2, [r3, #20]
      break;
 8009d3c:	e0b0      	b.n	8009ea0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 f9ca 	bl	800a0d8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009d44:	4b60      	ldr	r3, [pc, #384]	; (8009ec8 <tcp_process+0x7d8>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	f003 0320 	and.w	r3, r3, #32
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	f000 80a9 	beq.w	8009ea4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	8b5b      	ldrh	r3, [r3, #26]
 8009d56:	f043 0302 	orr.w	r3, r3, #2
 8009d5a:	b29a      	uxth	r2, r3
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7fe fd39 	bl	80087d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009d66:	4b59      	ldr	r3, [pc, #356]	; (8009ecc <tcp_process+0x7dc>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d105      	bne.n	8009d7c <tcp_process+0x68c>
 8009d70:	4b56      	ldr	r3, [pc, #344]	; (8009ecc <tcp_process+0x7dc>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	4a55      	ldr	r2, [pc, #340]	; (8009ecc <tcp_process+0x7dc>)
 8009d78:	6013      	str	r3, [r2, #0]
 8009d7a:	e013      	b.n	8009da4 <tcp_process+0x6b4>
 8009d7c:	4b53      	ldr	r3, [pc, #332]	; (8009ecc <tcp_process+0x7dc>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	613b      	str	r3, [r7, #16]
 8009d82:	e00c      	b.n	8009d9e <tcp_process+0x6ae>
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d104      	bne.n	8009d98 <tcp_process+0x6a8>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68da      	ldr	r2, [r3, #12]
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	60da      	str	r2, [r3, #12]
 8009d96:	e005      	b.n	8009da4 <tcp_process+0x6b4>
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	613b      	str	r3, [r7, #16]
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d1ef      	bne.n	8009d84 <tcp_process+0x694>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2200      	movs	r2, #0
 8009da8:	60da      	str	r2, [r3, #12]
 8009daa:	4b43      	ldr	r3, [pc, #268]	; (8009eb8 <tcp_process+0x7c8>)
 8009dac:	2201      	movs	r2, #1
 8009dae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	220a      	movs	r2, #10
 8009db4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009db6:	4b41      	ldr	r3, [pc, #260]	; (8009ebc <tcp_process+0x7cc>)
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	60da      	str	r2, [r3, #12]
 8009dbe:	4a3f      	ldr	r2, [pc, #252]	; (8009ebc <tcp_process+0x7cc>)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	f003 f8ea 	bl	800cf9c <tcp_timer_needed>
      }
      break;
 8009dc8:	e06c      	b.n	8009ea4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f984 	bl	800a0d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009dd0:	4b3b      	ldr	r3, [pc, #236]	; (8009ec0 <tcp_process+0x7d0>)
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	f003 0310 	and.w	r3, r3, #16
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d065      	beq.n	8009ea8 <tcp_process+0x7b8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009de0:	4b38      	ldr	r3, [pc, #224]	; (8009ec4 <tcp_process+0x7d4>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d15f      	bne.n	8009ea8 <tcp_process+0x7b8>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d15b      	bne.n	8009ea8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f7fe fcf1 	bl	80087d8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009df6:	4b35      	ldr	r3, [pc, #212]	; (8009ecc <tcp_process+0x7dc>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d105      	bne.n	8009e0c <tcp_process+0x71c>
 8009e00:	4b32      	ldr	r3, [pc, #200]	; (8009ecc <tcp_process+0x7dc>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	4a31      	ldr	r2, [pc, #196]	; (8009ecc <tcp_process+0x7dc>)
 8009e08:	6013      	str	r3, [r2, #0]
 8009e0a:	e013      	b.n	8009e34 <tcp_process+0x744>
 8009e0c:	4b2f      	ldr	r3, [pc, #188]	; (8009ecc <tcp_process+0x7dc>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	60fb      	str	r3, [r7, #12]
 8009e12:	e00c      	b.n	8009e2e <tcp_process+0x73e>
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d104      	bne.n	8009e28 <tcp_process+0x738>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68da      	ldr	r2, [r3, #12]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	60da      	str	r2, [r3, #12]
 8009e26:	e005      	b.n	8009e34 <tcp_process+0x744>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1ef      	bne.n	8009e14 <tcp_process+0x724>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	60da      	str	r2, [r3, #12]
 8009e3a:	4b1f      	ldr	r3, [pc, #124]	; (8009eb8 <tcp_process+0x7c8>)
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	220a      	movs	r2, #10
 8009e44:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009e46:	4b1d      	ldr	r3, [pc, #116]	; (8009ebc <tcp_process+0x7cc>)
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	60da      	str	r2, [r3, #12]
 8009e4e:	4a1b      	ldr	r2, [pc, #108]	; (8009ebc <tcp_process+0x7cc>)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6013      	str	r3, [r2, #0]
 8009e54:	f003 f8a2 	bl	800cf9c <tcp_timer_needed>
      }
      break;
 8009e58:	e026      	b.n	8009ea8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f93c 	bl	800a0d8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009e60:	4b17      	ldr	r3, [pc, #92]	; (8009ec0 <tcp_process+0x7d0>)
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	f003 0310 	and.w	r3, r3, #16
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01f      	beq.n	8009eac <tcp_process+0x7bc>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e70:	4b14      	ldr	r3, [pc, #80]	; (8009ec4 <tcp_process+0x7d4>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d119      	bne.n	8009eac <tcp_process+0x7bc>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d115      	bne.n	8009eac <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009e80:	4b11      	ldr	r3, [pc, #68]	; (8009ec8 <tcp_process+0x7d8>)
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	f043 0310 	orr.w	r3, r3, #16
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	4b0f      	ldr	r3, [pc, #60]	; (8009ec8 <tcp_process+0x7d8>)
 8009e8c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009e8e:	e00d      	b.n	8009eac <tcp_process+0x7bc>
    default:
      break;
 8009e90:	bf00      	nop
 8009e92:	e00c      	b.n	8009eae <tcp_process+0x7be>
      break;
 8009e94:	bf00      	nop
 8009e96:	e00a      	b.n	8009eae <tcp_process+0x7be>
      break;
 8009e98:	bf00      	nop
 8009e9a:	e008      	b.n	8009eae <tcp_process+0x7be>
      break;
 8009e9c:	bf00      	nop
 8009e9e:	e006      	b.n	8009eae <tcp_process+0x7be>
      break;
 8009ea0:	bf00      	nop
 8009ea2:	e004      	b.n	8009eae <tcp_process+0x7be>
      break;
 8009ea4:	bf00      	nop
 8009ea6:	e002      	b.n	8009eae <tcp_process+0x7be>
      break;
 8009ea8:	bf00      	nop
 8009eaa:	e000      	b.n	8009eae <tcp_process+0x7be>
      break;
 8009eac:	bf00      	nop
  }
  return ERR_OK;
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3724      	adds	r7, #36	; 0x24
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd90      	pop	{r4, r7, pc}
 8009eb8:	2000839c 	.word	0x2000839c
 8009ebc:	20008398 	.word	0x20008398
 8009ec0:	200083cc 	.word	0x200083cc
 8009ec4:	200083c4 	.word	0x200083c4
 8009ec8:	200083cd 	.word	0x200083cd
 8009ecc:	20008394 	.word	0x20008394

08009ed0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009ed0:	b590      	push	{r4, r7, lr}
 8009ed2:	b085      	sub	sp, #20
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d106      	bne.n	8009eee <tcp_oos_insert_segment+0x1e>
 8009ee0:	4b3b      	ldr	r3, [pc, #236]	; (8009fd0 <tcp_oos_insert_segment+0x100>)
 8009ee2:	f240 421f 	movw	r2, #1055	; 0x41f
 8009ee6:	493b      	ldr	r1, [pc, #236]	; (8009fd4 <tcp_oos_insert_segment+0x104>)
 8009ee8:	483b      	ldr	r0, [pc, #236]	; (8009fd8 <tcp_oos_insert_segment+0x108>)
 8009eea:	f005 fe85 	bl	800fbf8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	899b      	ldrh	r3, [r3, #12]
 8009ef4:	b29b      	uxth	r3, r3
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fb fa32 	bl	8005360 <lwip_htons>
 8009efc:	4603      	mov	r3, r0
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d028      	beq.n	8009f5a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009f08:	6838      	ldr	r0, [r7, #0]
 8009f0a:	f7fe f9d5 	bl	80082b8 <tcp_segs_free>
    next = NULL;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	603b      	str	r3, [r7, #0]
 8009f12:	e056      	b.n	8009fc2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	899b      	ldrh	r3, [r3, #12]
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fb fa1f 	bl	8005360 <lwip_htons>
 8009f22:	4603      	mov	r3, r0
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	f003 0301 	and.w	r3, r3, #1
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00d      	beq.n	8009f4a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	899b      	ldrh	r3, [r3, #12]
 8009f34:	b29c      	uxth	r4, r3
 8009f36:	2001      	movs	r0, #1
 8009f38:	f7fb fa12 	bl	8005360 <lwip_htons>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	461a      	mov	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	4322      	orrs	r2, r4
 8009f46:	b292      	uxth	r2, r2
 8009f48:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7fe f9c4 	bl	80082e2 <tcp_seg_free>
    while (next &&
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00e      	beq.n	8009f7e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	891b      	ldrh	r3, [r3, #8]
 8009f64:	461a      	mov	r2, r3
 8009f66:	4b1d      	ldr	r3, [pc, #116]	; (8009fdc <tcp_oos_insert_segment+0x10c>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	441a      	add	r2, r3
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	8909      	ldrh	r1, [r1, #8]
 8009f76:	440b      	add	r3, r1
 8009f78:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	daca      	bge.n	8009f14 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d01e      	beq.n	8009fc2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	891b      	ldrh	r3, [r3, #8]
 8009f88:	461a      	mov	r2, r3
 8009f8a:	4b14      	ldr	r3, [pc, #80]	; (8009fdc <tcp_oos_insert_segment+0x10c>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	441a      	add	r2, r3
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	dd12      	ble.n	8009fc2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	b29a      	uxth	r2, r3
 8009fa4:	4b0d      	ldr	r3, [pc, #52]	; (8009fdc <tcp_oos_insert_segment+0x10c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	1ad3      	subs	r3, r2, r3
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	891b      	ldrh	r3, [r3, #8]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	f7fc fba7 	bl	8006710 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	601a      	str	r2, [r3, #0]
}
 8009fc8:	bf00      	nop
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd90      	pop	{r4, r7, pc}
 8009fd0:	08012374 	.word	0x08012374
 8009fd4:	08012634 	.word	0x08012634
 8009fd8:	080123c0 	.word	0x080123c0
 8009fdc:	200083c0 	.word	0x200083c0

08009fe0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009fe0:	b5b0      	push	{r4, r5, r7, lr}
 8009fe2:	b086      	sub	sp, #24
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
 8009fec:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009fee:	e03e      	b.n	800a06e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	685b      	ldr	r3, [r3, #4]
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fc fd94 	bl	8006b2c <pbuf_clen>
 800a004:	4603      	mov	r3, r0
 800a006:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a00e:	8a7a      	ldrh	r2, [r7, #18]
 800a010:	429a      	cmp	r2, r3
 800a012:	d906      	bls.n	800a022 <tcp_free_acked_segments+0x42>
 800a014:	4b2a      	ldr	r3, [pc, #168]	; (800a0c0 <tcp_free_acked_segments+0xe0>)
 800a016:	f240 4257 	movw	r2, #1111	; 0x457
 800a01a:	492a      	ldr	r1, [pc, #168]	; (800a0c4 <tcp_free_acked_segments+0xe4>)
 800a01c:	482a      	ldr	r0, [pc, #168]	; (800a0c8 <tcp_free_acked_segments+0xe8>)
 800a01e:	f005 fdeb 	bl	800fbf8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800a028:	8a7b      	ldrh	r3, [r7, #18]
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	891a      	ldrh	r2, [r3, #8]
 800a038:	4b24      	ldr	r3, [pc, #144]	; (800a0cc <tcp_free_acked_segments+0xec>)
 800a03a:	881b      	ldrh	r3, [r3, #0]
 800a03c:	4413      	add	r3, r2
 800a03e:	b29a      	uxth	r2, r3
 800a040:	4b22      	ldr	r3, [pc, #136]	; (800a0cc <tcp_free_acked_segments+0xec>)
 800a042:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800a044:	6978      	ldr	r0, [r7, #20]
 800a046:	f7fe f94c 	bl	80082e2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00c      	beq.n	800a06e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d109      	bne.n	800a06e <tcp_free_acked_segments+0x8e>
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d106      	bne.n	800a06e <tcp_free_acked_segments+0x8e>
 800a060:	4b17      	ldr	r3, [pc, #92]	; (800a0c0 <tcp_free_acked_segments+0xe0>)
 800a062:	f240 4261 	movw	r2, #1121	; 0x461
 800a066:	491a      	ldr	r1, [pc, #104]	; (800a0d0 <tcp_free_acked_segments+0xf0>)
 800a068:	4817      	ldr	r0, [pc, #92]	; (800a0c8 <tcp_free_acked_segments+0xe8>)
 800a06a:	f005 fdc5 	bl	800fbf8 <iprintf>
  while (seg_list != NULL &&
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d020      	beq.n	800a0b6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f7fb f985 	bl	800538a <lwip_htonl>
 800a080:	4604      	mov	r4, r0
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	891b      	ldrh	r3, [r3, #8]
 800a086:	461d      	mov	r5, r3
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	899b      	ldrh	r3, [r3, #12]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	4618      	mov	r0, r3
 800a092:	f7fb f965 	bl	8005360 <lwip_htons>
 800a096:	4603      	mov	r3, r0
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	f003 0303 	and.w	r3, r3, #3
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <tcp_free_acked_segments+0xc6>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e000      	b.n	800a0a8 <tcp_free_acked_segments+0xc8>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	442b      	add	r3, r5
 800a0aa:	18e2      	adds	r2, r4, r3
 800a0ac:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <tcp_free_acked_segments+0xf4>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	dd9c      	ble.n	8009ff0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bdb0      	pop	{r4, r5, r7, pc}
 800a0c0:	08012374 	.word	0x08012374
 800a0c4:	0801265c 	.word	0x0801265c
 800a0c8:	080123c0 	.word	0x080123c0
 800a0cc:	200083c8 	.word	0x200083c8
 800a0d0:	08012684 	.word	0x08012684
 800a0d4:	200083c4 	.word	0x200083c4

0800a0d8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800a0d8:	b5b0      	push	{r4, r5, r7, lr}
 800a0da:	b094      	sub	sp, #80	; 0x50
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d106      	bne.n	800a0f8 <tcp_receive+0x20>
 800a0ea:	4b91      	ldr	r3, [pc, #580]	; (800a330 <tcp_receive+0x258>)
 800a0ec:	f240 427b 	movw	r2, #1147	; 0x47b
 800a0f0:	4990      	ldr	r1, [pc, #576]	; (800a334 <tcp_receive+0x25c>)
 800a0f2:	4891      	ldr	r0, [pc, #580]	; (800a338 <tcp_receive+0x260>)
 800a0f4:	f005 fd80 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	7d1b      	ldrb	r3, [r3, #20]
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	d806      	bhi.n	800a10e <tcp_receive+0x36>
 800a100:	4b8b      	ldr	r3, [pc, #556]	; (800a330 <tcp_receive+0x258>)
 800a102:	f240 427c 	movw	r2, #1148	; 0x47c
 800a106:	498d      	ldr	r1, [pc, #564]	; (800a33c <tcp_receive+0x264>)
 800a108:	488b      	ldr	r0, [pc, #556]	; (800a338 <tcp_receive+0x260>)
 800a10a:	f005 fd75 	bl	800fbf8 <iprintf>

  if (flags & TCP_ACK) {
 800a10e:	4b8c      	ldr	r3, [pc, #560]	; (800a340 <tcp_receive+0x268>)
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	f003 0310 	and.w	r3, r3, #16
 800a116:	2b00      	cmp	r3, #0
 800a118:	f000 8264 	beq.w	800a5e4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a122:	461a      	mov	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a128:	4413      	add	r3, r2
 800a12a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a130:	4b84      	ldr	r3, [pc, #528]	; (800a344 <tcp_receive+0x26c>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	db1b      	blt.n	800a172 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a13e:	4b81      	ldr	r3, [pc, #516]	; (800a344 <tcp_receive+0x26c>)
 800a140:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a142:	429a      	cmp	r2, r3
 800a144:	d106      	bne.n	800a154 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a14a:	4b7f      	ldr	r3, [pc, #508]	; (800a348 <tcp_receive+0x270>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	1ad3      	subs	r3, r2, r3
 800a150:	2b00      	cmp	r3, #0
 800a152:	db0e      	blt.n	800a172 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a158:	4b7b      	ldr	r3, [pc, #492]	; (800a348 <tcp_receive+0x270>)
 800a15a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a15c:	429a      	cmp	r2, r3
 800a15e:	d125      	bne.n	800a1ac <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a160:	4b7a      	ldr	r3, [pc, #488]	; (800a34c <tcp_receive+0x274>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	89db      	ldrh	r3, [r3, #14]
 800a166:	b29a      	uxth	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a16e:	429a      	cmp	r2, r3
 800a170:	d91c      	bls.n	800a1ac <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a172:	4b76      	ldr	r3, [pc, #472]	; (800a34c <tcp_receive+0x274>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	89db      	ldrh	r3, [r3, #14]
 800a178:	b29a      	uxth	r2, r3
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d205      	bcs.n	800a19c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800a19c:	4b69      	ldr	r3, [pc, #420]	; (800a344 <tcp_receive+0x26c>)
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a1a4:	4b68      	ldr	r3, [pc, #416]	; (800a348 <tcp_receive+0x270>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a1ac:	4b66      	ldr	r3, [pc, #408]	; (800a348 <tcp_receive+0x270>)
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	dc58      	bgt.n	800a26c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a1ba:	4b65      	ldr	r3, [pc, #404]	; (800a350 <tcp_receive+0x278>)
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d14b      	bne.n	800a25a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1c6:	687a      	ldr	r2, [r7, #4]
 800a1c8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a1cc:	4413      	add	r3, r2
 800a1ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d142      	bne.n	800a25a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	db3d      	blt.n	800a25a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1e2:	4b59      	ldr	r3, [pc, #356]	; (800a348 <tcp_receive+0x270>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d137      	bne.n	800a25a <tcp_receive+0x182>
              found_dupack = 1;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1f4:	2bff      	cmp	r3, #255	; 0xff
 800a1f6:	d007      	beq.n	800a208 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a1fe:	3301      	adds	r3, #1
 800a200:	b2da      	uxtb	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a20e:	2b03      	cmp	r3, #3
 800a210:	d91b      	bls.n	800a24a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a21c:	4413      	add	r3, r2
 800a21e:	b29a      	uxth	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a226:	429a      	cmp	r2, r3
 800a228:	d30a      	bcc.n	800a240 <tcp_receive+0x168>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a234:	4413      	add	r3, r2
 800a236:	b29a      	uxth	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a23e:	e004      	b.n	800a24a <tcp_receive+0x172>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a246:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a250:	2b02      	cmp	r3, #2
 800a252:	d902      	bls.n	800a25a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f002 fb43 	bl	800c8e0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a25a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f040 8161 	bne.w	800a524 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a26a:	e15b      	b.n	800a524 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a26c:	4b36      	ldr	r3, [pc, #216]	; (800a348 <tcp_receive+0x270>)
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	3b01      	subs	r3, #1
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f2c0 814e 	blt.w	800a51a <tcp_receive+0x442>
 800a27e:	4b32      	ldr	r3, [pc, #200]	; (800a348 <tcp_receive+0x270>)
 800a280:	681a      	ldr	r2, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a286:	1ad3      	subs	r3, r2, r3
 800a288:	2b00      	cmp	r3, #0
 800a28a:	f300 8146 	bgt.w	800a51a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	8b5b      	ldrh	r3, [r3, #26]
 800a292:	f003 0304 	and.w	r3, r3, #4
 800a296:	2b00      	cmp	r3, #0
 800a298:	d010      	beq.n	800a2bc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	8b5b      	ldrh	r3, [r3, #26]
 800a29e:	f023 0304 	bic.w	r3, r3, #4
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a2ca:	10db      	asrs	r3, r3, #3
 800a2cc:	b21b      	sxth	r3, r3
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	4413      	add	r3, r2
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	b21a      	sxth	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a2e4:	4b18      	ldr	r3, [pc, #96]	; (800a348 <tcp_receive+0x270>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a2fc:	4b12      	ldr	r3, [pc, #72]	; (800a348 <tcp_receive+0x270>)
 800a2fe:	681a      	ldr	r2, [r3, #0]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	7d1b      	ldrb	r3, [r3, #20]
 800a308:	2b03      	cmp	r3, #3
 800a30a:	f240 8097 	bls.w	800a43c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d245      	bcs.n	800a3aa <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	8b5b      	ldrh	r3, [r3, #26]
 800a322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a326:	2b00      	cmp	r3, #0
 800a328:	d014      	beq.n	800a354 <tcp_receive+0x27c>
 800a32a:	2301      	movs	r3, #1
 800a32c:	e013      	b.n	800a356 <tcp_receive+0x27e>
 800a32e:	bf00      	nop
 800a330:	08012374 	.word	0x08012374
 800a334:	080126a4 	.word	0x080126a4
 800a338:	080123c0 	.word	0x080123c0
 800a33c:	080126c0 	.word	0x080126c0
 800a340:	200083cc 	.word	0x200083cc
 800a344:	200083c0 	.word	0x200083c0
 800a348:	200083c4 	.word	0x200083c4
 800a34c:	200083b0 	.word	0x200083b0
 800a350:	200083ca 	.word	0x200083ca
 800a354:	2302      	movs	r3, #2
 800a356:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a35a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a35e:	b29a      	uxth	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a364:	fb12 f303 	smulbb	r3, r2, r3
 800a368:	b29b      	uxth	r3, r3
 800a36a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a36c:	4293      	cmp	r3, r2
 800a36e:	bf28      	it	cs
 800a370:	4613      	movcs	r3, r2
 800a372:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a37a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a37c:	4413      	add	r3, r2
 800a37e:	b29a      	uxth	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a386:	429a      	cmp	r2, r3
 800a388:	d309      	bcc.n	800a39e <tcp_receive+0x2c6>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a390:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a392:	4413      	add	r3, r2
 800a394:	b29a      	uxth	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a39c:	e04e      	b.n	800a43c <tcp_receive+0x364>
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a3a8:	e048      	b.n	800a43c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3b2:	4413      	add	r3, r2
 800a3b4:	b29a      	uxth	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d309      	bcc.n	800a3d4 <tcp_receive+0x2fc>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a3c8:	4413      	add	r3, r2
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a3d2:	e004      	b.n	800a3de <tcp_receive+0x306>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a3da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d326      	bcc.n	800a43c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a40e:	4413      	add	r3, r2
 800a410:	b29a      	uxth	r2, r3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a418:	429a      	cmp	r2, r3
 800a41a:	d30a      	bcc.n	800a432 <tcp_receive+0x35a>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a426:	4413      	add	r3, r2
 800a428:	b29a      	uxth	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a430:	e004      	b.n	800a43c <tcp_receive+0x364>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a438:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a444:	4a98      	ldr	r2, [pc, #608]	; (800a6a8 <tcp_receive+0x5d0>)
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f7ff fdca 	bl	8009fe0 <tcp_free_acked_segments>
 800a44c:	4602      	mov	r2, r0
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45a:	4a94      	ldr	r2, [pc, #592]	; (800a6ac <tcp_receive+0x5d4>)
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff fdbf 	bl	8009fe0 <tcp_free_acked_segments>
 800a462:	4602      	mov	r2, r0
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d104      	bne.n	800a47a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a476:	861a      	strh	r2, [r3, #48]	; 0x30
 800a478:	e002      	b.n	800a480 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d103      	bne.n	800a496 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a49c:	4b84      	ldr	r3, [pc, #528]	; (800a6b0 <tcp_receive+0x5d8>)
 800a49e:	881b      	ldrh	r3, [r3, #0]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	8b5b      	ldrh	r3, [r3, #26]
 800a4ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d035      	beq.n	800a522 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d118      	bne.n	800a4f0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d00c      	beq.n	800a4e0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a4ce:	68db      	ldr	r3, [r3, #12]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7fa ff59 	bl	800538a <lwip_htonl>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	dc20      	bgt.n	800a522 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	8b5b      	ldrh	r3, [r3, #26]
 800a4e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a4ee:	e018      	b.n	800a522 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fa ff44 	bl	800538a <lwip_htonl>
 800a502:	4603      	mov	r3, r0
 800a504:	1ae3      	subs	r3, r4, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	dc0b      	bgt.n	800a522 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	8b5b      	ldrh	r3, [r3, #26]
 800a50e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a512:	b29a      	uxth	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a518:	e003      	b.n	800a522 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f002 fbce 	bl	800ccbc <tcp_send_empty_ack>
 800a520:	e000      	b.n	800a524 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a522:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d05b      	beq.n	800a5e4 <tcp_receive+0x50c>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a530:	4b60      	ldr	r3, [pc, #384]	; (800a6b4 <tcp_receive+0x5dc>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	1ad3      	subs	r3, r2, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	da54      	bge.n	800a5e4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a53a:	4b5f      	ldr	r3, [pc, #380]	; (800a6b8 <tcp_receive+0x5e0>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	b29a      	uxth	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a544:	b29b      	uxth	r3, r3
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	b29b      	uxth	r3, r3
 800a54a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a54e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a558:	10db      	asrs	r3, r3, #3
 800a55a:	b21b      	sxth	r3, r3
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	1ad3      	subs	r3, r2, r3
 800a560:	b29b      	uxth	r3, r3
 800a562:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a56c:	b29a      	uxth	r2, r3
 800a56e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a572:	4413      	add	r3, r2
 800a574:	b29b      	uxth	r3, r3
 800a576:	b21a      	sxth	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a57c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a580:	2b00      	cmp	r3, #0
 800a582:	da05      	bge.n	800a590 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a584:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a588:	425b      	negs	r3, r3
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a590:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a59a:	109b      	asrs	r3, r3, #2
 800a59c:	b21b      	sxth	r3, r3
 800a59e:	b29b      	uxth	r3, r3
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a5b4:	4413      	add	r3, r2
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	b21a      	sxth	r2, r3
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a5c4:	10db      	asrs	r3, r3, #3
 800a5c6:	b21b      	sxth	r3, r3
 800a5c8:	b29a      	uxth	r2, r3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	4413      	add	r3, r2
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	b21a      	sxth	r2, r3
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a5e4:	4b35      	ldr	r3, [pc, #212]	; (800a6bc <tcp_receive+0x5e4>)
 800a5e6:	881b      	ldrh	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 84e2 	beq.w	800afb2 <tcp_receive+0xeda>
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	7d1b      	ldrb	r3, [r3, #20]
 800a5f2:	2b06      	cmp	r3, #6
 800a5f4:	f200 84dd 	bhi.w	800afb2 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5fc:	4b30      	ldr	r3, [pc, #192]	; (800a6c0 <tcp_receive+0x5e8>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	3b01      	subs	r3, #1
 800a604:	2b00      	cmp	r3, #0
 800a606:	f2c0 808f 	blt.w	800a728 <tcp_receive+0x650>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a60e:	4b2b      	ldr	r3, [pc, #172]	; (800a6bc <tcp_receive+0x5e4>)
 800a610:	881b      	ldrh	r3, [r3, #0]
 800a612:	4619      	mov	r1, r3
 800a614:	4b2a      	ldr	r3, [pc, #168]	; (800a6c0 <tcp_receive+0x5e8>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	440b      	add	r3, r1
 800a61a:	1ad3      	subs	r3, r2, r3
 800a61c:	3301      	adds	r3, #1
 800a61e:	2b00      	cmp	r3, #0
 800a620:	f300 8082 	bgt.w	800a728 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a624:	4b27      	ldr	r3, [pc, #156]	; (800a6c4 <tcp_receive+0x5ec>)
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a62e:	4b24      	ldr	r3, [pc, #144]	; (800a6c0 <tcp_receive+0x5e8>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	1ad3      	subs	r3, r2, r3
 800a634:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a636:	4b23      	ldr	r3, [pc, #140]	; (800a6c4 <tcp_receive+0x5ec>)
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d106      	bne.n	800a64c <tcp_receive+0x574>
 800a63e:	4b22      	ldr	r3, [pc, #136]	; (800a6c8 <tcp_receive+0x5f0>)
 800a640:	f240 5294 	movw	r2, #1428	; 0x594
 800a644:	4921      	ldr	r1, [pc, #132]	; (800a6cc <tcp_receive+0x5f4>)
 800a646:	4822      	ldr	r0, [pc, #136]	; (800a6d0 <tcp_receive+0x5f8>)
 800a648:	f005 fad6 	bl	800fbf8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a652:	4293      	cmp	r3, r2
 800a654:	d906      	bls.n	800a664 <tcp_receive+0x58c>
 800a656:	4b1c      	ldr	r3, [pc, #112]	; (800a6c8 <tcp_receive+0x5f0>)
 800a658:	f240 5295 	movw	r2, #1429	; 0x595
 800a65c:	491d      	ldr	r1, [pc, #116]	; (800a6d4 <tcp_receive+0x5fc>)
 800a65e:	481c      	ldr	r0, [pc, #112]	; (800a6d0 <tcp_receive+0x5f8>)
 800a660:	f005 faca 	bl	800fbf8 <iprintf>
      off = (u16_t)off32;
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a66a:	4b16      	ldr	r3, [pc, #88]	; (800a6c4 <tcp_receive+0x5ec>)
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	891b      	ldrh	r3, [r3, #8]
 800a670:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a674:	429a      	cmp	r2, r3
 800a676:	d906      	bls.n	800a686 <tcp_receive+0x5ae>
 800a678:	4b13      	ldr	r3, [pc, #76]	; (800a6c8 <tcp_receive+0x5f0>)
 800a67a:	f240 5297 	movw	r2, #1431	; 0x597
 800a67e:	4916      	ldr	r1, [pc, #88]	; (800a6d8 <tcp_receive+0x600>)
 800a680:	4813      	ldr	r0, [pc, #76]	; (800a6d0 <tcp_receive+0x5f8>)
 800a682:	f005 fab9 	bl	800fbf8 <iprintf>
      inseg.len -= off;
 800a686:	4b0f      	ldr	r3, [pc, #60]	; (800a6c4 <tcp_receive+0x5ec>)
 800a688:	891a      	ldrh	r2, [r3, #8]
 800a68a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a68e:	1ad3      	subs	r3, r2, r3
 800a690:	b29a      	uxth	r2, r3
 800a692:	4b0c      	ldr	r3, [pc, #48]	; (800a6c4 <tcp_receive+0x5ec>)
 800a694:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a696:	4b0b      	ldr	r3, [pc, #44]	; (800a6c4 <tcp_receive+0x5ec>)
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	891a      	ldrh	r2, [r3, #8]
 800a69c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a6a4:	e02a      	b.n	800a6fc <tcp_receive+0x624>
 800a6a6:	bf00      	nop
 800a6a8:	080126dc 	.word	0x080126dc
 800a6ac:	080126e4 	.word	0x080126e4
 800a6b0:	200083c8 	.word	0x200083c8
 800a6b4:	200083c4 	.word	0x200083c4
 800a6b8:	20008388 	.word	0x20008388
 800a6bc:	200083ca 	.word	0x200083ca
 800a6c0:	200083c0 	.word	0x200083c0
 800a6c4:	200083a0 	.word	0x200083a0
 800a6c8:	08012374 	.word	0x08012374
 800a6cc:	080126ec 	.word	0x080126ec
 800a6d0:	080123c0 	.word	0x080123c0
 800a6d4:	080126fc 	.word	0x080126fc
 800a6d8:	0801270c 	.word	0x0801270c
        off -= p->len;
 800a6dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6de:	895b      	ldrh	r3, [r3, #10]
 800a6e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a6ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a6ee:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a6f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a6f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a6fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6fe:	895b      	ldrh	r3, [r3, #10]
 800a700:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a704:	429a      	cmp	r2, r3
 800a706:	d8e9      	bhi.n	800a6dc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a708:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a70c:	4619      	mov	r1, r3
 800a70e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a710:	f7fc f8fe 	bl	8006910 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a718:	4a91      	ldr	r2, [pc, #580]	; (800a960 <tcp_receive+0x888>)
 800a71a:	6013      	str	r3, [r2, #0]
 800a71c:	4b91      	ldr	r3, [pc, #580]	; (800a964 <tcp_receive+0x88c>)
 800a71e:	68db      	ldr	r3, [r3, #12]
 800a720:	4a8f      	ldr	r2, [pc, #572]	; (800a960 <tcp_receive+0x888>)
 800a722:	6812      	ldr	r2, [r2, #0]
 800a724:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a726:	e00d      	b.n	800a744 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a728:	4b8d      	ldr	r3, [pc, #564]	; (800a960 <tcp_receive+0x888>)
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	1ad3      	subs	r3, r2, r3
 800a732:	2b00      	cmp	r3, #0
 800a734:	da06      	bge.n	800a744 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	8b5b      	ldrh	r3, [r3, #26]
 800a73a:	f043 0302 	orr.w	r3, r3, #2
 800a73e:	b29a      	uxth	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a744:	4b86      	ldr	r3, [pc, #536]	; (800a960 <tcp_receive+0x888>)
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f2c0 842a 	blt.w	800afa8 <tcp_receive+0xed0>
 800a754:	4b82      	ldr	r3, [pc, #520]	; (800a960 <tcp_receive+0x888>)
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a75c:	6879      	ldr	r1, [r7, #4]
 800a75e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a760:	440b      	add	r3, r1
 800a762:	1ad3      	subs	r3, r2, r3
 800a764:	3301      	adds	r3, #1
 800a766:	2b00      	cmp	r3, #0
 800a768:	f300 841e 	bgt.w	800afa8 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a770:	4b7b      	ldr	r3, [pc, #492]	; (800a960 <tcp_receive+0x888>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	429a      	cmp	r2, r3
 800a776:	f040 829a 	bne.w	800acae <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a77a:	4b7a      	ldr	r3, [pc, #488]	; (800a964 <tcp_receive+0x88c>)
 800a77c:	891c      	ldrh	r4, [r3, #8]
 800a77e:	4b79      	ldr	r3, [pc, #484]	; (800a964 <tcp_receive+0x88c>)
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	899b      	ldrh	r3, [r3, #12]
 800a784:	b29b      	uxth	r3, r3
 800a786:	4618      	mov	r0, r3
 800a788:	f7fa fdea 	bl	8005360 <lwip_htons>
 800a78c:	4603      	mov	r3, r0
 800a78e:	b2db      	uxtb	r3, r3
 800a790:	f003 0303 	and.w	r3, r3, #3
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <tcp_receive+0x6c4>
 800a798:	2301      	movs	r3, #1
 800a79a:	e000      	b.n	800a79e <tcp_receive+0x6c6>
 800a79c:	2300      	movs	r3, #0
 800a79e:	4423      	add	r3, r4
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	4b71      	ldr	r3, [pc, #452]	; (800a968 <tcp_receive+0x890>)
 800a7a4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a7aa:	4b6f      	ldr	r3, [pc, #444]	; (800a968 <tcp_receive+0x890>)
 800a7ac:	881b      	ldrh	r3, [r3, #0]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d275      	bcs.n	800a89e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a7b2:	4b6c      	ldr	r3, [pc, #432]	; (800a964 <tcp_receive+0x88c>)
 800a7b4:	68db      	ldr	r3, [r3, #12]
 800a7b6:	899b      	ldrh	r3, [r3, #12]
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fa fdd0 	bl	8005360 <lwip_htons>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	f003 0301 	and.w	r3, r3, #1
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d01f      	beq.n	800a80c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a7cc:	4b65      	ldr	r3, [pc, #404]	; (800a964 <tcp_receive+0x88c>)
 800a7ce:	68db      	ldr	r3, [r3, #12]
 800a7d0:	899b      	ldrh	r3, [r3, #12]
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	b21b      	sxth	r3, r3
 800a7d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a7da:	b21c      	sxth	r4, r3
 800a7dc:	4b61      	ldr	r3, [pc, #388]	; (800a964 <tcp_receive+0x88c>)
 800a7de:	68db      	ldr	r3, [r3, #12]
 800a7e0:	899b      	ldrh	r3, [r3, #12]
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7fa fdbb 	bl	8005360 <lwip_htons>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f7fa fdb2 	bl	8005360 <lwip_htons>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	b21b      	sxth	r3, r3
 800a800:	4323      	orrs	r3, r4
 800a802:	b21a      	sxth	r2, r3
 800a804:	4b57      	ldr	r3, [pc, #348]	; (800a964 <tcp_receive+0x88c>)
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	b292      	uxth	r2, r2
 800a80a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a810:	4b54      	ldr	r3, [pc, #336]	; (800a964 <tcp_receive+0x88c>)
 800a812:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a814:	4b53      	ldr	r3, [pc, #332]	; (800a964 <tcp_receive+0x88c>)
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	899b      	ldrh	r3, [r3, #12]
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fa fd9f 	bl	8005360 <lwip_htons>
 800a822:	4603      	mov	r3, r0
 800a824:	b2db      	uxtb	r3, r3
 800a826:	f003 0302 	and.w	r3, r3, #2
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d005      	beq.n	800a83a <tcp_receive+0x762>
            inseg.len -= 1;
 800a82e:	4b4d      	ldr	r3, [pc, #308]	; (800a964 <tcp_receive+0x88c>)
 800a830:	891b      	ldrh	r3, [r3, #8]
 800a832:	3b01      	subs	r3, #1
 800a834:	b29a      	uxth	r2, r3
 800a836:	4b4b      	ldr	r3, [pc, #300]	; (800a964 <tcp_receive+0x88c>)
 800a838:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a83a:	4b4a      	ldr	r3, [pc, #296]	; (800a964 <tcp_receive+0x88c>)
 800a83c:	685b      	ldr	r3, [r3, #4]
 800a83e:	4a49      	ldr	r2, [pc, #292]	; (800a964 <tcp_receive+0x88c>)
 800a840:	8912      	ldrh	r2, [r2, #8]
 800a842:	4611      	mov	r1, r2
 800a844:	4618      	mov	r0, r3
 800a846:	f7fb ff63 	bl	8006710 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a84a:	4b46      	ldr	r3, [pc, #280]	; (800a964 <tcp_receive+0x88c>)
 800a84c:	891c      	ldrh	r4, [r3, #8]
 800a84e:	4b45      	ldr	r3, [pc, #276]	; (800a964 <tcp_receive+0x88c>)
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	899b      	ldrh	r3, [r3, #12]
 800a854:	b29b      	uxth	r3, r3
 800a856:	4618      	mov	r0, r3
 800a858:	f7fa fd82 	bl	8005360 <lwip_htons>
 800a85c:	4603      	mov	r3, r0
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	f003 0303 	and.w	r3, r3, #3
 800a864:	2b00      	cmp	r3, #0
 800a866:	d001      	beq.n	800a86c <tcp_receive+0x794>
 800a868:	2301      	movs	r3, #1
 800a86a:	e000      	b.n	800a86e <tcp_receive+0x796>
 800a86c:	2300      	movs	r3, #0
 800a86e:	4423      	add	r3, r4
 800a870:	b29a      	uxth	r2, r3
 800a872:	4b3d      	ldr	r3, [pc, #244]	; (800a968 <tcp_receive+0x890>)
 800a874:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a876:	4b3c      	ldr	r3, [pc, #240]	; (800a968 <tcp_receive+0x890>)
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	461a      	mov	r2, r3
 800a87c:	4b38      	ldr	r3, [pc, #224]	; (800a960 <tcp_receive+0x888>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	441a      	add	r2, r3
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a88a:	440b      	add	r3, r1
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d006      	beq.n	800a89e <tcp_receive+0x7c6>
 800a890:	4b36      	ldr	r3, [pc, #216]	; (800a96c <tcp_receive+0x894>)
 800a892:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a896:	4936      	ldr	r1, [pc, #216]	; (800a970 <tcp_receive+0x898>)
 800a898:	4836      	ldr	r0, [pc, #216]	; (800a974 <tcp_receive+0x89c>)
 800a89a:	f005 f9ad 	bl	800fbf8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f000 80e7 	beq.w	800aa76 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a8a8:	4b2e      	ldr	r3, [pc, #184]	; (800a964 <tcp_receive+0x88c>)
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	899b      	ldrh	r3, [r3, #12]
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fa fd55 	bl	8005360 <lwip_htons>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	f003 0301 	and.w	r3, r3, #1
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d010      	beq.n	800a8e4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a8c2:	e00a      	b.n	800a8da <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8c8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f7fd fd04 	bl	80082e2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d1f0      	bne.n	800a8c4 <tcp_receive+0x7ec>
 800a8e2:	e0c8      	b.n	800aa76 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a8ea:	e052      	b.n	800a992 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	899b      	ldrh	r3, [r3, #12]
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7fa fd33 	bl	8005360 <lwip_htons>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	2b00      	cmp	r3, #0
 800a904:	d03d      	beq.n	800a982 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a906:	4b17      	ldr	r3, [pc, #92]	; (800a964 <tcp_receive+0x88c>)
 800a908:	68db      	ldr	r3, [r3, #12]
 800a90a:	899b      	ldrh	r3, [r3, #12]
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fa fd26 	bl	8005360 <lwip_htons>
 800a914:	4603      	mov	r3, r0
 800a916:	b2db      	uxtb	r3, r3
 800a918:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d130      	bne.n	800a982 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a920:	4b10      	ldr	r3, [pc, #64]	; (800a964 <tcp_receive+0x88c>)
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	899b      	ldrh	r3, [r3, #12]
 800a926:	b29c      	uxth	r4, r3
 800a928:	2001      	movs	r0, #1
 800a92a:	f7fa fd19 	bl	8005360 <lwip_htons>
 800a92e:	4603      	mov	r3, r0
 800a930:	461a      	mov	r2, r3
 800a932:	4b0c      	ldr	r3, [pc, #48]	; (800a964 <tcp_receive+0x88c>)
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	4322      	orrs	r2, r4
 800a938:	b292      	uxth	r2, r2
 800a93a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a93c:	4b09      	ldr	r3, [pc, #36]	; (800a964 <tcp_receive+0x88c>)
 800a93e:	891c      	ldrh	r4, [r3, #8]
 800a940:	4b08      	ldr	r3, [pc, #32]	; (800a964 <tcp_receive+0x88c>)
 800a942:	68db      	ldr	r3, [r3, #12]
 800a944:	899b      	ldrh	r3, [r3, #12]
 800a946:	b29b      	uxth	r3, r3
 800a948:	4618      	mov	r0, r3
 800a94a:	f7fa fd09 	bl	8005360 <lwip_htons>
 800a94e:	4603      	mov	r3, r0
 800a950:	b2db      	uxtb	r3, r3
 800a952:	f003 0303 	and.w	r3, r3, #3
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00e      	beq.n	800a978 <tcp_receive+0x8a0>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e00d      	b.n	800a97a <tcp_receive+0x8a2>
 800a95e:	bf00      	nop
 800a960:	200083c0 	.word	0x200083c0
 800a964:	200083a0 	.word	0x200083a0
 800a968:	200083ca 	.word	0x200083ca
 800a96c:	08012374 	.word	0x08012374
 800a970:	0801271c 	.word	0x0801271c
 800a974:	080123c0 	.word	0x080123c0
 800a978:	2300      	movs	r3, #0
 800a97a:	4423      	add	r3, r4
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	4b98      	ldr	r3, [pc, #608]	; (800abe0 <tcp_receive+0xb08>)
 800a980:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a984:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a98c:	6938      	ldr	r0, [r7, #16]
 800a98e:	f7fd fca8 	bl	80082e2 <tcp_seg_free>
            while (next &&
 800a992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00e      	beq.n	800a9b6 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a998:	4b91      	ldr	r3, [pc, #580]	; (800abe0 <tcp_receive+0xb08>)
 800a99a:	881b      	ldrh	r3, [r3, #0]
 800a99c:	461a      	mov	r2, r3
 800a99e:	4b91      	ldr	r3, [pc, #580]	; (800abe4 <tcp_receive+0xb0c>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	441a      	add	r2, r3
 800a9a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9ac:	8909      	ldrh	r1, [r1, #8]
 800a9ae:	440b      	add	r3, r1
 800a9b0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	da9a      	bge.n	800a8ec <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d059      	beq.n	800aa70 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a9bc:	4b88      	ldr	r3, [pc, #544]	; (800abe0 <tcp_receive+0xb08>)
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	4b88      	ldr	r3, [pc, #544]	; (800abe4 <tcp_receive+0xb0c>)
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	441a      	add	r2, r3
 800a9c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	dd4d      	ble.n	800aa70 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a9d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	4b81      	ldr	r3, [pc, #516]	; (800abe4 <tcp_receive+0xb0c>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	1ad3      	subs	r3, r2, r3
 800a9e4:	b29a      	uxth	r2, r3
 800a9e6:	4b80      	ldr	r3, [pc, #512]	; (800abe8 <tcp_receive+0xb10>)
 800a9e8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a9ea:	4b7f      	ldr	r3, [pc, #508]	; (800abe8 <tcp_receive+0xb10>)
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	899b      	ldrh	r3, [r3, #12]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fa fcb4 	bl	8005360 <lwip_htons>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	f003 0302 	and.w	r3, r3, #2
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d005      	beq.n	800aa10 <tcp_receive+0x938>
                inseg.len -= 1;
 800aa04:	4b78      	ldr	r3, [pc, #480]	; (800abe8 <tcp_receive+0xb10>)
 800aa06:	891b      	ldrh	r3, [r3, #8]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	4b76      	ldr	r3, [pc, #472]	; (800abe8 <tcp_receive+0xb10>)
 800aa0e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800aa10:	4b75      	ldr	r3, [pc, #468]	; (800abe8 <tcp_receive+0xb10>)
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	4a74      	ldr	r2, [pc, #464]	; (800abe8 <tcp_receive+0xb10>)
 800aa16:	8912      	ldrh	r2, [r2, #8]
 800aa18:	4611      	mov	r1, r2
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fb fe78 	bl	8006710 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800aa20:	4b71      	ldr	r3, [pc, #452]	; (800abe8 <tcp_receive+0xb10>)
 800aa22:	891c      	ldrh	r4, [r3, #8]
 800aa24:	4b70      	ldr	r3, [pc, #448]	; (800abe8 <tcp_receive+0xb10>)
 800aa26:	68db      	ldr	r3, [r3, #12]
 800aa28:	899b      	ldrh	r3, [r3, #12]
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7fa fc97 	bl	8005360 <lwip_htons>
 800aa32:	4603      	mov	r3, r0
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	f003 0303 	and.w	r3, r3, #3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <tcp_receive+0x96a>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e000      	b.n	800aa44 <tcp_receive+0x96c>
 800aa42:	2300      	movs	r3, #0
 800aa44:	4423      	add	r3, r4
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	4b65      	ldr	r3, [pc, #404]	; (800abe0 <tcp_receive+0xb08>)
 800aa4a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800aa4c:	4b64      	ldr	r3, [pc, #400]	; (800abe0 <tcp_receive+0xb08>)
 800aa4e:	881b      	ldrh	r3, [r3, #0]
 800aa50:	461a      	mov	r2, r3
 800aa52:	4b64      	ldr	r3, [pc, #400]	; (800abe4 <tcp_receive+0xb0c>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	441a      	add	r2, r3
 800aa58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d006      	beq.n	800aa70 <tcp_receive+0x998>
 800aa62:	4b62      	ldr	r3, [pc, #392]	; (800abec <tcp_receive+0xb14>)
 800aa64:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800aa68:	4961      	ldr	r1, [pc, #388]	; (800abf0 <tcp_receive+0xb18>)
 800aa6a:	4862      	ldr	r0, [pc, #392]	; (800abf4 <tcp_receive+0xb1c>)
 800aa6c:	f005 f8c4 	bl	800fbf8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aa74:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800aa76:	4b5a      	ldr	r3, [pc, #360]	; (800abe0 <tcp_receive+0xb08>)
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	4b59      	ldr	r3, [pc, #356]	; (800abe4 <tcp_receive+0xb0c>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	441a      	add	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa8a:	4b55      	ldr	r3, [pc, #340]	; (800abe0 <tcp_receive+0xb08>)
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d206      	bcs.n	800aaa0 <tcp_receive+0x9c8>
 800aa92:	4b56      	ldr	r3, [pc, #344]	; (800abec <tcp_receive+0xb14>)
 800aa94:	f240 6207 	movw	r2, #1543	; 0x607
 800aa98:	4957      	ldr	r1, [pc, #348]	; (800abf8 <tcp_receive+0xb20>)
 800aa9a:	4856      	ldr	r0, [pc, #344]	; (800abf4 <tcp_receive+0xb1c>)
 800aa9c:	f005 f8ac 	bl	800fbf8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aaa4:	4b4e      	ldr	r3, [pc, #312]	; (800abe0 <tcp_receive+0xb08>)
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	1ad3      	subs	r3, r2, r3
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f7fc fdd9 	bl	8007668 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800aab6:	4b4c      	ldr	r3, [pc, #304]	; (800abe8 <tcp_receive+0xb10>)
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	891b      	ldrh	r3, [r3, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d006      	beq.n	800aace <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800aac0:	4b49      	ldr	r3, [pc, #292]	; (800abe8 <tcp_receive+0xb10>)
 800aac2:	685b      	ldr	r3, [r3, #4]
 800aac4:	4a4d      	ldr	r2, [pc, #308]	; (800abfc <tcp_receive+0xb24>)
 800aac6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800aac8:	4b47      	ldr	r3, [pc, #284]	; (800abe8 <tcp_receive+0xb10>)
 800aaca:	2200      	movs	r2, #0
 800aacc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800aace:	4b46      	ldr	r3, [pc, #280]	; (800abe8 <tcp_receive+0xb10>)
 800aad0:	68db      	ldr	r3, [r3, #12]
 800aad2:	899b      	ldrh	r3, [r3, #12]
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7fa fc42 	bl	8005360 <lwip_htons>
 800aadc:	4603      	mov	r3, r0
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 80b8 	beq.w	800ac5a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800aaea:	4b45      	ldr	r3, [pc, #276]	; (800ac00 <tcp_receive+0xb28>)
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	f043 0320 	orr.w	r3, r3, #32
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	4b42      	ldr	r3, [pc, #264]	; (800ac00 <tcp_receive+0xb28>)
 800aaf6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800aaf8:	e0af      	b.n	800ac5a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aafe:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	4a36      	ldr	r2, [pc, #216]	; (800abe4 <tcp_receive+0xb0c>)
 800ab0a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	891b      	ldrh	r3, [r3, #8]
 800ab10:	461c      	mov	r4, r3
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	68db      	ldr	r3, [r3, #12]
 800ab16:	899b      	ldrh	r3, [r3, #12]
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fa fc20 	bl	8005360 <lwip_htons>
 800ab20:	4603      	mov	r3, r0
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	f003 0303 	and.w	r3, r3, #3
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <tcp_receive+0xa58>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e000      	b.n	800ab32 <tcp_receive+0xa5a>
 800ab30:	2300      	movs	r3, #0
 800ab32:	191a      	adds	r2, r3, r4
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab38:	441a      	add	r2, r3
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab42:	461c      	mov	r4, r3
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	891b      	ldrh	r3, [r3, #8]
 800ab48:	461d      	mov	r5, r3
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	899b      	ldrh	r3, [r3, #12]
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7fa fc04 	bl	8005360 <lwip_htons>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	b2db      	uxtb	r3, r3
 800ab5c:	f003 0303 	and.w	r3, r3, #3
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d001      	beq.n	800ab68 <tcp_receive+0xa90>
 800ab64:	2301      	movs	r3, #1
 800ab66:	e000      	b.n	800ab6a <tcp_receive+0xa92>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	442b      	add	r3, r5
 800ab6c:	429c      	cmp	r4, r3
 800ab6e:	d206      	bcs.n	800ab7e <tcp_receive+0xaa6>
 800ab70:	4b1e      	ldr	r3, [pc, #120]	; (800abec <tcp_receive+0xb14>)
 800ab72:	f240 622b 	movw	r2, #1579	; 0x62b
 800ab76:	4923      	ldr	r1, [pc, #140]	; (800ac04 <tcp_receive+0xb2c>)
 800ab78:	481e      	ldr	r0, [pc, #120]	; (800abf4 <tcp_receive+0xb1c>)
 800ab7a:	f005 f83d 	bl	800fbf8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	891b      	ldrh	r3, [r3, #8]
 800ab82:	461c      	mov	r4, r3
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	899b      	ldrh	r3, [r3, #12]
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fa fbe7 	bl	8005360 <lwip_htons>
 800ab92:	4603      	mov	r3, r0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	f003 0303 	and.w	r3, r3, #3
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <tcp_receive+0xaca>
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e000      	b.n	800aba4 <tcp_receive+0xacc>
 800aba2:	2300      	movs	r3, #0
 800aba4:	1919      	adds	r1, r3, r4
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800abaa:	b28b      	uxth	r3, r1
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	b29a      	uxth	r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7fc fd57 	bl	8007668 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	891b      	ldrh	r3, [r3, #8]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d028      	beq.n	800ac16 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800abc4:	4b0d      	ldr	r3, [pc, #52]	; (800abfc <tcp_receive+0xb24>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01d      	beq.n	800ac08 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800abcc:	4b0b      	ldr	r3, [pc, #44]	; (800abfc <tcp_receive+0xb24>)
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	685b      	ldr	r3, [r3, #4]
 800abd4:	4619      	mov	r1, r3
 800abd6:	4610      	mov	r0, r2
 800abd8:	f7fb ffe2 	bl	8006ba0 <pbuf_cat>
 800abdc:	e018      	b.n	800ac10 <tcp_receive+0xb38>
 800abde:	bf00      	nop
 800abe0:	200083ca 	.word	0x200083ca
 800abe4:	200083c0 	.word	0x200083c0
 800abe8:	200083a0 	.word	0x200083a0
 800abec:	08012374 	.word	0x08012374
 800abf0:	08012754 	.word	0x08012754
 800abf4:	080123c0 	.word	0x080123c0
 800abf8:	08012790 	.word	0x08012790
 800abfc:	200083d0 	.word	0x200083d0
 800ac00:	200083cd 	.word	0x200083cd
 800ac04:	080127b0 	.word	0x080127b0
            } else {
              recv_data = cseg->p;
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	4a70      	ldr	r2, [pc, #448]	; (800add0 <tcp_receive+0xcf8>)
 800ac0e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	2200      	movs	r2, #0
 800ac14:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	899b      	ldrh	r3, [r3, #12]
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7fa fb9e 	bl	8005360 <lwip_htons>
 800ac24:	4603      	mov	r3, r0
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	f003 0301 	and.w	r3, r3, #1
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00d      	beq.n	800ac4c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ac30:	4b68      	ldr	r3, [pc, #416]	; (800add4 <tcp_receive+0xcfc>)
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f043 0320 	orr.w	r3, r3, #32
 800ac38:	b2da      	uxtb	r2, r3
 800ac3a:	4b66      	ldr	r3, [pc, #408]	; (800add4 <tcp_receive+0xcfc>)
 800ac3c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	7d1b      	ldrb	r3, [r3, #20]
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	d102      	bne.n	800ac4c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2207      	movs	r2, #7
 800ac4a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800ac54:	68b8      	ldr	r0, [r7, #8]
 800ac56:	f7fd fb44 	bl	80082e2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d008      	beq.n	800ac74 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	685a      	ldr	r2, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	f43f af43 	beq.w	800aafa <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	8b5b      	ldrh	r3, [r3, #26]
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00e      	beq.n	800ac9e <tcp_receive+0xbc6>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	8b5b      	ldrh	r3, [r3, #26]
 800ac84:	f023 0301 	bic.w	r3, r3, #1
 800ac88:	b29a      	uxth	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	835a      	strh	r2, [r3, #26]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	8b5b      	ldrh	r3, [r3, #26]
 800ac92:	f043 0302 	orr.w	r3, r3, #2
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ac9c:	e188      	b.n	800afb0 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	8b5b      	ldrh	r3, [r3, #26]
 800aca2:	f043 0301 	orr.w	r3, r3, #1
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800acac:	e180      	b.n	800afb0 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d106      	bne.n	800acc4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800acb6:	4848      	ldr	r0, [pc, #288]	; (800add8 <tcp_receive+0xd00>)
 800acb8:	f7fd fb2c 	bl	8008314 <tcp_seg_copy>
 800acbc:	4602      	mov	r2, r0
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	675a      	str	r2, [r3, #116]	; 0x74
 800acc2:	e16d      	b.n	800afa0 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800acc4:	2300      	movs	r3, #0
 800acc6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800accc:	63bb      	str	r3, [r7, #56]	; 0x38
 800acce:	e157      	b.n	800af80 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800acd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd2:	68db      	ldr	r3, [r3, #12]
 800acd4:	685a      	ldr	r2, [r3, #4]
 800acd6:	4b41      	ldr	r3, [pc, #260]	; (800addc <tcp_receive+0xd04>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	429a      	cmp	r2, r3
 800acdc:	d11d      	bne.n	800ad1a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800acde:	4b3e      	ldr	r3, [pc, #248]	; (800add8 <tcp_receive+0xd00>)
 800ace0:	891a      	ldrh	r2, [r3, #8]
 800ace2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace4:	891b      	ldrh	r3, [r3, #8]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	f240 814f 	bls.w	800af8a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800acec:	483a      	ldr	r0, [pc, #232]	; (800add8 <tcp_receive+0xd00>)
 800acee:	f7fd fb11 	bl	8008314 <tcp_seg_copy>
 800acf2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f000 8149 	beq.w	800af8e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800acfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d003      	beq.n	800ad0a <tcp_receive+0xc32>
                    prev->next = cseg;
 800ad02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad04:	697a      	ldr	r2, [r7, #20]
 800ad06:	601a      	str	r2, [r3, #0]
 800ad08:	e002      	b.n	800ad10 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	697a      	ldr	r2, [r7, #20]
 800ad0e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ad10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad12:	6978      	ldr	r0, [r7, #20]
 800ad14:	f7ff f8dc 	bl	8009ed0 <tcp_oos_insert_segment>
                }
                break;
 800ad18:	e139      	b.n	800af8e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ad1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d117      	bne.n	800ad50 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ad20:	4b2e      	ldr	r3, [pc, #184]	; (800addc <tcp_receive+0xd04>)
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	da57      	bge.n	800ade0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ad30:	4829      	ldr	r0, [pc, #164]	; (800add8 <tcp_receive+0xd00>)
 800ad32:	f7fd faef 	bl	8008314 <tcp_seg_copy>
 800ad36:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 8129 	beq.w	800af92 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	69ba      	ldr	r2, [r7, #24]
 800ad44:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ad46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad48:	69b8      	ldr	r0, [r7, #24]
 800ad4a:	f7ff f8c1 	bl	8009ed0 <tcp_oos_insert_segment>
                  }
                  break;
 800ad4e:	e120      	b.n	800af92 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ad50:	4b22      	ldr	r3, [pc, #136]	; (800addc <tcp_receive+0xd04>)
 800ad52:	681a      	ldr	r2, [r3, #0]
 800ad54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	1ad3      	subs	r3, r2, r3
 800ad5c:	3b01      	subs	r3, #1
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	db3e      	blt.n	800ade0 <tcp_receive+0xd08>
 800ad62:	4b1e      	ldr	r3, [pc, #120]	; (800addc <tcp_receive+0xd04>)
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	3301      	adds	r3, #1
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	dc35      	bgt.n	800ade0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ad74:	4818      	ldr	r0, [pc, #96]	; (800add8 <tcp_receive+0xd00>)
 800ad76:	f7fd facd 	bl	8008314 <tcp_seg_copy>
 800ad7a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800ad7c:	69fb      	ldr	r3, [r7, #28]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f000 8109 	beq.w	800af96 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800ad84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	685b      	ldr	r3, [r3, #4]
 800ad8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad8c:	8912      	ldrh	r2, [r2, #8]
 800ad8e:	441a      	add	r2, r3
 800ad90:	4b12      	ldr	r3, [pc, #72]	; (800addc <tcp_receive+0xd04>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	dd12      	ble.n	800adc0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ad9a:	4b10      	ldr	r3, [pc, #64]	; (800addc <tcp_receive+0xd04>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada2:	68db      	ldr	r3, [r3, #12]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	1ad3      	subs	r3, r2, r3
 800adaa:	b29a      	uxth	r2, r3
 800adac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adae:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800adb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb2:	685a      	ldr	r2, [r3, #4]
 800adb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adb6:	891b      	ldrh	r3, [r3, #8]
 800adb8:	4619      	mov	r1, r3
 800adba:	4610      	mov	r0, r2
 800adbc:	f7fb fca8 	bl	8006710 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800adc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc2:	69fa      	ldr	r2, [r7, #28]
 800adc4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800adc6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800adc8:	69f8      	ldr	r0, [r7, #28]
 800adca:	f7ff f881 	bl	8009ed0 <tcp_oos_insert_segment>
                  }
                  break;
 800adce:	e0e2      	b.n	800af96 <tcp_receive+0xebe>
 800add0:	200083d0 	.word	0x200083d0
 800add4:	200083cd 	.word	0x200083cd
 800add8:	200083a0 	.word	0x200083a0
 800addc:	200083c0 	.word	0x200083c0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ade4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	f040 80c6 	bne.w	800af7a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800adee:	4b80      	ldr	r3, [pc, #512]	; (800aff0 <tcp_receive+0xf18>)
 800adf0:	681a      	ldr	r2, [r3, #0]
 800adf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	f340 80bd 	ble.w	800af7a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ae00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	899b      	ldrh	r3, [r3, #12]
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7fa faa9 	bl	8005360 <lwip_htons>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	f003 0301 	and.w	r3, r3, #1
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	f040 80bf 	bne.w	800af9a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ae1c:	4875      	ldr	r0, [pc, #468]	; (800aff4 <tcp_receive+0xf1c>)
 800ae1e:	f7fd fa79 	bl	8008314 <tcp_seg_copy>
 800ae22:	4602      	mov	r2, r0
 800ae24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae26:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ae28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f000 80b6 	beq.w	800af9e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ae32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae3a:	8912      	ldrh	r2, [r2, #8]
 800ae3c:	441a      	add	r2, r3
 800ae3e:	4b6c      	ldr	r3, [pc, #432]	; (800aff0 <tcp_receive+0xf18>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	dd12      	ble.n	800ae6e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ae48:	4b69      	ldr	r3, [pc, #420]	; (800aff0 <tcp_receive+0xf18>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae50:	68db      	ldr	r3, [r3, #12]
 800ae52:	685b      	ldr	r3, [r3, #4]
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae5c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae60:	685a      	ldr	r2, [r3, #4]
 800ae62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae64:	891b      	ldrh	r3, [r3, #8]
 800ae66:	4619      	mov	r1, r3
 800ae68:	4610      	mov	r0, r2
 800ae6a:	f7fb fc51 	bl	8006710 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ae6e:	4b62      	ldr	r3, [pc, #392]	; (800aff8 <tcp_receive+0xf20>)
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	461a      	mov	r2, r3
 800ae74:	4b5e      	ldr	r3, [pc, #376]	; (800aff0 <tcp_receive+0xf18>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	441a      	add	r2, r3
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7e:	6879      	ldr	r1, [r7, #4]
 800ae80:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae82:	440b      	add	r3, r1
 800ae84:	1ad3      	subs	r3, r2, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	f340 8089 	ble.w	800af9e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ae8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68db      	ldr	r3, [r3, #12]
 800ae92:	899b      	ldrh	r3, [r3, #12]
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	4618      	mov	r0, r3
 800ae98:	f7fa fa62 	bl	8005360 <lwip_htons>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	f003 0301 	and.w	r3, r3, #1
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d022      	beq.n	800aeee <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800aea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	899b      	ldrh	r3, [r3, #12]
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	b21b      	sxth	r3, r3
 800aeb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800aeb8:	b21c      	sxth	r4, r3
 800aeba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	899b      	ldrh	r3, [r3, #12]
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fa fa4b 	bl	8005360 <lwip_htons>
 800aeca:	4603      	mov	r3, r0
 800aecc:	b2db      	uxtb	r3, r3
 800aece:	b29b      	uxth	r3, r3
 800aed0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fa fa42 	bl	8005360 <lwip_htons>
 800aedc:	4603      	mov	r3, r0
 800aede:	b21b      	sxth	r3, r3
 800aee0:	4323      	orrs	r3, r4
 800aee2:	b21a      	sxth	r2, r3
 800aee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	b292      	uxth	r2, r2
 800aeec:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aef8:	4413      	add	r3, r2
 800aefa:	b299      	uxth	r1, r3
 800aefc:	4b3c      	ldr	r3, [pc, #240]	; (800aff0 <tcp_receive+0xf18>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	b29a      	uxth	r2, r3
 800af02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	1a8a      	subs	r2, r1, r2
 800af08:	b292      	uxth	r2, r2
 800af0a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800af0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	891b      	ldrh	r3, [r3, #8]
 800af18:	4619      	mov	r1, r3
 800af1a:	4610      	mov	r0, r2
 800af1c:	f7fb fbf8 	bl	8006710 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800af20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	891c      	ldrh	r4, [r3, #8]
 800af26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	899b      	ldrh	r3, [r3, #12]
 800af2e:	b29b      	uxth	r3, r3
 800af30:	4618      	mov	r0, r3
 800af32:	f7fa fa15 	bl	8005360 <lwip_htons>
 800af36:	4603      	mov	r3, r0
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	f003 0303 	and.w	r3, r3, #3
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d001      	beq.n	800af46 <tcp_receive+0xe6e>
 800af42:	2301      	movs	r3, #1
 800af44:	e000      	b.n	800af48 <tcp_receive+0xe70>
 800af46:	2300      	movs	r3, #0
 800af48:	4423      	add	r3, r4
 800af4a:	b29a      	uxth	r2, r3
 800af4c:	4b2a      	ldr	r3, [pc, #168]	; (800aff8 <tcp_receive+0xf20>)
 800af4e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800af50:	4b29      	ldr	r3, [pc, #164]	; (800aff8 <tcp_receive+0xf20>)
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	461a      	mov	r2, r3
 800af56:	4b26      	ldr	r3, [pc, #152]	; (800aff0 <tcp_receive+0xf18>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	441a      	add	r2, r3
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af60:	6879      	ldr	r1, [r7, #4]
 800af62:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800af64:	440b      	add	r3, r1
 800af66:	429a      	cmp	r2, r3
 800af68:	d019      	beq.n	800af9e <tcp_receive+0xec6>
 800af6a:	4b24      	ldr	r3, [pc, #144]	; (800affc <tcp_receive+0xf24>)
 800af6c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800af70:	4923      	ldr	r1, [pc, #140]	; (800b000 <tcp_receive+0xf28>)
 800af72:	4824      	ldr	r0, [pc, #144]	; (800b004 <tcp_receive+0xf2c>)
 800af74:	f004 fe40 	bl	800fbf8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800af78:	e011      	b.n	800af9e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800af7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	63bb      	str	r3, [r7, #56]	; 0x38
 800af80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af82:	2b00      	cmp	r3, #0
 800af84:	f47f aea4 	bne.w	800acd0 <tcp_receive+0xbf8>
 800af88:	e00a      	b.n	800afa0 <tcp_receive+0xec8>
                break;
 800af8a:	bf00      	nop
 800af8c:	e008      	b.n	800afa0 <tcp_receive+0xec8>
                break;
 800af8e:	bf00      	nop
 800af90:	e006      	b.n	800afa0 <tcp_receive+0xec8>
                  break;
 800af92:	bf00      	nop
 800af94:	e004      	b.n	800afa0 <tcp_receive+0xec8>
                  break;
 800af96:	bf00      	nop
 800af98:	e002      	b.n	800afa0 <tcp_receive+0xec8>
                  break;
 800af9a:	bf00      	nop
 800af9c:	e000      	b.n	800afa0 <tcp_receive+0xec8>
                break;
 800af9e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f001 fe8b 	bl	800ccbc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800afa6:	e003      	b.n	800afb0 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f001 fe87 	bl	800ccbc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800afae:	e01a      	b.n	800afe6 <tcp_receive+0xf0e>
 800afb0:	e019      	b.n	800afe6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800afb2:	4b0f      	ldr	r3, [pc, #60]	; (800aff0 <tcp_receive+0xf18>)
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	db0a      	blt.n	800afd6 <tcp_receive+0xefe>
 800afc0:	4b0b      	ldr	r3, [pc, #44]	; (800aff0 <tcp_receive+0xf18>)
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc8:	6879      	ldr	r1, [r7, #4]
 800afca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800afcc:	440b      	add	r3, r1
 800afce:	1ad3      	subs	r3, r2, r3
 800afd0:	3301      	adds	r3, #1
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	dd07      	ble.n	800afe6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	8b5b      	ldrh	r3, [r3, #26]
 800afda:	f043 0302 	orr.w	r3, r3, #2
 800afde:	b29a      	uxth	r2, r3
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800afe4:	e7ff      	b.n	800afe6 <tcp_receive+0xf0e>
 800afe6:	bf00      	nop
 800afe8:	3750      	adds	r7, #80	; 0x50
 800afea:	46bd      	mov	sp, r7
 800afec:	bdb0      	pop	{r4, r5, r7, pc}
 800afee:	bf00      	nop
 800aff0:	200083c0 	.word	0x200083c0
 800aff4:	200083a0 	.word	0x200083a0
 800aff8:	200083ca 	.word	0x200083ca
 800affc:	08012374 	.word	0x08012374
 800b000:	0801271c 	.word	0x0801271c
 800b004:	080123c0 	.word	0x080123c0

0800b008 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800b008:	b480      	push	{r7}
 800b00a:	b083      	sub	sp, #12
 800b00c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800b00e:	4b15      	ldr	r3, [pc, #84]	; (800b064 <tcp_get_next_optbyte+0x5c>)
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	1c5a      	adds	r2, r3, #1
 800b014:	b291      	uxth	r1, r2
 800b016:	4a13      	ldr	r2, [pc, #76]	; (800b064 <tcp_get_next_optbyte+0x5c>)
 800b018:	8011      	strh	r1, [r2, #0]
 800b01a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800b01c:	4b12      	ldr	r3, [pc, #72]	; (800b068 <tcp_get_next_optbyte+0x60>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d004      	beq.n	800b02e <tcp_get_next_optbyte+0x26>
 800b024:	4b11      	ldr	r3, [pc, #68]	; (800b06c <tcp_get_next_optbyte+0x64>)
 800b026:	881b      	ldrh	r3, [r3, #0]
 800b028:	88fa      	ldrh	r2, [r7, #6]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d208      	bcs.n	800b040 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800b02e:	4b10      	ldr	r3, [pc, #64]	; (800b070 <tcp_get_next_optbyte+0x68>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	3314      	adds	r3, #20
 800b034:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800b036:	88fb      	ldrh	r3, [r7, #6]
 800b038:	683a      	ldr	r2, [r7, #0]
 800b03a:	4413      	add	r3, r2
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	e00b      	b.n	800b058 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800b040:	88fb      	ldrh	r3, [r7, #6]
 800b042:	b2da      	uxtb	r2, r3
 800b044:	4b09      	ldr	r3, [pc, #36]	; (800b06c <tcp_get_next_optbyte+0x64>)
 800b046:	881b      	ldrh	r3, [r3, #0]
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800b04e:	4b06      	ldr	r3, [pc, #24]	; (800b068 <tcp_get_next_optbyte+0x60>)
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	797b      	ldrb	r3, [r7, #5]
 800b054:	4413      	add	r3, r2
 800b056:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b058:	4618      	mov	r0, r3
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr
 800b064:	200083bc 	.word	0x200083bc
 800b068:	200083b8 	.word	0x200083b8
 800b06c:	200083b6 	.word	0x200083b6
 800b070:	200083b0 	.word	0x200083b0

0800b074 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d106      	bne.n	800b090 <tcp_parseopt+0x1c>
 800b082:	4b32      	ldr	r3, [pc, #200]	; (800b14c <tcp_parseopt+0xd8>)
 800b084:	f240 727d 	movw	r2, #1917	; 0x77d
 800b088:	4931      	ldr	r1, [pc, #196]	; (800b150 <tcp_parseopt+0xdc>)
 800b08a:	4832      	ldr	r0, [pc, #200]	; (800b154 <tcp_parseopt+0xe0>)
 800b08c:	f004 fdb4 	bl	800fbf8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800b090:	4b31      	ldr	r3, [pc, #196]	; (800b158 <tcp_parseopt+0xe4>)
 800b092:	881b      	ldrh	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d055      	beq.n	800b144 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b098:	4b30      	ldr	r3, [pc, #192]	; (800b15c <tcp_parseopt+0xe8>)
 800b09a:	2200      	movs	r2, #0
 800b09c:	801a      	strh	r2, [r3, #0]
 800b09e:	e045      	b.n	800b12c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800b0a0:	f7ff ffb2 	bl	800b008 <tcp_get_next_optbyte>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d006      	beq.n	800b0bc <tcp_parseopt+0x48>
 800b0ae:	2b02      	cmp	r3, #2
 800b0b0:	dc2b      	bgt.n	800b10a <tcp_parseopt+0x96>
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d041      	beq.n	800b13a <tcp_parseopt+0xc6>
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d127      	bne.n	800b10a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800b0ba:	e037      	b.n	800b12c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800b0bc:	f7ff ffa4 	bl	800b008 <tcp_get_next_optbyte>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b04      	cmp	r3, #4
 800b0c4:	d13b      	bne.n	800b13e <tcp_parseopt+0xca>
 800b0c6:	4b25      	ldr	r3, [pc, #148]	; (800b15c <tcp_parseopt+0xe8>)
 800b0c8:	881b      	ldrh	r3, [r3, #0]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	4a22      	ldr	r2, [pc, #136]	; (800b158 <tcp_parseopt+0xe4>)
 800b0ce:	8812      	ldrh	r2, [r2, #0]
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	da34      	bge.n	800b13e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800b0d4:	f7ff ff98 	bl	800b008 <tcp_get_next_optbyte>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	021b      	lsls	r3, r3, #8
 800b0de:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800b0e0:	f7ff ff92 	bl	800b008 <tcp_get_next_optbyte>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	89bb      	ldrh	r3, [r7, #12]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800b0ee:	89bb      	ldrh	r3, [r7, #12]
 800b0f0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b0f4:	d804      	bhi.n	800b100 <tcp_parseopt+0x8c>
 800b0f6:	89bb      	ldrh	r3, [r7, #12]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <tcp_parseopt+0x8c>
 800b0fc:	89ba      	ldrh	r2, [r7, #12]
 800b0fe:	e001      	b.n	800b104 <tcp_parseopt+0x90>
 800b100:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800b108:	e010      	b.n	800b12c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800b10a:	f7ff ff7d 	bl	800b008 <tcp_get_next_optbyte>
 800b10e:	4603      	mov	r3, r0
 800b110:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800b112:	7afb      	ldrb	r3, [r7, #11]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d914      	bls.n	800b142 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800b118:	7afb      	ldrb	r3, [r7, #11]
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	4b0f      	ldr	r3, [pc, #60]	; (800b15c <tcp_parseopt+0xe8>)
 800b11e:	881b      	ldrh	r3, [r3, #0]
 800b120:	4413      	add	r3, r2
 800b122:	b29b      	uxth	r3, r3
 800b124:	3b02      	subs	r3, #2
 800b126:	b29a      	uxth	r2, r3
 800b128:	4b0c      	ldr	r3, [pc, #48]	; (800b15c <tcp_parseopt+0xe8>)
 800b12a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800b12c:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <tcp_parseopt+0xe8>)
 800b12e:	881a      	ldrh	r2, [r3, #0]
 800b130:	4b09      	ldr	r3, [pc, #36]	; (800b158 <tcp_parseopt+0xe4>)
 800b132:	881b      	ldrh	r3, [r3, #0]
 800b134:	429a      	cmp	r2, r3
 800b136:	d3b3      	bcc.n	800b0a0 <tcp_parseopt+0x2c>
 800b138:	e004      	b.n	800b144 <tcp_parseopt+0xd0>
          return;
 800b13a:	bf00      	nop
 800b13c:	e002      	b.n	800b144 <tcp_parseopt+0xd0>
            return;
 800b13e:	bf00      	nop
 800b140:	e000      	b.n	800b144 <tcp_parseopt+0xd0>
            return;
 800b142:	bf00      	nop
      }
    }
  }
}
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	08012374 	.word	0x08012374
 800b150:	080127d8 	.word	0x080127d8
 800b154:	080123c0 	.word	0x080123c0
 800b158:	200083b4 	.word	0x200083b4
 800b15c:	200083bc 	.word	0x200083bc

0800b160 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800b160:	b480      	push	{r7}
 800b162:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800b164:	4b05      	ldr	r3, [pc, #20]	; (800b17c <tcp_trigger_input_pcb_close+0x1c>)
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	f043 0310 	orr.w	r3, r3, #16
 800b16c:	b2da      	uxtb	r2, r3
 800b16e:	4b03      	ldr	r3, [pc, #12]	; (800b17c <tcp_trigger_input_pcb_close+0x1c>)
 800b170:	701a      	strb	r2, [r3, #0]
}
 800b172:	bf00      	nop
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr
 800b17c:	200083cd 	.word	0x200083cd

0800b180 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d00a      	beq.n	800b1a8 <tcp_route+0x28>
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	7a1b      	ldrb	r3, [r3, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d006      	beq.n	800b1a8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	7a1b      	ldrb	r3, [r3, #8]
 800b19e:	4618      	mov	r0, r3
 800b1a0:	f7fb f8dc 	bl	800635c <netif_get_by_index>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	e003      	b.n	800b1b0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f003 fad5 	bl	800e758 <ip4_route>
 800b1ae:	4603      	mov	r3, r0
  }
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b1b8:	b590      	push	{r4, r7, lr}
 800b1ba:	b087      	sub	sp, #28
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	603b      	str	r3, [r7, #0]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d105      	bne.n	800b1da <tcp_create_segment+0x22>
 800b1ce:	4b44      	ldr	r3, [pc, #272]	; (800b2e0 <tcp_create_segment+0x128>)
 800b1d0:	22a3      	movs	r2, #163	; 0xa3
 800b1d2:	4944      	ldr	r1, [pc, #272]	; (800b2e4 <tcp_create_segment+0x12c>)
 800b1d4:	4844      	ldr	r0, [pc, #272]	; (800b2e8 <tcp_create_segment+0x130>)
 800b1d6:	f004 fd0f 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d105      	bne.n	800b1ec <tcp_create_segment+0x34>
 800b1e0:	4b3f      	ldr	r3, [pc, #252]	; (800b2e0 <tcp_create_segment+0x128>)
 800b1e2:	22a4      	movs	r2, #164	; 0xa4
 800b1e4:	4941      	ldr	r1, [pc, #260]	; (800b2ec <tcp_create_segment+0x134>)
 800b1e6:	4840      	ldr	r0, [pc, #256]	; (800b2e8 <tcp_create_segment+0x130>)
 800b1e8:	f004 fd06 	bl	800fbf8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b1ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	f003 0304 	and.w	r3, r3, #4
 800b1f8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b1fa:	2003      	movs	r0, #3
 800b1fc:	f7fa fd28 	bl	8005c50 <memp_malloc>
 800b200:	6138      	str	r0, [r7, #16]
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d104      	bne.n	800b212 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b208:	68b8      	ldr	r0, [r7, #8]
 800b20a:	f7fb fc07 	bl	8006a1c <pbuf_free>
    return NULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	e061      	b.n	800b2d6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b218:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	2200      	movs	r2, #0
 800b21e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	68ba      	ldr	r2, [r7, #8]
 800b224:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	891a      	ldrh	r2, [r3, #8]
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	429a      	cmp	r2, r3
 800b230:	d205      	bcs.n	800b23e <tcp_create_segment+0x86>
 800b232:	4b2b      	ldr	r3, [pc, #172]	; (800b2e0 <tcp_create_segment+0x128>)
 800b234:	22b0      	movs	r2, #176	; 0xb0
 800b236:	492e      	ldr	r1, [pc, #184]	; (800b2f0 <tcp_create_segment+0x138>)
 800b238:	482b      	ldr	r0, [pc, #172]	; (800b2e8 <tcp_create_segment+0x130>)
 800b23a:	f004 fcdd 	bl	800fbf8 <iprintf>
  seg->len = p->tot_len - optlen;
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	891a      	ldrh	r2, [r3, #8]
 800b242:	7dfb      	ldrb	r3, [r7, #23]
 800b244:	b29b      	uxth	r3, r3
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	b29a      	uxth	r2, r3
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b24e:	2114      	movs	r1, #20
 800b250:	68b8      	ldr	r0, [r7, #8]
 800b252:	f7fb fb4d 	bl	80068f0 <pbuf_add_header>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d004      	beq.n	800b266 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b25c:	6938      	ldr	r0, [r7, #16]
 800b25e:	f7fd f840 	bl	80082e2 <tcp_seg_free>
    return NULL;
 800b262:	2300      	movs	r3, #0
 800b264:	e037      	b.n	800b2d6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	685a      	ldr	r2, [r3, #4]
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	8ada      	ldrh	r2, [r3, #22]
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	68dc      	ldr	r4, [r3, #12]
 800b278:	4610      	mov	r0, r2
 800b27a:	f7fa f871 	bl	8005360 <lwip_htons>
 800b27e:	4603      	mov	r3, r0
 800b280:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	8b1a      	ldrh	r2, [r3, #24]
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	68dc      	ldr	r4, [r3, #12]
 800b28a:	4610      	mov	r0, r2
 800b28c:	f7fa f868 	bl	8005360 <lwip_htons>
 800b290:	4603      	mov	r3, r0
 800b292:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	68dc      	ldr	r4, [r3, #12]
 800b298:	6838      	ldr	r0, [r7, #0]
 800b29a:	f7fa f876 	bl	800538a <lwip_htonl>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
 800b2a4:	089b      	lsrs	r3, r3, #2
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	3305      	adds	r3, #5
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	031b      	lsls	r3, r3, #12
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	79fb      	ldrb	r3, [r7, #7]
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	b29a      	uxth	r2, r3
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	68dc      	ldr	r4, [r3, #12]
 800b2be:	4610      	mov	r0, r2
 800b2c0:	f7fa f84e 	bl	8005360 <lwip_htons>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	749a      	strb	r2, [r3, #18]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	74da      	strb	r2, [r3, #19]
  return seg;
 800b2d4:	693b      	ldr	r3, [r7, #16]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	371c      	adds	r7, #28
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd90      	pop	{r4, r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	080127f4 	.word	0x080127f4
 800b2e4:	08012828 	.word	0x08012828
 800b2e8:	08012848 	.word	0x08012848
 800b2ec:	08012870 	.word	0x08012870
 800b2f0:	08012894 	.word	0x08012894

0800b2f4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b086      	sub	sp, #24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	607b      	str	r3, [r7, #4]
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	73fb      	strb	r3, [r7, #15]
 800b300:	460b      	mov	r3, r1
 800b302:	81bb      	strh	r3, [r7, #12]
 800b304:	4613      	mov	r3, r2
 800b306:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b308:	89bb      	ldrh	r3, [r7, #12]
 800b30a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d105      	bne.n	800b31e <tcp_pbuf_prealloc+0x2a>
 800b312:	4b30      	ldr	r3, [pc, #192]	; (800b3d4 <tcp_pbuf_prealloc+0xe0>)
 800b314:	22e8      	movs	r2, #232	; 0xe8
 800b316:	4930      	ldr	r1, [pc, #192]	; (800b3d8 <tcp_pbuf_prealloc+0xe4>)
 800b318:	4830      	ldr	r0, [pc, #192]	; (800b3dc <tcp_pbuf_prealloc+0xe8>)
 800b31a:	f004 fc6d 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b31e:	6a3b      	ldr	r3, [r7, #32]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d105      	bne.n	800b330 <tcp_pbuf_prealloc+0x3c>
 800b324:	4b2b      	ldr	r3, [pc, #172]	; (800b3d4 <tcp_pbuf_prealloc+0xe0>)
 800b326:	22e9      	movs	r2, #233	; 0xe9
 800b328:	492d      	ldr	r1, [pc, #180]	; (800b3e0 <tcp_pbuf_prealloc+0xec>)
 800b32a:	482c      	ldr	r0, [pc, #176]	; (800b3dc <tcp_pbuf_prealloc+0xe8>)
 800b32c:	f004 fc64 	bl	800fbf8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b330:	89ba      	ldrh	r2, [r7, #12]
 800b332:	897b      	ldrh	r3, [r7, #10]
 800b334:	429a      	cmp	r2, r3
 800b336:	d221      	bcs.n	800b37c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b338:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b33c:	f003 0302 	and.w	r3, r3, #2
 800b340:	2b00      	cmp	r3, #0
 800b342:	d111      	bne.n	800b368 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b344:	6a3b      	ldr	r3, [r7, #32]
 800b346:	8b5b      	ldrh	r3, [r3, #26]
 800b348:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d115      	bne.n	800b37c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b350:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b354:	2b00      	cmp	r3, #0
 800b356:	d007      	beq.n	800b368 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d103      	bne.n	800b368 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b360:	6a3b      	ldr	r3, [r7, #32]
 800b362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b364:	2b00      	cmp	r3, #0
 800b366:	d009      	beq.n	800b37c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b368:	89bb      	ldrh	r3, [r7, #12]
 800b36a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b36e:	f023 0203 	bic.w	r2, r3, #3
 800b372:	897b      	ldrh	r3, [r7, #10]
 800b374:	4293      	cmp	r3, r2
 800b376:	bf28      	it	cs
 800b378:	4613      	movcs	r3, r2
 800b37a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b37c:	8af9      	ldrh	r1, [r7, #22]
 800b37e:	7bfb      	ldrb	r3, [r7, #15]
 800b380:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b384:	4618      	mov	r0, r3
 800b386:	f7fb f865 	bl	8006454 <pbuf_alloc>
 800b38a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d101      	bne.n	800b396 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b392:	2300      	movs	r3, #0
 800b394:	e019      	b.n	800b3ca <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d006      	beq.n	800b3ac <tcp_pbuf_prealloc+0xb8>
 800b39e:	4b0d      	ldr	r3, [pc, #52]	; (800b3d4 <tcp_pbuf_prealloc+0xe0>)
 800b3a0:	f240 120b 	movw	r2, #267	; 0x10b
 800b3a4:	490f      	ldr	r1, [pc, #60]	; (800b3e4 <tcp_pbuf_prealloc+0xf0>)
 800b3a6:	480d      	ldr	r0, [pc, #52]	; (800b3dc <tcp_pbuf_prealloc+0xe8>)
 800b3a8:	f004 fc26 	bl	800fbf8 <iprintf>
  *oversize = p->len - length;
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	895a      	ldrh	r2, [r3, #10]
 800b3b0:	89bb      	ldrh	r3, [r7, #12]
 800b3b2:	1ad3      	subs	r3, r2, r3
 800b3b4:	b29a      	uxth	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	89ba      	ldrh	r2, [r7, #12]
 800b3be:	811a      	strh	r2, [r3, #8]
 800b3c0:	693b      	ldr	r3, [r7, #16]
 800b3c2:	891a      	ldrh	r2, [r3, #8]
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	815a      	strh	r2, [r3, #10]
  return p;
 800b3c8:	693b      	ldr	r3, [r7, #16]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3718      	adds	r7, #24
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	080127f4 	.word	0x080127f4
 800b3d8:	080128ac 	.word	0x080128ac
 800b3dc:	08012848 	.word	0x08012848
 800b3e0:	080128d0 	.word	0x080128d0
 800b3e4:	080128f0 	.word	0x080128f0

0800b3e8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d106      	bne.n	800b408 <tcp_write_checks+0x20>
 800b3fa:	4b33      	ldr	r3, [pc, #204]	; (800b4c8 <tcp_write_checks+0xe0>)
 800b3fc:	f240 1233 	movw	r2, #307	; 0x133
 800b400:	4932      	ldr	r1, [pc, #200]	; (800b4cc <tcp_write_checks+0xe4>)
 800b402:	4833      	ldr	r0, [pc, #204]	; (800b4d0 <tcp_write_checks+0xe8>)
 800b404:	f004 fbf8 	bl	800fbf8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	7d1b      	ldrb	r3, [r3, #20]
 800b40c:	2b04      	cmp	r3, #4
 800b40e:	d00e      	beq.n	800b42e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b414:	2b07      	cmp	r3, #7
 800b416:	d00a      	beq.n	800b42e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b41c:	2b02      	cmp	r3, #2
 800b41e:	d006      	beq.n	800b42e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b424:	2b03      	cmp	r3, #3
 800b426:	d002      	beq.n	800b42e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b428:	f06f 030a 	mvn.w	r3, #10
 800b42c:	e048      	b.n	800b4c0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b42e:	887b      	ldrh	r3, [r7, #2]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d101      	bne.n	800b438 <tcp_write_checks+0x50>
    return ERR_OK;
 800b434:	2300      	movs	r3, #0
 800b436:	e043      	b.n	800b4c0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b43e:	887a      	ldrh	r2, [r7, #2]
 800b440:	429a      	cmp	r2, r3
 800b442:	d909      	bls.n	800b458 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	8b5b      	ldrh	r3, [r3, #26]
 800b448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b44c:	b29a      	uxth	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b452:	f04f 33ff 	mov.w	r3, #4294967295
 800b456:	e033      	b.n	800b4c0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b45e:	2b08      	cmp	r3, #8
 800b460:	d909      	bls.n	800b476 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	8b5b      	ldrh	r3, [r3, #26]
 800b466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b470:	f04f 33ff 	mov.w	r3, #4294967295
 800b474:	e024      	b.n	800b4c0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00f      	beq.n	800b4a0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b484:	2b00      	cmp	r3, #0
 800b486:	d11a      	bne.n	800b4be <tcp_write_checks+0xd6>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d116      	bne.n	800b4be <tcp_write_checks+0xd6>
 800b490:	4b0d      	ldr	r3, [pc, #52]	; (800b4c8 <tcp_write_checks+0xe0>)
 800b492:	f240 1255 	movw	r2, #341	; 0x155
 800b496:	490f      	ldr	r1, [pc, #60]	; (800b4d4 <tcp_write_checks+0xec>)
 800b498:	480d      	ldr	r0, [pc, #52]	; (800b4d0 <tcp_write_checks+0xe8>)
 800b49a:	f004 fbad 	bl	800fbf8 <iprintf>
 800b49e:	e00e      	b.n	800b4be <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d103      	bne.n	800b4b0 <tcp_write_checks+0xc8>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d006      	beq.n	800b4be <tcp_write_checks+0xd6>
 800b4b0:	4b05      	ldr	r3, [pc, #20]	; (800b4c8 <tcp_write_checks+0xe0>)
 800b4b2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b4b6:	4908      	ldr	r1, [pc, #32]	; (800b4d8 <tcp_write_checks+0xf0>)
 800b4b8:	4805      	ldr	r0, [pc, #20]	; (800b4d0 <tcp_write_checks+0xe8>)
 800b4ba:	f004 fb9d 	bl	800fbf8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b4be:	2300      	movs	r3, #0
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3708      	adds	r7, #8
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}
 800b4c8:	080127f4 	.word	0x080127f4
 800b4cc:	08012904 	.word	0x08012904
 800b4d0:	08012848 	.word	0x08012848
 800b4d4:	08012924 	.word	0x08012924
 800b4d8:	08012960 	.word	0x08012960

0800b4dc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b4dc:	b590      	push	{r4, r7, lr}
 800b4de:	b09b      	sub	sp, #108	; 0x6c
 800b4e0:	af04      	add	r7, sp, #16
 800b4e2:	60f8      	str	r0, [r7, #12]
 800b4e4:	60b9      	str	r1, [r7, #8]
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	80fb      	strh	r3, [r7, #6]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	653b      	str	r3, [r7, #80]	; 0x50
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4fe:	2300      	movs	r3, #0
 800b500:	64bb      	str	r3, [r7, #72]	; 0x48
 800b502:	2300      	movs	r3, #0
 800b504:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b506:	2300      	movs	r3, #0
 800b508:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b512:	2300      	movs	r3, #0
 800b514:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b51a:	2300      	movs	r3, #0
 800b51c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d109      	bne.n	800b538 <tcp_write+0x5c>
 800b524:	4ba4      	ldr	r3, [pc, #656]	; (800b7b8 <tcp_write+0x2dc>)
 800b526:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b52a:	49a4      	ldr	r1, [pc, #656]	; (800b7bc <tcp_write+0x2e0>)
 800b52c:	48a4      	ldr	r0, [pc, #656]	; (800b7c0 <tcp_write+0x2e4>)
 800b52e:	f004 fb63 	bl	800fbf8 <iprintf>
 800b532:	f06f 030f 	mvn.w	r3, #15
 800b536:	e32a      	b.n	800bb8e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b53e:	085b      	lsrs	r3, r3, #1
 800b540:	b29a      	uxth	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b546:	4293      	cmp	r3, r2
 800b548:	bf28      	it	cs
 800b54a:	4613      	movcs	r3, r2
 800b54c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b54e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b550:	2b00      	cmp	r3, #0
 800b552:	d102      	bne.n	800b55a <tcp_write+0x7e>
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b558:	e000      	b.n	800b55c <tcp_write+0x80>
 800b55a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b55c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d109      	bne.n	800b578 <tcp_write+0x9c>
 800b564:	4b94      	ldr	r3, [pc, #592]	; (800b7b8 <tcp_write+0x2dc>)
 800b566:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b56a:	4996      	ldr	r1, [pc, #600]	; (800b7c4 <tcp_write+0x2e8>)
 800b56c:	4894      	ldr	r0, [pc, #592]	; (800b7c0 <tcp_write+0x2e4>)
 800b56e:	f004 fb43 	bl	800fbf8 <iprintf>
 800b572:	f06f 030f 	mvn.w	r3, #15
 800b576:	e30a      	b.n	800bb8e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b578:	88fb      	ldrh	r3, [r7, #6]
 800b57a:	4619      	mov	r1, r3
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	f7ff ff33 	bl	800b3e8 <tcp_write_checks>
 800b582:	4603      	mov	r3, r0
 800b584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b588:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <tcp_write+0xba>
    return err;
 800b590:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b594:	e2fb      	b.n	800bb8e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b59c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	f000 80f6 	beq.w	800b79c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5b4:	653b      	str	r3, [r7, #80]	; 0x50
 800b5b6:	e002      	b.n	800b5be <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800b5b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d1f8      	bne.n	800b5b8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b5c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5c8:	7a9b      	ldrb	r3, [r3, #10]
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	f003 0304 	and.w	r3, r3, #4
 800b5d2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b5d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5d8:	891b      	ldrh	r3, [r3, #8]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	8c3b      	ldrh	r3, [r7, #32]
 800b5de:	440b      	add	r3, r1
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	da06      	bge.n	800b5f2 <tcp_write+0x116>
 800b5e4:	4b74      	ldr	r3, [pc, #464]	; (800b7b8 <tcp_write+0x2dc>)
 800b5e6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b5ea:	4977      	ldr	r1, [pc, #476]	; (800b7c8 <tcp_write+0x2ec>)
 800b5ec:	4874      	ldr	r0, [pc, #464]	; (800b7c0 <tcp_write+0x2e4>)
 800b5ee:	f004 fb03 	bl	800fbf8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b5f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5f4:	891a      	ldrh	r2, [r3, #8]
 800b5f6:	8c3b      	ldrh	r3, [r7, #32]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b5fe:	1ad3      	subs	r3, r2, r3
 800b600:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b608:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b60a:	8a7b      	ldrh	r3, [r7, #18]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d026      	beq.n	800b65e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b610:	8a7b      	ldrh	r3, [r7, #18]
 800b612:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b614:	429a      	cmp	r2, r3
 800b616:	d206      	bcs.n	800b626 <tcp_write+0x14a>
 800b618:	4b67      	ldr	r3, [pc, #412]	; (800b7b8 <tcp_write+0x2dc>)
 800b61a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b61e:	496b      	ldr	r1, [pc, #428]	; (800b7cc <tcp_write+0x2f0>)
 800b620:	4867      	ldr	r0, [pc, #412]	; (800b7c0 <tcp_write+0x2e4>)
 800b622:	f004 fae9 	bl	800fbf8 <iprintf>
      seg = last_unsent;
 800b626:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b628:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b62a:	8a7b      	ldrh	r3, [r7, #18]
 800b62c:	88fa      	ldrh	r2, [r7, #6]
 800b62e:	4293      	cmp	r3, r2
 800b630:	bf28      	it	cs
 800b632:	4613      	movcs	r3, r2
 800b634:	b29b      	uxth	r3, r3
 800b636:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b638:	4293      	cmp	r3, r2
 800b63a:	bf28      	it	cs
 800b63c:	4613      	movcs	r3, r2
 800b63e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b640:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b644:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b646:	4413      	add	r3, r2
 800b648:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b64c:	8a7a      	ldrh	r2, [r7, #18]
 800b64e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	b29b      	uxth	r3, r3
 800b654:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b656:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b658:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b65e:	8a7b      	ldrh	r3, [r7, #18]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00b      	beq.n	800b67c <tcp_write+0x1a0>
 800b664:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b668:	88fb      	ldrh	r3, [r7, #6]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d006      	beq.n	800b67c <tcp_write+0x1a0>
 800b66e:	4b52      	ldr	r3, [pc, #328]	; (800b7b8 <tcp_write+0x2dc>)
 800b670:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b674:	4956      	ldr	r1, [pc, #344]	; (800b7d0 <tcp_write+0x2f4>)
 800b676:	4852      	ldr	r0, [pc, #328]	; (800b7c0 <tcp_write+0x2e4>)
 800b678:	f004 fabe 	bl	800fbf8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b67c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b680:	88fb      	ldrh	r3, [r7, #6]
 800b682:	429a      	cmp	r2, r3
 800b684:	f080 8167 	bcs.w	800b956 <tcp_write+0x47a>
 800b688:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 8163 	beq.w	800b956 <tcp_write+0x47a>
 800b690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b692:	891b      	ldrh	r3, [r3, #8]
 800b694:	2b00      	cmp	r3, #0
 800b696:	f000 815e 	beq.w	800b956 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b69a:	88fa      	ldrh	r2, [r7, #6]
 800b69c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6a0:	1ad2      	subs	r2, r2, r3
 800b6a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	bfa8      	it	ge
 800b6a8:	4613      	movge	r3, r2
 800b6aa:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6ae:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b6b0:	797b      	ldrb	r3, [r7, #5]
 800b6b2:	f003 0301 	and.w	r3, r3, #1
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d027      	beq.n	800b70a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b6ba:	f107 0012 	add.w	r0, r7, #18
 800b6be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b6c0:	8bf9      	ldrh	r1, [r7, #30]
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	9302      	str	r3, [sp, #8]
 800b6c6:	797b      	ldrb	r3, [r7, #5]
 800b6c8:	9301      	str	r3, [sp, #4]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	f7ff fe0f 	bl	800b2f4 <tcp_pbuf_prealloc>
 800b6d6:	6578      	str	r0, [r7, #84]	; 0x54
 800b6d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f000 8225 	beq.w	800bb2a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b6e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6e2:	6858      	ldr	r0, [r3, #4]
 800b6e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6e8:	68ba      	ldr	r2, [r7, #8]
 800b6ea:	4413      	add	r3, r2
 800b6ec:	8bfa      	ldrh	r2, [r7, #30]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	f004 fa52 	bl	800fb98 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b6f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b6f6:	f7fb fa19 	bl	8006b2c <pbuf_clen>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b702:	4413      	add	r3, r2
 800b704:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b708:	e041      	b.n	800b78e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b70a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	637b      	str	r3, [r7, #52]	; 0x34
 800b710:	e002      	b.n	800b718 <tcp_write+0x23c>
 800b712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	637b      	str	r3, [r7, #52]	; 0x34
 800b718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d1f8      	bne.n	800b712 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b722:	7b1b      	ldrb	r3, [r3, #12]
 800b724:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d115      	bne.n	800b758 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b72c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b732:	8952      	ldrh	r2, [r2, #10]
 800b734:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d10d      	bne.n	800b758 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b73c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b740:	2b00      	cmp	r3, #0
 800b742:	d006      	beq.n	800b752 <tcp_write+0x276>
 800b744:	4b1c      	ldr	r3, [pc, #112]	; (800b7b8 <tcp_write+0x2dc>)
 800b746:	f240 2231 	movw	r2, #561	; 0x231
 800b74a:	4922      	ldr	r1, [pc, #136]	; (800b7d4 <tcp_write+0x2f8>)
 800b74c:	481c      	ldr	r0, [pc, #112]	; (800b7c0 <tcp_write+0x2e4>)
 800b74e:	f004 fa53 	bl	800fbf8 <iprintf>
          extendlen = seglen;
 800b752:	8bfb      	ldrh	r3, [r7, #30]
 800b754:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b756:	e01a      	b.n	800b78e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b758:	8bfb      	ldrh	r3, [r7, #30]
 800b75a:	2201      	movs	r2, #1
 800b75c:	4619      	mov	r1, r3
 800b75e:	2000      	movs	r0, #0
 800b760:	f7fa fe78 	bl	8006454 <pbuf_alloc>
 800b764:	6578      	str	r0, [r7, #84]	; 0x54
 800b766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f000 81e0 	beq.w	800bb2e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b76e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	441a      	add	r2, r3
 800b776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b778:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b77a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b77c:	f7fb f9d6 	bl	8006b2c <pbuf_clen>
 800b780:	4603      	mov	r3, r0
 800b782:	461a      	mov	r2, r3
 800b784:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b788:	4413      	add	r3, r2
 800b78a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b78e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b792:	8bfb      	ldrh	r3, [r7, #30]
 800b794:	4413      	add	r3, r2
 800b796:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b79a:	e0dc      	b.n	800b956 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f000 80d7 	beq.w	800b956 <tcp_write+0x47a>
 800b7a8:	4b03      	ldr	r3, [pc, #12]	; (800b7b8 <tcp_write+0x2dc>)
 800b7aa:	f240 224a 	movw	r2, #586	; 0x24a
 800b7ae:	490a      	ldr	r1, [pc, #40]	; (800b7d8 <tcp_write+0x2fc>)
 800b7b0:	4803      	ldr	r0, [pc, #12]	; (800b7c0 <tcp_write+0x2e4>)
 800b7b2:	f004 fa21 	bl	800fbf8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b7b6:	e0ce      	b.n	800b956 <tcp_write+0x47a>
 800b7b8:	080127f4 	.word	0x080127f4
 800b7bc:	08012994 	.word	0x08012994
 800b7c0:	08012848 	.word	0x08012848
 800b7c4:	080129ac 	.word	0x080129ac
 800b7c8:	080129e0 	.word	0x080129e0
 800b7cc:	080129f8 	.word	0x080129f8
 800b7d0:	08012a18 	.word	0x08012a18
 800b7d4:	08012a38 	.word	0x08012a38
 800b7d8:	08012a64 	.word	0x08012a64
    struct pbuf *p;
    u16_t left = len - pos;
 800b7dc:	88fa      	ldrh	r2, [r7, #6]
 800b7de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b7e2:	1ad3      	subs	r3, r2, r3
 800b7e4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b7e6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b7f2:	8b7a      	ldrh	r2, [r7, #26]
 800b7f4:	8bbb      	ldrh	r3, [r7, #28]
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	bf28      	it	cs
 800b7fa:	4613      	movcs	r3, r2
 800b7fc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b7fe:	797b      	ldrb	r3, [r7, #5]
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	2b00      	cmp	r3, #0
 800b806:	d036      	beq.n	800b876 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b808:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b80c:	b29a      	uxth	r2, r3
 800b80e:	8b3b      	ldrh	r3, [r7, #24]
 800b810:	4413      	add	r3, r2
 800b812:	b299      	uxth	r1, r3
 800b814:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b816:	2b00      	cmp	r3, #0
 800b818:	bf0c      	ite	eq
 800b81a:	2301      	moveq	r3, #1
 800b81c:	2300      	movne	r3, #0
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	f107 0012 	add.w	r0, r7, #18
 800b824:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b826:	9302      	str	r3, [sp, #8]
 800b828:	797b      	ldrb	r3, [r7, #5]
 800b82a:	9301      	str	r3, [sp, #4]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	4603      	mov	r3, r0
 800b832:	2036      	movs	r0, #54	; 0x36
 800b834:	f7ff fd5e 	bl	800b2f4 <tcp_pbuf_prealloc>
 800b838:	6338      	str	r0, [r7, #48]	; 0x30
 800b83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	f000 8178 	beq.w	800bb32 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b844:	895b      	ldrh	r3, [r3, #10]
 800b846:	8b3a      	ldrh	r2, [r7, #24]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d906      	bls.n	800b85a <tcp_write+0x37e>
 800b84c:	4b8c      	ldr	r3, [pc, #560]	; (800ba80 <tcp_write+0x5a4>)
 800b84e:	f240 2266 	movw	r2, #614	; 0x266
 800b852:	498c      	ldr	r1, [pc, #560]	; (800ba84 <tcp_write+0x5a8>)
 800b854:	488c      	ldr	r0, [pc, #560]	; (800ba88 <tcp_write+0x5ac>)
 800b856:	f004 f9cf 	bl	800fbf8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b862:	18d0      	adds	r0, r2, r3
 800b864:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	4413      	add	r3, r2
 800b86c:	8b3a      	ldrh	r2, [r7, #24]
 800b86e:	4619      	mov	r1, r3
 800b870:	f004 f992 	bl	800fb98 <memcpy>
 800b874:	e02f      	b.n	800b8d6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b876:	8a7b      	ldrh	r3, [r7, #18]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d006      	beq.n	800b88a <tcp_write+0x3ae>
 800b87c:	4b80      	ldr	r3, [pc, #512]	; (800ba80 <tcp_write+0x5a4>)
 800b87e:	f240 2271 	movw	r2, #625	; 0x271
 800b882:	4982      	ldr	r1, [pc, #520]	; (800ba8c <tcp_write+0x5b0>)
 800b884:	4880      	ldr	r0, [pc, #512]	; (800ba88 <tcp_write+0x5ac>)
 800b886:	f004 f9b7 	bl	800fbf8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b88a:	8b3b      	ldrh	r3, [r7, #24]
 800b88c:	2201      	movs	r2, #1
 800b88e:	4619      	mov	r1, r3
 800b890:	2036      	movs	r0, #54	; 0x36
 800b892:	f7fa fddf 	bl	8006454 <pbuf_alloc>
 800b896:	6178      	str	r0, [r7, #20]
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	f000 814b 	beq.w	800bb36 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b8a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	441a      	add	r2, r3
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b8ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	2036      	movs	r0, #54	; 0x36
 800b8ba:	f7fa fdcb 	bl	8006454 <pbuf_alloc>
 800b8be:	6338      	str	r0, [r7, #48]	; 0x30
 800b8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d103      	bne.n	800b8ce <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b8c6:	6978      	ldr	r0, [r7, #20]
 800b8c8:	f7fb f8a8 	bl	8006a1c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b8cc:	e136      	b.n	800bb3c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b8ce:	6979      	ldr	r1, [r7, #20]
 800b8d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8d2:	f7fb f965 	bl	8006ba0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b8d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8d8:	f7fb f928 	bl	8006b2c <pbuf_clen>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	461a      	mov	r2, r3
 800b8e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b8ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b8ee:	2b09      	cmp	r3, #9
 800b8f0:	d903      	bls.n	800b8fa <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b8f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b8f4:	f7fb f892 	bl	8006a1c <pbuf_free>
      goto memerr;
 800b8f8:	e120      	b.n	800bb3c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b8fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b902:	441a      	add	r2, r3
 800b904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b908:	9300      	str	r3, [sp, #0]
 800b90a:	4613      	mov	r3, r2
 800b90c:	2200      	movs	r2, #0
 800b90e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f7ff fc51 	bl	800b1b8 <tcp_create_segment>
 800b916:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	f000 810d 	beq.w	800bb3a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b922:	2b00      	cmp	r3, #0
 800b924:	d102      	bne.n	800b92c <tcp_write+0x450>
      queue = seg;
 800b926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b928:	647b      	str	r3, [r7, #68]	; 0x44
 800b92a:	e00c      	b.n	800b946 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b92c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d106      	bne.n	800b940 <tcp_write+0x464>
 800b932:	4b53      	ldr	r3, [pc, #332]	; (800ba80 <tcp_write+0x5a4>)
 800b934:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b938:	4955      	ldr	r1, [pc, #340]	; (800ba90 <tcp_write+0x5b4>)
 800b93a:	4853      	ldr	r0, [pc, #332]	; (800ba88 <tcp_write+0x5ac>)
 800b93c:	f004 f95c 	bl	800fbf8 <iprintf>
      prev_seg->next = seg;
 800b940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b942:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b944:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b948:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b94a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b94e:	8b3b      	ldrh	r3, [r7, #24]
 800b950:	4413      	add	r3, r2
 800b952:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b956:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b95a:	88fb      	ldrh	r3, [r7, #6]
 800b95c:	429a      	cmp	r2, r3
 800b95e:	f4ff af3d 	bcc.w	800b7dc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b962:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b964:	2b00      	cmp	r3, #0
 800b966:	d02c      	beq.n	800b9c2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b96e:	e01e      	b.n	800b9ae <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b972:	891a      	ldrh	r2, [r3, #8]
 800b974:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b976:	4413      	add	r3, r2
 800b978:	b29a      	uxth	r2, r3
 800b97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b97c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d110      	bne.n	800b9a8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b98c:	8952      	ldrh	r2, [r2, #10]
 800b98e:	4413      	add	r3, r2
 800b990:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b992:	68b9      	ldr	r1, [r7, #8]
 800b994:	4618      	mov	r0, r3
 800b996:	f004 f8ff 	bl	800fb98 <memcpy>
        p->len += oversize_used;
 800b99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99c:	895a      	ldrh	r2, [r3, #10]
 800b99e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b9a0:	4413      	add	r3, r2
 800b9a2:	b29a      	uxth	r2, r3
 800b9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1dd      	bne.n	800b970 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b9b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9b6:	891a      	ldrh	r2, [r3, #8]
 800b9b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b9ba:	4413      	add	r3, r2
 800b9bc:	b29a      	uxth	r2, r3
 800b9be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9c0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b9c2:	8a7a      	ldrh	r2, [r7, #18]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b9ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d018      	beq.n	800ba02 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b9d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d106      	bne.n	800b9e4 <tcp_write+0x508>
 800b9d6:	4b2a      	ldr	r3, [pc, #168]	; (800ba80 <tcp_write+0x5a4>)
 800b9d8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b9dc:	492d      	ldr	r1, [pc, #180]	; (800ba94 <tcp_write+0x5b8>)
 800b9de:	482a      	ldr	r0, [pc, #168]	; (800ba88 <tcp_write+0x5ac>)
 800b9e0:	f004 f90a 	bl	800fbf8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b9e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7fb f8d8 	bl	8006ba0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b9f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9f2:	891a      	ldrh	r2, [r3, #8]
 800b9f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9f6:	891b      	ldrh	r3, [r3, #8]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	b29a      	uxth	r2, r3
 800b9fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9fe:	811a      	strh	r2, [r3, #8]
 800ba00:	e037      	b.n	800ba72 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800ba02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d034      	beq.n	800ba72 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800ba08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <tcp_write+0x53a>
 800ba0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d106      	bne.n	800ba24 <tcp_write+0x548>
 800ba16:	4b1a      	ldr	r3, [pc, #104]	; (800ba80 <tcp_write+0x5a4>)
 800ba18:	f240 22e6 	movw	r2, #742	; 0x2e6
 800ba1c:	491e      	ldr	r1, [pc, #120]	; (800ba98 <tcp_write+0x5bc>)
 800ba1e:	481a      	ldr	r0, [pc, #104]	; (800ba88 <tcp_write+0x5ac>)
 800ba20:	f004 f8ea 	bl	800fbf8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ba24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba2a:	e009      	b.n	800ba40 <tcp_write+0x564>
      p->tot_len += extendlen;
 800ba2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2e:	891a      	ldrh	r2, [r3, #8]
 800ba30:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba32:	4413      	add	r3, r2
 800ba34:	b29a      	uxth	r2, r3
 800ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba38:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800ba3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d1f1      	bne.n	800ba2c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800ba48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba4a:	891a      	ldrh	r2, [r3, #8]
 800ba4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba4e:	4413      	add	r3, r2
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba54:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800ba56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba58:	895a      	ldrh	r2, [r3, #10]
 800ba5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba5c:	4413      	add	r3, r2
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba62:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800ba64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba66:	891a      	ldrh	r2, [r3, #8]
 800ba68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ba6a:	4413      	add	r3, r2
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba70:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800ba72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d111      	bne.n	800ba9c <tcp_write+0x5c0>
    pcb->unsent = queue;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba7c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ba7e:	e010      	b.n	800baa2 <tcp_write+0x5c6>
 800ba80:	080127f4 	.word	0x080127f4
 800ba84:	08012a94 	.word	0x08012a94
 800ba88:	08012848 	.word	0x08012848
 800ba8c:	08012ad4 	.word	0x08012ad4
 800ba90:	08012ae4 	.word	0x08012ae4
 800ba94:	08012af8 	.word	0x08012af8
 800ba98:	08012b30 	.word	0x08012b30
  } else {
    last_unsent->next = queue;
 800ba9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800baa0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800baa6:	88fb      	ldrh	r3, [r7, #6]
 800baa8:	441a      	add	r2, r3
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800bab4:	88fb      	ldrh	r3, [r7, #6]
 800bab6:	1ad3      	subs	r3, r2, r3
 800bab8:	b29a      	uxth	r2, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800bac6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d00e      	beq.n	800baf2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d10a      	bne.n	800baf2 <tcp_write+0x616>
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d106      	bne.n	800baf2 <tcp_write+0x616>
 800bae4:	4b2c      	ldr	r3, [pc, #176]	; (800bb98 <tcp_write+0x6bc>)
 800bae6:	f240 3212 	movw	r2, #786	; 0x312
 800baea:	492c      	ldr	r1, [pc, #176]	; (800bb9c <tcp_write+0x6c0>)
 800baec:	482c      	ldr	r0, [pc, #176]	; (800bba0 <tcp_write+0x6c4>)
 800baee:	f004 f883 	bl	800fbf8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800baf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d016      	beq.n	800bb26 <tcp_write+0x64a>
 800baf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bafa:	68db      	ldr	r3, [r3, #12]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d012      	beq.n	800bb26 <tcp_write+0x64a>
 800bb00:	797b      	ldrb	r3, [r7, #5]
 800bb02:	f003 0302 	and.w	r3, r3, #2
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10d      	bne.n	800bb26 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bb0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	899b      	ldrh	r3, [r3, #12]
 800bb10:	b29c      	uxth	r4, r3
 800bb12:	2008      	movs	r0, #8
 800bb14:	f7f9 fc24 	bl	8005360 <lwip_htons>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb1e:	68db      	ldr	r3, [r3, #12]
 800bb20:	4322      	orrs	r2, r4
 800bb22:	b292      	uxth	r2, r2
 800bb24:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800bb26:	2300      	movs	r3, #0
 800bb28:	e031      	b.n	800bb8e <tcp_write+0x6b2>
          goto memerr;
 800bb2a:	bf00      	nop
 800bb2c:	e006      	b.n	800bb3c <tcp_write+0x660>
            goto memerr;
 800bb2e:	bf00      	nop
 800bb30:	e004      	b.n	800bb3c <tcp_write+0x660>
        goto memerr;
 800bb32:	bf00      	nop
 800bb34:	e002      	b.n	800bb3c <tcp_write+0x660>
        goto memerr;
 800bb36:	bf00      	nop
 800bb38:	e000      	b.n	800bb3c <tcp_write+0x660>
      goto memerr;
 800bb3a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	8b5b      	ldrh	r3, [r3, #26]
 800bb40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb44:	b29a      	uxth	r2, r3
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800bb4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800bb50:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bb52:	f7fa ff63 	bl	8006a1c <pbuf_free>
  }
  if (queue != NULL) {
 800bb56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <tcp_write+0x686>
    tcp_segs_free(queue);
 800bb5c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800bb5e:	f7fc fbab 	bl	80082b8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00e      	beq.n	800bb8a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d10a      	bne.n	800bb8a <tcp_write+0x6ae>
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d106      	bne.n	800bb8a <tcp_write+0x6ae>
 800bb7c:	4b06      	ldr	r3, [pc, #24]	; (800bb98 <tcp_write+0x6bc>)
 800bb7e:	f240 3227 	movw	r2, #807	; 0x327
 800bb82:	4906      	ldr	r1, [pc, #24]	; (800bb9c <tcp_write+0x6c0>)
 800bb84:	4806      	ldr	r0, [pc, #24]	; (800bba0 <tcp_write+0x6c4>)
 800bb86:	f004 f837 	bl	800fbf8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800bb8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	375c      	adds	r7, #92	; 0x5c
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd90      	pop	{r4, r7, pc}
 800bb96:	bf00      	nop
 800bb98:	080127f4 	.word	0x080127f4
 800bb9c:	08012b68 	.word	0x08012b68
 800bba0:	08012848 	.word	0x08012848

0800bba4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800bba4:	b590      	push	{r4, r7, lr}
 800bba6:	b08b      	sub	sp, #44	; 0x2c
 800bba8:	af02      	add	r7, sp, #8
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	460b      	mov	r3, r1
 800bbae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	61fb      	str	r3, [r7, #28]
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d106      	bne.n	800bbd0 <tcp_split_unsent_seg+0x2c>
 800bbc2:	4b95      	ldr	r3, [pc, #596]	; (800be18 <tcp_split_unsent_seg+0x274>)
 800bbc4:	f240 324b 	movw	r2, #843	; 0x34b
 800bbc8:	4994      	ldr	r1, [pc, #592]	; (800be1c <tcp_split_unsent_seg+0x278>)
 800bbca:	4895      	ldr	r0, [pc, #596]	; (800be20 <tcp_split_unsent_seg+0x27c>)
 800bbcc:	f004 f814 	bl	800fbf8 <iprintf>

  useg = pcb->unsent;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbd4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d102      	bne.n	800bbe2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800bbdc:	f04f 33ff 	mov.w	r3, #4294967295
 800bbe0:	e116      	b.n	800be10 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800bbe2:	887b      	ldrh	r3, [r7, #2]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d109      	bne.n	800bbfc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800bbe8:	4b8b      	ldr	r3, [pc, #556]	; (800be18 <tcp_split_unsent_seg+0x274>)
 800bbea:	f240 3253 	movw	r2, #851	; 0x353
 800bbee:	498d      	ldr	r1, [pc, #564]	; (800be24 <tcp_split_unsent_seg+0x280>)
 800bbf0:	488b      	ldr	r0, [pc, #556]	; (800be20 <tcp_split_unsent_seg+0x27c>)
 800bbf2:	f004 f801 	bl	800fbf8 <iprintf>
    return ERR_VAL;
 800bbf6:	f06f 0305 	mvn.w	r3, #5
 800bbfa:	e109      	b.n	800be10 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	891b      	ldrh	r3, [r3, #8]
 800bc00:	887a      	ldrh	r2, [r7, #2]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d301      	bcc.n	800bc0a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800bc06:	2300      	movs	r3, #0
 800bc08:	e102      	b.n	800be10 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bc0e:	887a      	ldrh	r2, [r7, #2]
 800bc10:	429a      	cmp	r2, r3
 800bc12:	d906      	bls.n	800bc22 <tcp_split_unsent_seg+0x7e>
 800bc14:	4b80      	ldr	r3, [pc, #512]	; (800be18 <tcp_split_unsent_seg+0x274>)
 800bc16:	f240 325b 	movw	r2, #859	; 0x35b
 800bc1a:	4983      	ldr	r1, [pc, #524]	; (800be28 <tcp_split_unsent_seg+0x284>)
 800bc1c:	4880      	ldr	r0, [pc, #512]	; (800be20 <tcp_split_unsent_seg+0x27c>)
 800bc1e:	f003 ffeb 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	891b      	ldrh	r3, [r3, #8]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d106      	bne.n	800bc38 <tcp_split_unsent_seg+0x94>
 800bc2a:	4b7b      	ldr	r3, [pc, #492]	; (800be18 <tcp_split_unsent_seg+0x274>)
 800bc2c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800bc30:	497e      	ldr	r1, [pc, #504]	; (800be2c <tcp_split_unsent_seg+0x288>)
 800bc32:	487b      	ldr	r0, [pc, #492]	; (800be20 <tcp_split_unsent_seg+0x27c>)
 800bc34:	f003 ffe0 	bl	800fbf8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	7a9b      	ldrb	r3, [r3, #10]
 800bc3c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800bc3e:	7bfb      	ldrb	r3, [r7, #15]
 800bc40:	009b      	lsls	r3, r3, #2
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	f003 0304 	and.w	r3, r3, #4
 800bc48:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	891a      	ldrh	r2, [r3, #8]
 800bc4e:	887b      	ldrh	r3, [r7, #2]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800bc54:	7bbb      	ldrb	r3, [r7, #14]
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	89bb      	ldrh	r3, [r7, #12]
 800bc5a:	4413      	add	r3, r2
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bc62:	4619      	mov	r1, r3
 800bc64:	2036      	movs	r0, #54	; 0x36
 800bc66:	f7fa fbf5 	bl	8006454 <pbuf_alloc>
 800bc6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	f000 80b7 	beq.w	800bde2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	685b      	ldr	r3, [r3, #4]
 800bc78:	891a      	ldrh	r2, [r3, #8]
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	891b      	ldrh	r3, [r3, #8]
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	b29a      	uxth	r2, r3
 800bc82:	887b      	ldrh	r3, [r7, #2]
 800bc84:	4413      	add	r3, r2
 800bc86:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800bc88:	697b      	ldr	r3, [r7, #20]
 800bc8a:	6858      	ldr	r0, [r3, #4]
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	685a      	ldr	r2, [r3, #4]
 800bc90:	7bbb      	ldrb	r3, [r7, #14]
 800bc92:	18d1      	adds	r1, r2, r3
 800bc94:	897b      	ldrh	r3, [r7, #10]
 800bc96:	89ba      	ldrh	r2, [r7, #12]
 800bc98:	f7fb f8aa 	bl	8006df0 <pbuf_copy_partial>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	461a      	mov	r2, r3
 800bca0:	89bb      	ldrh	r3, [r7, #12]
 800bca2:	4293      	cmp	r3, r2
 800bca4:	f040 809f 	bne.w	800bde6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	899b      	ldrh	r3, [r3, #12]
 800bcae:	b29b      	uxth	r3, r3
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7f9 fb55 	bl	8005360 <lwip_htons>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	b2db      	uxtb	r3, r3
 800bcba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcbe:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800bcc4:	7efb      	ldrb	r3, [r7, #27]
 800bcc6:	f003 0308 	and.w	r3, r3, #8
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d007      	beq.n	800bcde <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800bcce:	7efb      	ldrb	r3, [r7, #27]
 800bcd0:	f023 0308 	bic.w	r3, r3, #8
 800bcd4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800bcd6:	7ebb      	ldrb	r3, [r7, #26]
 800bcd8:	f043 0308 	orr.w	r3, r3, #8
 800bcdc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800bcde:	7efb      	ldrb	r3, [r7, #27]
 800bce0:	f003 0301 	and.w	r3, r3, #1
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d007      	beq.n	800bcf8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800bce8:	7efb      	ldrb	r3, [r7, #27]
 800bcea:	f023 0301 	bic.w	r3, r3, #1
 800bcee:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800bcf0:	7ebb      	ldrb	r3, [r7, #26]
 800bcf2:	f043 0301 	orr.w	r3, r3, #1
 800bcf6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	68db      	ldr	r3, [r3, #12]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7f9 fb43 	bl	800538a <lwip_htonl>
 800bd04:	4602      	mov	r2, r0
 800bd06:	887b      	ldrh	r3, [r7, #2]
 800bd08:	18d1      	adds	r1, r2, r3
 800bd0a:	7eba      	ldrb	r2, [r7, #26]
 800bd0c:	7bfb      	ldrb	r3, [r7, #15]
 800bd0e:	9300      	str	r3, [sp, #0]
 800bd10:	460b      	mov	r3, r1
 800bd12:	6939      	ldr	r1, [r7, #16]
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f7ff fa4f 	bl	800b1b8 <tcp_create_segment>
 800bd1a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d063      	beq.n	800bdea <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fa ff00 	bl	8006b2c <pbuf_clen>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	461a      	mov	r2, r3
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd36:	1a9b      	subs	r3, r3, r2
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	6858      	ldr	r0, [r3, #4]
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	891a      	ldrh	r2, [r3, #8]
 800bd4a:	89bb      	ldrh	r3, [r7, #12]
 800bd4c:	1ad3      	subs	r3, r2, r3
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	4619      	mov	r1, r3
 800bd52:	f7fa fcdd 	bl	8006710 <pbuf_realloc>
  useg->len -= remainder;
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	891a      	ldrh	r2, [r3, #8]
 800bd5a:	89bb      	ldrh	r3, [r7, #12]
 800bd5c:	1ad3      	subs	r3, r2, r3
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bd64:	697b      	ldr	r3, [r7, #20]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	899b      	ldrh	r3, [r3, #12]
 800bd6a:	b29c      	uxth	r4, r3
 800bd6c:	7efb      	ldrb	r3, [r7, #27]
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7f9 faf5 	bl	8005360 <lwip_htons>
 800bd76:	4603      	mov	r3, r0
 800bd78:	461a      	mov	r2, r3
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	4322      	orrs	r2, r4
 800bd80:	b292      	uxth	r2, r2
 800bd82:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fa fecf 	bl	8006b2c <pbuf_clen>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	461a      	mov	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bd98:	4413      	add	r3, r2
 800bd9a:	b29a      	uxth	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bda2:	69fb      	ldr	r3, [r7, #28]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fa fec0 	bl	8006b2c <pbuf_clen>
 800bdac:	4603      	mov	r3, r0
 800bdae:	461a      	mov	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bdb6:	4413      	add	r3, r2
 800bdb8:	b29a      	uxth	r2, r3
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	681a      	ldr	r2, [r3, #0]
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	69fa      	ldr	r2, [r7, #28]
 800bdcc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bdce:	69fb      	ldr	r3, [r7, #28]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d103      	bne.n	800bdde <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bdde:	2300      	movs	r3, #0
 800bde0:	e016      	b.n	800be10 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800bde2:	bf00      	nop
 800bde4:	e002      	b.n	800bdec <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bde6:	bf00      	nop
 800bde8:	e000      	b.n	800bdec <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bdea:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d006      	beq.n	800be00 <tcp_split_unsent_seg+0x25c>
 800bdf2:	4b09      	ldr	r3, [pc, #36]	; (800be18 <tcp_split_unsent_seg+0x274>)
 800bdf4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800bdf8:	490d      	ldr	r1, [pc, #52]	; (800be30 <tcp_split_unsent_seg+0x28c>)
 800bdfa:	4809      	ldr	r0, [pc, #36]	; (800be20 <tcp_split_unsent_seg+0x27c>)
 800bdfc:	f003 fefc 	bl	800fbf8 <iprintf>
  if (p != NULL) {
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d002      	beq.n	800be0c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800be06:	6938      	ldr	r0, [r7, #16]
 800be08:	f7fa fe08 	bl	8006a1c <pbuf_free>
  }

  return ERR_MEM;
 800be0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800be10:	4618      	mov	r0, r3
 800be12:	3724      	adds	r7, #36	; 0x24
 800be14:	46bd      	mov	sp, r7
 800be16:	bd90      	pop	{r4, r7, pc}
 800be18:	080127f4 	.word	0x080127f4
 800be1c:	08012b88 	.word	0x08012b88
 800be20:	08012848 	.word	0x08012848
 800be24:	08012bac 	.word	0x08012bac
 800be28:	08012bd0 	.word	0x08012bd0
 800be2c:	08012be0 	.word	0x08012be0
 800be30:	08012bf0 	.word	0x08012bf0

0800be34 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800be34:	b590      	push	{r4, r7, lr}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d106      	bne.n	800be50 <tcp_send_fin+0x1c>
 800be42:	4b21      	ldr	r3, [pc, #132]	; (800bec8 <tcp_send_fin+0x94>)
 800be44:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800be48:	4920      	ldr	r1, [pc, #128]	; (800becc <tcp_send_fin+0x98>)
 800be4a:	4821      	ldr	r0, [pc, #132]	; (800bed0 <tcp_send_fin+0x9c>)
 800be4c:	f003 fed4 	bl	800fbf8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be54:	2b00      	cmp	r3, #0
 800be56:	d02e      	beq.n	800beb6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be5c:	60fb      	str	r3, [r7, #12]
 800be5e:	e002      	b.n	800be66 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d1f8      	bne.n	800be60 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	899b      	ldrh	r3, [r3, #12]
 800be74:	b29b      	uxth	r3, r3
 800be76:	4618      	mov	r0, r3
 800be78:	f7f9 fa72 	bl	8005360 <lwip_htons>
 800be7c:	4603      	mov	r3, r0
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	f003 0307 	and.w	r3, r3, #7
 800be84:	2b00      	cmp	r3, #0
 800be86:	d116      	bne.n	800beb6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	68db      	ldr	r3, [r3, #12]
 800be8c:	899b      	ldrh	r3, [r3, #12]
 800be8e:	b29c      	uxth	r4, r3
 800be90:	2001      	movs	r0, #1
 800be92:	f7f9 fa65 	bl	8005360 <lwip_htons>
 800be96:	4603      	mov	r3, r0
 800be98:	461a      	mov	r2, r3
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	4322      	orrs	r2, r4
 800bea0:	b292      	uxth	r2, r2
 800bea2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	8b5b      	ldrh	r3, [r3, #26]
 800bea8:	f043 0320 	orr.w	r3, r3, #32
 800beac:	b29a      	uxth	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800beb2:	2300      	movs	r3, #0
 800beb4:	e004      	b.n	800bec0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800beb6:	2101      	movs	r1, #1
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 f80b 	bl	800bed4 <tcp_enqueue_flags>
 800bebe:	4603      	mov	r3, r0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd90      	pop	{r4, r7, pc}
 800bec8:	080127f4 	.word	0x080127f4
 800becc:	08012bfc 	.word	0x08012bfc
 800bed0:	08012848 	.word	0x08012848

0800bed4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b08a      	sub	sp, #40	; 0x28
 800bed8:	af02      	add	r7, sp, #8
 800beda:	6078      	str	r0, [r7, #4]
 800bedc:	460b      	mov	r3, r1
 800bede:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800bee4:	2300      	movs	r3, #0
 800bee6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bee8:	78fb      	ldrb	r3, [r7, #3]
 800beea:	f003 0303 	and.w	r3, r3, #3
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d106      	bne.n	800bf00 <tcp_enqueue_flags+0x2c>
 800bef2:	4b67      	ldr	r3, [pc, #412]	; (800c090 <tcp_enqueue_flags+0x1bc>)
 800bef4:	f240 4211 	movw	r2, #1041	; 0x411
 800bef8:	4966      	ldr	r1, [pc, #408]	; (800c094 <tcp_enqueue_flags+0x1c0>)
 800befa:	4867      	ldr	r0, [pc, #412]	; (800c098 <tcp_enqueue_flags+0x1c4>)
 800befc:	f003 fe7c 	bl	800fbf8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <tcp_enqueue_flags+0x40>
 800bf06:	4b62      	ldr	r3, [pc, #392]	; (800c090 <tcp_enqueue_flags+0x1bc>)
 800bf08:	f240 4213 	movw	r2, #1043	; 0x413
 800bf0c:	4963      	ldr	r1, [pc, #396]	; (800c09c <tcp_enqueue_flags+0x1c8>)
 800bf0e:	4862      	ldr	r0, [pc, #392]	; (800c098 <tcp_enqueue_flags+0x1c4>)
 800bf10:	f003 fe72 	bl	800fbf8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800bf14:	78fb      	ldrb	r3, [r7, #3]
 800bf16:	f003 0302 	and.w	r3, r3, #2
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d001      	beq.n	800bf22 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bf22:	7ffb      	ldrb	r3, [r7, #31]
 800bf24:	009b      	lsls	r3, r3, #2
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	f003 0304 	and.w	r3, r3, #4
 800bf2c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bf2e:	7dfb      	ldrb	r3, [r7, #23]
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bf36:	4619      	mov	r1, r3
 800bf38:	2036      	movs	r0, #54	; 0x36
 800bf3a:	f7fa fa8b 	bl	8006454 <pbuf_alloc>
 800bf3e:	6138      	str	r0, [r7, #16]
 800bf40:	693b      	ldr	r3, [r7, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d109      	bne.n	800bf5a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	8b5b      	ldrh	r3, [r3, #26]
 800bf4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf4e:	b29a      	uxth	r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bf54:	f04f 33ff 	mov.w	r3, #4294967295
 800bf58:	e095      	b.n	800c086 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	895a      	ldrh	r2, [r3, #10]
 800bf5e:	7dfb      	ldrb	r3, [r7, #23]
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d206      	bcs.n	800bf74 <tcp_enqueue_flags+0xa0>
 800bf66:	4b4a      	ldr	r3, [pc, #296]	; (800c090 <tcp_enqueue_flags+0x1bc>)
 800bf68:	f240 4239 	movw	r2, #1081	; 0x439
 800bf6c:	494c      	ldr	r1, [pc, #304]	; (800c0a0 <tcp_enqueue_flags+0x1cc>)
 800bf6e:	484a      	ldr	r0, [pc, #296]	; (800c098 <tcp_enqueue_flags+0x1c4>)
 800bf70:	f003 fe42 	bl	800fbf8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800bf78:	78fa      	ldrb	r2, [r7, #3]
 800bf7a:	7ffb      	ldrb	r3, [r7, #31]
 800bf7c:	9300      	str	r3, [sp, #0]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	6939      	ldr	r1, [r7, #16]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff f918 	bl	800b1b8 <tcp_create_segment>
 800bf88:	60f8      	str	r0, [r7, #12]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d109      	bne.n	800bfa4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	8b5b      	ldrh	r3, [r3, #26]
 800bf94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf98:	b29a      	uxth	r2, r3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bf9e:	f04f 33ff 	mov.w	r3, #4294967295
 800bfa2:	e070      	b.n	800c086 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	f003 0303 	and.w	r3, r3, #3
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d006      	beq.n	800bfbe <tcp_enqueue_flags+0xea>
 800bfb0:	4b37      	ldr	r3, [pc, #220]	; (800c090 <tcp_enqueue_flags+0x1bc>)
 800bfb2:	f240 4242 	movw	r2, #1090	; 0x442
 800bfb6:	493b      	ldr	r1, [pc, #236]	; (800c0a4 <tcp_enqueue_flags+0x1d0>)
 800bfb8:	4837      	ldr	r0, [pc, #220]	; (800c098 <tcp_enqueue_flags+0x1c4>)
 800bfba:	f003 fe1d 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	891b      	ldrh	r3, [r3, #8]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d006      	beq.n	800bfd4 <tcp_enqueue_flags+0x100>
 800bfc6:	4b32      	ldr	r3, [pc, #200]	; (800c090 <tcp_enqueue_flags+0x1bc>)
 800bfc8:	f240 4243 	movw	r2, #1091	; 0x443
 800bfcc:	4936      	ldr	r1, [pc, #216]	; (800c0a8 <tcp_enqueue_flags+0x1d4>)
 800bfce:	4832      	ldr	r0, [pc, #200]	; (800c098 <tcp_enqueue_flags+0x1c4>)
 800bfd0:	f003 fe12 	bl	800fbf8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d103      	bne.n	800bfe4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	66da      	str	r2, [r3, #108]	; 0x6c
 800bfe2:	e00d      	b.n	800c000 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfe8:	61bb      	str	r3, [r7, #24]
 800bfea:	e002      	b.n	800bff2 <tcp_enqueue_flags+0x11e>
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	61bb      	str	r3, [r7, #24]
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d1f8      	bne.n	800bfec <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2200      	movs	r2, #0
 800c004:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c008:	78fb      	ldrb	r3, [r7, #3]
 800c00a:	f003 0302 	and.w	r3, r3, #2
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d104      	bne.n	800c01c <tcp_enqueue_flags+0x148>
 800c012:	78fb      	ldrb	r3, [r7, #3]
 800c014:	f003 0301 	and.w	r3, r3, #1
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d004      	beq.n	800c026 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c020:	1c5a      	adds	r2, r3, #1
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800c026:	78fb      	ldrb	r3, [r7, #3]
 800c028:	f003 0301 	and.w	r3, r3, #1
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d006      	beq.n	800c03e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	8b5b      	ldrh	r3, [r3, #26]
 800c034:	f043 0320 	orr.w	r3, r3, #32
 800c038:	b29a      	uxth	r2, r3
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	4618      	mov	r0, r3
 800c044:	f7fa fd72 	bl	8006b2c <pbuf_clen>
 800c048:	4603      	mov	r3, r0
 800c04a:	461a      	mov	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c052:	4413      	add	r3, r2
 800c054:	b29a      	uxth	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00e      	beq.n	800c084 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d10a      	bne.n	800c084 <tcp_enqueue_flags+0x1b0>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c072:	2b00      	cmp	r3, #0
 800c074:	d106      	bne.n	800c084 <tcp_enqueue_flags+0x1b0>
 800c076:	4b06      	ldr	r3, [pc, #24]	; (800c090 <tcp_enqueue_flags+0x1bc>)
 800c078:	f240 4265 	movw	r2, #1125	; 0x465
 800c07c:	490b      	ldr	r1, [pc, #44]	; (800c0ac <tcp_enqueue_flags+0x1d8>)
 800c07e:	4806      	ldr	r0, [pc, #24]	; (800c098 <tcp_enqueue_flags+0x1c4>)
 800c080:	f003 fdba 	bl	800fbf8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3720      	adds	r7, #32
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	080127f4 	.word	0x080127f4
 800c094:	08012c18 	.word	0x08012c18
 800c098:	08012848 	.word	0x08012848
 800c09c:	08012c70 	.word	0x08012c70
 800c0a0:	08012c90 	.word	0x08012c90
 800c0a4:	08012ccc 	.word	0x08012ccc
 800c0a8:	08012ce4 	.word	0x08012ce4
 800c0ac:	08012d10 	.word	0x08012d10

0800c0b0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800c0b0:	b5b0      	push	{r4, r5, r7, lr}
 800c0b2:	b08a      	sub	sp, #40	; 0x28
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d106      	bne.n	800c0cc <tcp_output+0x1c>
 800c0be:	4b8a      	ldr	r3, [pc, #552]	; (800c2e8 <tcp_output+0x238>)
 800c0c0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c0c4:	4989      	ldr	r1, [pc, #548]	; (800c2ec <tcp_output+0x23c>)
 800c0c6:	488a      	ldr	r0, [pc, #552]	; (800c2f0 <tcp_output+0x240>)
 800c0c8:	f003 fd96 	bl	800fbf8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	7d1b      	ldrb	r3, [r3, #20]
 800c0d0:	2b01      	cmp	r3, #1
 800c0d2:	d106      	bne.n	800c0e2 <tcp_output+0x32>
 800c0d4:	4b84      	ldr	r3, [pc, #528]	; (800c2e8 <tcp_output+0x238>)
 800c0d6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c0da:	4986      	ldr	r1, [pc, #536]	; (800c2f4 <tcp_output+0x244>)
 800c0dc:	4884      	ldr	r0, [pc, #528]	; (800c2f0 <tcp_output+0x240>)
 800c0de:	f003 fd8b 	bl	800fbf8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800c0e2:	4b85      	ldr	r3, [pc, #532]	; (800c2f8 <tcp_output+0x248>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d101      	bne.n	800c0f0 <tcp_output+0x40>
    return ERR_OK;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	e1ce      	b.n	800c48e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	bf28      	it	cs
 800c100:	4613      	movcs	r3, r2
 800c102:	b29b      	uxth	r3, r3
 800c104:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c10a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800c10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10b      	bne.n	800c12a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	8b5b      	ldrh	r3, [r3, #26]
 800c116:	f003 0302 	and.w	r3, r3, #2
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f000 81aa 	beq.w	800c474 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fdcb 	bl	800ccbc <tcp_send_empty_ack>
 800c126:	4603      	mov	r3, r0
 800c128:	e1b1      	b.n	800c48e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c12a:	6879      	ldr	r1, [r7, #4]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	3304      	adds	r3, #4
 800c130:	461a      	mov	r2, r3
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f7ff f824 	bl	800b180 <tcp_route>
 800c138:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800c13a:	697b      	ldr	r3, [r7, #20]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d102      	bne.n	800c146 <tcp_output+0x96>
    return ERR_RTE;
 800c140:	f06f 0303 	mvn.w	r3, #3
 800c144:	e1a3      	b.n	800c48e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d003      	beq.n	800c154 <tcp_output+0xa4>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d111      	bne.n	800c178 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d002      	beq.n	800c160 <tcp_output+0xb0>
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	3304      	adds	r3, #4
 800c15e:	e000      	b.n	800c162 <tcp_output+0xb2>
 800c160:	2300      	movs	r3, #0
 800c162:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d102      	bne.n	800c170 <tcp_output+0xc0>
      return ERR_RTE;
 800c16a:	f06f 0303 	mvn.w	r3, #3
 800c16e:	e18e      	b.n	800c48e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	4618      	mov	r0, r3
 800c180:	f7f9 f903 	bl	800538a <lwip_htonl>
 800c184:	4602      	mov	r2, r0
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c18a:	1ad3      	subs	r3, r2, r3
 800c18c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c18e:	8912      	ldrh	r2, [r2, #8]
 800c190:	4413      	add	r3, r2
 800c192:	69ba      	ldr	r2, [r7, #24]
 800c194:	429a      	cmp	r2, r3
 800c196:	d227      	bcs.n	800c1e8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c19e:	461a      	mov	r2, r3
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d114      	bne.n	800c1d0 <tcp_output+0x120>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d110      	bne.n	800c1d0 <tcp_output+0x120>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d10b      	bne.n	800c1d0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	8b5b      	ldrh	r3, [r3, #26]
 800c1d4:	f003 0302 	and.w	r3, r3, #2
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f000 814d 	beq.w	800c478 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 fd6c 	bl	800ccbc <tcp_send_empty_ack>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	e152      	b.n	800c48e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1f4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c1f6:	6a3b      	ldr	r3, [r7, #32]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f000 811c 	beq.w	800c436 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c1fe:	e002      	b.n	800c206 <tcp_output+0x156>
 800c200:	6a3b      	ldr	r3, [r7, #32]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	623b      	str	r3, [r7, #32]
 800c206:	6a3b      	ldr	r3, [r7, #32]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1f8      	bne.n	800c200 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c20e:	e112      	b.n	800c436 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	899b      	ldrh	r3, [r3, #12]
 800c216:	b29b      	uxth	r3, r3
 800c218:	4618      	mov	r0, r3
 800c21a:	f7f9 f8a1 	bl	8005360 <lwip_htons>
 800c21e:	4603      	mov	r3, r0
 800c220:	b2db      	uxtb	r3, r3
 800c222:	f003 0304 	and.w	r3, r3, #4
 800c226:	2b00      	cmp	r3, #0
 800c228:	d006      	beq.n	800c238 <tcp_output+0x188>
 800c22a:	4b2f      	ldr	r3, [pc, #188]	; (800c2e8 <tcp_output+0x238>)
 800c22c:	f240 5236 	movw	r2, #1334	; 0x536
 800c230:	4932      	ldr	r1, [pc, #200]	; (800c2fc <tcp_output+0x24c>)
 800c232:	482f      	ldr	r0, [pc, #188]	; (800c2f0 <tcp_output+0x240>)
 800c234:	f003 fce0 	bl	800fbf8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d01f      	beq.n	800c280 <tcp_output+0x1d0>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	8b5b      	ldrh	r3, [r3, #26]
 800c244:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d119      	bne.n	800c280 <tcp_output+0x1d0>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00b      	beq.n	800c26c <tcp_output+0x1bc>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d110      	bne.n	800c280 <tcp_output+0x1d0>
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c262:	891a      	ldrh	r2, [r3, #8]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c268:	429a      	cmp	r2, r3
 800c26a:	d209      	bcs.n	800c280 <tcp_output+0x1d0>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c272:	2b00      	cmp	r3, #0
 800c274:	d004      	beq.n	800c280 <tcp_output+0x1d0>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c27c:	2b08      	cmp	r3, #8
 800c27e:	d901      	bls.n	800c284 <tcp_output+0x1d4>
 800c280:	2301      	movs	r3, #1
 800c282:	e000      	b.n	800c286 <tcp_output+0x1d6>
 800c284:	2300      	movs	r3, #0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d106      	bne.n	800c298 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	8b5b      	ldrh	r3, [r3, #26]
 800c28e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c292:	2b00      	cmp	r3, #0
 800c294:	f000 80e4 	beq.w	800c460 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	7d1b      	ldrb	r3, [r3, #20]
 800c29c:	2b02      	cmp	r3, #2
 800c29e:	d00d      	beq.n	800c2bc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	899b      	ldrh	r3, [r3, #12]
 800c2a6:	b29c      	uxth	r4, r3
 800c2a8:	2010      	movs	r0, #16
 800c2aa:	f7f9 f859 	bl	8005360 <lwip_htons>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b4:	68db      	ldr	r3, [r3, #12]
 800c2b6:	4322      	orrs	r2, r4
 800c2b8:	b292      	uxth	r2, r2
 800c2ba:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c2bc:	697a      	ldr	r2, [r7, #20]
 800c2be:	6879      	ldr	r1, [r7, #4]
 800c2c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2c2:	f000 f909 	bl	800c4d8 <tcp_output_segment>
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c2ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d016      	beq.n	800c300 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	8b5b      	ldrh	r3, [r3, #26]
 800c2d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	835a      	strh	r2, [r3, #26]
      return err;
 800c2e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2e4:	e0d3      	b.n	800c48e <tcp_output+0x3de>
 800c2e6:	bf00      	nop
 800c2e8:	080127f4 	.word	0x080127f4
 800c2ec:	08012d38 	.word	0x08012d38
 800c2f0:	08012848 	.word	0x08012848
 800c2f4:	08012d50 	.word	0x08012d50
 800c2f8:	200083d4 	.word	0x200083d4
 800c2fc:	08012d78 	.word	0x08012d78
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	7d1b      	ldrb	r3, [r3, #20]
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	d006      	beq.n	800c31e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	8b5b      	ldrh	r3, [r3, #26]
 800c314:	f023 0303 	bic.w	r3, r3, #3
 800c318:	b29a      	uxth	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	4618      	mov	r0, r3
 800c326:	f7f9 f830 	bl	800538a <lwip_htonl>
 800c32a:	4604      	mov	r4, r0
 800c32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c32e:	891b      	ldrh	r3, [r3, #8]
 800c330:	461d      	mov	r5, r3
 800c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	899b      	ldrh	r3, [r3, #12]
 800c338:	b29b      	uxth	r3, r3
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7f9 f810 	bl	8005360 <lwip_htons>
 800c340:	4603      	mov	r3, r0
 800c342:	b2db      	uxtb	r3, r3
 800c344:	f003 0303 	and.w	r3, r3, #3
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d001      	beq.n	800c350 <tcp_output+0x2a0>
 800c34c:	2301      	movs	r3, #1
 800c34e:	e000      	b.n	800c352 <tcp_output+0x2a2>
 800c350:	2300      	movs	r3, #0
 800c352:	442b      	add	r3, r5
 800c354:	4423      	add	r3, r4
 800c356:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	1ad3      	subs	r3, r2, r3
 800c360:	2b00      	cmp	r3, #0
 800c362:	da02      	bge.n	800c36a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	68ba      	ldr	r2, [r7, #8]
 800c368:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36c:	891b      	ldrh	r3, [r3, #8]
 800c36e:	461c      	mov	r4, r3
 800c370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c372:	68db      	ldr	r3, [r3, #12]
 800c374:	899b      	ldrh	r3, [r3, #12]
 800c376:	b29b      	uxth	r3, r3
 800c378:	4618      	mov	r0, r3
 800c37a:	f7f8 fff1 	bl	8005360 <lwip_htons>
 800c37e:	4603      	mov	r3, r0
 800c380:	b2db      	uxtb	r3, r3
 800c382:	f003 0303 	and.w	r3, r3, #3
 800c386:	2b00      	cmp	r3, #0
 800c388:	d001      	beq.n	800c38e <tcp_output+0x2de>
 800c38a:	2301      	movs	r3, #1
 800c38c:	e000      	b.n	800c390 <tcp_output+0x2e0>
 800c38e:	2300      	movs	r3, #0
 800c390:	4423      	add	r3, r4
 800c392:	2b00      	cmp	r3, #0
 800c394:	d049      	beq.n	800c42a <tcp_output+0x37a>
      seg->next = NULL;
 800c396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c398:	2200      	movs	r2, #0
 800c39a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d105      	bne.n	800c3b0 <tcp_output+0x300>
        pcb->unacked = seg;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3a8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ac:	623b      	str	r3, [r7, #32]
 800c3ae:	e03f      	b.n	800c430 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7f8 ffe7 	bl	800538a <lwip_htonl>
 800c3bc:	4604      	mov	r4, r0
 800c3be:	6a3b      	ldr	r3, [r7, #32]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f7f8 ffe0 	bl	800538a <lwip_htonl>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	1ae3      	subs	r3, r4, r3
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	da24      	bge.n	800c41c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	3370      	adds	r3, #112	; 0x70
 800c3d6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c3d8:	e002      	b.n	800c3e0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c3da:	69fb      	ldr	r3, [r7, #28]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d011      	beq.n	800c40c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c3e8:	69fb      	ldr	r3, [r7, #28]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68db      	ldr	r3, [r3, #12]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f7f8 ffca 	bl	800538a <lwip_htonl>
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7f8 ffc3 	bl	800538a <lwip_htonl>
 800c404:	4603      	mov	r3, r0
 800c406:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c408:	2b00      	cmp	r3, #0
 800c40a:	dbe6      	blt.n	800c3da <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c40c:	69fb      	ldr	r3, [r7, #28]
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c412:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c418:	601a      	str	r2, [r3, #0]
 800c41a:	e009      	b.n	800c430 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c41c:	6a3b      	ldr	r3, [r7, #32]
 800c41e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c420:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c422:	6a3b      	ldr	r3, [r7, #32]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	623b      	str	r3, [r7, #32]
 800c428:	e002      	b.n	800c430 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c42a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c42c:	f7fb ff59 	bl	80082e2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c434:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d012      	beq.n	800c462 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43e:	68db      	ldr	r3, [r3, #12]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	4618      	mov	r0, r3
 800c444:	f7f8 ffa1 	bl	800538a <lwip_htonl>
 800c448:	4602      	mov	r2, r0
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c452:	8912      	ldrh	r2, [r2, #8]
 800c454:	4413      	add	r3, r2
  while (seg != NULL &&
 800c456:	69ba      	ldr	r2, [r7, #24]
 800c458:	429a      	cmp	r2, r3
 800c45a:	f4bf aed9 	bcs.w	800c210 <tcp_output+0x160>
 800c45e:	e000      	b.n	800c462 <tcp_output+0x3b2>
      break;
 800c460:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c466:	2b00      	cmp	r3, #0
 800c468:	d108      	bne.n	800c47c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c472:	e004      	b.n	800c47e <tcp_output+0x3ce>
    goto output_done;
 800c474:	bf00      	nop
 800c476:	e002      	b.n	800c47e <tcp_output+0x3ce>
    goto output_done;
 800c478:	bf00      	nop
 800c47a:	e000      	b.n	800c47e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c47c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	8b5b      	ldrh	r3, [r3, #26]
 800c482:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c486:	b29a      	uxth	r2, r3
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c48c:	2300      	movs	r3, #0
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3728      	adds	r7, #40	; 0x28
 800c492:	46bd      	mov	sp, r7
 800c494:	bdb0      	pop	{r4, r5, r7, pc}
 800c496:	bf00      	nop

0800c498 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d106      	bne.n	800c4b4 <tcp_output_segment_busy+0x1c>
 800c4a6:	4b09      	ldr	r3, [pc, #36]	; (800c4cc <tcp_output_segment_busy+0x34>)
 800c4a8:	f240 529a 	movw	r2, #1434	; 0x59a
 800c4ac:	4908      	ldr	r1, [pc, #32]	; (800c4d0 <tcp_output_segment_busy+0x38>)
 800c4ae:	4809      	ldr	r0, [pc, #36]	; (800c4d4 <tcp_output_segment_busy+0x3c>)
 800c4b0:	f003 fba2 	bl	800fbf8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	7b9b      	ldrb	r3, [r3, #14]
 800c4ba:	2b01      	cmp	r3, #1
 800c4bc:	d001      	beq.n	800c4c2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e000      	b.n	800c4c4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c4c2:	2300      	movs	r3, #0
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}
 800c4cc:	080127f4 	.word	0x080127f4
 800c4d0:	08012d90 	.word	0x08012d90
 800c4d4:	08012848 	.word	0x08012848

0800c4d8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c4d8:	b5b0      	push	{r4, r5, r7, lr}
 800c4da:	b08c      	sub	sp, #48	; 0x30
 800c4dc:	af04      	add	r7, sp, #16
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d106      	bne.n	800c4f8 <tcp_output_segment+0x20>
 800c4ea:	4b63      	ldr	r3, [pc, #396]	; (800c678 <tcp_output_segment+0x1a0>)
 800c4ec:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c4f0:	4962      	ldr	r1, [pc, #392]	; (800c67c <tcp_output_segment+0x1a4>)
 800c4f2:	4863      	ldr	r0, [pc, #396]	; (800c680 <tcp_output_segment+0x1a8>)
 800c4f4:	f003 fb80 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d106      	bne.n	800c50c <tcp_output_segment+0x34>
 800c4fe:	4b5e      	ldr	r3, [pc, #376]	; (800c678 <tcp_output_segment+0x1a0>)
 800c500:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c504:	495f      	ldr	r1, [pc, #380]	; (800c684 <tcp_output_segment+0x1ac>)
 800c506:	485e      	ldr	r0, [pc, #376]	; (800c680 <tcp_output_segment+0x1a8>)
 800c508:	f003 fb76 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d106      	bne.n	800c520 <tcp_output_segment+0x48>
 800c512:	4b59      	ldr	r3, [pc, #356]	; (800c678 <tcp_output_segment+0x1a0>)
 800c514:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c518:	495b      	ldr	r1, [pc, #364]	; (800c688 <tcp_output_segment+0x1b0>)
 800c51a:	4859      	ldr	r0, [pc, #356]	; (800c680 <tcp_output_segment+0x1a8>)
 800c51c:	f003 fb6c 	bl	800fbf8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f7ff ffb9 	bl	800c498 <tcp_output_segment_busy>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d001      	beq.n	800c530 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c52c:	2300      	movs	r3, #0
 800c52e:	e09f      	b.n	800c670 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	68dc      	ldr	r4, [r3, #12]
 800c538:	4610      	mov	r0, r2
 800c53a:	f7f8 ff26 	bl	800538a <lwip_htonl>
 800c53e:	4603      	mov	r3, r0
 800c540:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	68dc      	ldr	r4, [r3, #12]
 800c54a:	4610      	mov	r0, r2
 800c54c:	f7f8 ff08 	bl	8005360 <lwip_htons>
 800c550:	4603      	mov	r3, r0
 800c552:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c55c:	441a      	add	r2, r3
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	3314      	adds	r3, #20
 800c568:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	7a9b      	ldrb	r3, [r3, #10]
 800c56e:	f003 0301 	and.w	r3, r3, #1
 800c572:	2b00      	cmp	r3, #0
 800c574:	d015      	beq.n	800c5a2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	3304      	adds	r3, #4
 800c57a:	461a      	mov	r2, r3
 800c57c:	6879      	ldr	r1, [r7, #4]
 800c57e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c582:	f7fc fa33 	bl	80089ec <tcp_eff_send_mss_netif>
 800c586:	4603      	mov	r3, r0
 800c588:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c58a:	8b7b      	ldrh	r3, [r7, #26]
 800c58c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c590:	4618      	mov	r0, r3
 800c592:	f7f8 fefa 	bl	800538a <lwip_htonl>
 800c596:	4602      	mov	r2, r0
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c59c:	69fb      	ldr	r3, [r7, #28]
 800c59e:	3304      	adds	r3, #4
 800c5a0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	da02      	bge.n	800c5b2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10c      	bne.n	800c5d4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c5ba:	4b34      	ldr	r3, [pc, #208]	; (800c68c <tcp_output_segment+0x1b4>)
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	685b      	ldr	r3, [r3, #4]
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7f8 fede 	bl	800538a <lwip_htonl>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	68da      	ldr	r2, [r3, #12]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	685b      	ldr	r3, [r3, #4]
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	1ad3      	subs	r3, r2, r3
 800c5e0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	8959      	ldrh	r1, [r3, #10]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	8b3a      	ldrh	r2, [r7, #24]
 800c5ee:	1a8a      	subs	r2, r1, r2
 800c5f0:	b292      	uxth	r2, r2
 800c5f2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	8919      	ldrh	r1, [r3, #8]
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	8b3a      	ldrh	r2, [r7, #24]
 800c600:	1a8a      	subs	r2, r1, r2
 800c602:	b292      	uxth	r2, r2
 800c604:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	68d2      	ldr	r2, [r2, #12]
 800c60e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	2200      	movs	r2, #0
 800c616:	741a      	strb	r2, [r3, #16]
 800c618:	2200      	movs	r2, #0
 800c61a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	f103 0214 	add.w	r2, r3, #20
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	7a9b      	ldrb	r3, [r3, #10]
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	f003 0304 	and.w	r3, r3, #4
 800c62e:	4413      	add	r3, r2
 800c630:	69fa      	ldr	r2, [r7, #28]
 800c632:	429a      	cmp	r2, r3
 800c634:	d006      	beq.n	800c644 <tcp_output_segment+0x16c>
 800c636:	4b10      	ldr	r3, [pc, #64]	; (800c678 <tcp_output_segment+0x1a0>)
 800c638:	f240 621c 	movw	r2, #1564	; 0x61c
 800c63c:	4914      	ldr	r1, [pc, #80]	; (800c690 <tcp_output_segment+0x1b8>)
 800c63e:	4810      	ldr	r0, [pc, #64]	; (800c680 <tcp_output_segment+0x1a8>)
 800c640:	f003 fada 	bl	800fbf8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6858      	ldr	r0, [r3, #4]
 800c648:	68b9      	ldr	r1, [r7, #8]
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	1d1c      	adds	r4, r3, #4
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	7add      	ldrb	r5, [r3, #11]
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	7a9b      	ldrb	r3, [r3, #10]
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	9202      	str	r2, [sp, #8]
 800c65a:	2206      	movs	r2, #6
 800c65c:	9201      	str	r2, [sp, #4]
 800c65e:	9300      	str	r3, [sp, #0]
 800c660:	462b      	mov	r3, r5
 800c662:	4622      	mov	r2, r4
 800c664:	f002 fa36 	bl	800ead4 <ip4_output_if>
 800c668:	4603      	mov	r3, r0
 800c66a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c66c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c670:	4618      	mov	r0, r3
 800c672:	3720      	adds	r7, #32
 800c674:	46bd      	mov	sp, r7
 800c676:	bdb0      	pop	{r4, r5, r7, pc}
 800c678:	080127f4 	.word	0x080127f4
 800c67c:	08012db8 	.word	0x08012db8
 800c680:	08012848 	.word	0x08012848
 800c684:	08012dd8 	.word	0x08012dd8
 800c688:	08012df8 	.word	0x08012df8
 800c68c:	20008388 	.word	0x20008388
 800c690:	08012e1c 	.word	0x08012e1c

0800c694 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c694:	b5b0      	push	{r4, r5, r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d106      	bne.n	800c6b0 <tcp_rexmit_rto_prepare+0x1c>
 800c6a2:	4b31      	ldr	r3, [pc, #196]	; (800c768 <tcp_rexmit_rto_prepare+0xd4>)
 800c6a4:	f240 6263 	movw	r2, #1635	; 0x663
 800c6a8:	4930      	ldr	r1, [pc, #192]	; (800c76c <tcp_rexmit_rto_prepare+0xd8>)
 800c6aa:	4831      	ldr	r0, [pc, #196]	; (800c770 <tcp_rexmit_rto_prepare+0xdc>)
 800c6ac:	f003 faa4 	bl	800fbf8 <iprintf>

  if (pcb->unacked == NULL) {
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d102      	bne.n	800c6be <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c6b8:	f06f 0305 	mvn.w	r3, #5
 800c6bc:	e050      	b.n	800c760 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6c2:	60fb      	str	r3, [r7, #12]
 800c6c4:	e00b      	b.n	800c6de <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c6c6:	68f8      	ldr	r0, [r7, #12]
 800c6c8:	f7ff fee6 	bl	800c498 <tcp_output_segment_busy>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d002      	beq.n	800c6d8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c6d2:	f06f 0305 	mvn.w	r3, #5
 800c6d6:	e043      	b.n	800c760 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	60fb      	str	r3, [r7, #12]
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d1ef      	bne.n	800c6c6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c6e6:	68f8      	ldr	r0, [r7, #12]
 800c6e8:	f7ff fed6 	bl	800c498 <tcp_output_segment_busy>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d002      	beq.n	800c6f8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c6f2:	f06f 0305 	mvn.w	r3, #5
 800c6f6:	e033      	b.n	800c760 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	8b5b      	ldrh	r3, [r3, #26]
 800c712:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c716:	b29a      	uxth	r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	68db      	ldr	r3, [r3, #12]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	4618      	mov	r0, r3
 800c724:	f7f8 fe31 	bl	800538a <lwip_htonl>
 800c728:	4604      	mov	r4, r0
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	891b      	ldrh	r3, [r3, #8]
 800c72e:	461d      	mov	r5, r3
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	899b      	ldrh	r3, [r3, #12]
 800c736:	b29b      	uxth	r3, r3
 800c738:	4618      	mov	r0, r3
 800c73a:	f7f8 fe11 	bl	8005360 <lwip_htons>
 800c73e:	4603      	mov	r3, r0
 800c740:	b2db      	uxtb	r3, r3
 800c742:	f003 0303 	and.w	r3, r3, #3
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <tcp_rexmit_rto_prepare+0xba>
 800c74a:	2301      	movs	r3, #1
 800c74c:	e000      	b.n	800c750 <tcp_rexmit_rto_prepare+0xbc>
 800c74e:	2300      	movs	r3, #0
 800c750:	442b      	add	r3, r5
 800c752:	18e2      	adds	r2, r4, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2200      	movs	r2, #0
 800c75c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c75e:	2300      	movs	r3, #0
}
 800c760:	4618      	mov	r0, r3
 800c762:	3710      	adds	r7, #16
 800c764:	46bd      	mov	sp, r7
 800c766:	bdb0      	pop	{r4, r5, r7, pc}
 800c768:	080127f4 	.word	0x080127f4
 800c76c:	08012e30 	.word	0x08012e30
 800c770:	08012848 	.word	0x08012848

0800c774 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d106      	bne.n	800c790 <tcp_rexmit_rto_commit+0x1c>
 800c782:	4b0d      	ldr	r3, [pc, #52]	; (800c7b8 <tcp_rexmit_rto_commit+0x44>)
 800c784:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c788:	490c      	ldr	r1, [pc, #48]	; (800c7bc <tcp_rexmit_rto_commit+0x48>)
 800c78a:	480d      	ldr	r0, [pc, #52]	; (800c7c0 <tcp_rexmit_rto_commit+0x4c>)
 800c78c:	f003 fa34 	bl	800fbf8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c796:	2bff      	cmp	r3, #255	; 0xff
 800c798:	d007      	beq.n	800c7aa <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c7a0:	3301      	adds	r3, #1
 800c7a2:	b2da      	uxtb	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f7ff fc80 	bl	800c0b0 <tcp_output>
}
 800c7b0:	bf00      	nop
 800c7b2:	3708      	adds	r7, #8
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	080127f4 	.word	0x080127f4
 800c7bc:	08012e54 	.word	0x08012e54
 800c7c0:	08012848 	.word	0x08012848

0800c7c4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d106      	bne.n	800c7e0 <tcp_rexmit_rto+0x1c>
 800c7d2:	4b0a      	ldr	r3, [pc, #40]	; (800c7fc <tcp_rexmit_rto+0x38>)
 800c7d4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c7d8:	4909      	ldr	r1, [pc, #36]	; (800c800 <tcp_rexmit_rto+0x3c>)
 800c7da:	480a      	ldr	r0, [pc, #40]	; (800c804 <tcp_rexmit_rto+0x40>)
 800c7dc:	f003 fa0c 	bl	800fbf8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7ff ff57 	bl	800c694 <tcp_rexmit_rto_prepare>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d102      	bne.n	800c7f2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f7ff ffc1 	bl	800c774 <tcp_rexmit_rto_commit>
  }
}
 800c7f2:	bf00      	nop
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	080127f4 	.word	0x080127f4
 800c800:	08012e78 	.word	0x08012e78
 800c804:	08012848 	.word	0x08012848

0800c808 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c808:	b590      	push	{r4, r7, lr}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d106      	bne.n	800c824 <tcp_rexmit+0x1c>
 800c816:	4b2f      	ldr	r3, [pc, #188]	; (800c8d4 <tcp_rexmit+0xcc>)
 800c818:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c81c:	492e      	ldr	r1, [pc, #184]	; (800c8d8 <tcp_rexmit+0xd0>)
 800c81e:	482f      	ldr	r0, [pc, #188]	; (800c8dc <tcp_rexmit+0xd4>)
 800c820:	f003 f9ea 	bl	800fbf8 <iprintf>

  if (pcb->unacked == NULL) {
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d102      	bne.n	800c832 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c82c:	f06f 0305 	mvn.w	r3, #5
 800c830:	e04c      	b.n	800c8cc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c836:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c838:	68b8      	ldr	r0, [r7, #8]
 800c83a:	f7ff fe2d 	bl	800c498 <tcp_output_segment_busy>
 800c83e:	4603      	mov	r3, r0
 800c840:	2b00      	cmp	r3, #0
 800c842:	d002      	beq.n	800c84a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c844:	f06f 0305 	mvn.w	r3, #5
 800c848:	e040      	b.n	800c8cc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	336c      	adds	r3, #108	; 0x6c
 800c856:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c858:	e002      	b.n	800c860 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d011      	beq.n	800c88c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	685b      	ldr	r3, [r3, #4]
 800c870:	4618      	mov	r0, r3
 800c872:	f7f8 fd8a 	bl	800538a <lwip_htonl>
 800c876:	4604      	mov	r4, r0
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	68db      	ldr	r3, [r3, #12]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	4618      	mov	r0, r3
 800c880:	f7f8 fd83 	bl	800538a <lwip_htonl>
 800c884:	4603      	mov	r3, r0
 800c886:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c888:	2b00      	cmp	r3, #0
 800c88a:	dbe6      	blt.n	800c85a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d103      	bne.n	800c8aa <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8b0:	2bff      	cmp	r3, #255	; 0xff
 800c8b2:	d007      	beq.n	800c8c4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8ba:	3301      	adds	r3, #1
 800c8bc:	b2da      	uxtb	r2, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c8ca:	2300      	movs	r3, #0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3714      	adds	r7, #20
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd90      	pop	{r4, r7, pc}
 800c8d4:	080127f4 	.word	0x080127f4
 800c8d8:	08012e94 	.word	0x08012e94
 800c8dc:	08012848 	.word	0x08012848

0800c8e0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b082      	sub	sp, #8
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d106      	bne.n	800c8fc <tcp_rexmit_fast+0x1c>
 800c8ee:	4b2a      	ldr	r3, [pc, #168]	; (800c998 <tcp_rexmit_fast+0xb8>)
 800c8f0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c8f4:	4929      	ldr	r1, [pc, #164]	; (800c99c <tcp_rexmit_fast+0xbc>)
 800c8f6:	482a      	ldr	r0, [pc, #168]	; (800c9a0 <tcp_rexmit_fast+0xc0>)
 800c8f8:	f003 f97e 	bl	800fbf8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c900:	2b00      	cmp	r3, #0
 800c902:	d044      	beq.n	800c98e <tcp_rexmit_fast+0xae>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	8b5b      	ldrh	r3, [r3, #26]
 800c908:	f003 0304 	and.w	r3, r3, #4
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d13e      	bne.n	800c98e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7ff ff79 	bl	800c808 <tcp_rexmit>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d138      	bne.n	800c98e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c928:	4293      	cmp	r3, r2
 800c92a:	bf28      	it	cs
 800c92c:	4613      	movcs	r3, r2
 800c92e:	b29b      	uxth	r3, r3
 800c930:	0fda      	lsrs	r2, r3, #31
 800c932:	4413      	add	r3, r2
 800c934:	105b      	asrs	r3, r3, #1
 800c936:	b29a      	uxth	r2, r3
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c944:	461a      	mov	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c94a:	005b      	lsls	r3, r3, #1
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d206      	bcs.n	800c95e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c954:	005b      	lsls	r3, r3, #1
 800c956:	b29a      	uxth	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c968:	4619      	mov	r1, r3
 800c96a:	0049      	lsls	r1, r1, #1
 800c96c:	440b      	add	r3, r1
 800c96e:	b29b      	uxth	r3, r3
 800c970:	4413      	add	r3, r2
 800c972:	b29a      	uxth	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	8b5b      	ldrh	r3, [r3, #26]
 800c97e:	f043 0304 	orr.w	r3, r3, #4
 800c982:	b29a      	uxth	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c98e:	bf00      	nop
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	080127f4 	.word	0x080127f4
 800c99c:	08012eac 	.word	0x08012eac
 800c9a0:	08012848 	.word	0x08012848

0800c9a4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b086      	sub	sp, #24
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	607b      	str	r3, [r7, #4]
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	817b      	strh	r3, [r7, #10]
 800c9b2:	4613      	mov	r3, r2
 800c9b4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c9b6:	897a      	ldrh	r2, [r7, #10]
 800c9b8:	893b      	ldrh	r3, [r7, #8]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	3314      	adds	r3, #20
 800c9c0:	b29b      	uxth	r3, r3
 800c9c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c9c6:	4619      	mov	r1, r3
 800c9c8:	2022      	movs	r0, #34	; 0x22
 800c9ca:	f7f9 fd43 	bl	8006454 <pbuf_alloc>
 800c9ce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d04d      	beq.n	800ca72 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c9d6:	897b      	ldrh	r3, [r7, #10]
 800c9d8:	3313      	adds	r3, #19
 800c9da:	697a      	ldr	r2, [r7, #20]
 800c9dc:	8952      	ldrh	r2, [r2, #10]
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	db06      	blt.n	800c9f0 <tcp_output_alloc_header_common+0x4c>
 800c9e2:	4b26      	ldr	r3, [pc, #152]	; (800ca7c <tcp_output_alloc_header_common+0xd8>)
 800c9e4:	f240 7223 	movw	r2, #1827	; 0x723
 800c9e8:	4925      	ldr	r1, [pc, #148]	; (800ca80 <tcp_output_alloc_header_common+0xdc>)
 800c9ea:	4826      	ldr	r0, [pc, #152]	; (800ca84 <tcp_output_alloc_header_common+0xe0>)
 800c9ec:	f003 f904 	bl	800fbf8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c9f6:	8c3b      	ldrh	r3, [r7, #32]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f7f8 fcb1 	bl	8005360 <lwip_htons>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	461a      	mov	r2, r3
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ca06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7f8 fca9 	bl	8005360 <lwip_htons>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	461a      	mov	r2, r3
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	687a      	ldr	r2, [r7, #4]
 800ca1a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	f7f8 fcb4 	bl	800538a <lwip_htonl>
 800ca22:	4602      	mov	r2, r0
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800ca28:	897b      	ldrh	r3, [r7, #10]
 800ca2a:	089b      	lsrs	r3, r3, #2
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	3305      	adds	r3, #5
 800ca30:	b29b      	uxth	r3, r3
 800ca32:	031b      	lsls	r3, r3, #12
 800ca34:	b29a      	uxth	r2, r3
 800ca36:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	4313      	orrs	r3, r2
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7f8 fc8d 	bl	8005360 <lwip_htons>
 800ca46:	4603      	mov	r3, r0
 800ca48:	461a      	mov	r2, r3
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800ca4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7f8 fc85 	bl	8005360 <lwip_htons>
 800ca56:	4603      	mov	r3, r0
 800ca58:	461a      	mov	r2, r3
 800ca5a:	693b      	ldr	r3, [r7, #16]
 800ca5c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	2200      	movs	r2, #0
 800ca62:	741a      	strb	r2, [r3, #16]
 800ca64:	2200      	movs	r2, #0
 800ca66:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	749a      	strb	r2, [r3, #18]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800ca72:	697b      	ldr	r3, [r7, #20]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3718      	adds	r7, #24
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}
 800ca7c:	080127f4 	.word	0x080127f4
 800ca80:	08012ecc 	.word	0x08012ecc
 800ca84:	08012848 	.word	0x08012848

0800ca88 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800ca88:	b5b0      	push	{r4, r5, r7, lr}
 800ca8a:	b08a      	sub	sp, #40	; 0x28
 800ca8c:	af04      	add	r7, sp, #16
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	607b      	str	r3, [r7, #4]
 800ca92:	460b      	mov	r3, r1
 800ca94:	817b      	strh	r3, [r7, #10]
 800ca96:	4613      	mov	r3, r2
 800ca98:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d106      	bne.n	800caae <tcp_output_alloc_header+0x26>
 800caa0:	4b15      	ldr	r3, [pc, #84]	; (800caf8 <tcp_output_alloc_header+0x70>)
 800caa2:	f240 7242 	movw	r2, #1858	; 0x742
 800caa6:	4915      	ldr	r1, [pc, #84]	; (800cafc <tcp_output_alloc_header+0x74>)
 800caa8:	4815      	ldr	r0, [pc, #84]	; (800cb00 <tcp_output_alloc_header+0x78>)
 800caaa:	f003 f8a5 	bl	800fbf8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	8adb      	ldrh	r3, [r3, #22]
 800cab6:	68fa      	ldr	r2, [r7, #12]
 800cab8:	8b12      	ldrh	r2, [r2, #24]
 800caba:	68f9      	ldr	r1, [r7, #12]
 800cabc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800cabe:	893d      	ldrh	r5, [r7, #8]
 800cac0:	897c      	ldrh	r4, [r7, #10]
 800cac2:	9103      	str	r1, [sp, #12]
 800cac4:	2110      	movs	r1, #16
 800cac6:	9102      	str	r1, [sp, #8]
 800cac8:	9201      	str	r2, [sp, #4]
 800caca:	9300      	str	r3, [sp, #0]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	462a      	mov	r2, r5
 800cad0:	4621      	mov	r1, r4
 800cad2:	f7ff ff67 	bl	800c9a4 <tcp_output_alloc_header_common>
 800cad6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d006      	beq.n	800caec <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae2:	68fa      	ldr	r2, [r7, #12]
 800cae4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800cae6:	441a      	add	r2, r3
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800caec:	697b      	ldr	r3, [r7, #20]
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3718      	adds	r7, #24
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bdb0      	pop	{r4, r5, r7, pc}
 800caf6:	bf00      	nop
 800caf8:	080127f4 	.word	0x080127f4
 800cafc:	08012efc 	.word	0x08012efc
 800cb00:	08012848 	.word	0x08012848

0800cb04 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b088      	sub	sp, #32
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	4611      	mov	r1, r2
 800cb10:	461a      	mov	r2, r3
 800cb12:	460b      	mov	r3, r1
 800cb14:	71fb      	strb	r3, [r7, #7]
 800cb16:	4613      	mov	r3, r2
 800cb18:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d106      	bne.n	800cb32 <tcp_output_fill_options+0x2e>
 800cb24:	4b13      	ldr	r3, [pc, #76]	; (800cb74 <tcp_output_fill_options+0x70>)
 800cb26:	f240 7256 	movw	r2, #1878	; 0x756
 800cb2a:	4913      	ldr	r1, [pc, #76]	; (800cb78 <tcp_output_fill_options+0x74>)
 800cb2c:	4813      	ldr	r0, [pc, #76]	; (800cb7c <tcp_output_fill_options+0x78>)
 800cb2e:	f003 f863 	bl	800fbf8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	3314      	adds	r3, #20
 800cb3c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	f103 0214 	add.w	r2, r3, #20
 800cb44:	8bfb      	ldrh	r3, [r7, #30]
 800cb46:	009b      	lsls	r3, r3, #2
 800cb48:	4619      	mov	r1, r3
 800cb4a:	79fb      	ldrb	r3, [r7, #7]
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	f003 0304 	and.w	r3, r3, #4
 800cb52:	440b      	add	r3, r1
 800cb54:	4413      	add	r3, r2
 800cb56:	697a      	ldr	r2, [r7, #20]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d006      	beq.n	800cb6a <tcp_output_fill_options+0x66>
 800cb5c:	4b05      	ldr	r3, [pc, #20]	; (800cb74 <tcp_output_fill_options+0x70>)
 800cb5e:	f240 7275 	movw	r2, #1909	; 0x775
 800cb62:	4907      	ldr	r1, [pc, #28]	; (800cb80 <tcp_output_fill_options+0x7c>)
 800cb64:	4805      	ldr	r0, [pc, #20]	; (800cb7c <tcp_output_fill_options+0x78>)
 800cb66:	f003 f847 	bl	800fbf8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800cb6a:	bf00      	nop
 800cb6c:	3720      	adds	r7, #32
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	080127f4 	.word	0x080127f4
 800cb78:	08012f24 	.word	0x08012f24
 800cb7c:	08012848 	.word	0x08012848
 800cb80:	08012e1c 	.word	0x08012e1c

0800cb84 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b08a      	sub	sp, #40	; 0x28
 800cb88:	af04      	add	r7, sp, #16
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
 800cb90:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d106      	bne.n	800cba6 <tcp_output_control_segment+0x22>
 800cb98:	4b1c      	ldr	r3, [pc, #112]	; (800cc0c <tcp_output_control_segment+0x88>)
 800cb9a:	f240 7287 	movw	r2, #1927	; 0x787
 800cb9e:	491c      	ldr	r1, [pc, #112]	; (800cc10 <tcp_output_control_segment+0x8c>)
 800cba0:	481c      	ldr	r0, [pc, #112]	; (800cc14 <tcp_output_control_segment+0x90>)
 800cba2:	f003 f829 	bl	800fbf8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	6879      	ldr	r1, [r7, #4]
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f7fe fae8 	bl	800b180 <tcp_route>
 800cbb0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d102      	bne.n	800cbbe <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800cbb8:	23fc      	movs	r3, #252	; 0xfc
 800cbba:	75fb      	strb	r3, [r7, #23]
 800cbbc:	e01c      	b.n	800cbf8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d006      	beq.n	800cbd2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	7adb      	ldrb	r3, [r3, #11]
 800cbc8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	7a9b      	ldrb	r3, [r3, #10]
 800cbce:	757b      	strb	r3, [r7, #21]
 800cbd0:	e003      	b.n	800cbda <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800cbd2:	23ff      	movs	r3, #255	; 0xff
 800cbd4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800cbda:	7dba      	ldrb	r2, [r7, #22]
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	9302      	str	r3, [sp, #8]
 800cbe0:	2306      	movs	r3, #6
 800cbe2:	9301      	str	r3, [sp, #4]
 800cbe4:	7d7b      	ldrb	r3, [r7, #21]
 800cbe6:	9300      	str	r3, [sp, #0]
 800cbe8:	4613      	mov	r3, r2
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	6879      	ldr	r1, [r7, #4]
 800cbee:	68b8      	ldr	r0, [r7, #8]
 800cbf0:	f001 ff70 	bl	800ead4 <ip4_output_if>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800cbf8:	68b8      	ldr	r0, [r7, #8]
 800cbfa:	f7f9 ff0f 	bl	8006a1c <pbuf_free>
  return err;
 800cbfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3718      	adds	r7, #24
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	080127f4 	.word	0x080127f4
 800cc10:	08012f4c 	.word	0x08012f4c
 800cc14:	08012848 	.word	0x08012848

0800cc18 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800cc18:	b590      	push	{r4, r7, lr}
 800cc1a:	b08b      	sub	sp, #44	; 0x2c
 800cc1c:	af04      	add	r7, sp, #16
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d106      	bne.n	800cc3a <tcp_rst+0x22>
 800cc2c:	4b1f      	ldr	r3, [pc, #124]	; (800ccac <tcp_rst+0x94>)
 800cc2e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800cc32:	491f      	ldr	r1, [pc, #124]	; (800ccb0 <tcp_rst+0x98>)
 800cc34:	481f      	ldr	r0, [pc, #124]	; (800ccb4 <tcp_rst+0x9c>)
 800cc36:	f002 ffdf 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800cc3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d106      	bne.n	800cc4e <tcp_rst+0x36>
 800cc40:	4b1a      	ldr	r3, [pc, #104]	; (800ccac <tcp_rst+0x94>)
 800cc42:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800cc46:	491c      	ldr	r1, [pc, #112]	; (800ccb8 <tcp_rst+0xa0>)
 800cc48:	481a      	ldr	r0, [pc, #104]	; (800ccb4 <tcp_rst+0x9c>)
 800cc4a:	f002 ffd5 	bl	800fbf8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cc4e:	2300      	movs	r3, #0
 800cc50:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800cc52:	f246 0308 	movw	r3, #24584	; 0x6008
 800cc56:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800cc58:	7dfb      	ldrb	r3, [r7, #23]
 800cc5a:	b29c      	uxth	r4, r3
 800cc5c:	68b8      	ldr	r0, [r7, #8]
 800cc5e:	f7f8 fb94 	bl	800538a <lwip_htonl>
 800cc62:	4602      	mov	r2, r0
 800cc64:	8abb      	ldrh	r3, [r7, #20]
 800cc66:	9303      	str	r3, [sp, #12]
 800cc68:	2314      	movs	r3, #20
 800cc6a:	9302      	str	r3, [sp, #8]
 800cc6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cc6e:	9301      	str	r3, [sp, #4]
 800cc70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cc72:	9300      	str	r3, [sp, #0]
 800cc74:	4613      	mov	r3, r2
 800cc76:	2200      	movs	r2, #0
 800cc78:	4621      	mov	r1, r4
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f7ff fe92 	bl	800c9a4 <tcp_output_alloc_header_common>
 800cc80:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d00c      	beq.n	800cca2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cc88:	7dfb      	ldrb	r3, [r7, #23]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	6939      	ldr	r1, [r7, #16]
 800cc8e:	68f8      	ldr	r0, [r7, #12]
 800cc90:	f7ff ff38 	bl	800cb04 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc96:	683a      	ldr	r2, [r7, #0]
 800cc98:	6939      	ldr	r1, [r7, #16]
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f7ff ff72 	bl	800cb84 <tcp_output_control_segment>
 800cca0:	e000      	b.n	800cca4 <tcp_rst+0x8c>
    return;
 800cca2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800cca4:	371c      	adds	r7, #28
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd90      	pop	{r4, r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	080127f4 	.word	0x080127f4
 800ccb0:	08012f78 	.word	0x08012f78
 800ccb4:	08012848 	.word	0x08012848
 800ccb8:	08012f94 	.word	0x08012f94

0800ccbc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ccbc:	b590      	push	{r4, r7, lr}
 800ccbe:	b087      	sub	sp, #28
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d106      	bne.n	800cce0 <tcp_send_empty_ack+0x24>
 800ccd2:	4b28      	ldr	r3, [pc, #160]	; (800cd74 <tcp_send_empty_ack+0xb8>)
 800ccd4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ccd8:	4927      	ldr	r1, [pc, #156]	; (800cd78 <tcp_send_empty_ack+0xbc>)
 800ccda:	4828      	ldr	r0, [pc, #160]	; (800cd7c <tcp_send_empty_ack+0xc0>)
 800ccdc:	f002 ff8c 	bl	800fbf8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cce0:	7dfb      	ldrb	r3, [r7, #23]
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	b2db      	uxtb	r3, r3
 800cce6:	f003 0304 	and.w	r3, r3, #4
 800ccea:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ccec:	7d7b      	ldrb	r3, [r7, #21]
 800ccee:	b29c      	uxth	r4, r3
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7f8 fb48 	bl	800538a <lwip_htonl>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	4621      	mov	r1, r4
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f7ff fec1 	bl	800ca88 <tcp_output_alloc_header>
 800cd06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cd08:	693b      	ldr	r3, [r7, #16]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d109      	bne.n	800cd22 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	8b5b      	ldrh	r3, [r3, #26]
 800cd12:	f043 0303 	orr.w	r3, r3, #3
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cd1c:	f06f 0301 	mvn.w	r3, #1
 800cd20:	e023      	b.n	800cd6a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cd22:	7dbb      	ldrb	r3, [r7, #22]
 800cd24:	7dfa      	ldrb	r2, [r7, #23]
 800cd26:	6939      	ldr	r1, [r7, #16]
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f7ff feeb 	bl	800cb04 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	3304      	adds	r3, #4
 800cd34:	6939      	ldr	r1, [r7, #16]
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f7ff ff24 	bl	800cb84 <tcp_output_control_segment>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800cd40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d007      	beq.n	800cd58 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	8b5b      	ldrh	r3, [r3, #26]
 800cd4c:	f043 0303 	orr.w	r3, r3, #3
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	835a      	strh	r2, [r3, #26]
 800cd56:	e006      	b.n	800cd66 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	8b5b      	ldrh	r3, [r3, #26]
 800cd5c:	f023 0303 	bic.w	r3, r3, #3
 800cd60:	b29a      	uxth	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800cd66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	371c      	adds	r7, #28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd90      	pop	{r4, r7, pc}
 800cd72:	bf00      	nop
 800cd74:	080127f4 	.word	0x080127f4
 800cd78:	08012fb0 	.word	0x08012fb0
 800cd7c:	08012848 	.word	0x08012848

0800cd80 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cd80:	b590      	push	{r4, r7, lr}
 800cd82:	b087      	sub	sp, #28
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cd88:	2300      	movs	r3, #0
 800cd8a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d106      	bne.n	800cda0 <tcp_keepalive+0x20>
 800cd92:	4b18      	ldr	r3, [pc, #96]	; (800cdf4 <tcp_keepalive+0x74>)
 800cd94:	f640 0224 	movw	r2, #2084	; 0x824
 800cd98:	4917      	ldr	r1, [pc, #92]	; (800cdf8 <tcp_keepalive+0x78>)
 800cd9a:	4818      	ldr	r0, [pc, #96]	; (800cdfc <tcp_keepalive+0x7c>)
 800cd9c:	f002 ff2c 	bl	800fbf8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cda0:	7dfb      	ldrb	r3, [r7, #23]
 800cda2:	b29c      	uxth	r4, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cda8:	3b01      	subs	r3, #1
 800cdaa:	4618      	mov	r0, r3
 800cdac:	f7f8 faed 	bl	800538a <lwip_htonl>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	4621      	mov	r1, r4
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7ff fe66 	bl	800ca88 <tcp_output_alloc_header>
 800cdbc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d102      	bne.n	800cdca <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800cdc4:	f04f 33ff 	mov.w	r3, #4294967295
 800cdc8:	e010      	b.n	800cdec <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	6939      	ldr	r1, [r7, #16]
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f7ff fe97 	bl	800cb04 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	3304      	adds	r3, #4
 800cddc:	6939      	ldr	r1, [r7, #16]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f7ff fed0 	bl	800cb84 <tcp_output_control_segment>
 800cde4:	4603      	mov	r3, r0
 800cde6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cde8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	371c      	adds	r7, #28
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd90      	pop	{r4, r7, pc}
 800cdf4:	080127f4 	.word	0x080127f4
 800cdf8:	08012fd0 	.word	0x08012fd0
 800cdfc:	08012848 	.word	0x08012848

0800ce00 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ce00:	b590      	push	{r4, r7, lr}
 800ce02:	b08b      	sub	sp, #44	; 0x2c
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800ce08:	2300      	movs	r3, #0
 800ce0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d106      	bne.n	800ce22 <tcp_zero_window_probe+0x22>
 800ce14:	4b4c      	ldr	r3, [pc, #304]	; (800cf48 <tcp_zero_window_probe+0x148>)
 800ce16:	f640 024f 	movw	r2, #2127	; 0x84f
 800ce1a:	494c      	ldr	r1, [pc, #304]	; (800cf4c <tcp_zero_window_probe+0x14c>)
 800ce1c:	484c      	ldr	r0, [pc, #304]	; (800cf50 <tcp_zero_window_probe+0x150>)
 800ce1e:	f002 feeb 	bl	800fbf8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce26:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ce28:	6a3b      	ldr	r3, [r7, #32]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d101      	bne.n	800ce32 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	e086      	b.n	800cf40 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ce38:	2bff      	cmp	r3, #255	; 0xff
 800ce3a:	d007      	beq.n	800ce4c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ce42:	3301      	adds	r3, #1
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ce4c:	6a3b      	ldr	r3, [r7, #32]
 800ce4e:	68db      	ldr	r3, [r3, #12]
 800ce50:	899b      	ldrh	r3, [r3, #12]
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	4618      	mov	r0, r3
 800ce56:	f7f8 fa83 	bl	8005360 <lwip_htons>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	f003 0301 	and.w	r3, r3, #1
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d005      	beq.n	800ce72 <tcp_zero_window_probe+0x72>
 800ce66:	6a3b      	ldr	r3, [r7, #32]
 800ce68:	891b      	ldrh	r3, [r3, #8]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d101      	bne.n	800ce72 <tcp_zero_window_probe+0x72>
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e000      	b.n	800ce74 <tcp_zero_window_probe+0x74>
 800ce72:	2300      	movs	r3, #0
 800ce74:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ce76:	7ffb      	ldrb	r3, [r7, #31]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	bf0c      	ite	eq
 800ce7c:	2301      	moveq	r3, #1
 800ce7e:	2300      	movne	r3, #0
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ce84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce88:	b299      	uxth	r1, r3
 800ce8a:	6a3b      	ldr	r3, [r7, #32]
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	8bba      	ldrh	r2, [r7, #28]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f7ff fdf8 	bl	800ca88 <tcp_output_alloc_header>
 800ce98:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ce9a:	69bb      	ldr	r3, [r7, #24]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d102      	bne.n	800cea6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800cea0:	f04f 33ff 	mov.w	r3, #4294967295
 800cea4:	e04c      	b.n	800cf40 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ceac:	7ffb      	ldrb	r3, [r7, #31]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d011      	beq.n	800ced6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	899b      	ldrh	r3, [r3, #12]
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	b21b      	sxth	r3, r3
 800ceba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cebe:	b21c      	sxth	r4, r3
 800cec0:	2011      	movs	r0, #17
 800cec2:	f7f8 fa4d 	bl	8005360 <lwip_htons>
 800cec6:	4603      	mov	r3, r0
 800cec8:	b21b      	sxth	r3, r3
 800ceca:	4323      	orrs	r3, r4
 800cecc:	b21b      	sxth	r3, r3
 800cece:	b29a      	uxth	r2, r3
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	819a      	strh	r2, [r3, #12]
 800ced4:	e010      	b.n	800cef8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	3314      	adds	r3, #20
 800cedc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cede:	6a3b      	ldr	r3, [r7, #32]
 800cee0:	6858      	ldr	r0, [r3, #4]
 800cee2:	6a3b      	ldr	r3, [r7, #32]
 800cee4:	685b      	ldr	r3, [r3, #4]
 800cee6:	891a      	ldrh	r2, [r3, #8]
 800cee8:	6a3b      	ldr	r3, [r7, #32]
 800ceea:	891b      	ldrh	r3, [r3, #8]
 800ceec:	1ad3      	subs	r3, r2, r3
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	2201      	movs	r2, #1
 800cef2:	6939      	ldr	r1, [r7, #16]
 800cef4:	f7f9 ff7c 	bl	8006df0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cef8:	6a3b      	ldr	r3, [r7, #32]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7f8 fa43 	bl	800538a <lwip_htonl>
 800cf04:	4603      	mov	r3, r0
 800cf06:	3301      	adds	r3, #1
 800cf08:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	1ad3      	subs	r3, r2, r3
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	da02      	bge.n	800cf1c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cf1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf20:	2200      	movs	r2, #0
 800cf22:	69b9      	ldr	r1, [r7, #24]
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	f7ff fded 	bl	800cb04 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	3304      	adds	r3, #4
 800cf30:	69b9      	ldr	r1, [r7, #24]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f7ff fe26 	bl	800cb84 <tcp_output_control_segment>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cf3c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	372c      	adds	r7, #44	; 0x2c
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd90      	pop	{r4, r7, pc}
 800cf48:	080127f4 	.word	0x080127f4
 800cf4c:	08012fec 	.word	0x08012fec
 800cf50:	08012848 	.word	0x08012848

0800cf54 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800cf5c:	f7fa f8c8 	bl	80070f0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cf60:	4b0a      	ldr	r3, [pc, #40]	; (800cf8c <tcpip_tcp_timer+0x38>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d103      	bne.n	800cf70 <tcpip_tcp_timer+0x1c>
 800cf68:	4b09      	ldr	r3, [pc, #36]	; (800cf90 <tcpip_tcp_timer+0x3c>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d005      	beq.n	800cf7c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cf70:	2200      	movs	r2, #0
 800cf72:	4908      	ldr	r1, [pc, #32]	; (800cf94 <tcpip_tcp_timer+0x40>)
 800cf74:	20fa      	movs	r0, #250	; 0xfa
 800cf76:	f000 f8f3 	bl	800d160 <sys_timeout>
 800cf7a:	e003      	b.n	800cf84 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800cf7c:	4b06      	ldr	r3, [pc, #24]	; (800cf98 <tcpip_tcp_timer+0x44>)
 800cf7e:	2200      	movs	r2, #0
 800cf80:	601a      	str	r2, [r3, #0]
  }
}
 800cf82:	bf00      	nop
 800cf84:	bf00      	nop
 800cf86:	3708      	adds	r7, #8
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	20008394 	.word	0x20008394
 800cf90:	20008398 	.word	0x20008398
 800cf94:	0800cf55 	.word	0x0800cf55
 800cf98:	200083e0 	.word	0x200083e0

0800cf9c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cfa0:	4b0a      	ldr	r3, [pc, #40]	; (800cfcc <tcp_timer_needed+0x30>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d10f      	bne.n	800cfc8 <tcp_timer_needed+0x2c>
 800cfa8:	4b09      	ldr	r3, [pc, #36]	; (800cfd0 <tcp_timer_needed+0x34>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d103      	bne.n	800cfb8 <tcp_timer_needed+0x1c>
 800cfb0:	4b08      	ldr	r3, [pc, #32]	; (800cfd4 <tcp_timer_needed+0x38>)
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d007      	beq.n	800cfc8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800cfb8:	4b04      	ldr	r3, [pc, #16]	; (800cfcc <tcp_timer_needed+0x30>)
 800cfba:	2201      	movs	r2, #1
 800cfbc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	4905      	ldr	r1, [pc, #20]	; (800cfd8 <tcp_timer_needed+0x3c>)
 800cfc2:	20fa      	movs	r0, #250	; 0xfa
 800cfc4:	f000 f8cc 	bl	800d160 <sys_timeout>
  }
}
 800cfc8:	bf00      	nop
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	200083e0 	.word	0x200083e0
 800cfd0:	20008394 	.word	0x20008394
 800cfd4:	20008398 	.word	0x20008398
 800cfd8:	0800cf55 	.word	0x0800cf55

0800cfdc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b086      	sub	sp, #24
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	60f8      	str	r0, [r7, #12]
 800cfe4:	60b9      	str	r1, [r7, #8]
 800cfe6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cfe8:	2006      	movs	r0, #6
 800cfea:	f7f8 fe31 	bl	8005c50 <memp_malloc>
 800cfee:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800cff0:	693b      	ldr	r3, [r7, #16]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d109      	bne.n	800d00a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d151      	bne.n	800d0a0 <sys_timeout_abs+0xc4>
 800cffc:	4b2a      	ldr	r3, [pc, #168]	; (800d0a8 <sys_timeout_abs+0xcc>)
 800cffe:	22be      	movs	r2, #190	; 0xbe
 800d000:	492a      	ldr	r1, [pc, #168]	; (800d0ac <sys_timeout_abs+0xd0>)
 800d002:	482b      	ldr	r0, [pc, #172]	; (800d0b0 <sys_timeout_abs+0xd4>)
 800d004:	f002 fdf8 	bl	800fbf8 <iprintf>
    return;
 800d008:	e04a      	b.n	800d0a0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	2200      	movs	r2, #0
 800d00e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	68ba      	ldr	r2, [r7, #8]
 800d014:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	687a      	ldr	r2, [r7, #4]
 800d01a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800d022:	4b24      	ldr	r3, [pc, #144]	; (800d0b4 <sys_timeout_abs+0xd8>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d103      	bne.n	800d032 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800d02a:	4a22      	ldr	r2, [pc, #136]	; (800d0b4 <sys_timeout_abs+0xd8>)
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	6013      	str	r3, [r2, #0]
    return;
 800d030:	e037      	b.n	800d0a2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	685a      	ldr	r2, [r3, #4]
 800d036:	4b1f      	ldr	r3, [pc, #124]	; (800d0b4 <sys_timeout_abs+0xd8>)
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	1ad3      	subs	r3, r2, r3
 800d03e:	0fdb      	lsrs	r3, r3, #31
 800d040:	f003 0301 	and.w	r3, r3, #1
 800d044:	b2db      	uxtb	r3, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	d007      	beq.n	800d05a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800d04a:	4b1a      	ldr	r3, [pc, #104]	; (800d0b4 <sys_timeout_abs+0xd8>)
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	693b      	ldr	r3, [r7, #16]
 800d050:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800d052:	4a18      	ldr	r2, [pc, #96]	; (800d0b4 <sys_timeout_abs+0xd8>)
 800d054:	693b      	ldr	r3, [r7, #16]
 800d056:	6013      	str	r3, [r2, #0]
 800d058:	e023      	b.n	800d0a2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800d05a:	4b16      	ldr	r3, [pc, #88]	; (800d0b4 <sys_timeout_abs+0xd8>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	617b      	str	r3, [r7, #20]
 800d060:	e01a      	b.n	800d098 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d00b      	beq.n	800d082 <sys_timeout_abs+0xa6>
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	685a      	ldr	r2, [r3, #4]
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	1ad3      	subs	r3, r2, r3
 800d076:	0fdb      	lsrs	r3, r3, #31
 800d078:	f003 0301 	and.w	r3, r3, #1
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d007      	beq.n	800d092 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	681a      	ldr	r2, [r3, #0]
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	693a      	ldr	r2, [r7, #16]
 800d08e:	601a      	str	r2, [r3, #0]
        break;
 800d090:	e007      	b.n	800d0a2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	617b      	str	r3, [r7, #20]
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d1e1      	bne.n	800d062 <sys_timeout_abs+0x86>
 800d09e:	e000      	b.n	800d0a2 <sys_timeout_abs+0xc6>
    return;
 800d0a0:	bf00      	nop
      }
    }
  }
}
 800d0a2:	3718      	adds	r7, #24
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}
 800d0a8:	08013010 	.word	0x08013010
 800d0ac:	08013044 	.word	0x08013044
 800d0b0:	08013084 	.word	0x08013084
 800d0b4:	200083d8 	.word	0x200083d8

0800d0b8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b086      	sub	sp, #24
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	4798      	blx	r3

  now = sys_now();
 800d0ca:	f7f7 ff31 	bl	8004f30 <sys_now>
 800d0ce:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	4b0f      	ldr	r3, [pc, #60]	; (800d114 <lwip_cyclic_timer+0x5c>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4413      	add	r3, r2
 800d0da:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	0fdb      	lsrs	r3, r3, #31
 800d0e4:	f003 0301 	and.w	r3, r3, #1
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d009      	beq.n	800d102 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800d0ee:	697b      	ldr	r3, [r7, #20]
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	4413      	add	r3, r2
 800d0f6:	687a      	ldr	r2, [r7, #4]
 800d0f8:	4907      	ldr	r1, [pc, #28]	; (800d118 <lwip_cyclic_timer+0x60>)
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7ff ff6e 	bl	800cfdc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800d100:	e004      	b.n	800d10c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800d102:	687a      	ldr	r2, [r7, #4]
 800d104:	4904      	ldr	r1, [pc, #16]	; (800d118 <lwip_cyclic_timer+0x60>)
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f7ff ff68 	bl	800cfdc <sys_timeout_abs>
}
 800d10c:	bf00      	nop
 800d10e:	3718      	adds	r7, #24
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}
 800d114:	200083dc 	.word	0x200083dc
 800d118:	0800d0b9 	.word	0x0800d0b9

0800d11c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d122:	2301      	movs	r3, #1
 800d124:	607b      	str	r3, [r7, #4]
 800d126:	e00e      	b.n	800d146 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800d128:	4a0b      	ldr	r2, [pc, #44]	; (800d158 <sys_timeouts_init+0x3c>)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	00db      	lsls	r3, r3, #3
 800d134:	4a08      	ldr	r2, [pc, #32]	; (800d158 <sys_timeouts_init+0x3c>)
 800d136:	4413      	add	r3, r2
 800d138:	461a      	mov	r2, r3
 800d13a:	4908      	ldr	r1, [pc, #32]	; (800d15c <sys_timeouts_init+0x40>)
 800d13c:	f000 f810 	bl	800d160 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3301      	adds	r3, #1
 800d144:	607b      	str	r3, [r7, #4]
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2b02      	cmp	r3, #2
 800d14a:	d9ed      	bls.n	800d128 <sys_timeouts_init+0xc>
  }
}
 800d14c:	bf00      	nop
 800d14e:	bf00      	nop
 800d150:	3708      	adds	r7, #8
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	08013bf4 	.word	0x08013bf4
 800d15c:	0800d0b9 	.word	0x0800d0b9

0800d160 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b086      	sub	sp, #24
 800d164:	af00      	add	r7, sp, #0
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d172:	d306      	bcc.n	800d182 <sys_timeout+0x22>
 800d174:	4b0a      	ldr	r3, [pc, #40]	; (800d1a0 <sys_timeout+0x40>)
 800d176:	f240 1229 	movw	r2, #297	; 0x129
 800d17a:	490a      	ldr	r1, [pc, #40]	; (800d1a4 <sys_timeout+0x44>)
 800d17c:	480a      	ldr	r0, [pc, #40]	; (800d1a8 <sys_timeout+0x48>)
 800d17e:	f002 fd3b 	bl	800fbf8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800d182:	f7f7 fed5 	bl	8004f30 <sys_now>
 800d186:	4602      	mov	r2, r0
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	4413      	add	r3, r2
 800d18c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	68b9      	ldr	r1, [r7, #8]
 800d192:	6978      	ldr	r0, [r7, #20]
 800d194:	f7ff ff22 	bl	800cfdc <sys_timeout_abs>
#endif
}
 800d198:	bf00      	nop
 800d19a:	3718      	adds	r7, #24
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	08013010 	.word	0x08013010
 800d1a4:	080130ac 	.word	0x080130ac
 800d1a8:	08013084 	.word	0x08013084

0800d1ac <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d1b2:	f7f7 febd 	bl	8004f30 <sys_now>
 800d1b6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d1b8:	4b1a      	ldr	r3, [pc, #104]	; (800d224 <sys_check_timeouts+0x78>)
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d001      	beq.n	800d1c6 <sys_check_timeouts+0x1a>
 800d1c2:	f7f9 f8f1 	bl	80063a8 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d1c6:	4b18      	ldr	r3, [pc, #96]	; (800d228 <sys_check_timeouts+0x7c>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d022      	beq.n	800d218 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	68fa      	ldr	r2, [r7, #12]
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	0fdb      	lsrs	r3, r3, #31
 800d1dc:	f003 0301 	and.w	r3, r3, #1
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d11a      	bne.n	800d21c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a0f      	ldr	r2, [pc, #60]	; (800d228 <sys_check_timeouts+0x7c>)
 800d1ec:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	4a0b      	ldr	r2, [pc, #44]	; (800d22c <sys_check_timeouts+0x80>)
 800d200:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d202:	68b9      	ldr	r1, [r7, #8]
 800d204:	2006      	movs	r0, #6
 800d206:	f7f8 fd93 	bl	8005d30 <memp_free>
    if (handler != NULL) {
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d0d3      	beq.n	800d1b8 <sys_check_timeouts+0xc>
      handler(arg);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6838      	ldr	r0, [r7, #0]
 800d214:	4798      	blx	r3
  do {
 800d216:	e7cf      	b.n	800d1b8 <sys_check_timeouts+0xc>
      return;
 800d218:	bf00      	nop
 800d21a:	e000      	b.n	800d21e <sys_check_timeouts+0x72>
      return;
 800d21c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}
 800d224:	20008385 	.word	0x20008385
 800d228:	200083d8 	.word	0x200083d8
 800d22c:	200083dc 	.word	0x200083dc

0800d230 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d234:	f002 fcf8 	bl	800fc28 <rand>
 800d238:	4603      	mov	r3, r0
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d240:	b29b      	uxth	r3, r3
 800d242:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d246:	b29a      	uxth	r2, r3
 800d248:	4b01      	ldr	r3, [pc, #4]	; (800d250 <udp_init+0x20>)
 800d24a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d24c:	bf00      	nop
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	20000028 	.word	0x20000028

0800d254 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	60f8      	str	r0, [r7, #12]
 800d25c:	60b9      	str	r1, [r7, #8]
 800d25e:	4613      	mov	r3, r2
 800d260:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d105      	bne.n	800d274 <udp_input_local_match+0x20>
 800d268:	4b27      	ldr	r3, [pc, #156]	; (800d308 <udp_input_local_match+0xb4>)
 800d26a:	2287      	movs	r2, #135	; 0x87
 800d26c:	4927      	ldr	r1, [pc, #156]	; (800d30c <udp_input_local_match+0xb8>)
 800d26e:	4828      	ldr	r0, [pc, #160]	; (800d310 <udp_input_local_match+0xbc>)
 800d270:	f002 fcc2 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d105      	bne.n	800d286 <udp_input_local_match+0x32>
 800d27a:	4b23      	ldr	r3, [pc, #140]	; (800d308 <udp_input_local_match+0xb4>)
 800d27c:	2288      	movs	r2, #136	; 0x88
 800d27e:	4925      	ldr	r1, [pc, #148]	; (800d314 <udp_input_local_match+0xc0>)
 800d280:	4823      	ldr	r0, [pc, #140]	; (800d310 <udp_input_local_match+0xbc>)
 800d282:	f002 fcb9 	bl	800fbf8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	7a1b      	ldrb	r3, [r3, #8]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d00b      	beq.n	800d2a6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	7a1a      	ldrb	r2, [r3, #8]
 800d292:	4b21      	ldr	r3, [pc, #132]	; (800d318 <udp_input_local_match+0xc4>)
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d29a:	3301      	adds	r3, #1
 800d29c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d001      	beq.n	800d2a6 <udp_input_local_match+0x52>
    return 0;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	e02b      	b.n	800d2fe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d2a6:	79fb      	ldrb	r3, [r7, #7]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d018      	beq.n	800d2de <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d013      	beq.n	800d2da <udp_input_local_match+0x86>
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00f      	beq.n	800d2da <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d2ba:	4b17      	ldr	r3, [pc, #92]	; (800d318 <udp_input_local_match+0xc4>)
 800d2bc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2c2:	d00a      	beq.n	800d2da <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	4b13      	ldr	r3, [pc, #76]	; (800d318 <udp_input_local_match+0xc4>)
 800d2ca:	695b      	ldr	r3, [r3, #20]
 800d2cc:	405a      	eors	r2, r3
 800d2ce:	68bb      	ldr	r3, [r7, #8]
 800d2d0:	3308      	adds	r3, #8
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d110      	bne.n	800d2fc <udp_input_local_match+0xa8>
          return 1;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e00f      	b.n	800d2fe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d009      	beq.n	800d2f8 <udp_input_local_match+0xa4>
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d005      	beq.n	800d2f8 <udp_input_local_match+0xa4>
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	4b09      	ldr	r3, [pc, #36]	; (800d318 <udp_input_local_match+0xc4>)
 800d2f2:	695b      	ldr	r3, [r3, #20]
 800d2f4:	429a      	cmp	r2, r3
 800d2f6:	d101      	bne.n	800d2fc <udp_input_local_match+0xa8>
        return 1;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e000      	b.n	800d2fe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	080130f8 	.word	0x080130f8
 800d30c:	08013128 	.word	0x08013128
 800d310:	0801314c 	.word	0x0801314c
 800d314:	08013174 	.word	0x08013174
 800d318:	20004e18 	.word	0x20004e18

0800d31c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d31c:	b590      	push	{r4, r7, lr}
 800d31e:	b08d      	sub	sp, #52	; 0x34
 800d320:	af02      	add	r7, sp, #8
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d326:	2300      	movs	r3, #0
 800d328:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d105      	bne.n	800d33c <udp_input+0x20>
 800d330:	4b7c      	ldr	r3, [pc, #496]	; (800d524 <udp_input+0x208>)
 800d332:	22cf      	movs	r2, #207	; 0xcf
 800d334:	497c      	ldr	r1, [pc, #496]	; (800d528 <udp_input+0x20c>)
 800d336:	487d      	ldr	r0, [pc, #500]	; (800d52c <udp_input+0x210>)
 800d338:	f002 fc5e 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d105      	bne.n	800d34e <udp_input+0x32>
 800d342:	4b78      	ldr	r3, [pc, #480]	; (800d524 <udp_input+0x208>)
 800d344:	22d0      	movs	r2, #208	; 0xd0
 800d346:	497a      	ldr	r1, [pc, #488]	; (800d530 <udp_input+0x214>)
 800d348:	4878      	ldr	r0, [pc, #480]	; (800d52c <udp_input+0x210>)
 800d34a:	f002 fc55 	bl	800fbf8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	895b      	ldrh	r3, [r3, #10]
 800d352:	2b07      	cmp	r3, #7
 800d354:	d803      	bhi.n	800d35e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f7f9 fb60 	bl	8006a1c <pbuf_free>
    goto end;
 800d35c:	e0de      	b.n	800d51c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	685b      	ldr	r3, [r3, #4]
 800d362:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d364:	4b73      	ldr	r3, [pc, #460]	; (800d534 <udp_input+0x218>)
 800d366:	695b      	ldr	r3, [r3, #20]
 800d368:	4a72      	ldr	r2, [pc, #456]	; (800d534 <udp_input+0x218>)
 800d36a:	6812      	ldr	r2, [r2, #0]
 800d36c:	4611      	mov	r1, r2
 800d36e:	4618      	mov	r0, r3
 800d370:	f001 fc88 	bl	800ec84 <ip4_addr_isbroadcast_u32>
 800d374:	4603      	mov	r3, r0
 800d376:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	881b      	ldrh	r3, [r3, #0]
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	4618      	mov	r0, r3
 800d380:	f7f7 ffee 	bl	8005360 <lwip_htons>
 800d384:	4603      	mov	r3, r0
 800d386:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	885b      	ldrh	r3, [r3, #2]
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	4618      	mov	r0, r3
 800d390:	f7f7 ffe6 	bl	8005360 <lwip_htons>
 800d394:	4603      	mov	r3, r0
 800d396:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d398:	2300      	movs	r3, #0
 800d39a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d39c:	2300      	movs	r3, #0
 800d39e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3a4:	4b64      	ldr	r3, [pc, #400]	; (800d538 <udp_input+0x21c>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	627b      	str	r3, [r7, #36]	; 0x24
 800d3aa:	e054      	b.n	800d456 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ae:	8a5b      	ldrh	r3, [r3, #18]
 800d3b0:	89fa      	ldrh	r2, [r7, #14]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d14a      	bne.n	800d44c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d3b6:	7cfb      	ldrb	r3, [r7, #19]
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	6839      	ldr	r1, [r7, #0]
 800d3bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3be:	f7ff ff49 	bl	800d254 <udp_input_local_match>
 800d3c2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d041      	beq.n	800d44c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	7c1b      	ldrb	r3, [r3, #16]
 800d3cc:	f003 0304 	and.w	r3, r3, #4
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d11d      	bne.n	800d410 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d3d4:	69fb      	ldr	r3, [r7, #28]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d102      	bne.n	800d3e0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3dc:	61fb      	str	r3, [r7, #28]
 800d3de:	e017      	b.n	800d410 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d3e0:	7cfb      	ldrb	r3, [r7, #19]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d014      	beq.n	800d410 <udp_input+0xf4>
 800d3e6:	4b53      	ldr	r3, [pc, #332]	; (800d534 <udp_input+0x218>)
 800d3e8:	695b      	ldr	r3, [r3, #20]
 800d3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ee:	d10f      	bne.n	800d410 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d008      	beq.n	800d410 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	3304      	adds	r3, #4
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	429a      	cmp	r2, r3
 800d40a:	d101      	bne.n	800d410 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d412:	8a9b      	ldrh	r3, [r3, #20]
 800d414:	8a3a      	ldrh	r2, [r7, #16]
 800d416:	429a      	cmp	r2, r3
 800d418:	d118      	bne.n	800d44c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d005      	beq.n	800d42e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	4b43      	ldr	r3, [pc, #268]	; (800d534 <udp_input+0x218>)
 800d428:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d10e      	bne.n	800d44c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d42e:	6a3b      	ldr	r3, [r7, #32]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d014      	beq.n	800d45e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d436:	68da      	ldr	r2, [r3, #12]
 800d438:	6a3b      	ldr	r3, [r7, #32]
 800d43a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d43c:	4b3e      	ldr	r3, [pc, #248]	; (800d538 <udp_input+0x21c>)
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d442:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d444:	4a3c      	ldr	r2, [pc, #240]	; (800d538 <udp_input+0x21c>)
 800d446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d448:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d44a:	e008      	b.n	800d45e <udp_input+0x142>
      }
    }

    prev = pcb;
 800d44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d452:	68db      	ldr	r3, [r3, #12]
 800d454:	627b      	str	r3, [r7, #36]	; 0x24
 800d456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d1a7      	bne.n	800d3ac <udp_input+0x90>
 800d45c:	e000      	b.n	800d460 <udp_input+0x144>
        break;
 800d45e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d462:	2b00      	cmp	r3, #0
 800d464:	d101      	bne.n	800d46a <udp_input+0x14e>
    pcb = uncon_pcb;
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d002      	beq.n	800d476 <udp_input+0x15a>
    for_us = 1;
 800d470:	2301      	movs	r3, #1
 800d472:	76fb      	strb	r3, [r7, #27]
 800d474:	e00a      	b.n	800d48c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	3304      	adds	r3, #4
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	4b2d      	ldr	r3, [pc, #180]	; (800d534 <udp_input+0x218>)
 800d47e:	695b      	ldr	r3, [r3, #20]
 800d480:	429a      	cmp	r2, r3
 800d482:	bf0c      	ite	eq
 800d484:	2301      	moveq	r3, #1
 800d486:	2300      	movne	r3, #0
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d48c:	7efb      	ldrb	r3, [r7, #27]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d041      	beq.n	800d516 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d492:	2108      	movs	r1, #8
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7f9 fa3b 	bl	8006910 <pbuf_remove_header>
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d00a      	beq.n	800d4b6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d4a0:	4b20      	ldr	r3, [pc, #128]	; (800d524 <udp_input+0x208>)
 800d4a2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d4a6:	4925      	ldr	r1, [pc, #148]	; (800d53c <udp_input+0x220>)
 800d4a8:	4820      	ldr	r0, [pc, #128]	; (800d52c <udp_input+0x210>)
 800d4aa:	f002 fba5 	bl	800fbf8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f7f9 fab4 	bl	8006a1c <pbuf_free>
      goto end;
 800d4b4:	e032      	b.n	800d51c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d012      	beq.n	800d4e2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4be:	699b      	ldr	r3, [r3, #24]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d00a      	beq.n	800d4da <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c6:	699c      	ldr	r4, [r3, #24]
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ca:	69d8      	ldr	r0, [r3, #28]
 800d4cc:	8a3b      	ldrh	r3, [r7, #16]
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	4b1b      	ldr	r3, [pc, #108]	; (800d540 <udp_input+0x224>)
 800d4d2:	687a      	ldr	r2, [r7, #4]
 800d4d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d4d6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d4d8:	e021      	b.n	800d51e <udp_input+0x202>
        pbuf_free(p);
 800d4da:	6878      	ldr	r0, [r7, #4]
 800d4dc:	f7f9 fa9e 	bl	8006a1c <pbuf_free>
        goto end;
 800d4e0:	e01c      	b.n	800d51c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d4e2:	7cfb      	ldrb	r3, [r7, #19]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d112      	bne.n	800d50e <udp_input+0x1f2>
 800d4e8:	4b12      	ldr	r3, [pc, #72]	; (800d534 <udp_input+0x218>)
 800d4ea:	695b      	ldr	r3, [r3, #20]
 800d4ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4f0:	2be0      	cmp	r3, #224	; 0xe0
 800d4f2:	d00c      	beq.n	800d50e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d4f4:	4b0f      	ldr	r3, [pc, #60]	; (800d534 <udp_input+0x218>)
 800d4f6:	899b      	ldrh	r3, [r3, #12]
 800d4f8:	3308      	adds	r3, #8
 800d4fa:	b29b      	uxth	r3, r3
 800d4fc:	b21b      	sxth	r3, r3
 800d4fe:	4619      	mov	r1, r3
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7f9 fa78 	bl	80069f6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d506:	2103      	movs	r1, #3
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f001 f89b 	bl	800e644 <icmp_dest_unreach>
      pbuf_free(p);
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f7f9 fa84 	bl	8006a1c <pbuf_free>
  return;
 800d514:	e003      	b.n	800d51e <udp_input+0x202>
    pbuf_free(p);
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7f9 fa80 	bl	8006a1c <pbuf_free>
  return;
 800d51c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d51e:	372c      	adds	r7, #44	; 0x2c
 800d520:	46bd      	mov	sp, r7
 800d522:	bd90      	pop	{r4, r7, pc}
 800d524:	080130f8 	.word	0x080130f8
 800d528:	0801319c 	.word	0x0801319c
 800d52c:	0801314c 	.word	0x0801314c
 800d530:	080131b4 	.word	0x080131b4
 800d534:	20004e18 	.word	0x20004e18
 800d538:	200083e4 	.word	0x200083e4
 800d53c:	080131d0 	.word	0x080131d0
 800d540:	20004e28 	.word	0x20004e28

0800d544 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d01e      	beq.n	800d592 <udp_netif_ip_addr_changed+0x4e>
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d01a      	beq.n	800d592 <udp_netif_ip_addr_changed+0x4e>
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d017      	beq.n	800d592 <udp_netif_ip_addr_changed+0x4e>
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d013      	beq.n	800d592 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d56a:	4b0d      	ldr	r3, [pc, #52]	; (800d5a0 <udp_netif_ip_addr_changed+0x5c>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	60fb      	str	r3, [r7, #12]
 800d570:	e00c      	b.n	800d58c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d103      	bne.n	800d586 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	681a      	ldr	r2, [r3, #0]
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	68db      	ldr	r3, [r3, #12]
 800d58a:	60fb      	str	r3, [r7, #12]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1ef      	bne.n	800d572 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d592:	bf00      	nop
 800d594:	3714      	adds	r7, #20
 800d596:	46bd      	mov	sp, r7
 800d598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59c:	4770      	bx	lr
 800d59e:	bf00      	nop
 800d5a0:	200083e4 	.word	0x200083e4

0800d5a4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d5ac:	4915      	ldr	r1, [pc, #84]	; (800d604 <etharp_free_entry+0x60>)
 800d5ae:	687a      	ldr	r2, [r7, #4]
 800d5b0:	4613      	mov	r3, r2
 800d5b2:	005b      	lsls	r3, r3, #1
 800d5b4:	4413      	add	r3, r2
 800d5b6:	00db      	lsls	r3, r3, #3
 800d5b8:	440b      	add	r3, r1
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d013      	beq.n	800d5e8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d5c0:	4910      	ldr	r1, [pc, #64]	; (800d604 <etharp_free_entry+0x60>)
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	005b      	lsls	r3, r3, #1
 800d5c8:	4413      	add	r3, r2
 800d5ca:	00db      	lsls	r3, r3, #3
 800d5cc:	440b      	add	r3, r1
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7f9 fa23 	bl	8006a1c <pbuf_free>
    arp_table[i].q = NULL;
 800d5d6:	490b      	ldr	r1, [pc, #44]	; (800d604 <etharp_free_entry+0x60>)
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	4613      	mov	r3, r2
 800d5dc:	005b      	lsls	r3, r3, #1
 800d5de:	4413      	add	r3, r2
 800d5e0:	00db      	lsls	r3, r3, #3
 800d5e2:	440b      	add	r3, r1
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d5e8:	4906      	ldr	r1, [pc, #24]	; (800d604 <etharp_free_entry+0x60>)
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	005b      	lsls	r3, r3, #1
 800d5f0:	4413      	add	r3, r2
 800d5f2:	00db      	lsls	r3, r3, #3
 800d5f4:	440b      	add	r3, r1
 800d5f6:	3314      	adds	r3, #20
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d5fc:	bf00      	nop
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}
 800d604:	200083e8 	.word	0x200083e8

0800d608 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d60e:	2300      	movs	r3, #0
 800d610:	607b      	str	r3, [r7, #4]
 800d612:	e096      	b.n	800d742 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d614:	494f      	ldr	r1, [pc, #316]	; (800d754 <etharp_tmr+0x14c>)
 800d616:	687a      	ldr	r2, [r7, #4]
 800d618:	4613      	mov	r3, r2
 800d61a:	005b      	lsls	r3, r3, #1
 800d61c:	4413      	add	r3, r2
 800d61e:	00db      	lsls	r3, r3, #3
 800d620:	440b      	add	r3, r1
 800d622:	3314      	adds	r3, #20
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d628:	78fb      	ldrb	r3, [r7, #3]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	f000 8086 	beq.w	800d73c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d630:	4948      	ldr	r1, [pc, #288]	; (800d754 <etharp_tmr+0x14c>)
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	4613      	mov	r3, r2
 800d636:	005b      	lsls	r3, r3, #1
 800d638:	4413      	add	r3, r2
 800d63a:	00db      	lsls	r3, r3, #3
 800d63c:	440b      	add	r3, r1
 800d63e:	3312      	adds	r3, #18
 800d640:	881b      	ldrh	r3, [r3, #0]
 800d642:	3301      	adds	r3, #1
 800d644:	b298      	uxth	r0, r3
 800d646:	4943      	ldr	r1, [pc, #268]	; (800d754 <etharp_tmr+0x14c>)
 800d648:	687a      	ldr	r2, [r7, #4]
 800d64a:	4613      	mov	r3, r2
 800d64c:	005b      	lsls	r3, r3, #1
 800d64e:	4413      	add	r3, r2
 800d650:	00db      	lsls	r3, r3, #3
 800d652:	440b      	add	r3, r1
 800d654:	3312      	adds	r3, #18
 800d656:	4602      	mov	r2, r0
 800d658:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d65a:	493e      	ldr	r1, [pc, #248]	; (800d754 <etharp_tmr+0x14c>)
 800d65c:	687a      	ldr	r2, [r7, #4]
 800d65e:	4613      	mov	r3, r2
 800d660:	005b      	lsls	r3, r3, #1
 800d662:	4413      	add	r3, r2
 800d664:	00db      	lsls	r3, r3, #3
 800d666:	440b      	add	r3, r1
 800d668:	3312      	adds	r3, #18
 800d66a:	881b      	ldrh	r3, [r3, #0]
 800d66c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d670:	d215      	bcs.n	800d69e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d672:	4938      	ldr	r1, [pc, #224]	; (800d754 <etharp_tmr+0x14c>)
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	4613      	mov	r3, r2
 800d678:	005b      	lsls	r3, r3, #1
 800d67a:	4413      	add	r3, r2
 800d67c:	00db      	lsls	r3, r3, #3
 800d67e:	440b      	add	r3, r1
 800d680:	3314      	adds	r3, #20
 800d682:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d684:	2b01      	cmp	r3, #1
 800d686:	d10e      	bne.n	800d6a6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d688:	4932      	ldr	r1, [pc, #200]	; (800d754 <etharp_tmr+0x14c>)
 800d68a:	687a      	ldr	r2, [r7, #4]
 800d68c:	4613      	mov	r3, r2
 800d68e:	005b      	lsls	r3, r3, #1
 800d690:	4413      	add	r3, r2
 800d692:	00db      	lsls	r3, r3, #3
 800d694:	440b      	add	r3, r1
 800d696:	3312      	adds	r3, #18
 800d698:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d69a:	2b04      	cmp	r3, #4
 800d69c:	d903      	bls.n	800d6a6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f7ff ff80 	bl	800d5a4 <etharp_free_entry>
 800d6a4:	e04a      	b.n	800d73c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d6a6:	492b      	ldr	r1, [pc, #172]	; (800d754 <etharp_tmr+0x14c>)
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	4413      	add	r3, r2
 800d6b0:	00db      	lsls	r3, r3, #3
 800d6b2:	440b      	add	r3, r1
 800d6b4:	3314      	adds	r3, #20
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	2b03      	cmp	r3, #3
 800d6ba:	d10a      	bne.n	800d6d2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d6bc:	4925      	ldr	r1, [pc, #148]	; (800d754 <etharp_tmr+0x14c>)
 800d6be:	687a      	ldr	r2, [r7, #4]
 800d6c0:	4613      	mov	r3, r2
 800d6c2:	005b      	lsls	r3, r3, #1
 800d6c4:	4413      	add	r3, r2
 800d6c6:	00db      	lsls	r3, r3, #3
 800d6c8:	440b      	add	r3, r1
 800d6ca:	3314      	adds	r3, #20
 800d6cc:	2204      	movs	r2, #4
 800d6ce:	701a      	strb	r2, [r3, #0]
 800d6d0:	e034      	b.n	800d73c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d6d2:	4920      	ldr	r1, [pc, #128]	; (800d754 <etharp_tmr+0x14c>)
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	005b      	lsls	r3, r3, #1
 800d6da:	4413      	add	r3, r2
 800d6dc:	00db      	lsls	r3, r3, #3
 800d6de:	440b      	add	r3, r1
 800d6e0:	3314      	adds	r3, #20
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	2b04      	cmp	r3, #4
 800d6e6:	d10a      	bne.n	800d6fe <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d6e8:	491a      	ldr	r1, [pc, #104]	; (800d754 <etharp_tmr+0x14c>)
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	4613      	mov	r3, r2
 800d6ee:	005b      	lsls	r3, r3, #1
 800d6f0:	4413      	add	r3, r2
 800d6f2:	00db      	lsls	r3, r3, #3
 800d6f4:	440b      	add	r3, r1
 800d6f6:	3314      	adds	r3, #20
 800d6f8:	2202      	movs	r2, #2
 800d6fa:	701a      	strb	r2, [r3, #0]
 800d6fc:	e01e      	b.n	800d73c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d6fe:	4915      	ldr	r1, [pc, #84]	; (800d754 <etharp_tmr+0x14c>)
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	4613      	mov	r3, r2
 800d704:	005b      	lsls	r3, r3, #1
 800d706:	4413      	add	r3, r2
 800d708:	00db      	lsls	r3, r3, #3
 800d70a:	440b      	add	r3, r1
 800d70c:	3314      	adds	r3, #20
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d113      	bne.n	800d73c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d714:	490f      	ldr	r1, [pc, #60]	; (800d754 <etharp_tmr+0x14c>)
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	4613      	mov	r3, r2
 800d71a:	005b      	lsls	r3, r3, #1
 800d71c:	4413      	add	r3, r2
 800d71e:	00db      	lsls	r3, r3, #3
 800d720:	440b      	add	r3, r1
 800d722:	3308      	adds	r3, #8
 800d724:	6818      	ldr	r0, [r3, #0]
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	4613      	mov	r3, r2
 800d72a:	005b      	lsls	r3, r3, #1
 800d72c:	4413      	add	r3, r2
 800d72e:	00db      	lsls	r3, r3, #3
 800d730:	4a08      	ldr	r2, [pc, #32]	; (800d754 <etharp_tmr+0x14c>)
 800d732:	4413      	add	r3, r2
 800d734:	3304      	adds	r3, #4
 800d736:	4619      	mov	r1, r3
 800d738:	f000 fe6e 	bl	800e418 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	3301      	adds	r3, #1
 800d740:	607b      	str	r3, [r7, #4]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2b09      	cmp	r3, #9
 800d746:	f77f af65 	ble.w	800d614 <etharp_tmr+0xc>
      }
    }
  }
}
 800d74a:	bf00      	nop
 800d74c:	bf00      	nop
 800d74e:	3708      	adds	r7, #8
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	200083e8 	.word	0x200083e8

0800d758 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b08a      	sub	sp, #40	; 0x28
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	460b      	mov	r3, r1
 800d762:	607a      	str	r2, [r7, #4]
 800d764:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d766:	230a      	movs	r3, #10
 800d768:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d76a:	230a      	movs	r3, #10
 800d76c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d76e:	230a      	movs	r3, #10
 800d770:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d772:	2300      	movs	r3, #0
 800d774:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d776:	230a      	movs	r3, #10
 800d778:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d77a:	2300      	movs	r3, #0
 800d77c:	83bb      	strh	r3, [r7, #28]
 800d77e:	2300      	movs	r3, #0
 800d780:	837b      	strh	r3, [r7, #26]
 800d782:	2300      	movs	r3, #0
 800d784:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d786:	2300      	movs	r3, #0
 800d788:	843b      	strh	r3, [r7, #32]
 800d78a:	e0ae      	b.n	800d8ea <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d78c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d790:	49a6      	ldr	r1, [pc, #664]	; (800da2c <etharp_find_entry+0x2d4>)
 800d792:	4613      	mov	r3, r2
 800d794:	005b      	lsls	r3, r3, #1
 800d796:	4413      	add	r3, r2
 800d798:	00db      	lsls	r3, r3, #3
 800d79a:	440b      	add	r3, r1
 800d79c:	3314      	adds	r3, #20
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d7a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d7a6:	2b0a      	cmp	r3, #10
 800d7a8:	d105      	bne.n	800d7b6 <etharp_find_entry+0x5e>
 800d7aa:	7dfb      	ldrb	r3, [r7, #23]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d102      	bne.n	800d7b6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d7b0:	8c3b      	ldrh	r3, [r7, #32]
 800d7b2:	847b      	strh	r3, [r7, #34]	; 0x22
 800d7b4:	e095      	b.n	800d8e2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d7b6:	7dfb      	ldrb	r3, [r7, #23]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	f000 8092 	beq.w	800d8e2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d7be:	7dfb      	ldrb	r3, [r7, #23]
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d009      	beq.n	800d7d8 <etharp_find_entry+0x80>
 800d7c4:	7dfb      	ldrb	r3, [r7, #23]
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d806      	bhi.n	800d7d8 <etharp_find_entry+0x80>
 800d7ca:	4b99      	ldr	r3, [pc, #612]	; (800da30 <etharp_find_entry+0x2d8>)
 800d7cc:	f240 1223 	movw	r2, #291	; 0x123
 800d7d0:	4998      	ldr	r1, [pc, #608]	; (800da34 <etharp_find_entry+0x2dc>)
 800d7d2:	4899      	ldr	r0, [pc, #612]	; (800da38 <etharp_find_entry+0x2e0>)
 800d7d4:	f002 fa10 	bl	800fbf8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d020      	beq.n	800d820 <etharp_find_entry+0xc8>
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6819      	ldr	r1, [r3, #0]
 800d7e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7e6:	4891      	ldr	r0, [pc, #580]	; (800da2c <etharp_find_entry+0x2d4>)
 800d7e8:	4613      	mov	r3, r2
 800d7ea:	005b      	lsls	r3, r3, #1
 800d7ec:	4413      	add	r3, r2
 800d7ee:	00db      	lsls	r3, r3, #3
 800d7f0:	4403      	add	r3, r0
 800d7f2:	3304      	adds	r3, #4
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4299      	cmp	r1, r3
 800d7f8:	d112      	bne.n	800d820 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d00c      	beq.n	800d81a <etharp_find_entry+0xc2>
 800d800:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d804:	4989      	ldr	r1, [pc, #548]	; (800da2c <etharp_find_entry+0x2d4>)
 800d806:	4613      	mov	r3, r2
 800d808:	005b      	lsls	r3, r3, #1
 800d80a:	4413      	add	r3, r2
 800d80c:	00db      	lsls	r3, r3, #3
 800d80e:	440b      	add	r3, r1
 800d810:	3308      	adds	r3, #8
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	429a      	cmp	r2, r3
 800d818:	d102      	bne.n	800d820 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d81a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d81e:	e100      	b.n	800da22 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d820:	7dfb      	ldrb	r3, [r7, #23]
 800d822:	2b01      	cmp	r3, #1
 800d824:	d140      	bne.n	800d8a8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d826:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d82a:	4980      	ldr	r1, [pc, #512]	; (800da2c <etharp_find_entry+0x2d4>)
 800d82c:	4613      	mov	r3, r2
 800d82e:	005b      	lsls	r3, r3, #1
 800d830:	4413      	add	r3, r2
 800d832:	00db      	lsls	r3, r3, #3
 800d834:	440b      	add	r3, r1
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d01a      	beq.n	800d872 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d83c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d840:	497a      	ldr	r1, [pc, #488]	; (800da2c <etharp_find_entry+0x2d4>)
 800d842:	4613      	mov	r3, r2
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	4413      	add	r3, r2
 800d848:	00db      	lsls	r3, r3, #3
 800d84a:	440b      	add	r3, r1
 800d84c:	3312      	adds	r3, #18
 800d84e:	881b      	ldrh	r3, [r3, #0]
 800d850:	8bba      	ldrh	r2, [r7, #28]
 800d852:	429a      	cmp	r2, r3
 800d854:	d845      	bhi.n	800d8e2 <etharp_find_entry+0x18a>
            old_queue = i;
 800d856:	8c3b      	ldrh	r3, [r7, #32]
 800d858:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d85a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d85e:	4973      	ldr	r1, [pc, #460]	; (800da2c <etharp_find_entry+0x2d4>)
 800d860:	4613      	mov	r3, r2
 800d862:	005b      	lsls	r3, r3, #1
 800d864:	4413      	add	r3, r2
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	440b      	add	r3, r1
 800d86a:	3312      	adds	r3, #18
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	83bb      	strh	r3, [r7, #28]
 800d870:	e037      	b.n	800d8e2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d872:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d876:	496d      	ldr	r1, [pc, #436]	; (800da2c <etharp_find_entry+0x2d4>)
 800d878:	4613      	mov	r3, r2
 800d87a:	005b      	lsls	r3, r3, #1
 800d87c:	4413      	add	r3, r2
 800d87e:	00db      	lsls	r3, r3, #3
 800d880:	440b      	add	r3, r1
 800d882:	3312      	adds	r3, #18
 800d884:	881b      	ldrh	r3, [r3, #0]
 800d886:	8b7a      	ldrh	r2, [r7, #26]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d82a      	bhi.n	800d8e2 <etharp_find_entry+0x18a>
            old_pending = i;
 800d88c:	8c3b      	ldrh	r3, [r7, #32]
 800d88e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d890:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d894:	4965      	ldr	r1, [pc, #404]	; (800da2c <etharp_find_entry+0x2d4>)
 800d896:	4613      	mov	r3, r2
 800d898:	005b      	lsls	r3, r3, #1
 800d89a:	4413      	add	r3, r2
 800d89c:	00db      	lsls	r3, r3, #3
 800d89e:	440b      	add	r3, r1
 800d8a0:	3312      	adds	r3, #18
 800d8a2:	881b      	ldrh	r3, [r3, #0]
 800d8a4:	837b      	strh	r3, [r7, #26]
 800d8a6:	e01c      	b.n	800d8e2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d8a8:	7dfb      	ldrb	r3, [r7, #23]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d919      	bls.n	800d8e2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d8ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8b2:	495e      	ldr	r1, [pc, #376]	; (800da2c <etharp_find_entry+0x2d4>)
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	005b      	lsls	r3, r3, #1
 800d8b8:	4413      	add	r3, r2
 800d8ba:	00db      	lsls	r3, r3, #3
 800d8bc:	440b      	add	r3, r1
 800d8be:	3312      	adds	r3, #18
 800d8c0:	881b      	ldrh	r3, [r3, #0]
 800d8c2:	8b3a      	ldrh	r2, [r7, #24]
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d80c      	bhi.n	800d8e2 <etharp_find_entry+0x18a>
            old_stable = i;
 800d8c8:	8c3b      	ldrh	r3, [r7, #32]
 800d8ca:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d8cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8d0:	4956      	ldr	r1, [pc, #344]	; (800da2c <etharp_find_entry+0x2d4>)
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	005b      	lsls	r3, r3, #1
 800d8d6:	4413      	add	r3, r2
 800d8d8:	00db      	lsls	r3, r3, #3
 800d8da:	440b      	add	r3, r1
 800d8dc:	3312      	adds	r3, #18
 800d8de:	881b      	ldrh	r3, [r3, #0]
 800d8e0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d8e2:	8c3b      	ldrh	r3, [r7, #32]
 800d8e4:	3301      	adds	r3, #1
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	843b      	strh	r3, [r7, #32]
 800d8ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d8ee:	2b09      	cmp	r3, #9
 800d8f0:	f77f af4c 	ble.w	800d78c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d8f4:	7afb      	ldrb	r3, [r7, #11]
 800d8f6:	f003 0302 	and.w	r3, r3, #2
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d108      	bne.n	800d910 <etharp_find_entry+0x1b8>
 800d8fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d902:	2b0a      	cmp	r3, #10
 800d904:	d107      	bne.n	800d916 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d906:	7afb      	ldrb	r3, [r7, #11]
 800d908:	f003 0301 	and.w	r3, r3, #1
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d102      	bne.n	800d916 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d910:	f04f 33ff 	mov.w	r3, #4294967295
 800d914:	e085      	b.n	800da22 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d916:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d91a:	2b09      	cmp	r3, #9
 800d91c:	dc02      	bgt.n	800d924 <etharp_find_entry+0x1cc>
    i = empty;
 800d91e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d920:	843b      	strh	r3, [r7, #32]
 800d922:	e039      	b.n	800d998 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d924:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d928:	2b09      	cmp	r3, #9
 800d92a:	dc14      	bgt.n	800d956 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d92c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d92e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d930:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d934:	493d      	ldr	r1, [pc, #244]	; (800da2c <etharp_find_entry+0x2d4>)
 800d936:	4613      	mov	r3, r2
 800d938:	005b      	lsls	r3, r3, #1
 800d93a:	4413      	add	r3, r2
 800d93c:	00db      	lsls	r3, r3, #3
 800d93e:	440b      	add	r3, r1
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d018      	beq.n	800d978 <etharp_find_entry+0x220>
 800d946:	4b3a      	ldr	r3, [pc, #232]	; (800da30 <etharp_find_entry+0x2d8>)
 800d948:	f240 126d 	movw	r2, #365	; 0x16d
 800d94c:	493b      	ldr	r1, [pc, #236]	; (800da3c <etharp_find_entry+0x2e4>)
 800d94e:	483a      	ldr	r0, [pc, #232]	; (800da38 <etharp_find_entry+0x2e0>)
 800d950:	f002 f952 	bl	800fbf8 <iprintf>
 800d954:	e010      	b.n	800d978 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d956:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d95a:	2b09      	cmp	r3, #9
 800d95c:	dc02      	bgt.n	800d964 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d95e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d960:	843b      	strh	r3, [r7, #32]
 800d962:	e009      	b.n	800d978 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d964:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d968:	2b09      	cmp	r3, #9
 800d96a:	dc02      	bgt.n	800d972 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d96c:	8bfb      	ldrh	r3, [r7, #30]
 800d96e:	843b      	strh	r3, [r7, #32]
 800d970:	e002      	b.n	800d978 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d972:	f04f 33ff 	mov.w	r3, #4294967295
 800d976:	e054      	b.n	800da22 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d978:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d97c:	2b09      	cmp	r3, #9
 800d97e:	dd06      	ble.n	800d98e <etharp_find_entry+0x236>
 800d980:	4b2b      	ldr	r3, [pc, #172]	; (800da30 <etharp_find_entry+0x2d8>)
 800d982:	f240 127f 	movw	r2, #383	; 0x17f
 800d986:	492e      	ldr	r1, [pc, #184]	; (800da40 <etharp_find_entry+0x2e8>)
 800d988:	482b      	ldr	r0, [pc, #172]	; (800da38 <etharp_find_entry+0x2e0>)
 800d98a:	f002 f935 	bl	800fbf8 <iprintf>
    etharp_free_entry(i);
 800d98e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d992:	4618      	mov	r0, r3
 800d994:	f7ff fe06 	bl	800d5a4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d998:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d99c:	2b09      	cmp	r3, #9
 800d99e:	dd06      	ble.n	800d9ae <etharp_find_entry+0x256>
 800d9a0:	4b23      	ldr	r3, [pc, #140]	; (800da30 <etharp_find_entry+0x2d8>)
 800d9a2:	f240 1283 	movw	r2, #387	; 0x183
 800d9a6:	4926      	ldr	r1, [pc, #152]	; (800da40 <etharp_find_entry+0x2e8>)
 800d9a8:	4823      	ldr	r0, [pc, #140]	; (800da38 <etharp_find_entry+0x2e0>)
 800d9aa:	f002 f925 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d9ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9b2:	491e      	ldr	r1, [pc, #120]	; (800da2c <etharp_find_entry+0x2d4>)
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	4413      	add	r3, r2
 800d9ba:	00db      	lsls	r3, r3, #3
 800d9bc:	440b      	add	r3, r1
 800d9be:	3314      	adds	r3, #20
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d006      	beq.n	800d9d4 <etharp_find_entry+0x27c>
 800d9c6:	4b1a      	ldr	r3, [pc, #104]	; (800da30 <etharp_find_entry+0x2d8>)
 800d9c8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d9cc:	491d      	ldr	r1, [pc, #116]	; (800da44 <etharp_find_entry+0x2ec>)
 800d9ce:	481a      	ldr	r0, [pc, #104]	; (800da38 <etharp_find_entry+0x2e0>)
 800d9d0:	f002 f912 	bl	800fbf8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00b      	beq.n	800d9f2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d9da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	6819      	ldr	r1, [r3, #0]
 800d9e2:	4812      	ldr	r0, [pc, #72]	; (800da2c <etharp_find_entry+0x2d4>)
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	005b      	lsls	r3, r3, #1
 800d9e8:	4413      	add	r3, r2
 800d9ea:	00db      	lsls	r3, r3, #3
 800d9ec:	4403      	add	r3, r0
 800d9ee:	3304      	adds	r3, #4
 800d9f0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d9f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9f6:	490d      	ldr	r1, [pc, #52]	; (800da2c <etharp_find_entry+0x2d4>)
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	005b      	lsls	r3, r3, #1
 800d9fc:	4413      	add	r3, r2
 800d9fe:	00db      	lsls	r3, r3, #3
 800da00:	440b      	add	r3, r1
 800da02:	3312      	adds	r3, #18
 800da04:	2200      	movs	r2, #0
 800da06:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800da08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800da0c:	4907      	ldr	r1, [pc, #28]	; (800da2c <etharp_find_entry+0x2d4>)
 800da0e:	4613      	mov	r3, r2
 800da10:	005b      	lsls	r3, r3, #1
 800da12:	4413      	add	r3, r2
 800da14:	00db      	lsls	r3, r3, #3
 800da16:	440b      	add	r3, r1
 800da18:	3308      	adds	r3, #8
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800da1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3728      	adds	r7, #40	; 0x28
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	200083e8 	.word	0x200083e8
 800da30:	0801345c 	.word	0x0801345c
 800da34:	08013494 	.word	0x08013494
 800da38:	080134d4 	.word	0x080134d4
 800da3c:	080134fc 	.word	0x080134fc
 800da40:	08013514 	.word	0x08013514
 800da44:	08013528 	.word	0x08013528

0800da48 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b088      	sub	sp, #32
 800da4c:	af02      	add	r7, sp, #8
 800da4e:	60f8      	str	r0, [r7, #12]
 800da50:	60b9      	str	r1, [r7, #8]
 800da52:	607a      	str	r2, [r7, #4]
 800da54:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800da5c:	2b06      	cmp	r3, #6
 800da5e:	d006      	beq.n	800da6e <etharp_update_arp_entry+0x26>
 800da60:	4b48      	ldr	r3, [pc, #288]	; (800db84 <etharp_update_arp_entry+0x13c>)
 800da62:	f240 12a9 	movw	r2, #425	; 0x1a9
 800da66:	4948      	ldr	r1, [pc, #288]	; (800db88 <etharp_update_arp_entry+0x140>)
 800da68:	4848      	ldr	r0, [pc, #288]	; (800db8c <etharp_update_arp_entry+0x144>)
 800da6a:	f002 f8c5 	bl	800fbf8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d012      	beq.n	800da9a <etharp_update_arp_entry+0x52>
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00e      	beq.n	800da9a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	68f9      	ldr	r1, [r7, #12]
 800da82:	4618      	mov	r0, r3
 800da84:	f001 f8fe 	bl	800ec84 <ip4_addr_isbroadcast_u32>
 800da88:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d105      	bne.n	800da9a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800da96:	2be0      	cmp	r3, #224	; 0xe0
 800da98:	d102      	bne.n	800daa0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800da9a:	f06f 030f 	mvn.w	r3, #15
 800da9e:	e06c      	b.n	800db7a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800daa0:	78fb      	ldrb	r3, [r7, #3]
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	4619      	mov	r1, r3
 800daa6:	68b8      	ldr	r0, [r7, #8]
 800daa8:	f7ff fe56 	bl	800d758 <etharp_find_entry>
 800daac:	4603      	mov	r3, r0
 800daae:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800dab0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	da02      	bge.n	800dabe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800dab8:	8afb      	ldrh	r3, [r7, #22]
 800daba:	b25b      	sxtb	r3, r3
 800dabc:	e05d      	b.n	800db7a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800dabe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dac2:	4933      	ldr	r1, [pc, #204]	; (800db90 <etharp_update_arp_entry+0x148>)
 800dac4:	4613      	mov	r3, r2
 800dac6:	005b      	lsls	r3, r3, #1
 800dac8:	4413      	add	r3, r2
 800daca:	00db      	lsls	r3, r3, #3
 800dacc:	440b      	add	r3, r1
 800dace:	3314      	adds	r3, #20
 800dad0:	2202      	movs	r2, #2
 800dad2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800dad4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dad8:	492d      	ldr	r1, [pc, #180]	; (800db90 <etharp_update_arp_entry+0x148>)
 800dada:	4613      	mov	r3, r2
 800dadc:	005b      	lsls	r3, r3, #1
 800dade:	4413      	add	r3, r2
 800dae0:	00db      	lsls	r3, r3, #3
 800dae2:	440b      	add	r3, r1
 800dae4:	3308      	adds	r3, #8
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800daea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800daee:	4613      	mov	r3, r2
 800daf0:	005b      	lsls	r3, r3, #1
 800daf2:	4413      	add	r3, r2
 800daf4:	00db      	lsls	r3, r3, #3
 800daf6:	3308      	adds	r3, #8
 800daf8:	4a25      	ldr	r2, [pc, #148]	; (800db90 <etharp_update_arp_entry+0x148>)
 800dafa:	4413      	add	r3, r2
 800dafc:	3304      	adds	r3, #4
 800dafe:	2206      	movs	r2, #6
 800db00:	6879      	ldr	r1, [r7, #4]
 800db02:	4618      	mov	r0, r3
 800db04:	f002 f848 	bl	800fb98 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800db08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db0c:	4920      	ldr	r1, [pc, #128]	; (800db90 <etharp_update_arp_entry+0x148>)
 800db0e:	4613      	mov	r3, r2
 800db10:	005b      	lsls	r3, r3, #1
 800db12:	4413      	add	r3, r2
 800db14:	00db      	lsls	r3, r3, #3
 800db16:	440b      	add	r3, r1
 800db18:	3312      	adds	r3, #18
 800db1a:	2200      	movs	r2, #0
 800db1c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800db1e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db22:	491b      	ldr	r1, [pc, #108]	; (800db90 <etharp_update_arp_entry+0x148>)
 800db24:	4613      	mov	r3, r2
 800db26:	005b      	lsls	r3, r3, #1
 800db28:	4413      	add	r3, r2
 800db2a:	00db      	lsls	r3, r3, #3
 800db2c:	440b      	add	r3, r1
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d021      	beq.n	800db78 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800db34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db38:	4915      	ldr	r1, [pc, #84]	; (800db90 <etharp_update_arp_entry+0x148>)
 800db3a:	4613      	mov	r3, r2
 800db3c:	005b      	lsls	r3, r3, #1
 800db3e:	4413      	add	r3, r2
 800db40:	00db      	lsls	r3, r3, #3
 800db42:	440b      	add	r3, r1
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800db48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800db4c:	4910      	ldr	r1, [pc, #64]	; (800db90 <etharp_update_arp_entry+0x148>)
 800db4e:	4613      	mov	r3, r2
 800db50:	005b      	lsls	r3, r3, #1
 800db52:	4413      	add	r3, r2
 800db54:	00db      	lsls	r3, r3, #3
 800db56:	440b      	add	r3, r1
 800db58:	2200      	movs	r2, #0
 800db5a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800db62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db66:	9300      	str	r3, [sp, #0]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6939      	ldr	r1, [r7, #16]
 800db6c:	68f8      	ldr	r0, [r7, #12]
 800db6e:	f001 ff97 	bl	800faa0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800db72:	6938      	ldr	r0, [r7, #16]
 800db74:	f7f8 ff52 	bl	8006a1c <pbuf_free>
  }
  return ERR_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3718      	adds	r7, #24
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	0801345c 	.word	0x0801345c
 800db88:	08013554 	.word	0x08013554
 800db8c:	080134d4 	.word	0x080134d4
 800db90:	200083e8 	.word	0x200083e8

0800db94 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db9c:	2300      	movs	r3, #0
 800db9e:	60fb      	str	r3, [r7, #12]
 800dba0:	e01e      	b.n	800dbe0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800dba2:	4913      	ldr	r1, [pc, #76]	; (800dbf0 <etharp_cleanup_netif+0x5c>)
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	4613      	mov	r3, r2
 800dba8:	005b      	lsls	r3, r3, #1
 800dbaa:	4413      	add	r3, r2
 800dbac:	00db      	lsls	r3, r3, #3
 800dbae:	440b      	add	r3, r1
 800dbb0:	3314      	adds	r3, #20
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800dbb6:	7afb      	ldrb	r3, [r7, #11]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d00e      	beq.n	800dbda <etharp_cleanup_netif+0x46>
 800dbbc:	490c      	ldr	r1, [pc, #48]	; (800dbf0 <etharp_cleanup_netif+0x5c>)
 800dbbe:	68fa      	ldr	r2, [r7, #12]
 800dbc0:	4613      	mov	r3, r2
 800dbc2:	005b      	lsls	r3, r3, #1
 800dbc4:	4413      	add	r3, r2
 800dbc6:	00db      	lsls	r3, r3, #3
 800dbc8:	440b      	add	r3, r1
 800dbca:	3308      	adds	r3, #8
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d102      	bne.n	800dbda <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f7ff fce5 	bl	800d5a4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b09      	cmp	r3, #9
 800dbe4:	dddd      	ble.n	800dba2 <etharp_cleanup_netif+0xe>
    }
  }
}
 800dbe6:	bf00      	nop
 800dbe8:	bf00      	nop
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	200083e8 	.word	0x200083e8

0800dbf4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800dbf4:	b5b0      	push	{r4, r5, r7, lr}
 800dbf6:	b08a      	sub	sp, #40	; 0x28
 800dbf8:	af04      	add	r7, sp, #16
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d107      	bne.n	800dc14 <etharp_input+0x20>
 800dc04:	4b3d      	ldr	r3, [pc, #244]	; (800dcfc <etharp_input+0x108>)
 800dc06:	f240 228a 	movw	r2, #650	; 0x28a
 800dc0a:	493d      	ldr	r1, [pc, #244]	; (800dd00 <etharp_input+0x10c>)
 800dc0c:	483d      	ldr	r0, [pc, #244]	; (800dd04 <etharp_input+0x110>)
 800dc0e:	f001 fff3 	bl	800fbf8 <iprintf>
 800dc12:	e06f      	b.n	800dcf4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	881b      	ldrh	r3, [r3, #0]
 800dc1e:	b29b      	uxth	r3, r3
 800dc20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc24:	d10c      	bne.n	800dc40 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dc2a:	2b06      	cmp	r3, #6
 800dc2c:	d108      	bne.n	800dc40 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dc32:	2b04      	cmp	r3, #4
 800dc34:	d104      	bne.n	800dc40 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	885b      	ldrh	r3, [r3, #2]
 800dc3a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dc3c:	2b08      	cmp	r3, #8
 800dc3e:	d003      	beq.n	800dc48 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f7f8 feeb 	bl	8006a1c <pbuf_free>
    return;
 800dc46:	e055      	b.n	800dcf4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	330e      	adds	r3, #14
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	3318      	adds	r3, #24
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d102      	bne.n	800dc68 <etharp_input+0x74>
    for_us = 0;
 800dc62:	2300      	movs	r3, #0
 800dc64:	75fb      	strb	r3, [r7, #23]
 800dc66:	e009      	b.n	800dc7c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800dc68:	68ba      	ldr	r2, [r7, #8]
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	3304      	adds	r3, #4
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	bf0c      	ite	eq
 800dc74:	2301      	moveq	r3, #1
 800dc76:	2300      	movne	r3, #0
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	f103 0208 	add.w	r2, r3, #8
 800dc82:	7dfb      	ldrb	r3, [r7, #23]
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d001      	beq.n	800dc8c <etharp_input+0x98>
 800dc88:	2301      	movs	r3, #1
 800dc8a:	e000      	b.n	800dc8e <etharp_input+0x9a>
 800dc8c:	2302      	movs	r3, #2
 800dc8e:	f107 010c 	add.w	r1, r7, #12
 800dc92:	6838      	ldr	r0, [r7, #0]
 800dc94:	f7ff fed8 	bl	800da48 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	88db      	ldrh	r3, [r3, #6]
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dca2:	d003      	beq.n	800dcac <etharp_input+0xb8>
 800dca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dca8:	d01e      	beq.n	800dce8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800dcaa:	e020      	b.n	800dcee <etharp_input+0xfa>
      if (for_us) {
 800dcac:	7dfb      	ldrb	r3, [r7, #23]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d01c      	beq.n	800dcec <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800dcc8:	693a      	ldr	r2, [r7, #16]
 800dcca:	3208      	adds	r2, #8
        etharp_raw(netif,
 800dccc:	2102      	movs	r1, #2
 800dcce:	9103      	str	r1, [sp, #12]
 800dcd0:	f107 010c 	add.w	r1, r7, #12
 800dcd4:	9102      	str	r1, [sp, #8]
 800dcd6:	9201      	str	r2, [sp, #4]
 800dcd8:	9300      	str	r3, [sp, #0]
 800dcda:	462b      	mov	r3, r5
 800dcdc:	4622      	mov	r2, r4
 800dcde:	4601      	mov	r1, r0
 800dce0:	6838      	ldr	r0, [r7, #0]
 800dce2:	f000 faeb 	bl	800e2bc <etharp_raw>
      break;
 800dce6:	e001      	b.n	800dcec <etharp_input+0xf8>
      break;
 800dce8:	bf00      	nop
 800dcea:	e000      	b.n	800dcee <etharp_input+0xfa>
      break;
 800dcec:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7f8 fe94 	bl	8006a1c <pbuf_free>
}
 800dcf4:	3718      	adds	r7, #24
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bdb0      	pop	{r4, r5, r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	0801345c 	.word	0x0801345c
 800dd00:	080135ac 	.word	0x080135ac
 800dd04:	080134d4 	.word	0x080134d4

0800dd08 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af02      	add	r7, sp, #8
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	60b9      	str	r1, [r7, #8]
 800dd12:	4613      	mov	r3, r2
 800dd14:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dd16:	79fa      	ldrb	r2, [r7, #7]
 800dd18:	4944      	ldr	r1, [pc, #272]	; (800de2c <etharp_output_to_arp_index+0x124>)
 800dd1a:	4613      	mov	r3, r2
 800dd1c:	005b      	lsls	r3, r3, #1
 800dd1e:	4413      	add	r3, r2
 800dd20:	00db      	lsls	r3, r3, #3
 800dd22:	440b      	add	r3, r1
 800dd24:	3314      	adds	r3, #20
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d806      	bhi.n	800dd3a <etharp_output_to_arp_index+0x32>
 800dd2c:	4b40      	ldr	r3, [pc, #256]	; (800de30 <etharp_output_to_arp_index+0x128>)
 800dd2e:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dd32:	4940      	ldr	r1, [pc, #256]	; (800de34 <etharp_output_to_arp_index+0x12c>)
 800dd34:	4840      	ldr	r0, [pc, #256]	; (800de38 <etharp_output_to_arp_index+0x130>)
 800dd36:	f001 ff5f 	bl	800fbf8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dd3a:	79fa      	ldrb	r2, [r7, #7]
 800dd3c:	493b      	ldr	r1, [pc, #236]	; (800de2c <etharp_output_to_arp_index+0x124>)
 800dd3e:	4613      	mov	r3, r2
 800dd40:	005b      	lsls	r3, r3, #1
 800dd42:	4413      	add	r3, r2
 800dd44:	00db      	lsls	r3, r3, #3
 800dd46:	440b      	add	r3, r1
 800dd48:	3314      	adds	r3, #20
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	2b02      	cmp	r3, #2
 800dd4e:	d153      	bne.n	800ddf8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dd50:	79fa      	ldrb	r2, [r7, #7]
 800dd52:	4936      	ldr	r1, [pc, #216]	; (800de2c <etharp_output_to_arp_index+0x124>)
 800dd54:	4613      	mov	r3, r2
 800dd56:	005b      	lsls	r3, r3, #1
 800dd58:	4413      	add	r3, r2
 800dd5a:	00db      	lsls	r3, r3, #3
 800dd5c:	440b      	add	r3, r1
 800dd5e:	3312      	adds	r3, #18
 800dd60:	881b      	ldrh	r3, [r3, #0]
 800dd62:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800dd66:	d919      	bls.n	800dd9c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dd68:	79fa      	ldrb	r2, [r7, #7]
 800dd6a:	4613      	mov	r3, r2
 800dd6c:	005b      	lsls	r3, r3, #1
 800dd6e:	4413      	add	r3, r2
 800dd70:	00db      	lsls	r3, r3, #3
 800dd72:	4a2e      	ldr	r2, [pc, #184]	; (800de2c <etharp_output_to_arp_index+0x124>)
 800dd74:	4413      	add	r3, r2
 800dd76:	3304      	adds	r3, #4
 800dd78:	4619      	mov	r1, r3
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f000 fb4c 	bl	800e418 <etharp_request>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d138      	bne.n	800ddf8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dd86:	79fa      	ldrb	r2, [r7, #7]
 800dd88:	4928      	ldr	r1, [pc, #160]	; (800de2c <etharp_output_to_arp_index+0x124>)
 800dd8a:	4613      	mov	r3, r2
 800dd8c:	005b      	lsls	r3, r3, #1
 800dd8e:	4413      	add	r3, r2
 800dd90:	00db      	lsls	r3, r3, #3
 800dd92:	440b      	add	r3, r1
 800dd94:	3314      	adds	r3, #20
 800dd96:	2203      	movs	r2, #3
 800dd98:	701a      	strb	r2, [r3, #0]
 800dd9a:	e02d      	b.n	800ddf8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dd9c:	79fa      	ldrb	r2, [r7, #7]
 800dd9e:	4923      	ldr	r1, [pc, #140]	; (800de2c <etharp_output_to_arp_index+0x124>)
 800dda0:	4613      	mov	r3, r2
 800dda2:	005b      	lsls	r3, r3, #1
 800dda4:	4413      	add	r3, r2
 800dda6:	00db      	lsls	r3, r3, #3
 800dda8:	440b      	add	r3, r1
 800ddaa:	3312      	adds	r3, #18
 800ddac:	881b      	ldrh	r3, [r3, #0]
 800ddae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ddb2:	d321      	bcc.n	800ddf8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ddb4:	79fa      	ldrb	r2, [r7, #7]
 800ddb6:	4613      	mov	r3, r2
 800ddb8:	005b      	lsls	r3, r3, #1
 800ddba:	4413      	add	r3, r2
 800ddbc:	00db      	lsls	r3, r3, #3
 800ddbe:	4a1b      	ldr	r2, [pc, #108]	; (800de2c <etharp_output_to_arp_index+0x124>)
 800ddc0:	4413      	add	r3, r2
 800ddc2:	1d19      	adds	r1, r3, #4
 800ddc4:	79fa      	ldrb	r2, [r7, #7]
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	005b      	lsls	r3, r3, #1
 800ddca:	4413      	add	r3, r2
 800ddcc:	00db      	lsls	r3, r3, #3
 800ddce:	3308      	adds	r3, #8
 800ddd0:	4a16      	ldr	r2, [pc, #88]	; (800de2c <etharp_output_to_arp_index+0x124>)
 800ddd2:	4413      	add	r3, r2
 800ddd4:	3304      	adds	r3, #4
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f000 fafb 	bl	800e3d4 <etharp_request_dst>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d109      	bne.n	800ddf8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dde4:	79fa      	ldrb	r2, [r7, #7]
 800dde6:	4911      	ldr	r1, [pc, #68]	; (800de2c <etharp_output_to_arp_index+0x124>)
 800dde8:	4613      	mov	r3, r2
 800ddea:	005b      	lsls	r3, r3, #1
 800ddec:	4413      	add	r3, r2
 800ddee:	00db      	lsls	r3, r3, #3
 800ddf0:	440b      	add	r3, r1
 800ddf2:	3314      	adds	r3, #20
 800ddf4:	2203      	movs	r2, #3
 800ddf6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ddfe:	79fa      	ldrb	r2, [r7, #7]
 800de00:	4613      	mov	r3, r2
 800de02:	005b      	lsls	r3, r3, #1
 800de04:	4413      	add	r3, r2
 800de06:	00db      	lsls	r3, r3, #3
 800de08:	3308      	adds	r3, #8
 800de0a:	4a08      	ldr	r2, [pc, #32]	; (800de2c <etharp_output_to_arp_index+0x124>)
 800de0c:	4413      	add	r3, r2
 800de0e:	3304      	adds	r3, #4
 800de10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800de14:	9200      	str	r2, [sp, #0]
 800de16:	460a      	mov	r2, r1
 800de18:	68b9      	ldr	r1, [r7, #8]
 800de1a:	68f8      	ldr	r0, [r7, #12]
 800de1c:	f001 fe40 	bl	800faa0 <ethernet_output>
 800de20:	4603      	mov	r3, r0
}
 800de22:	4618      	mov	r0, r3
 800de24:	3710      	adds	r7, #16
 800de26:	46bd      	mov	sp, r7
 800de28:	bd80      	pop	{r7, pc}
 800de2a:	bf00      	nop
 800de2c:	200083e8 	.word	0x200083e8
 800de30:	0801345c 	.word	0x0801345c
 800de34:	080135cc 	.word	0x080135cc
 800de38:	080134d4 	.word	0x080134d4

0800de3c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b08a      	sub	sp, #40	; 0x28
 800de40:	af02      	add	r7, sp, #8
 800de42:	60f8      	str	r0, [r7, #12]
 800de44:	60b9      	str	r1, [r7, #8]
 800de46:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d106      	bne.n	800de60 <etharp_output+0x24>
 800de52:	4b73      	ldr	r3, [pc, #460]	; (800e020 <etharp_output+0x1e4>)
 800de54:	f240 321e 	movw	r2, #798	; 0x31e
 800de58:	4972      	ldr	r1, [pc, #456]	; (800e024 <etharp_output+0x1e8>)
 800de5a:	4873      	ldr	r0, [pc, #460]	; (800e028 <etharp_output+0x1ec>)
 800de5c:	f001 fecc 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d106      	bne.n	800de74 <etharp_output+0x38>
 800de66:	4b6e      	ldr	r3, [pc, #440]	; (800e020 <etharp_output+0x1e4>)
 800de68:	f240 321f 	movw	r2, #799	; 0x31f
 800de6c:	496f      	ldr	r1, [pc, #444]	; (800e02c <etharp_output+0x1f0>)
 800de6e:	486e      	ldr	r0, [pc, #440]	; (800e028 <etharp_output+0x1ec>)
 800de70:	f001 fec2 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d106      	bne.n	800de88 <etharp_output+0x4c>
 800de7a:	4b69      	ldr	r3, [pc, #420]	; (800e020 <etharp_output+0x1e4>)
 800de7c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800de80:	496b      	ldr	r1, [pc, #428]	; (800e030 <etharp_output+0x1f4>)
 800de82:	4869      	ldr	r0, [pc, #420]	; (800e028 <etharp_output+0x1ec>)
 800de84:	f001 feb8 	bl	800fbf8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	68f9      	ldr	r1, [r7, #12]
 800de8e:	4618      	mov	r0, r3
 800de90:	f000 fef8 	bl	800ec84 <ip4_addr_isbroadcast_u32>
 800de94:	4603      	mov	r3, r0
 800de96:	2b00      	cmp	r3, #0
 800de98:	d002      	beq.n	800dea0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800de9a:	4b66      	ldr	r3, [pc, #408]	; (800e034 <etharp_output+0x1f8>)
 800de9c:	61fb      	str	r3, [r7, #28]
 800de9e:	e0af      	b.n	800e000 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dea8:	2be0      	cmp	r3, #224	; 0xe0
 800deaa:	d118      	bne.n	800dede <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800deac:	2301      	movs	r3, #1
 800deae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800deb0:	2300      	movs	r3, #0
 800deb2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800deb4:	235e      	movs	r3, #94	; 0x5e
 800deb6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	3301      	adds	r3, #1
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	3302      	adds	r3, #2
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	3303      	adds	r3, #3
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ded6:	f107 0310 	add.w	r3, r7, #16
 800deda:	61fb      	str	r3, [r7, #28]
 800dedc:	e090      	b.n	800e000 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	3304      	adds	r3, #4
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	405a      	eors	r2, r3
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	3308      	adds	r3, #8
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	4013      	ands	r3, r2
 800def2:	2b00      	cmp	r3, #0
 800def4:	d012      	beq.n	800df1c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800defc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800df00:	4293      	cmp	r3, r2
 800df02:	d00b      	beq.n	800df1c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	330c      	adds	r3, #12
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d003      	beq.n	800df16 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	330c      	adds	r3, #12
 800df12:	61bb      	str	r3, [r7, #24]
 800df14:	e002      	b.n	800df1c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800df16:	f06f 0303 	mvn.w	r3, #3
 800df1a:	e07d      	b.n	800e018 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800df1c:	4b46      	ldr	r3, [pc, #280]	; (800e038 <etharp_output+0x1fc>)
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	4619      	mov	r1, r3
 800df22:	4a46      	ldr	r2, [pc, #280]	; (800e03c <etharp_output+0x200>)
 800df24:	460b      	mov	r3, r1
 800df26:	005b      	lsls	r3, r3, #1
 800df28:	440b      	add	r3, r1
 800df2a:	00db      	lsls	r3, r3, #3
 800df2c:	4413      	add	r3, r2
 800df2e:	3314      	adds	r3, #20
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	2b01      	cmp	r3, #1
 800df34:	d925      	bls.n	800df82 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800df36:	4b40      	ldr	r3, [pc, #256]	; (800e038 <etharp_output+0x1fc>)
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	4619      	mov	r1, r3
 800df3c:	4a3f      	ldr	r2, [pc, #252]	; (800e03c <etharp_output+0x200>)
 800df3e:	460b      	mov	r3, r1
 800df40:	005b      	lsls	r3, r3, #1
 800df42:	440b      	add	r3, r1
 800df44:	00db      	lsls	r3, r3, #3
 800df46:	4413      	add	r3, r2
 800df48:	3308      	adds	r3, #8
 800df4a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d117      	bne.n	800df82 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	4b38      	ldr	r3, [pc, #224]	; (800e038 <etharp_output+0x1fc>)
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	4618      	mov	r0, r3
 800df5c:	4937      	ldr	r1, [pc, #220]	; (800e03c <etharp_output+0x200>)
 800df5e:	4603      	mov	r3, r0
 800df60:	005b      	lsls	r3, r3, #1
 800df62:	4403      	add	r3, r0
 800df64:	00db      	lsls	r3, r3, #3
 800df66:	440b      	add	r3, r1
 800df68:	3304      	adds	r3, #4
 800df6a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d108      	bne.n	800df82 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800df70:	4b31      	ldr	r3, [pc, #196]	; (800e038 <etharp_output+0x1fc>)
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	461a      	mov	r2, r3
 800df76:	68b9      	ldr	r1, [r7, #8]
 800df78:	68f8      	ldr	r0, [r7, #12]
 800df7a:	f7ff fec5 	bl	800dd08 <etharp_output_to_arp_index>
 800df7e:	4603      	mov	r3, r0
 800df80:	e04a      	b.n	800e018 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800df82:	2300      	movs	r3, #0
 800df84:	75fb      	strb	r3, [r7, #23]
 800df86:	e031      	b.n	800dfec <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800df88:	7dfa      	ldrb	r2, [r7, #23]
 800df8a:	492c      	ldr	r1, [pc, #176]	; (800e03c <etharp_output+0x200>)
 800df8c:	4613      	mov	r3, r2
 800df8e:	005b      	lsls	r3, r3, #1
 800df90:	4413      	add	r3, r2
 800df92:	00db      	lsls	r3, r3, #3
 800df94:	440b      	add	r3, r1
 800df96:	3314      	adds	r3, #20
 800df98:	781b      	ldrb	r3, [r3, #0]
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d923      	bls.n	800dfe6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800df9e:	7dfa      	ldrb	r2, [r7, #23]
 800dfa0:	4926      	ldr	r1, [pc, #152]	; (800e03c <etharp_output+0x200>)
 800dfa2:	4613      	mov	r3, r2
 800dfa4:	005b      	lsls	r3, r3, #1
 800dfa6:	4413      	add	r3, r2
 800dfa8:	00db      	lsls	r3, r3, #3
 800dfaa:	440b      	add	r3, r1
 800dfac:	3308      	adds	r3, #8
 800dfae:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dfb0:	68fa      	ldr	r2, [r7, #12]
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	d117      	bne.n	800dfe6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	6819      	ldr	r1, [r3, #0]
 800dfba:	7dfa      	ldrb	r2, [r7, #23]
 800dfbc:	481f      	ldr	r0, [pc, #124]	; (800e03c <etharp_output+0x200>)
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	005b      	lsls	r3, r3, #1
 800dfc2:	4413      	add	r3, r2
 800dfc4:	00db      	lsls	r3, r3, #3
 800dfc6:	4403      	add	r3, r0
 800dfc8:	3304      	adds	r3, #4
 800dfca:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800dfcc:	4299      	cmp	r1, r3
 800dfce:	d10a      	bne.n	800dfe6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800dfd0:	4a19      	ldr	r2, [pc, #100]	; (800e038 <etharp_output+0x1fc>)
 800dfd2:	7dfb      	ldrb	r3, [r7, #23]
 800dfd4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800dfd6:	7dfb      	ldrb	r3, [r7, #23]
 800dfd8:	461a      	mov	r2, r3
 800dfda:	68b9      	ldr	r1, [r7, #8]
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f7ff fe93 	bl	800dd08 <etharp_output_to_arp_index>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	e018      	b.n	800e018 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800dfe6:	7dfb      	ldrb	r3, [r7, #23]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	75fb      	strb	r3, [r7, #23]
 800dfec:	7dfb      	ldrb	r3, [r7, #23]
 800dfee:	2b09      	cmp	r3, #9
 800dff0:	d9ca      	bls.n	800df88 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800dff2:	68ba      	ldr	r2, [r7, #8]
 800dff4:	69b9      	ldr	r1, [r7, #24]
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f000 f822 	bl	800e040 <etharp_query>
 800dffc:	4603      	mov	r3, r0
 800dffe:	e00b      	b.n	800e018 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800e006:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e00a:	9300      	str	r3, [sp, #0]
 800e00c:	69fb      	ldr	r3, [r7, #28]
 800e00e:	68b9      	ldr	r1, [r7, #8]
 800e010:	68f8      	ldr	r0, [r7, #12]
 800e012:	f001 fd45 	bl	800faa0 <ethernet_output>
 800e016:	4603      	mov	r3, r0
}
 800e018:	4618      	mov	r0, r3
 800e01a:	3720      	adds	r7, #32
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}
 800e020:	0801345c 	.word	0x0801345c
 800e024:	080135ac 	.word	0x080135ac
 800e028:	080134d4 	.word	0x080134d4
 800e02c:	080135fc 	.word	0x080135fc
 800e030:	0801359c 	.word	0x0801359c
 800e034:	08013c10 	.word	0x08013c10
 800e038:	200084d8 	.word	0x200084d8
 800e03c:	200083e8 	.word	0x200083e8

0800e040 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b08c      	sub	sp, #48	; 0x30
 800e044:	af02      	add	r7, sp, #8
 800e046:	60f8      	str	r0, [r7, #12]
 800e048:	60b9      	str	r1, [r7, #8]
 800e04a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	3326      	adds	r3, #38	; 0x26
 800e050:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e052:	23ff      	movs	r3, #255	; 0xff
 800e054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e058:	2300      	movs	r3, #0
 800e05a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e05c:	68bb      	ldr	r3, [r7, #8]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	68f9      	ldr	r1, [r7, #12]
 800e062:	4618      	mov	r0, r3
 800e064:	f000 fe0e 	bl	800ec84 <ip4_addr_isbroadcast_u32>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d10c      	bne.n	800e088 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e076:	2be0      	cmp	r3, #224	; 0xe0
 800e078:	d006      	beq.n	800e088 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d003      	beq.n	800e088 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d102      	bne.n	800e08e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e088:	f06f 030f 	mvn.w	r3, #15
 800e08c:	e101      	b.n	800e292 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e08e:	68fa      	ldr	r2, [r7, #12]
 800e090:	2101      	movs	r1, #1
 800e092:	68b8      	ldr	r0, [r7, #8]
 800e094:	f7ff fb60 	bl	800d758 <etharp_find_entry>
 800e098:	4603      	mov	r3, r0
 800e09a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e09c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	da02      	bge.n	800e0aa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e0a4:	8a7b      	ldrh	r3, [r7, #18]
 800e0a6:	b25b      	sxtb	r3, r3
 800e0a8:	e0f3      	b.n	800e292 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e0aa:	8a7b      	ldrh	r3, [r7, #18]
 800e0ac:	2b7e      	cmp	r3, #126	; 0x7e
 800e0ae:	d906      	bls.n	800e0be <etharp_query+0x7e>
 800e0b0:	4b7a      	ldr	r3, [pc, #488]	; (800e29c <etharp_query+0x25c>)
 800e0b2:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e0b6:	497a      	ldr	r1, [pc, #488]	; (800e2a0 <etharp_query+0x260>)
 800e0b8:	487a      	ldr	r0, [pc, #488]	; (800e2a4 <etharp_query+0x264>)
 800e0ba:	f001 fd9d 	bl	800fbf8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e0be:	8a7b      	ldrh	r3, [r7, #18]
 800e0c0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e0c2:	7c7a      	ldrb	r2, [r7, #17]
 800e0c4:	4978      	ldr	r1, [pc, #480]	; (800e2a8 <etharp_query+0x268>)
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	005b      	lsls	r3, r3, #1
 800e0ca:	4413      	add	r3, r2
 800e0cc:	00db      	lsls	r3, r3, #3
 800e0ce:	440b      	add	r3, r1
 800e0d0:	3314      	adds	r3, #20
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d115      	bne.n	800e104 <etharp_query+0xc4>
    is_new_entry = 1;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e0dc:	7c7a      	ldrb	r2, [r7, #17]
 800e0de:	4972      	ldr	r1, [pc, #456]	; (800e2a8 <etharp_query+0x268>)
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	005b      	lsls	r3, r3, #1
 800e0e4:	4413      	add	r3, r2
 800e0e6:	00db      	lsls	r3, r3, #3
 800e0e8:	440b      	add	r3, r1
 800e0ea:	3314      	adds	r3, #20
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e0f0:	7c7a      	ldrb	r2, [r7, #17]
 800e0f2:	496d      	ldr	r1, [pc, #436]	; (800e2a8 <etharp_query+0x268>)
 800e0f4:	4613      	mov	r3, r2
 800e0f6:	005b      	lsls	r3, r3, #1
 800e0f8:	4413      	add	r3, r2
 800e0fa:	00db      	lsls	r3, r3, #3
 800e0fc:	440b      	add	r3, r1
 800e0fe:	3308      	adds	r3, #8
 800e100:	68fa      	ldr	r2, [r7, #12]
 800e102:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e104:	7c7a      	ldrb	r2, [r7, #17]
 800e106:	4968      	ldr	r1, [pc, #416]	; (800e2a8 <etharp_query+0x268>)
 800e108:	4613      	mov	r3, r2
 800e10a:	005b      	lsls	r3, r3, #1
 800e10c:	4413      	add	r3, r2
 800e10e:	00db      	lsls	r3, r3, #3
 800e110:	440b      	add	r3, r1
 800e112:	3314      	adds	r3, #20
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	2b01      	cmp	r3, #1
 800e118:	d011      	beq.n	800e13e <etharp_query+0xfe>
 800e11a:	7c7a      	ldrb	r2, [r7, #17]
 800e11c:	4962      	ldr	r1, [pc, #392]	; (800e2a8 <etharp_query+0x268>)
 800e11e:	4613      	mov	r3, r2
 800e120:	005b      	lsls	r3, r3, #1
 800e122:	4413      	add	r3, r2
 800e124:	00db      	lsls	r3, r3, #3
 800e126:	440b      	add	r3, r1
 800e128:	3314      	adds	r3, #20
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d806      	bhi.n	800e13e <etharp_query+0xfe>
 800e130:	4b5a      	ldr	r3, [pc, #360]	; (800e29c <etharp_query+0x25c>)
 800e132:	f240 32cd 	movw	r2, #973	; 0x3cd
 800e136:	495d      	ldr	r1, [pc, #372]	; (800e2ac <etharp_query+0x26c>)
 800e138:	485a      	ldr	r0, [pc, #360]	; (800e2a4 <etharp_query+0x264>)
 800e13a:	f001 fd5d 	bl	800fbf8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e13e:	6a3b      	ldr	r3, [r7, #32]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d102      	bne.n	800e14a <etharp_query+0x10a>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d10c      	bne.n	800e164 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e14a:	68b9      	ldr	r1, [r7, #8]
 800e14c:	68f8      	ldr	r0, [r7, #12]
 800e14e:	f000 f963 	bl	800e418 <etharp_request>
 800e152:	4603      	mov	r3, r0
 800e154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d102      	bne.n	800e164 <etharp_query+0x124>
      return result;
 800e15e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e162:	e096      	b.n	800e292 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d106      	bne.n	800e178 <etharp_query+0x138>
 800e16a:	4b4c      	ldr	r3, [pc, #304]	; (800e29c <etharp_query+0x25c>)
 800e16c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e170:	494f      	ldr	r1, [pc, #316]	; (800e2b0 <etharp_query+0x270>)
 800e172:	484c      	ldr	r0, [pc, #304]	; (800e2a4 <etharp_query+0x264>)
 800e174:	f001 fd40 	bl	800fbf8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e178:	7c7a      	ldrb	r2, [r7, #17]
 800e17a:	494b      	ldr	r1, [pc, #300]	; (800e2a8 <etharp_query+0x268>)
 800e17c:	4613      	mov	r3, r2
 800e17e:	005b      	lsls	r3, r3, #1
 800e180:	4413      	add	r3, r2
 800e182:	00db      	lsls	r3, r3, #3
 800e184:	440b      	add	r3, r1
 800e186:	3314      	adds	r3, #20
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	2b01      	cmp	r3, #1
 800e18c:	d917      	bls.n	800e1be <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e18e:	4a49      	ldr	r2, [pc, #292]	; (800e2b4 <etharp_query+0x274>)
 800e190:	7c7b      	ldrb	r3, [r7, #17]
 800e192:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e194:	7c7a      	ldrb	r2, [r7, #17]
 800e196:	4613      	mov	r3, r2
 800e198:	005b      	lsls	r3, r3, #1
 800e19a:	4413      	add	r3, r2
 800e19c:	00db      	lsls	r3, r3, #3
 800e19e:	3308      	adds	r3, #8
 800e1a0:	4a41      	ldr	r2, [pc, #260]	; (800e2a8 <etharp_query+0x268>)
 800e1a2:	4413      	add	r3, r2
 800e1a4:	3304      	adds	r3, #4
 800e1a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1aa:	9200      	str	r2, [sp, #0]
 800e1ac:	697a      	ldr	r2, [r7, #20]
 800e1ae:	6879      	ldr	r1, [r7, #4]
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f001 fc75 	bl	800faa0 <ethernet_output>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1bc:	e067      	b.n	800e28e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e1be:	7c7a      	ldrb	r2, [r7, #17]
 800e1c0:	4939      	ldr	r1, [pc, #228]	; (800e2a8 <etharp_query+0x268>)
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	005b      	lsls	r3, r3, #1
 800e1c6:	4413      	add	r3, r2
 800e1c8:	00db      	lsls	r3, r3, #3
 800e1ca:	440b      	add	r3, r1
 800e1cc:	3314      	adds	r3, #20
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d15c      	bne.n	800e28e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e1dc:	e01c      	b.n	800e218 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	895a      	ldrh	r2, [r3, #10]
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	891b      	ldrh	r3, [r3, #8]
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d10a      	bne.n	800e200 <etharp_query+0x1c0>
 800e1ea:	69fb      	ldr	r3, [r7, #28]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d006      	beq.n	800e200 <etharp_query+0x1c0>
 800e1f2:	4b2a      	ldr	r3, [pc, #168]	; (800e29c <etharp_query+0x25c>)
 800e1f4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e1f8:	492f      	ldr	r1, [pc, #188]	; (800e2b8 <etharp_query+0x278>)
 800e1fa:	482a      	ldr	r0, [pc, #168]	; (800e2a4 <etharp_query+0x264>)
 800e1fc:	f001 fcfc 	bl	800fbf8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	7b1b      	ldrb	r3, [r3, #12]
 800e204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d002      	beq.n	800e212 <etharp_query+0x1d2>
        copy_needed = 1;
 800e20c:	2301      	movs	r3, #1
 800e20e:	61bb      	str	r3, [r7, #24]
        break;
 800e210:	e005      	b.n	800e21e <etharp_query+0x1de>
      }
      p = p->next;
 800e212:	69fb      	ldr	r3, [r7, #28]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e218:	69fb      	ldr	r3, [r7, #28]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d1df      	bne.n	800e1de <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e21e:	69bb      	ldr	r3, [r7, #24]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d007      	beq.n	800e234 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e224:	687a      	ldr	r2, [r7, #4]
 800e226:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e22a:	200e      	movs	r0, #14
 800e22c:	f7f8 fee4 	bl	8006ff8 <pbuf_clone>
 800e230:	61f8      	str	r0, [r7, #28]
 800e232:	e004      	b.n	800e23e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e238:	69f8      	ldr	r0, [r7, #28]
 800e23a:	f7f8 fc8f 	bl	8006b5c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e23e:	69fb      	ldr	r3, [r7, #28]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d021      	beq.n	800e288 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e244:	7c7a      	ldrb	r2, [r7, #17]
 800e246:	4918      	ldr	r1, [pc, #96]	; (800e2a8 <etharp_query+0x268>)
 800e248:	4613      	mov	r3, r2
 800e24a:	005b      	lsls	r3, r3, #1
 800e24c:	4413      	add	r3, r2
 800e24e:	00db      	lsls	r3, r3, #3
 800e250:	440b      	add	r3, r1
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00a      	beq.n	800e26e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e258:	7c7a      	ldrb	r2, [r7, #17]
 800e25a:	4913      	ldr	r1, [pc, #76]	; (800e2a8 <etharp_query+0x268>)
 800e25c:	4613      	mov	r3, r2
 800e25e:	005b      	lsls	r3, r3, #1
 800e260:	4413      	add	r3, r2
 800e262:	00db      	lsls	r3, r3, #3
 800e264:	440b      	add	r3, r1
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	4618      	mov	r0, r3
 800e26a:	f7f8 fbd7 	bl	8006a1c <pbuf_free>
      }
      arp_table[i].q = p;
 800e26e:	7c7a      	ldrb	r2, [r7, #17]
 800e270:	490d      	ldr	r1, [pc, #52]	; (800e2a8 <etharp_query+0x268>)
 800e272:	4613      	mov	r3, r2
 800e274:	005b      	lsls	r3, r3, #1
 800e276:	4413      	add	r3, r2
 800e278:	00db      	lsls	r3, r3, #3
 800e27a:	440b      	add	r3, r1
 800e27c:	69fa      	ldr	r2, [r7, #28]
 800e27e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e280:	2300      	movs	r3, #0
 800e282:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e286:	e002      	b.n	800e28e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e288:	23ff      	movs	r3, #255	; 0xff
 800e28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e28e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e292:	4618      	mov	r0, r3
 800e294:	3728      	adds	r7, #40	; 0x28
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	bf00      	nop
 800e29c:	0801345c 	.word	0x0801345c
 800e2a0:	08013608 	.word	0x08013608
 800e2a4:	080134d4 	.word	0x080134d4
 800e2a8:	200083e8 	.word	0x200083e8
 800e2ac:	08013618 	.word	0x08013618
 800e2b0:	080135fc 	.word	0x080135fc
 800e2b4:	200084d8 	.word	0x200084d8
 800e2b8:	08013640 	.word	0x08013640

0800e2bc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b08a      	sub	sp, #40	; 0x28
 800e2c0:	af02      	add	r7, sp, #8
 800e2c2:	60f8      	str	r0, [r7, #12]
 800e2c4:	60b9      	str	r1, [r7, #8]
 800e2c6:	607a      	str	r2, [r7, #4]
 800e2c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d106      	bne.n	800e2e2 <etharp_raw+0x26>
 800e2d4:	4b3a      	ldr	r3, [pc, #232]	; (800e3c0 <etharp_raw+0x104>)
 800e2d6:	f240 4257 	movw	r2, #1111	; 0x457
 800e2da:	493a      	ldr	r1, [pc, #232]	; (800e3c4 <etharp_raw+0x108>)
 800e2dc:	483a      	ldr	r0, [pc, #232]	; (800e3c8 <etharp_raw+0x10c>)
 800e2de:	f001 fc8b 	bl	800fbf8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e2e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e2e6:	211c      	movs	r1, #28
 800e2e8:	200e      	movs	r0, #14
 800e2ea:	f7f8 f8b3 	bl	8006454 <pbuf_alloc>
 800e2ee:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d102      	bne.n	800e2fc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e2f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e2fa:	e05d      	b.n	800e3b8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	895b      	ldrh	r3, [r3, #10]
 800e300:	2b1b      	cmp	r3, #27
 800e302:	d806      	bhi.n	800e312 <etharp_raw+0x56>
 800e304:	4b2e      	ldr	r3, [pc, #184]	; (800e3c0 <etharp_raw+0x104>)
 800e306:	f240 4262 	movw	r2, #1122	; 0x462
 800e30a:	4930      	ldr	r1, [pc, #192]	; (800e3cc <etharp_raw+0x110>)
 800e30c:	482e      	ldr	r0, [pc, #184]	; (800e3c8 <etharp_raw+0x10c>)
 800e30e:	f001 fc73 	bl	800fbf8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e312:	69bb      	ldr	r3, [r7, #24]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e318:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e31a:	4618      	mov	r0, r3
 800e31c:	f7f7 f820 	bl	8005360 <lwip_htons>
 800e320:	4603      	mov	r3, r0
 800e322:	461a      	mov	r2, r3
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e32e:	2b06      	cmp	r3, #6
 800e330:	d006      	beq.n	800e340 <etharp_raw+0x84>
 800e332:	4b23      	ldr	r3, [pc, #140]	; (800e3c0 <etharp_raw+0x104>)
 800e334:	f240 4269 	movw	r2, #1129	; 0x469
 800e338:	4925      	ldr	r1, [pc, #148]	; (800e3d0 <etharp_raw+0x114>)
 800e33a:	4823      	ldr	r0, [pc, #140]	; (800e3c8 <etharp_raw+0x10c>)
 800e33c:	f001 fc5c 	bl	800fbf8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	3308      	adds	r3, #8
 800e344:	2206      	movs	r2, #6
 800e346:	6839      	ldr	r1, [r7, #0]
 800e348:	4618      	mov	r0, r3
 800e34a:	f001 fc25 	bl	800fb98 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	3312      	adds	r3, #18
 800e352:	2206      	movs	r2, #6
 800e354:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e356:	4618      	mov	r0, r3
 800e358:	f001 fc1e 	bl	800fb98 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	330e      	adds	r3, #14
 800e360:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e362:	6812      	ldr	r2, [r2, #0]
 800e364:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	3318      	adds	r3, #24
 800e36a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e36c:	6812      	ldr	r2, [r2, #0]
 800e36e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	2200      	movs	r2, #0
 800e374:	701a      	strb	r2, [r3, #0]
 800e376:	2200      	movs	r2, #0
 800e378:	f042 0201 	orr.w	r2, r2, #1
 800e37c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	2200      	movs	r2, #0
 800e382:	f042 0208 	orr.w	r2, r2, #8
 800e386:	709a      	strb	r2, [r3, #2]
 800e388:	2200      	movs	r2, #0
 800e38a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	2206      	movs	r2, #6
 800e390:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	2204      	movs	r2, #4
 800e396:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e398:	f640 0306 	movw	r3, #2054	; 0x806
 800e39c:	9300      	str	r3, [sp, #0]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	68ba      	ldr	r2, [r7, #8]
 800e3a2:	69b9      	ldr	r1, [r7, #24]
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f001 fb7b 	bl	800faa0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e3aa:	69b8      	ldr	r0, [r7, #24]
 800e3ac:	f7f8 fb36 	bl	8006a1c <pbuf_free>
  p = NULL;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e3b4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	3720      	adds	r7, #32
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	0801345c 	.word	0x0801345c
 800e3c4:	080135ac 	.word	0x080135ac
 800e3c8:	080134d4 	.word	0x080134d4
 800e3cc:	0801365c 	.word	0x0801365c
 800e3d0:	08013690 	.word	0x08013690

0800e3d4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b088      	sub	sp, #32
 800e3d8:	af04      	add	r7, sp, #16
 800e3da:	60f8      	str	r0, [r7, #12]
 800e3dc:	60b9      	str	r1, [r7, #8]
 800e3de:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e3f0:	2201      	movs	r2, #1
 800e3f2:	9203      	str	r2, [sp, #12]
 800e3f4:	68ba      	ldr	r2, [r7, #8]
 800e3f6:	9202      	str	r2, [sp, #8]
 800e3f8:	4a06      	ldr	r2, [pc, #24]	; (800e414 <etharp_request_dst+0x40>)
 800e3fa:	9201      	str	r2, [sp, #4]
 800e3fc:	9300      	str	r3, [sp, #0]
 800e3fe:	4603      	mov	r3, r0
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	68f8      	ldr	r0, [r7, #12]
 800e404:	f7ff ff5a 	bl	800e2bc <etharp_raw>
 800e408:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	08013c18 	.word	0x08013c18

0800e418 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b082      	sub	sp, #8
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e422:	4a05      	ldr	r2, [pc, #20]	; (800e438 <etharp_request+0x20>)
 800e424:	6839      	ldr	r1, [r7, #0]
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7ff ffd4 	bl	800e3d4 <etharp_request_dst>
 800e42c:	4603      	mov	r3, r0
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3708      	adds	r7, #8
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	08013c10 	.word	0x08013c10

0800e43c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b08e      	sub	sp, #56	; 0x38
 800e440:	af04      	add	r7, sp, #16
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e446:	4b79      	ldr	r3, [pc, #484]	; (800e62c <icmp_input+0x1f0>)
 800e448:	689b      	ldr	r3, [r3, #8]
 800e44a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44e:	781b      	ldrb	r3, [r3, #0]
 800e450:	f003 030f 	and.w	r3, r3, #15
 800e454:	b2db      	uxtb	r3, r3
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	b2db      	uxtb	r3, r3
 800e45a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e45c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e45e:	2b13      	cmp	r3, #19
 800e460:	f240 80cd 	bls.w	800e5fe <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	895b      	ldrh	r3, [r3, #10]
 800e468:	2b03      	cmp	r3, #3
 800e46a:	f240 80ca 	bls.w	800e602 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	685b      	ldr	r3, [r3, #4]
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e478:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f000 80b7 	beq.w	800e5f0 <icmp_input+0x1b4>
 800e482:	2b08      	cmp	r3, #8
 800e484:	f040 80b7 	bne.w	800e5f6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e488:	4b69      	ldr	r3, [pc, #420]	; (800e630 <icmp_input+0x1f4>)
 800e48a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e48c:	4b67      	ldr	r3, [pc, #412]	; (800e62c <icmp_input+0x1f0>)
 800e48e:	695b      	ldr	r3, [r3, #20]
 800e490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e494:	2be0      	cmp	r3, #224	; 0xe0
 800e496:	f000 80bb 	beq.w	800e610 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e49a:	4b64      	ldr	r3, [pc, #400]	; (800e62c <icmp_input+0x1f0>)
 800e49c:	695b      	ldr	r3, [r3, #20]
 800e49e:	4a63      	ldr	r2, [pc, #396]	; (800e62c <icmp_input+0x1f0>)
 800e4a0:	6812      	ldr	r2, [r2, #0]
 800e4a2:	4611      	mov	r1, r2
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f000 fbed 	bl	800ec84 <ip4_addr_isbroadcast_u32>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f040 80b1 	bne.w	800e614 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	891b      	ldrh	r3, [r3, #8]
 800e4b6:	2b07      	cmp	r3, #7
 800e4b8:	f240 80a5 	bls.w	800e606 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e4bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4be:	330e      	adds	r3, #14
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f7f8 fa14 	bl	80068f0 <pbuf_add_header>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d04b      	beq.n	800e566 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	891a      	ldrh	r2, [r3, #8]
 800e4d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4d4:	4413      	add	r3, r2
 800e4d6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	891b      	ldrh	r3, [r3, #8]
 800e4dc:	8b7a      	ldrh	r2, [r7, #26]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	f0c0 809a 	bcc.w	800e618 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e4e4:	8b7b      	ldrh	r3, [r7, #26]
 800e4e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	200e      	movs	r0, #14
 800e4ee:	f7f7 ffb1 	bl	8006454 <pbuf_alloc>
 800e4f2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	f000 8090 	beq.w	800e61c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	895b      	ldrh	r3, [r3, #10]
 800e500:	461a      	mov	r2, r3
 800e502:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e504:	3308      	adds	r3, #8
 800e506:	429a      	cmp	r2, r3
 800e508:	d203      	bcs.n	800e512 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e50a:	6978      	ldr	r0, [r7, #20]
 800e50c:	f7f8 fa86 	bl	8006a1c <pbuf_free>
          goto icmperr;
 800e510:	e085      	b.n	800e61e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e518:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e51a:	4618      	mov	r0, r3
 800e51c:	f001 fb3c 	bl	800fb98 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e520:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e522:	4619      	mov	r1, r3
 800e524:	6978      	ldr	r0, [r7, #20]
 800e526:	f7f8 f9f3 	bl	8006910 <pbuf_remove_header>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d009      	beq.n	800e544 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e530:	4b40      	ldr	r3, [pc, #256]	; (800e634 <icmp_input+0x1f8>)
 800e532:	22b6      	movs	r2, #182	; 0xb6
 800e534:	4940      	ldr	r1, [pc, #256]	; (800e638 <icmp_input+0x1fc>)
 800e536:	4841      	ldr	r0, [pc, #260]	; (800e63c <icmp_input+0x200>)
 800e538:	f001 fb5e 	bl	800fbf8 <iprintf>
          pbuf_free(r);
 800e53c:	6978      	ldr	r0, [r7, #20]
 800e53e:	f7f8 fa6d 	bl	8006a1c <pbuf_free>
          goto icmperr;
 800e542:	e06c      	b.n	800e61e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e544:	6879      	ldr	r1, [r7, #4]
 800e546:	6978      	ldr	r0, [r7, #20]
 800e548:	f7f8 fb80 	bl	8006c4c <pbuf_copy>
 800e54c:	4603      	mov	r3, r0
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d003      	beq.n	800e55a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e552:	6978      	ldr	r0, [r7, #20]
 800e554:	f7f8 fa62 	bl	8006a1c <pbuf_free>
          goto icmperr;
 800e558:	e061      	b.n	800e61e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f7f8 fa5e 	bl	8006a1c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	607b      	str	r3, [r7, #4]
 800e564:	e00f      	b.n	800e586 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e568:	330e      	adds	r3, #14
 800e56a:	4619      	mov	r1, r3
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f7f8 f9cf 	bl	8006910 <pbuf_remove_header>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d006      	beq.n	800e586 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e578:	4b2e      	ldr	r3, [pc, #184]	; (800e634 <icmp_input+0x1f8>)
 800e57a:	22c7      	movs	r2, #199	; 0xc7
 800e57c:	4930      	ldr	r1, [pc, #192]	; (800e640 <icmp_input+0x204>)
 800e57e:	482f      	ldr	r0, [pc, #188]	; (800e63c <icmp_input+0x200>)
 800e580:	f001 fb3a 	bl	800fbf8 <iprintf>
          goto icmperr;
 800e584:	e04b      	b.n	800e61e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e58c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e58e:	4619      	mov	r1, r3
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f7f8 f9ad 	bl	80068f0 <pbuf_add_header>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d12b      	bne.n	800e5f4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	685b      	ldr	r3, [r3, #4]
 800e5a0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e5aa:	4b20      	ldr	r3, [pc, #128]	; (800e62c <icmp_input+0x1f0>)
 800e5ac:	691a      	ldr	r2, [r3, #16]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	709a      	strb	r2, [r3, #2]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	22ff      	movs	r2, #255	; 0xff
 800e5c6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	2200      	movs	r2, #0
 800e5cc:	729a      	strb	r2, [r3, #10]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	9302      	str	r3, [sp, #8]
 800e5d6:	2301      	movs	r3, #1
 800e5d8:	9301      	str	r3, [sp, #4]
 800e5da:	2300      	movs	r3, #0
 800e5dc:	9300      	str	r3, [sp, #0]
 800e5de:	23ff      	movs	r3, #255	; 0xff
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	69f9      	ldr	r1, [r7, #28]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 fa75 	bl	800ead4 <ip4_output_if>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e5ee:	e001      	b.n	800e5f4 <icmp_input+0x1b8>
      break;
 800e5f0:	bf00      	nop
 800e5f2:	e000      	b.n	800e5f6 <icmp_input+0x1ba>
      break;
 800e5f4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7f8 fa10 	bl	8006a1c <pbuf_free>
  return;
 800e5fc:	e013      	b.n	800e626 <icmp_input+0x1ea>
    goto lenerr;
 800e5fe:	bf00      	nop
 800e600:	e002      	b.n	800e608 <icmp_input+0x1cc>
    goto lenerr;
 800e602:	bf00      	nop
 800e604:	e000      	b.n	800e608 <icmp_input+0x1cc>
        goto lenerr;
 800e606:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f7f8 fa07 	bl	8006a1c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e60e:	e00a      	b.n	800e626 <icmp_input+0x1ea>
        goto icmperr;
 800e610:	bf00      	nop
 800e612:	e004      	b.n	800e61e <icmp_input+0x1e2>
        goto icmperr;
 800e614:	bf00      	nop
 800e616:	e002      	b.n	800e61e <icmp_input+0x1e2>
          goto icmperr;
 800e618:	bf00      	nop
 800e61a:	e000      	b.n	800e61e <icmp_input+0x1e2>
          goto icmperr;
 800e61c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f7f8 f9fc 	bl	8006a1c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e624:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e626:	3728      	adds	r7, #40	; 0x28
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}
 800e62c:	20004e18 	.word	0x20004e18
 800e630:	20004e2c 	.word	0x20004e2c
 800e634:	080136d4 	.word	0x080136d4
 800e638:	0801370c 	.word	0x0801370c
 800e63c:	08013744 	.word	0x08013744
 800e640:	0801376c 	.word	0x0801376c

0800e644 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	460b      	mov	r3, r1
 800e64e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e650:	78fb      	ldrb	r3, [r7, #3]
 800e652:	461a      	mov	r2, r3
 800e654:	2103      	movs	r1, #3
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 f814 	bl	800e684 <icmp_send_response>
}
 800e65c:	bf00      	nop
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	460b      	mov	r3, r1
 800e66e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e670:	78fb      	ldrb	r3, [r7, #3]
 800e672:	461a      	mov	r2, r3
 800e674:	210b      	movs	r1, #11
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f000 f804 	bl	800e684 <icmp_send_response>
}
 800e67c:	bf00      	nop
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b08c      	sub	sp, #48	; 0x30
 800e688:	af04      	add	r7, sp, #16
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	460b      	mov	r3, r1
 800e68e:	70fb      	strb	r3, [r7, #3]
 800e690:	4613      	mov	r3, r2
 800e692:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e694:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e698:	2124      	movs	r1, #36	; 0x24
 800e69a:	2022      	movs	r0, #34	; 0x22
 800e69c:	f7f7 feda 	bl	8006454 <pbuf_alloc>
 800e6a0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e6a2:	69fb      	ldr	r3, [r7, #28]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d04c      	beq.n	800e742 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e6a8:	69fb      	ldr	r3, [r7, #28]
 800e6aa:	895b      	ldrh	r3, [r3, #10]
 800e6ac:	2b23      	cmp	r3, #35	; 0x23
 800e6ae:	d806      	bhi.n	800e6be <icmp_send_response+0x3a>
 800e6b0:	4b26      	ldr	r3, [pc, #152]	; (800e74c <icmp_send_response+0xc8>)
 800e6b2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e6b6:	4926      	ldr	r1, [pc, #152]	; (800e750 <icmp_send_response+0xcc>)
 800e6b8:	4826      	ldr	r0, [pc, #152]	; (800e754 <icmp_send_response+0xd0>)
 800e6ba:	f001 fa9d 	bl	800fbf8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e6c4:	69fb      	ldr	r3, [r7, #28]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	78fa      	ldrb	r2, [r7, #3]
 800e6ce:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	78ba      	ldrb	r2, [r7, #2]
 800e6d4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	711a      	strb	r2, [r3, #4]
 800e6dc:	2200      	movs	r2, #0
 800e6de:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	719a      	strb	r2, [r3, #6]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	685b      	ldr	r3, [r3, #4]
 800e6ee:	f103 0008 	add.w	r0, r3, #8
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	685b      	ldr	r3, [r3, #4]
 800e6f6:	221c      	movs	r2, #28
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	f001 fa4d 	bl	800fb98 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	68db      	ldr	r3, [r3, #12]
 800e702:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e704:	f107 030c 	add.w	r3, r7, #12
 800e708:	4618      	mov	r0, r3
 800e70a:	f000 f825 	bl	800e758 <ip4_route>
 800e70e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d011      	beq.n	800e73a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e716:	697b      	ldr	r3, [r7, #20]
 800e718:	2200      	movs	r2, #0
 800e71a:	709a      	strb	r2, [r3, #2]
 800e71c:	2200      	movs	r2, #0
 800e71e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e720:	f107 020c 	add.w	r2, r7, #12
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	9302      	str	r3, [sp, #8]
 800e728:	2301      	movs	r3, #1
 800e72a:	9301      	str	r3, [sp, #4]
 800e72c:	2300      	movs	r3, #0
 800e72e:	9300      	str	r3, [sp, #0]
 800e730:	23ff      	movs	r3, #255	; 0xff
 800e732:	2100      	movs	r1, #0
 800e734:	69f8      	ldr	r0, [r7, #28]
 800e736:	f000 f9cd 	bl	800ead4 <ip4_output_if>
  }
  pbuf_free(q);
 800e73a:	69f8      	ldr	r0, [r7, #28]
 800e73c:	f7f8 f96e 	bl	8006a1c <pbuf_free>
 800e740:	e000      	b.n	800e744 <icmp_send_response+0xc0>
    return;
 800e742:	bf00      	nop
}
 800e744:	3720      	adds	r7, #32
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	080136d4 	.word	0x080136d4
 800e750:	080137a0 	.word	0x080137a0
 800e754:	08013744 	.word	0x08013744

0800e758 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e758:	b480      	push	{r7}
 800e75a:	b085      	sub	sp, #20
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e760:	4b33      	ldr	r3, [pc, #204]	; (800e830 <ip4_route+0xd8>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	60fb      	str	r3, [r7, #12]
 800e766:	e036      	b.n	800e7d6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e76e:	f003 0301 	and.w	r3, r3, #1
 800e772:	b2db      	uxtb	r3, r3
 800e774:	2b00      	cmp	r3, #0
 800e776:	d02b      	beq.n	800e7d0 <ip4_route+0x78>
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e77e:	089b      	lsrs	r3, r3, #2
 800e780:	f003 0301 	and.w	r3, r3, #1
 800e784:	b2db      	uxtb	r3, r3
 800e786:	2b00      	cmp	r3, #0
 800e788:	d022      	beq.n	800e7d0 <ip4_route+0x78>
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	3304      	adds	r3, #4
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d01d      	beq.n	800e7d0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	3304      	adds	r3, #4
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	405a      	eors	r2, r3
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	3308      	adds	r3, #8
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	4013      	ands	r3, r2
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d101      	bne.n	800e7b0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	e038      	b.n	800e822 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7b6:	f003 0302 	and.w	r3, r3, #2
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d108      	bne.n	800e7d0 <ip4_route+0x78>
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	330c      	adds	r3, #12
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d101      	bne.n	800e7d0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	e028      	b.n	800e822 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	60fb      	str	r3, [r7, #12]
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d1c5      	bne.n	800e768 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e7dc:	4b15      	ldr	r3, [pc, #84]	; (800e834 <ip4_route+0xdc>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d01a      	beq.n	800e81a <ip4_route+0xc2>
 800e7e4:	4b13      	ldr	r3, [pc, #76]	; (800e834 <ip4_route+0xdc>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7ec:	f003 0301 	and.w	r3, r3, #1
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d012      	beq.n	800e81a <ip4_route+0xc2>
 800e7f4:	4b0f      	ldr	r3, [pc, #60]	; (800e834 <ip4_route+0xdc>)
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7fc:	f003 0304 	and.w	r3, r3, #4
 800e800:	2b00      	cmp	r3, #0
 800e802:	d00a      	beq.n	800e81a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e804:	4b0b      	ldr	r3, [pc, #44]	; (800e834 <ip4_route+0xdc>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	3304      	adds	r3, #4
 800e80a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d004      	beq.n	800e81a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	b2db      	uxtb	r3, r3
 800e816:	2b7f      	cmp	r3, #127	; 0x7f
 800e818:	d101      	bne.n	800e81e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e81a:	2300      	movs	r3, #0
 800e81c:	e001      	b.n	800e822 <ip4_route+0xca>
  }

  return netif_default;
 800e81e:	4b05      	ldr	r3, [pc, #20]	; (800e834 <ip4_route+0xdc>)
 800e820:	681b      	ldr	r3, [r3, #0]
}
 800e822:	4618      	mov	r0, r3
 800e824:	3714      	adds	r7, #20
 800e826:	46bd      	mov	sp, r7
 800e828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82c:	4770      	bx	lr
 800e82e:	bf00      	nop
 800e830:	2000837c 	.word	0x2000837c
 800e834:	20008380 	.word	0x20008380

0800e838 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b082      	sub	sp, #8
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e846:	f003 0301 	and.w	r3, r3, #1
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d016      	beq.n	800e87e <ip4_input_accept+0x46>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	3304      	adds	r3, #4
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d011      	beq.n	800e87e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e85a:	4b0b      	ldr	r3, [pc, #44]	; (800e888 <ip4_input_accept+0x50>)
 800e85c:	695a      	ldr	r2, [r3, #20]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	3304      	adds	r3, #4
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	429a      	cmp	r2, r3
 800e866:	d008      	beq.n	800e87a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e868:	4b07      	ldr	r3, [pc, #28]	; (800e888 <ip4_input_accept+0x50>)
 800e86a:	695b      	ldr	r3, [r3, #20]
 800e86c:	6879      	ldr	r1, [r7, #4]
 800e86e:	4618      	mov	r0, r3
 800e870:	f000 fa08 	bl	800ec84 <ip4_addr_isbroadcast_u32>
 800e874:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e876:	2b00      	cmp	r3, #0
 800e878:	d001      	beq.n	800e87e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e87a:	2301      	movs	r3, #1
 800e87c:	e000      	b.n	800e880 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e87e:	2300      	movs	r3, #0
}
 800e880:	4618      	mov	r0, r3
 800e882:	3708      	adds	r7, #8
 800e884:	46bd      	mov	sp, r7
 800e886:	bd80      	pop	{r7, pc}
 800e888:	20004e18 	.word	0x20004e18

0800e88c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b086      	sub	sp, #24
 800e890:	af00      	add	r7, sp, #0
 800e892:	6078      	str	r0, [r7, #4]
 800e894:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	091b      	lsrs	r3, r3, #4
 800e8a2:	b2db      	uxtb	r3, r3
 800e8a4:	2b04      	cmp	r3, #4
 800e8a6:	d004      	beq.n	800e8b2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f7f8 f8b7 	bl	8006a1c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	e107      	b.n	800eac2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	f003 030f 	and.w	r3, r3, #15
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	009b      	lsls	r3, r3, #2
 800e8be:	b2db      	uxtb	r3, r3
 800e8c0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	885b      	ldrh	r3, [r3, #2]
 800e8c6:	b29b      	uxth	r3, r3
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f7f6 fd49 	bl	8005360 <lwip_htons>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	891b      	ldrh	r3, [r3, #8]
 800e8d6:	89ba      	ldrh	r2, [r7, #12]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d204      	bcs.n	800e8e6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e8dc:	89bb      	ldrh	r3, [r7, #12]
 800e8de:	4619      	mov	r1, r3
 800e8e0:	6878      	ldr	r0, [r7, #4]
 800e8e2:	f7f7 ff15 	bl	8006710 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	895b      	ldrh	r3, [r3, #10]
 800e8ea:	89fa      	ldrh	r2, [r7, #14]
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d807      	bhi.n	800e900 <ip4_input+0x74>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	891b      	ldrh	r3, [r3, #8]
 800e8f4:	89ba      	ldrh	r2, [r7, #12]
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d802      	bhi.n	800e900 <ip4_input+0x74>
 800e8fa:	89fb      	ldrh	r3, [r7, #14]
 800e8fc:	2b13      	cmp	r3, #19
 800e8fe:	d804      	bhi.n	800e90a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f7f8 f88b 	bl	8006a1c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e906:	2300      	movs	r3, #0
 800e908:	e0db      	b.n	800eac2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e90a:	697b      	ldr	r3, [r7, #20]
 800e90c:	691b      	ldr	r3, [r3, #16]
 800e90e:	4a6f      	ldr	r2, [pc, #444]	; (800eacc <ip4_input+0x240>)
 800e910:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	68db      	ldr	r3, [r3, #12]
 800e916:	4a6d      	ldr	r2, [pc, #436]	; (800eacc <ip4_input+0x240>)
 800e918:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e91a:	4b6c      	ldr	r3, [pc, #432]	; (800eacc <ip4_input+0x240>)
 800e91c:	695b      	ldr	r3, [r3, #20]
 800e91e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e922:	2be0      	cmp	r3, #224	; 0xe0
 800e924:	d112      	bne.n	800e94c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e92c:	f003 0301 	and.w	r3, r3, #1
 800e930:	b2db      	uxtb	r3, r3
 800e932:	2b00      	cmp	r3, #0
 800e934:	d007      	beq.n	800e946 <ip4_input+0xba>
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	3304      	adds	r3, #4
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d002      	beq.n	800e946 <ip4_input+0xba>
      netif = inp;
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	613b      	str	r3, [r7, #16]
 800e944:	e02a      	b.n	800e99c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e946:	2300      	movs	r3, #0
 800e948:	613b      	str	r3, [r7, #16]
 800e94a:	e027      	b.n	800e99c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e94c:	6838      	ldr	r0, [r7, #0]
 800e94e:	f7ff ff73 	bl	800e838 <ip4_input_accept>
 800e952:	4603      	mov	r3, r0
 800e954:	2b00      	cmp	r3, #0
 800e956:	d002      	beq.n	800e95e <ip4_input+0xd2>
      netif = inp;
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	613b      	str	r3, [r7, #16]
 800e95c:	e01e      	b.n	800e99c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e95e:	2300      	movs	r3, #0
 800e960:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e962:	4b5a      	ldr	r3, [pc, #360]	; (800eacc <ip4_input+0x240>)
 800e964:	695b      	ldr	r3, [r3, #20]
 800e966:	b2db      	uxtb	r3, r3
 800e968:	2b7f      	cmp	r3, #127	; 0x7f
 800e96a:	d017      	beq.n	800e99c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e96c:	4b58      	ldr	r3, [pc, #352]	; (800ead0 <ip4_input+0x244>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	613b      	str	r3, [r7, #16]
 800e972:	e00e      	b.n	800e992 <ip4_input+0x106>
          if (netif == inp) {
 800e974:	693a      	ldr	r2, [r7, #16]
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d006      	beq.n	800e98a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e97c:	6938      	ldr	r0, [r7, #16]
 800e97e:	f7ff ff5b 	bl	800e838 <ip4_input_accept>
 800e982:	4603      	mov	r3, r0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d108      	bne.n	800e99a <ip4_input+0x10e>
 800e988:	e000      	b.n	800e98c <ip4_input+0x100>
            continue;
 800e98a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	613b      	str	r3, [r7, #16]
 800e992:	693b      	ldr	r3, [r7, #16]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d1ed      	bne.n	800e974 <ip4_input+0xe8>
 800e998:	e000      	b.n	800e99c <ip4_input+0x110>
            break;
 800e99a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e99c:	4b4b      	ldr	r3, [pc, #300]	; (800eacc <ip4_input+0x240>)
 800e99e:	691b      	ldr	r3, [r3, #16]
 800e9a0:	6839      	ldr	r1, [r7, #0]
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f000 f96e 	bl	800ec84 <ip4_addr_isbroadcast_u32>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d105      	bne.n	800e9ba <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e9ae:	4b47      	ldr	r3, [pc, #284]	; (800eacc <ip4_input+0x240>)
 800e9b0:	691b      	ldr	r3, [r3, #16]
 800e9b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e9b6:	2be0      	cmp	r3, #224	; 0xe0
 800e9b8:	d104      	bne.n	800e9c4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f7f8 f82e 	bl	8006a1c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	e07e      	b.n	800eac2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d104      	bne.n	800e9d4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e9ca:	6878      	ldr	r0, [r7, #4]
 800e9cc:	f7f8 f826 	bl	8006a1c <pbuf_free>
    return ERR_OK;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	e076      	b.n	800eac2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e9d4:	697b      	ldr	r3, [r7, #20]
 800e9d6:	88db      	ldrh	r3, [r3, #6]
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	461a      	mov	r2, r3
 800e9dc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e9e0:	4013      	ands	r3, r2
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d00b      	beq.n	800e9fe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f000 fc92 	bl	800f310 <ip4_reass>
 800e9ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d101      	bne.n	800e9f8 <ip4_input+0x16c>
      return ERR_OK;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	e064      	b.n	800eac2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	685b      	ldr	r3, [r3, #4]
 800e9fc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e9fe:	4a33      	ldr	r2, [pc, #204]	; (800eacc <ip4_input+0x240>)
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ea04:	4a31      	ldr	r2, [pc, #196]	; (800eacc <ip4_input+0x240>)
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ea0a:	4a30      	ldr	r2, [pc, #192]	; (800eacc <ip4_input+0x240>)
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	f003 030f 	and.w	r3, r3, #15
 800ea18:	b2db      	uxtb	r3, r3
 800ea1a:	009b      	lsls	r3, r3, #2
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	b29a      	uxth	r2, r3
 800ea20:	4b2a      	ldr	r3, [pc, #168]	; (800eacc <ip4_input+0x240>)
 800ea22:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ea24:	89fb      	ldrh	r3, [r7, #14]
 800ea26:	4619      	mov	r1, r3
 800ea28:	6878      	ldr	r0, [r7, #4]
 800ea2a:	f7f7 ff71 	bl	8006910 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	7a5b      	ldrb	r3, [r3, #9]
 800ea32:	2b11      	cmp	r3, #17
 800ea34:	d006      	beq.n	800ea44 <ip4_input+0x1b8>
 800ea36:	2b11      	cmp	r3, #17
 800ea38:	dc13      	bgt.n	800ea62 <ip4_input+0x1d6>
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d00c      	beq.n	800ea58 <ip4_input+0x1cc>
 800ea3e:	2b06      	cmp	r3, #6
 800ea40:	d005      	beq.n	800ea4e <ip4_input+0x1c2>
 800ea42:	e00e      	b.n	800ea62 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ea44:	6839      	ldr	r1, [r7, #0]
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7fe fc68 	bl	800d31c <udp_input>
        break;
 800ea4c:	e026      	b.n	800ea9c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ea4e:	6839      	ldr	r1, [r7, #0]
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	f7fa f889 	bl	8008b68 <tcp_input>
        break;
 800ea56:	e021      	b.n	800ea9c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ea58:	6839      	ldr	r1, [r7, #0]
 800ea5a:	6878      	ldr	r0, [r7, #4]
 800ea5c:	f7ff fcee 	bl	800e43c <icmp_input>
        break;
 800ea60:	e01c      	b.n	800ea9c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ea62:	4b1a      	ldr	r3, [pc, #104]	; (800eacc <ip4_input+0x240>)
 800ea64:	695b      	ldr	r3, [r3, #20]
 800ea66:	6939      	ldr	r1, [r7, #16]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f000 f90b 	bl	800ec84 <ip4_addr_isbroadcast_u32>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d10f      	bne.n	800ea94 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea74:	4b15      	ldr	r3, [pc, #84]	; (800eacc <ip4_input+0x240>)
 800ea76:	695b      	ldr	r3, [r3, #20]
 800ea78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ea7c:	2be0      	cmp	r3, #224	; 0xe0
 800ea7e:	d009      	beq.n	800ea94 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ea80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ea84:	4619      	mov	r1, r3
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f7f7 ffb5 	bl	80069f6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ea8c:	2102      	movs	r1, #2
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f7ff fdd8 	bl	800e644 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f7f7 ffc1 	bl	8006a1c <pbuf_free>
        break;
 800ea9a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ea9c:	4b0b      	ldr	r3, [pc, #44]	; (800eacc <ip4_input+0x240>)
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800eaa2:	4b0a      	ldr	r3, [pc, #40]	; (800eacc <ip4_input+0x240>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800eaa8:	4b08      	ldr	r3, [pc, #32]	; (800eacc <ip4_input+0x240>)
 800eaaa:	2200      	movs	r2, #0
 800eaac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800eaae:	4b07      	ldr	r3, [pc, #28]	; (800eacc <ip4_input+0x240>)
 800eab0:	2200      	movs	r2, #0
 800eab2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800eab4:	4b05      	ldr	r3, [pc, #20]	; (800eacc <ip4_input+0x240>)
 800eab6:	2200      	movs	r2, #0
 800eab8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800eaba:	4b04      	ldr	r3, [pc, #16]	; (800eacc <ip4_input+0x240>)
 800eabc:	2200      	movs	r2, #0
 800eabe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3718      	adds	r7, #24
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	20004e18 	.word	0x20004e18
 800ead0:	2000837c 	.word	0x2000837c

0800ead4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b08a      	sub	sp, #40	; 0x28
 800ead8:	af04      	add	r7, sp, #16
 800eada:	60f8      	str	r0, [r7, #12]
 800eadc:	60b9      	str	r1, [r7, #8]
 800eade:	607a      	str	r2, [r7, #4]
 800eae0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d009      	beq.n	800eb00 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d003      	beq.n	800eafa <ip4_output_if+0x26>
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d102      	bne.n	800eb00 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800eafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafc:	3304      	adds	r3, #4
 800eafe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800eb00:	78fa      	ldrb	r2, [r7, #3]
 800eb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb04:	9302      	str	r3, [sp, #8]
 800eb06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eb0a:	9301      	str	r3, [sp, #4]
 800eb0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eb10:	9300      	str	r3, [sp, #0]
 800eb12:	4613      	mov	r3, r2
 800eb14:	687a      	ldr	r2, [r7, #4]
 800eb16:	6979      	ldr	r1, [r7, #20]
 800eb18:	68f8      	ldr	r0, [r7, #12]
 800eb1a:	f000 f805 	bl	800eb28 <ip4_output_if_src>
 800eb1e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3718      	adds	r7, #24
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b088      	sub	sp, #32
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	60f8      	str	r0, [r7, #12]
 800eb30:	60b9      	str	r1, [r7, #8]
 800eb32:	607a      	str	r2, [r7, #4]
 800eb34:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	7b9b      	ldrb	r3, [r3, #14]
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d006      	beq.n	800eb4c <ip4_output_if_src+0x24>
 800eb3e:	4b4b      	ldr	r3, [pc, #300]	; (800ec6c <ip4_output_if_src+0x144>)
 800eb40:	f44f 7255 	mov.w	r2, #852	; 0x354
 800eb44:	494a      	ldr	r1, [pc, #296]	; (800ec70 <ip4_output_if_src+0x148>)
 800eb46:	484b      	ldr	r0, [pc, #300]	; (800ec74 <ip4_output_if_src+0x14c>)
 800eb48:	f001 f856 	bl	800fbf8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d060      	beq.n	800ec14 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800eb52:	2314      	movs	r3, #20
 800eb54:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800eb56:	2114      	movs	r1, #20
 800eb58:	68f8      	ldr	r0, [r7, #12]
 800eb5a:	f7f7 fec9 	bl	80068f0 <pbuf_add_header>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d002      	beq.n	800eb6a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eb64:	f06f 0301 	mvn.w	r3, #1
 800eb68:	e07c      	b.n	800ec64 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	895b      	ldrh	r3, [r3, #10]
 800eb74:	2b13      	cmp	r3, #19
 800eb76:	d806      	bhi.n	800eb86 <ip4_output_if_src+0x5e>
 800eb78:	4b3c      	ldr	r3, [pc, #240]	; (800ec6c <ip4_output_if_src+0x144>)
 800eb7a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800eb7e:	493e      	ldr	r1, [pc, #248]	; (800ec78 <ip4_output_if_src+0x150>)
 800eb80:	483c      	ldr	r0, [pc, #240]	; (800ec74 <ip4_output_if_src+0x14c>)
 800eb82:	f001 f839 	bl	800fbf8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	78fa      	ldrb	r2, [r7, #3]
 800eb8a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800eb8c:	69fb      	ldr	r3, [r7, #28]
 800eb8e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800eb92:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	69fb      	ldr	r3, [r7, #28]
 800eb9a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800eb9c:	8b7b      	ldrh	r3, [r7, #26]
 800eb9e:	089b      	lsrs	r3, r3, #2
 800eba0:	b29b      	uxth	r3, r3
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eba8:	b2da      	uxtb	r2, r3
 800ebaa:	69fb      	ldr	r3, [r7, #28]
 800ebac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ebae:	69fb      	ldr	r3, [r7, #28]
 800ebb0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ebb4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	891b      	ldrh	r3, [r3, #8]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7f6 fbd0 	bl	8005360 <lwip_htons>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	69fb      	ldr	r3, [r7, #28]
 800ebc6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	2200      	movs	r2, #0
 800ebcc:	719a      	strb	r2, [r3, #6]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ebd2:	4b2a      	ldr	r3, [pc, #168]	; (800ec7c <ip4_output_if_src+0x154>)
 800ebd4:	881b      	ldrh	r3, [r3, #0]
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7f6 fbc2 	bl	8005360 <lwip_htons>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	461a      	mov	r2, r3
 800ebe0:	69fb      	ldr	r3, [r7, #28]
 800ebe2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ebe4:	4b25      	ldr	r3, [pc, #148]	; (800ec7c <ip4_output_if_src+0x154>)
 800ebe6:	881b      	ldrh	r3, [r3, #0]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	b29a      	uxth	r2, r3
 800ebec:	4b23      	ldr	r3, [pc, #140]	; (800ec7c <ip4_output_if_src+0x154>)
 800ebee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d104      	bne.n	800ec00 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ebf6:	4b22      	ldr	r3, [pc, #136]	; (800ec80 <ip4_output_if_src+0x158>)
 800ebf8:	681a      	ldr	r2, [r3, #0]
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	60da      	str	r2, [r3, #12]
 800ebfe:	e003      	b.n	800ec08 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	69fb      	ldr	r3, [r7, #28]
 800ec06:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ec08:	69fb      	ldr	r3, [r7, #28]
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	729a      	strb	r2, [r3, #10]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	72da      	strb	r2, [r3, #11]
 800ec12:	e00f      	b.n	800ec34 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	895b      	ldrh	r3, [r3, #10]
 800ec18:	2b13      	cmp	r3, #19
 800ec1a:	d802      	bhi.n	800ec22 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ec1c:	f06f 0301 	mvn.w	r3, #1
 800ec20:	e020      	b.n	800ec64 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	691b      	ldr	r3, [r3, #16]
 800ec2c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ec2e:	f107 0314 	add.w	r3, r7, #20
 800ec32:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ec34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec36:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d00c      	beq.n	800ec56 <ip4_output_if_src+0x12e>
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	891a      	ldrh	r2, [r3, #8]
 800ec40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d906      	bls.n	800ec56 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ec48:	687a      	ldr	r2, [r7, #4]
 800ec4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	f000 fd53 	bl	800f6f8 <ip4_frag>
 800ec52:	4603      	mov	r3, r0
 800ec54:	e006      	b.n	800ec64 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ec56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec58:	695b      	ldr	r3, [r3, #20]
 800ec5a:	687a      	ldr	r2, [r7, #4]
 800ec5c:	68f9      	ldr	r1, [r7, #12]
 800ec5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec60:	4798      	blx	r3
 800ec62:	4603      	mov	r3, r0
}
 800ec64:	4618      	mov	r0, r3
 800ec66:	3720      	adds	r7, #32
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	080137cc 	.word	0x080137cc
 800ec70:	08013800 	.word	0x08013800
 800ec74:	0801380c 	.word	0x0801380c
 800ec78:	08013834 	.word	0x08013834
 800ec7c:	200084da 	.word	0x200084da
 800ec80:	08013c0c 	.word	0x08013c0c

0800ec84 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b085      	sub	sp, #20
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
 800ec8c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec98:	d002      	beq.n	800eca0 <ip4_addr_isbroadcast_u32+0x1c>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d101      	bne.n	800eca4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800eca0:	2301      	movs	r3, #1
 800eca2:	e02a      	b.n	800ecfa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ecaa:	f003 0302 	and.w	r3, r3, #2
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d101      	bne.n	800ecb6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	e021      	b.n	800ecfa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	3304      	adds	r3, #4
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d101      	bne.n	800ecc6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	e019      	b.n	800ecfa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ecc6:	68fa      	ldr	r2, [r7, #12]
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	3304      	adds	r3, #4
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	405a      	eors	r2, r3
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	3308      	adds	r3, #8
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4013      	ands	r3, r2
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d10d      	bne.n	800ecf8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	3308      	adds	r3, #8
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	43da      	mvns	r2, r3
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	3308      	adds	r3, #8
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d101      	bne.n	800ecf8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	e000      	b.n	800ecfa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ecf8:	2300      	movs	r3, #0
  }
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3714      	adds	r7, #20
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
	...

0800ed08 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ed12:	4b12      	ldr	r3, [pc, #72]	; (800ed5c <ip_reass_tmr+0x54>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ed18:	e018      	b.n	800ed4c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	7fdb      	ldrb	r3, [r3, #31]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00b      	beq.n	800ed3a <ip_reass_tmr+0x32>
      r->timer--;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	7fdb      	ldrb	r3, [r3, #31]
 800ed26:	3b01      	subs	r3, #1
 800ed28:	b2da      	uxtb	r2, r3
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	60fb      	str	r3, [r7, #12]
 800ed38:	e008      	b.n	800ed4c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ed44:	68b9      	ldr	r1, [r7, #8]
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f000 f80a 	bl	800ed60 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d1e3      	bne.n	800ed1a <ip_reass_tmr+0x12>
    }
  }
}
 800ed52:	bf00      	nop
 800ed54:	bf00      	nop
 800ed56:	3710      	adds	r7, #16
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}
 800ed5c:	200084dc 	.word	0x200084dc

0800ed60 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b088      	sub	sp, #32
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
 800ed68:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ed6e:	683a      	ldr	r2, [r7, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d105      	bne.n	800ed82 <ip_reass_free_complete_datagram+0x22>
 800ed76:	4b45      	ldr	r3, [pc, #276]	; (800ee8c <ip_reass_free_complete_datagram+0x12c>)
 800ed78:	22ab      	movs	r2, #171	; 0xab
 800ed7a:	4945      	ldr	r1, [pc, #276]	; (800ee90 <ip_reass_free_complete_datagram+0x130>)
 800ed7c:	4845      	ldr	r0, [pc, #276]	; (800ee94 <ip_reass_free_complete_datagram+0x134>)
 800ed7e:	f000 ff3b 	bl	800fbf8 <iprintf>
  if (prev != NULL) {
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d00a      	beq.n	800ed9e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	429a      	cmp	r2, r3
 800ed90:	d005      	beq.n	800ed9e <ip_reass_free_complete_datagram+0x3e>
 800ed92:	4b3e      	ldr	r3, [pc, #248]	; (800ee8c <ip_reass_free_complete_datagram+0x12c>)
 800ed94:	22ad      	movs	r2, #173	; 0xad
 800ed96:	4940      	ldr	r1, [pc, #256]	; (800ee98 <ip_reass_free_complete_datagram+0x138>)
 800ed98:	483e      	ldr	r0, [pc, #248]	; (800ee94 <ip_reass_free_complete_datagram+0x134>)
 800ed9a:	f000 ff2d 	bl	800fbf8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	685b      	ldr	r3, [r3, #4]
 800eda4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	889b      	ldrh	r3, [r3, #4]
 800edaa:	b29b      	uxth	r3, r3
 800edac:	2b00      	cmp	r3, #0
 800edae:	d12a      	bne.n	800ee06 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800edbe:	69bb      	ldr	r3, [r7, #24]
 800edc0:	6858      	ldr	r0, [r3, #4]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	3308      	adds	r3, #8
 800edc6:	2214      	movs	r2, #20
 800edc8:	4619      	mov	r1, r3
 800edca:	f000 fee5 	bl	800fb98 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800edce:	2101      	movs	r1, #1
 800edd0:	69b8      	ldr	r0, [r7, #24]
 800edd2:	f7ff fc47 	bl	800e664 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800edd6:	69b8      	ldr	r0, [r7, #24]
 800edd8:	f7f7 fea8 	bl	8006b2c <pbuf_clen>
 800eddc:	4603      	mov	r3, r0
 800edde:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ede0:	8bfa      	ldrh	r2, [r7, #30]
 800ede2:	8a7b      	ldrh	r3, [r7, #18]
 800ede4:	4413      	add	r3, r2
 800ede6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edea:	db05      	blt.n	800edf8 <ip_reass_free_complete_datagram+0x98>
 800edec:	4b27      	ldr	r3, [pc, #156]	; (800ee8c <ip_reass_free_complete_datagram+0x12c>)
 800edee:	22bc      	movs	r2, #188	; 0xbc
 800edf0:	492a      	ldr	r1, [pc, #168]	; (800ee9c <ip_reass_free_complete_datagram+0x13c>)
 800edf2:	4828      	ldr	r0, [pc, #160]	; (800ee94 <ip_reass_free_complete_datagram+0x134>)
 800edf4:	f000 ff00 	bl	800fbf8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800edf8:	8bfa      	ldrh	r2, [r7, #30]
 800edfa:	8a7b      	ldrh	r3, [r7, #18]
 800edfc:	4413      	add	r3, r2
 800edfe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ee00:	69b8      	ldr	r0, [r7, #24]
 800ee02:	f7f7 fe0b 	bl	8006a1c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	685b      	ldr	r3, [r3, #4]
 800ee0a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ee0c:	e01f      	b.n	800ee4e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	685b      	ldr	r3, [r3, #4]
 800ee12:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f7f7 fe84 	bl	8006b2c <pbuf_clen>
 800ee24:	4603      	mov	r3, r0
 800ee26:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ee28:	8bfa      	ldrh	r2, [r7, #30]
 800ee2a:	8a7b      	ldrh	r3, [r7, #18]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee32:	db05      	blt.n	800ee40 <ip_reass_free_complete_datagram+0xe0>
 800ee34:	4b15      	ldr	r3, [pc, #84]	; (800ee8c <ip_reass_free_complete_datagram+0x12c>)
 800ee36:	22cc      	movs	r2, #204	; 0xcc
 800ee38:	4918      	ldr	r1, [pc, #96]	; (800ee9c <ip_reass_free_complete_datagram+0x13c>)
 800ee3a:	4816      	ldr	r0, [pc, #88]	; (800ee94 <ip_reass_free_complete_datagram+0x134>)
 800ee3c:	f000 fedc 	bl	800fbf8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ee40:	8bfa      	ldrh	r2, [r7, #30]
 800ee42:	8a7b      	ldrh	r3, [r7, #18]
 800ee44:	4413      	add	r3, r2
 800ee46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ee48:	68f8      	ldr	r0, [r7, #12]
 800ee4a:	f7f7 fde7 	bl	8006a1c <pbuf_free>
  while (p != NULL) {
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d1dc      	bne.n	800ee0e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ee54:	6839      	ldr	r1, [r7, #0]
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 f8c2 	bl	800efe0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ee5c:	4b10      	ldr	r3, [pc, #64]	; (800eea0 <ip_reass_free_complete_datagram+0x140>)
 800ee5e:	881b      	ldrh	r3, [r3, #0]
 800ee60:	8bfa      	ldrh	r2, [r7, #30]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d905      	bls.n	800ee72 <ip_reass_free_complete_datagram+0x112>
 800ee66:	4b09      	ldr	r3, [pc, #36]	; (800ee8c <ip_reass_free_complete_datagram+0x12c>)
 800ee68:	22d2      	movs	r2, #210	; 0xd2
 800ee6a:	490e      	ldr	r1, [pc, #56]	; (800eea4 <ip_reass_free_complete_datagram+0x144>)
 800ee6c:	4809      	ldr	r0, [pc, #36]	; (800ee94 <ip_reass_free_complete_datagram+0x134>)
 800ee6e:	f000 fec3 	bl	800fbf8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ee72:	4b0b      	ldr	r3, [pc, #44]	; (800eea0 <ip_reass_free_complete_datagram+0x140>)
 800ee74:	881a      	ldrh	r2, [r3, #0]
 800ee76:	8bfb      	ldrh	r3, [r7, #30]
 800ee78:	1ad3      	subs	r3, r2, r3
 800ee7a:	b29a      	uxth	r2, r3
 800ee7c:	4b08      	ldr	r3, [pc, #32]	; (800eea0 <ip_reass_free_complete_datagram+0x140>)
 800ee7e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ee80:	8bfb      	ldrh	r3, [r7, #30]
}
 800ee82:	4618      	mov	r0, r3
 800ee84:	3720      	adds	r7, #32
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	08013864 	.word	0x08013864
 800ee90:	080138a0 	.word	0x080138a0
 800ee94:	080138ac 	.word	0x080138ac
 800ee98:	080138d4 	.word	0x080138d4
 800ee9c:	080138e8 	.word	0x080138e8
 800eea0:	200084e0 	.word	0x200084e0
 800eea4:	08013908 	.word	0x08013908

0800eea8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b08a      	sub	sp, #40	; 0x28
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800eeba:	2300      	movs	r3, #0
 800eebc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800eebe:	2300      	movs	r3, #0
 800eec0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800eec2:	2300      	movs	r3, #0
 800eec4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800eec6:	4b28      	ldr	r3, [pc, #160]	; (800ef68 <ip_reass_remove_oldest_datagram+0xc0>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800eecc:	e030      	b.n	800ef30 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800eece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed0:	695a      	ldr	r2, [r3, #20]
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	68db      	ldr	r3, [r3, #12]
 800eed6:	429a      	cmp	r2, r3
 800eed8:	d10c      	bne.n	800eef4 <ip_reass_remove_oldest_datagram+0x4c>
 800eeda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eedc:	699a      	ldr	r2, [r3, #24]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	691b      	ldr	r3, [r3, #16]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d106      	bne.n	800eef4 <ip_reass_remove_oldest_datagram+0x4c>
 800eee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee8:	899a      	ldrh	r2, [r3, #12]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	889b      	ldrh	r3, [r3, #4]
 800eeee:	b29b      	uxth	r3, r3
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d014      	beq.n	800ef1e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	3301      	adds	r3, #1
 800eef8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800eefa:	6a3b      	ldr	r3, [r7, #32]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d104      	bne.n	800ef0a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ef00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef02:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ef04:	69fb      	ldr	r3, [r7, #28]
 800ef06:	61bb      	str	r3, [r7, #24]
 800ef08:	e009      	b.n	800ef1e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ef0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0c:	7fda      	ldrb	r2, [r3, #31]
 800ef0e:	6a3b      	ldr	r3, [r7, #32]
 800ef10:	7fdb      	ldrb	r3, [r3, #31]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d803      	bhi.n	800ef1e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ef16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef18:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ef1a:	69fb      	ldr	r3, [r7, #28]
 800ef1c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ef1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d001      	beq.n	800ef2a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ef26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef28:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ef2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ef30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d1cb      	bne.n	800eece <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ef36:	6a3b      	ldr	r3, [r7, #32]
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d008      	beq.n	800ef4e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ef3c:	69b9      	ldr	r1, [r7, #24]
 800ef3e:	6a38      	ldr	r0, [r7, #32]
 800ef40:	f7ff ff0e 	bl	800ed60 <ip_reass_free_complete_datagram>
 800ef44:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ef46:	697a      	ldr	r2, [r7, #20]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ef4e:	697a      	ldr	r2, [r7, #20]
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	da02      	bge.n	800ef5c <ip_reass_remove_oldest_datagram+0xb4>
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	2b01      	cmp	r3, #1
 800ef5a:	dcac      	bgt.n	800eeb6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ef5c:	697b      	ldr	r3, [r7, #20]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3728      	adds	r7, #40	; 0x28
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	200084dc 	.word	0x200084dc

0800ef6c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b084      	sub	sp, #16
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ef76:	2004      	movs	r0, #4
 800ef78:	f7f6 fe6a 	bl	8005c50 <memp_malloc>
 800ef7c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d110      	bne.n	800efa6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ef84:	6839      	ldr	r1, [r7, #0]
 800ef86:	6878      	ldr	r0, [r7, #4]
 800ef88:	f7ff ff8e 	bl	800eea8 <ip_reass_remove_oldest_datagram>
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	683b      	ldr	r3, [r7, #0]
 800ef90:	4293      	cmp	r3, r2
 800ef92:	dc03      	bgt.n	800ef9c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ef94:	2004      	movs	r0, #4
 800ef96:	f7f6 fe5b 	bl	8005c50 <memp_malloc>
 800ef9a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d101      	bne.n	800efa6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800efa2:	2300      	movs	r3, #0
 800efa4:	e016      	b.n	800efd4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800efa6:	2220      	movs	r2, #32
 800efa8:	2100      	movs	r1, #0
 800efaa:	68f8      	ldr	r0, [r7, #12]
 800efac:	f000 fe1c 	bl	800fbe8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	220f      	movs	r2, #15
 800efb4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800efb6:	4b09      	ldr	r3, [pc, #36]	; (800efdc <ip_reass_enqueue_new_datagram+0x70>)
 800efb8:	681a      	ldr	r2, [r3, #0]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800efbe:	4a07      	ldr	r2, [pc, #28]	; (800efdc <ip_reass_enqueue_new_datagram+0x70>)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	3308      	adds	r3, #8
 800efc8:	2214      	movs	r2, #20
 800efca:	6879      	ldr	r1, [r7, #4]
 800efcc:	4618      	mov	r0, r3
 800efce:	f000 fde3 	bl	800fb98 <memcpy>
  return ipr;
 800efd2:	68fb      	ldr	r3, [r7, #12]
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}
 800efdc:	200084dc 	.word	0x200084dc

0800efe0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800efea:	4b10      	ldr	r3, [pc, #64]	; (800f02c <ip_reass_dequeue_datagram+0x4c>)
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	687a      	ldr	r2, [r7, #4]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d104      	bne.n	800effe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4a0c      	ldr	r2, [pc, #48]	; (800f02c <ip_reass_dequeue_datagram+0x4c>)
 800effa:	6013      	str	r3, [r2, #0]
 800effc:	e00d      	b.n	800f01a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d106      	bne.n	800f012 <ip_reass_dequeue_datagram+0x32>
 800f004:	4b0a      	ldr	r3, [pc, #40]	; (800f030 <ip_reass_dequeue_datagram+0x50>)
 800f006:	f240 1245 	movw	r2, #325	; 0x145
 800f00a:	490a      	ldr	r1, [pc, #40]	; (800f034 <ip_reass_dequeue_datagram+0x54>)
 800f00c:	480a      	ldr	r0, [pc, #40]	; (800f038 <ip_reass_dequeue_datagram+0x58>)
 800f00e:	f000 fdf3 	bl	800fbf8 <iprintf>
    prev->next = ipr->next;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	681a      	ldr	r2, [r3, #0]
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f01a:	6879      	ldr	r1, [r7, #4]
 800f01c:	2004      	movs	r0, #4
 800f01e:	f7f6 fe87 	bl	8005d30 <memp_free>
}
 800f022:	bf00      	nop
 800f024:	3708      	adds	r7, #8
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
 800f02a:	bf00      	nop
 800f02c:	200084dc 	.word	0x200084dc
 800f030:	08013864 	.word	0x08013864
 800f034:	0801392c 	.word	0x0801392c
 800f038:	080138ac 	.word	0x080138ac

0800f03c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b08c      	sub	sp, #48	; 0x30
 800f040:	af00      	add	r7, sp, #0
 800f042:	60f8      	str	r0, [r7, #12]
 800f044:	60b9      	str	r1, [r7, #8]
 800f046:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f048:	2300      	movs	r3, #0
 800f04a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f04c:	2301      	movs	r3, #1
 800f04e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	885b      	ldrh	r3, [r3, #2]
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	4618      	mov	r0, r3
 800f05e:	f7f6 f97f 	bl	8005360 <lwip_htons>
 800f062:	4603      	mov	r3, r0
 800f064:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f066:	69fb      	ldr	r3, [r7, #28]
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	f003 030f 	and.w	r3, r3, #15
 800f06e:	b2db      	uxtb	r3, r3
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f074:	7e7b      	ldrb	r3, [r7, #25]
 800f076:	b29b      	uxth	r3, r3
 800f078:	8b7a      	ldrh	r2, [r7, #26]
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d202      	bcs.n	800f084 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f07e:	f04f 33ff 	mov.w	r3, #4294967295
 800f082:	e135      	b.n	800f2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f084:	7e7b      	ldrb	r3, [r7, #25]
 800f086:	b29b      	uxth	r3, r3
 800f088:	8b7a      	ldrh	r2, [r7, #26]
 800f08a:	1ad3      	subs	r3, r2, r3
 800f08c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f08e:	69fb      	ldr	r3, [r7, #28]
 800f090:	88db      	ldrh	r3, [r3, #6]
 800f092:	b29b      	uxth	r3, r3
 800f094:	4618      	mov	r0, r3
 800f096:	f7f6 f963 	bl	8005360 <lwip_htons>
 800f09a:	4603      	mov	r3, r0
 800f09c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f0a0:	b29b      	uxth	r3, r3
 800f0a2:	00db      	lsls	r3, r3, #3
 800f0a4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	685b      	ldr	r3, [r3, #4]
 800f0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	701a      	strb	r2, [r3, #0]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	705a      	strb	r2, [r3, #1]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	709a      	strb	r2, [r3, #2]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c0:	8afa      	ldrh	r2, [r7, #22]
 800f0c2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f0c4:	8afa      	ldrh	r2, [r7, #22]
 800f0c6:	8b7b      	ldrh	r3, [r7, #26]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	b29a      	uxth	r2, r3
 800f0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ce:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0d2:	88db      	ldrh	r3, [r3, #6]
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	8afa      	ldrh	r2, [r7, #22]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d902      	bls.n	800f0e2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f0dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f0e0:	e106      	b.n	800f2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	685b      	ldr	r3, [r3, #4]
 800f0e6:	627b      	str	r3, [r7, #36]	; 0x24
 800f0e8:	e068      	b.n	800f1bc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f2:	889b      	ldrh	r3, [r3, #4]
 800f0f4:	b29a      	uxth	r2, r3
 800f0f6:	693b      	ldr	r3, [r7, #16]
 800f0f8:	889b      	ldrh	r3, [r3, #4]
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	d235      	bcs.n	800f16c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f104:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d020      	beq.n	800f14e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10e:	889b      	ldrh	r3, [r3, #4]
 800f110:	b29a      	uxth	r2, r3
 800f112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f114:	88db      	ldrh	r3, [r3, #6]
 800f116:	b29b      	uxth	r3, r3
 800f118:	429a      	cmp	r2, r3
 800f11a:	d307      	bcc.n	800f12c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f11c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11e:	88db      	ldrh	r3, [r3, #6]
 800f120:	b29a      	uxth	r2, r3
 800f122:	693b      	ldr	r3, [r7, #16]
 800f124:	889b      	ldrh	r3, [r3, #4]
 800f126:	b29b      	uxth	r3, r3
 800f128:	429a      	cmp	r2, r3
 800f12a:	d902      	bls.n	800f132 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f12c:	f04f 33ff 	mov.w	r3, #4294967295
 800f130:	e0de      	b.n	800f2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	68ba      	ldr	r2, [r7, #8]
 800f136:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13a:	88db      	ldrh	r3, [r3, #6]
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f140:	889b      	ldrh	r3, [r3, #4]
 800f142:	b29b      	uxth	r3, r3
 800f144:	429a      	cmp	r2, r3
 800f146:	d03d      	beq.n	800f1c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f148:	2300      	movs	r3, #0
 800f14a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f14c:	e03a      	b.n	800f1c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f150:	88db      	ldrh	r3, [r3, #6]
 800f152:	b29a      	uxth	r2, r3
 800f154:	693b      	ldr	r3, [r7, #16]
 800f156:	889b      	ldrh	r3, [r3, #4]
 800f158:	b29b      	uxth	r3, r3
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d902      	bls.n	800f164 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f15e:	f04f 33ff 	mov.w	r3, #4294967295
 800f162:	e0c5      	b.n	800f2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	68ba      	ldr	r2, [r7, #8]
 800f168:	605a      	str	r2, [r3, #4]
      break;
 800f16a:	e02b      	b.n	800f1c4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16e:	889b      	ldrh	r3, [r3, #4]
 800f170:	b29a      	uxth	r2, r3
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	889b      	ldrh	r3, [r3, #4]
 800f176:	b29b      	uxth	r3, r3
 800f178:	429a      	cmp	r2, r3
 800f17a:	d102      	bne.n	800f182 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f17c:	f04f 33ff 	mov.w	r3, #4294967295
 800f180:	e0b6      	b.n	800f2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f184:	889b      	ldrh	r3, [r3, #4]
 800f186:	b29a      	uxth	r2, r3
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	88db      	ldrh	r3, [r3, #6]
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	429a      	cmp	r2, r3
 800f190:	d202      	bcs.n	800f198 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f192:	f04f 33ff 	mov.w	r3, #4294967295
 800f196:	e0ab      	b.n	800f2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d009      	beq.n	800f1b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a0:	88db      	ldrh	r3, [r3, #6]
 800f1a2:	b29a      	uxth	r2, r3
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	889b      	ldrh	r3, [r3, #4]
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d001      	beq.n	800f1b2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d193      	bne.n	800f0ea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f1c2:	e000      	b.n	800f1c6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f1c4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d12d      	bne.n	800f228 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d01c      	beq.n	800f20c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d4:	88db      	ldrh	r3, [r3, #6]
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	889b      	ldrh	r3, [r3, #4]
 800f1dc:	b29b      	uxth	r3, r3
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d906      	bls.n	800f1f0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f1e2:	4b45      	ldr	r3, [pc, #276]	; (800f2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f1e4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f1e8:	4944      	ldr	r1, [pc, #272]	; (800f2fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f1ea:	4845      	ldr	r0, [pc, #276]	; (800f300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f1ec:	f000 fd04 	bl	800fbf8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f2:	68ba      	ldr	r2, [r7, #8]
 800f1f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f8:	88db      	ldrh	r3, [r3, #6]
 800f1fa:	b29a      	uxth	r2, r3
 800f1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fe:	889b      	ldrh	r3, [r3, #4]
 800f200:	b29b      	uxth	r3, r3
 800f202:	429a      	cmp	r2, r3
 800f204:	d010      	beq.n	800f228 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f206:	2300      	movs	r3, #0
 800f208:	623b      	str	r3, [r7, #32]
 800f20a:	e00d      	b.n	800f228 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d006      	beq.n	800f222 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f214:	4b38      	ldr	r3, [pc, #224]	; (800f2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f216:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f21a:	493a      	ldr	r1, [pc, #232]	; (800f304 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f21c:	4838      	ldr	r0, [pc, #224]	; (800f300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f21e:	f000 fceb 	bl	800fbf8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	68ba      	ldr	r2, [r7, #8]
 800f226:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d105      	bne.n	800f23a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	7f9b      	ldrb	r3, [r3, #30]
 800f232:	f003 0301 	and.w	r3, r3, #1
 800f236:	2b00      	cmp	r3, #0
 800f238:	d059      	beq.n	800f2ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f23a:	6a3b      	ldr	r3, [r7, #32]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d04f      	beq.n	800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	685b      	ldr	r3, [r3, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d006      	beq.n	800f256 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	685b      	ldr	r3, [r3, #4]
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	889b      	ldrh	r3, [r3, #4]
 800f250:	b29b      	uxth	r3, r3
 800f252:	2b00      	cmp	r3, #0
 800f254:	d002      	beq.n	800f25c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f256:	2300      	movs	r3, #0
 800f258:	623b      	str	r3, [r7, #32]
 800f25a:	e041      	b.n	800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f25e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f266:	e012      	b.n	800f28e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f26a:	685b      	ldr	r3, [r3, #4]
 800f26c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f270:	88db      	ldrh	r3, [r3, #6]
 800f272:	b29a      	uxth	r2, r3
 800f274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f276:	889b      	ldrh	r3, [r3, #4]
 800f278:	b29b      	uxth	r3, r3
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d002      	beq.n	800f284 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f27e:	2300      	movs	r3, #0
 800f280:	623b      	str	r3, [r7, #32]
            break;
 800f282:	e007      	b.n	800f294 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f286:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f290:	2b00      	cmp	r3, #0
 800f292:	d1e9      	bne.n	800f268 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f294:	6a3b      	ldr	r3, [r7, #32]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d022      	beq.n	800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d106      	bne.n	800f2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f2a2:	4b15      	ldr	r3, [pc, #84]	; (800f2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f2a4:	f240 12df 	movw	r2, #479	; 0x1df
 800f2a8:	4917      	ldr	r1, [pc, #92]	; (800f308 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f2aa:	4815      	ldr	r0, [pc, #84]	; (800f300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f2ac:	f000 fca4 	bl	800fbf8 <iprintf>
          LWIP_ASSERT("sanity check",
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	685b      	ldr	r3, [r3, #4]
 800f2b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2b8:	429a      	cmp	r2, r3
 800f2ba:	d106      	bne.n	800f2ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f2bc:	4b0e      	ldr	r3, [pc, #56]	; (800f2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f2be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f2c2:	4911      	ldr	r1, [pc, #68]	; (800f308 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f2c4:	480e      	ldr	r0, [pc, #56]	; (800f300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f2c6:	f000 fc97 	bl	800fbf8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d006      	beq.n	800f2e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f2d2:	4b09      	ldr	r3, [pc, #36]	; (800f2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f2d4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f2d8:	490c      	ldr	r1, [pc, #48]	; (800f30c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f2da:	4809      	ldr	r0, [pc, #36]	; (800f300 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f2dc:	f000 fc8c 	bl	800fbf8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f2e0:	6a3b      	ldr	r3, [r7, #32]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	bf14      	ite	ne
 800f2e6:	2301      	movne	r3, #1
 800f2e8:	2300      	moveq	r3, #0
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	e000      	b.n	800f2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f2ee:	2300      	movs	r3, #0
}
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	3730      	adds	r7, #48	; 0x30
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}
 800f2f8:	08013864 	.word	0x08013864
 800f2fc:	08013948 	.word	0x08013948
 800f300:	080138ac 	.word	0x080138ac
 800f304:	08013968 	.word	0x08013968
 800f308:	080139a0 	.word	0x080139a0
 800f30c:	080139b0 	.word	0x080139b0

0800f310 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b08e      	sub	sp, #56	; 0x38
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	685b      	ldr	r3, [r3, #4]
 800f31c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	f003 030f 	and.w	r3, r3, #15
 800f326:	b2db      	uxtb	r3, r3
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	2b14      	cmp	r3, #20
 800f32e:	f040 8171 	bne.w	800f614 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f334:	88db      	ldrh	r3, [r3, #6]
 800f336:	b29b      	uxth	r3, r3
 800f338:	4618      	mov	r0, r3
 800f33a:	f7f6 f811 	bl	8005360 <lwip_htons>
 800f33e:	4603      	mov	r3, r0
 800f340:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f344:	b29b      	uxth	r3, r3
 800f346:	00db      	lsls	r3, r3, #3
 800f348:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34c:	885b      	ldrh	r3, [r3, #2]
 800f34e:	b29b      	uxth	r3, r3
 800f350:	4618      	mov	r0, r3
 800f352:	f7f6 f805 	bl	8005360 <lwip_htons>
 800f356:	4603      	mov	r3, r0
 800f358:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35c:	781b      	ldrb	r3, [r3, #0]
 800f35e:	f003 030f 	and.w	r3, r3, #15
 800f362:	b2db      	uxtb	r3, r3
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f36a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f36e:	b29b      	uxth	r3, r3
 800f370:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f372:	429a      	cmp	r2, r3
 800f374:	f0c0 8150 	bcc.w	800f618 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f380:	1ad3      	subs	r3, r2, r3
 800f382:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f7f7 fbd1 	bl	8006b2c <pbuf_clen>
 800f38a:	4603      	mov	r3, r0
 800f38c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f38e:	4b8c      	ldr	r3, [pc, #560]	; (800f5c0 <ip4_reass+0x2b0>)
 800f390:	881b      	ldrh	r3, [r3, #0]
 800f392:	461a      	mov	r2, r3
 800f394:	8c3b      	ldrh	r3, [r7, #32]
 800f396:	4413      	add	r3, r2
 800f398:	2b0a      	cmp	r3, #10
 800f39a:	dd10      	ble.n	800f3be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f39c:	8c3b      	ldrh	r3, [r7, #32]
 800f39e:	4619      	mov	r1, r3
 800f3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3a2:	f7ff fd81 	bl	800eea8 <ip_reass_remove_oldest_datagram>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	f000 8137 	beq.w	800f61c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f3ae:	4b84      	ldr	r3, [pc, #528]	; (800f5c0 <ip4_reass+0x2b0>)
 800f3b0:	881b      	ldrh	r3, [r3, #0]
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	8c3b      	ldrh	r3, [r7, #32]
 800f3b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f3b8:	2b0a      	cmp	r3, #10
 800f3ba:	f300 812f 	bgt.w	800f61c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f3be:	4b81      	ldr	r3, [pc, #516]	; (800f5c4 <ip4_reass+0x2b4>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	633b      	str	r3, [r7, #48]	; 0x30
 800f3c4:	e015      	b.n	800f3f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c8:	695a      	ldr	r2, [r3, #20]
 800f3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	429a      	cmp	r2, r3
 800f3d0:	d10c      	bne.n	800f3ec <ip4_reass+0xdc>
 800f3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d4:	699a      	ldr	r2, [r3, #24]
 800f3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d8:	691b      	ldr	r3, [r3, #16]
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d106      	bne.n	800f3ec <ip4_reass+0xdc>
 800f3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e0:	899a      	ldrh	r2, [r3, #12]
 800f3e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e4:	889b      	ldrh	r3, [r3, #4]
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d006      	beq.n	800f3fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	633b      	str	r3, [r7, #48]	; 0x30
 800f3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d1e6      	bne.n	800f3c6 <ip4_reass+0xb6>
 800f3f8:	e000      	b.n	800f3fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f3fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f3fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d109      	bne.n	800f416 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f402:	8c3b      	ldrh	r3, [r7, #32]
 800f404:	4619      	mov	r1, r3
 800f406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f408:	f7ff fdb0 	bl	800ef6c <ip_reass_enqueue_new_datagram>
 800f40c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f410:	2b00      	cmp	r3, #0
 800f412:	d11c      	bne.n	800f44e <ip4_reass+0x13e>
      goto nullreturn;
 800f414:	e105      	b.n	800f622 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f418:	88db      	ldrh	r3, [r3, #6]
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7f5 ff9f 	bl	8005360 <lwip_htons>
 800f422:	4603      	mov	r3, r0
 800f424:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d110      	bne.n	800f44e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42e:	89db      	ldrh	r3, [r3, #14]
 800f430:	4618      	mov	r0, r3
 800f432:	f7f5 ff95 	bl	8005360 <lwip_htons>
 800f436:	4603      	mov	r3, r0
 800f438:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d006      	beq.n	800f44e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f442:	3308      	adds	r3, #8
 800f444:	2214      	movs	r2, #20
 800f446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f448:	4618      	mov	r0, r3
 800f44a:	f000 fba5 	bl	800fb98 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f450:	88db      	ldrh	r3, [r3, #6]
 800f452:	b29b      	uxth	r3, r3
 800f454:	f003 0320 	and.w	r3, r3, #32
 800f458:	2b00      	cmp	r3, #0
 800f45a:	bf0c      	ite	eq
 800f45c:	2301      	moveq	r3, #1
 800f45e:	2300      	movne	r3, #0
 800f460:	b2db      	uxtb	r3, r3
 800f462:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d00e      	beq.n	800f488 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f46a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f46c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f46e:	4413      	add	r3, r2
 800f470:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f472:	8b7a      	ldrh	r2, [r7, #26]
 800f474:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f476:	429a      	cmp	r2, r3
 800f478:	f0c0 80a0 	bcc.w	800f5bc <ip4_reass+0x2ac>
 800f47c:	8b7b      	ldrh	r3, [r7, #26]
 800f47e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f482:	4293      	cmp	r3, r2
 800f484:	f200 809a 	bhi.w	800f5bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f488:	69fa      	ldr	r2, [r7, #28]
 800f48a:	6879      	ldr	r1, [r7, #4]
 800f48c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f48e:	f7ff fdd5 	bl	800f03c <ip_reass_chain_frag_into_datagram_and_validate>
 800f492:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f49a:	f000 809b 	beq.w	800f5d4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f49e:	4b48      	ldr	r3, [pc, #288]	; (800f5c0 <ip4_reass+0x2b0>)
 800f4a0:	881a      	ldrh	r2, [r3, #0]
 800f4a2:	8c3b      	ldrh	r3, [r7, #32]
 800f4a4:	4413      	add	r3, r2
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	4b45      	ldr	r3, [pc, #276]	; (800f5c0 <ip4_reass+0x2b0>)
 800f4aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f4ac:	69fb      	ldr	r3, [r7, #28]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d00d      	beq.n	800f4ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f4b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f4b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4b6:	4413      	add	r3, r2
 800f4b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4bc:	8a7a      	ldrh	r2, [r7, #18]
 800f4be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c2:	7f9b      	ldrb	r3, [r3, #30]
 800f4c4:	f043 0301 	orr.w	r3, r3, #1
 800f4c8:	b2da      	uxtb	r2, r3
 800f4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f4ce:	697b      	ldr	r3, [r7, #20]
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	d171      	bne.n	800f5b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d6:	8b9b      	ldrh	r3, [r3, #28]
 800f4d8:	3314      	adds	r3, #20
 800f4da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	685b      	ldr	r3, [r3, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e8:	685b      	ldr	r3, [r3, #4]
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f0:	3308      	adds	r3, #8
 800f4f2:	2214      	movs	r2, #20
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4f8:	f000 fb4e 	bl	800fb98 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f4fc:	8a3b      	ldrh	r3, [r7, #16]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7f5 ff2e 	bl	8005360 <lwip_htons>
 800f504:	4603      	mov	r3, r0
 800f506:	461a      	mov	r2, r3
 800f508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50e:	2200      	movs	r2, #0
 800f510:	719a      	strb	r2, [r3, #6]
 800f512:	2200      	movs	r2, #0
 800f514:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f518:	2200      	movs	r2, #0
 800f51a:	729a      	strb	r2, [r3, #10]
 800f51c:	2200      	movs	r2, #0
 800f51e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f522:	685b      	ldr	r3, [r3, #4]
 800f524:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f526:	e00d      	b.n	800f544 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f52a:	685b      	ldr	r3, [r3, #4]
 800f52c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f52e:	2114      	movs	r1, #20
 800f530:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f532:	f7f7 f9ed 	bl	8006910 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f536:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f7f7 fb31 	bl	8006ba0 <pbuf_cat>
      r = iprh->next_pbuf;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f546:	2b00      	cmp	r3, #0
 800f548:	d1ee      	bne.n	800f528 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f54a:	4b1e      	ldr	r3, [pc, #120]	; (800f5c4 <ip4_reass+0x2b4>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f550:	429a      	cmp	r2, r3
 800f552:	d102      	bne.n	800f55a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f554:	2300      	movs	r3, #0
 800f556:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f558:	e010      	b.n	800f57c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f55a:	4b1a      	ldr	r3, [pc, #104]	; (800f5c4 <ip4_reass+0x2b4>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f560:	e007      	b.n	800f572 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f568:	429a      	cmp	r2, r3
 800f56a:	d006      	beq.n	800f57a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f574:	2b00      	cmp	r3, #0
 800f576:	d1f4      	bne.n	800f562 <ip4_reass+0x252>
 800f578:	e000      	b.n	800f57c <ip4_reass+0x26c>
          break;
 800f57a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f57c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f57e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f580:	f7ff fd2e 	bl	800efe0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f7f7 fad1 	bl	8006b2c <pbuf_clen>
 800f58a:	4603      	mov	r3, r0
 800f58c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f58e:	4b0c      	ldr	r3, [pc, #48]	; (800f5c0 <ip4_reass+0x2b0>)
 800f590:	881b      	ldrh	r3, [r3, #0]
 800f592:	8c3a      	ldrh	r2, [r7, #32]
 800f594:	429a      	cmp	r2, r3
 800f596:	d906      	bls.n	800f5a6 <ip4_reass+0x296>
 800f598:	4b0b      	ldr	r3, [pc, #44]	; (800f5c8 <ip4_reass+0x2b8>)
 800f59a:	f240 229b 	movw	r2, #667	; 0x29b
 800f59e:	490b      	ldr	r1, [pc, #44]	; (800f5cc <ip4_reass+0x2bc>)
 800f5a0:	480b      	ldr	r0, [pc, #44]	; (800f5d0 <ip4_reass+0x2c0>)
 800f5a2:	f000 fb29 	bl	800fbf8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f5a6:	4b06      	ldr	r3, [pc, #24]	; (800f5c0 <ip4_reass+0x2b0>)
 800f5a8:	881a      	ldrh	r2, [r3, #0]
 800f5aa:	8c3b      	ldrh	r3, [r7, #32]
 800f5ac:	1ad3      	subs	r3, r2, r3
 800f5ae:	b29a      	uxth	r2, r3
 800f5b0:	4b03      	ldr	r3, [pc, #12]	; (800f5c0 <ip4_reass+0x2b0>)
 800f5b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	e038      	b.n	800f62a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	e036      	b.n	800f62a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f5bc:	bf00      	nop
 800f5be:	e00a      	b.n	800f5d6 <ip4_reass+0x2c6>
 800f5c0:	200084e0 	.word	0x200084e0
 800f5c4:	200084dc 	.word	0x200084dc
 800f5c8:	08013864 	.word	0x08013864
 800f5cc:	080139d4 	.word	0x080139d4
 800f5d0:	080138ac 	.word	0x080138ac
    goto nullreturn_ipr;
 800f5d4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d106      	bne.n	800f5ea <ip4_reass+0x2da>
 800f5dc:	4b15      	ldr	r3, [pc, #84]	; (800f634 <ip4_reass+0x324>)
 800f5de:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f5e2:	4915      	ldr	r1, [pc, #84]	; (800f638 <ip4_reass+0x328>)
 800f5e4:	4815      	ldr	r0, [pc, #84]	; (800f63c <ip4_reass+0x32c>)
 800f5e6:	f000 fb07 	bl	800fbf8 <iprintf>
  if (ipr->p == NULL) {
 800f5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d116      	bne.n	800f620 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f5f2:	4b13      	ldr	r3, [pc, #76]	; (800f640 <ip4_reass+0x330>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d006      	beq.n	800f60a <ip4_reass+0x2fa>
 800f5fc:	4b0d      	ldr	r3, [pc, #52]	; (800f634 <ip4_reass+0x324>)
 800f5fe:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f602:	4910      	ldr	r1, [pc, #64]	; (800f644 <ip4_reass+0x334>)
 800f604:	480d      	ldr	r0, [pc, #52]	; (800f63c <ip4_reass+0x32c>)
 800f606:	f000 faf7 	bl	800fbf8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f60a:	2100      	movs	r1, #0
 800f60c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f60e:	f7ff fce7 	bl	800efe0 <ip_reass_dequeue_datagram>
 800f612:	e006      	b.n	800f622 <ip4_reass+0x312>
    goto nullreturn;
 800f614:	bf00      	nop
 800f616:	e004      	b.n	800f622 <ip4_reass+0x312>
    goto nullreturn;
 800f618:	bf00      	nop
 800f61a:	e002      	b.n	800f622 <ip4_reass+0x312>
      goto nullreturn;
 800f61c:	bf00      	nop
 800f61e:	e000      	b.n	800f622 <ip4_reass+0x312>
  }

nullreturn:
 800f620:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7f7 f9fa 	bl	8006a1c <pbuf_free>
  return NULL;
 800f628:	2300      	movs	r3, #0
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3738      	adds	r7, #56	; 0x38
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
 800f632:	bf00      	nop
 800f634:	08013864 	.word	0x08013864
 800f638:	080139f0 	.word	0x080139f0
 800f63c:	080138ac 	.word	0x080138ac
 800f640:	200084dc 	.word	0x200084dc
 800f644:	080139fc 	.word	0x080139fc

0800f648 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f64c:	2005      	movs	r0, #5
 800f64e:	f7f6 faff 	bl	8005c50 <memp_malloc>
 800f652:	4603      	mov	r3, r0
}
 800f654:	4618      	mov	r0, r3
 800f656:	bd80      	pop	{r7, pc}

0800f658 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b082      	sub	sp, #8
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d106      	bne.n	800f674 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f666:	4b07      	ldr	r3, [pc, #28]	; (800f684 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f668:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f66c:	4906      	ldr	r1, [pc, #24]	; (800f688 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f66e:	4807      	ldr	r0, [pc, #28]	; (800f68c <ip_frag_free_pbuf_custom_ref+0x34>)
 800f670:	f000 fac2 	bl	800fbf8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f674:	6879      	ldr	r1, [r7, #4]
 800f676:	2005      	movs	r0, #5
 800f678:	f7f6 fb5a 	bl	8005d30 <memp_free>
}
 800f67c:	bf00      	nop
 800f67e:	3708      	adds	r7, #8
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	08013864 	.word	0x08013864
 800f688:	08013a1c 	.word	0x08013a1c
 800f68c:	080138ac 	.word	0x080138ac

0800f690 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f690:	b580      	push	{r7, lr}
 800f692:	b084      	sub	sp, #16
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d106      	bne.n	800f6b0 <ipfrag_free_pbuf_custom+0x20>
 800f6a2:	4b11      	ldr	r3, [pc, #68]	; (800f6e8 <ipfrag_free_pbuf_custom+0x58>)
 800f6a4:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f6a8:	4910      	ldr	r1, [pc, #64]	; (800f6ec <ipfrag_free_pbuf_custom+0x5c>)
 800f6aa:	4811      	ldr	r0, [pc, #68]	; (800f6f0 <ipfrag_free_pbuf_custom+0x60>)
 800f6ac:	f000 faa4 	bl	800fbf8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f6b0:	68fa      	ldr	r2, [r7, #12]
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d006      	beq.n	800f6c6 <ipfrag_free_pbuf_custom+0x36>
 800f6b8:	4b0b      	ldr	r3, [pc, #44]	; (800f6e8 <ipfrag_free_pbuf_custom+0x58>)
 800f6ba:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f6be:	490d      	ldr	r1, [pc, #52]	; (800f6f4 <ipfrag_free_pbuf_custom+0x64>)
 800f6c0:	480b      	ldr	r0, [pc, #44]	; (800f6f0 <ipfrag_free_pbuf_custom+0x60>)
 800f6c2:	f000 fa99 	bl	800fbf8 <iprintf>
  if (pcr->original != NULL) {
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	695b      	ldr	r3, [r3, #20]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d004      	beq.n	800f6d8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	695b      	ldr	r3, [r3, #20]
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	f7f7 f9a2 	bl	8006a1c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f6d8:	68f8      	ldr	r0, [r7, #12]
 800f6da:	f7ff ffbd 	bl	800f658 <ip_frag_free_pbuf_custom_ref>
}
 800f6de:	bf00      	nop
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	08013864 	.word	0x08013864
 800f6ec:	08013a28 	.word	0x08013a28
 800f6f0:	080138ac 	.word	0x080138ac
 800f6f4:	08013a34 	.word	0x08013a34

0800f6f8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b094      	sub	sp, #80	; 0x50
 800f6fc:	af02      	add	r7, sp, #8
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f704:	2300      	movs	r3, #0
 800f706:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f70e:	3b14      	subs	r3, #20
 800f710:	2b00      	cmp	r3, #0
 800f712:	da00      	bge.n	800f716 <ip4_frag+0x1e>
 800f714:	3307      	adds	r3, #7
 800f716:	10db      	asrs	r3, r3, #3
 800f718:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f71a:	2314      	movs	r3, #20
 800f71c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	685b      	ldr	r3, [r3, #4]
 800f722:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f726:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72a:	781b      	ldrb	r3, [r3, #0]
 800f72c:	f003 030f 	and.w	r3, r3, #15
 800f730:	b2db      	uxtb	r3, r3
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	b2db      	uxtb	r3, r3
 800f736:	2b14      	cmp	r3, #20
 800f738:	d002      	beq.n	800f740 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f73a:	f06f 0305 	mvn.w	r3, #5
 800f73e:	e110      	b.n	800f962 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	895b      	ldrh	r3, [r3, #10]
 800f744:	2b13      	cmp	r3, #19
 800f746:	d809      	bhi.n	800f75c <ip4_frag+0x64>
 800f748:	4b88      	ldr	r3, [pc, #544]	; (800f96c <ip4_frag+0x274>)
 800f74a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f74e:	4988      	ldr	r1, [pc, #544]	; (800f970 <ip4_frag+0x278>)
 800f750:	4888      	ldr	r0, [pc, #544]	; (800f974 <ip4_frag+0x27c>)
 800f752:	f000 fa51 	bl	800fbf8 <iprintf>
 800f756:	f06f 0305 	mvn.w	r3, #5
 800f75a:	e102      	b.n	800f962 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75e:	88db      	ldrh	r3, [r3, #6]
 800f760:	b29b      	uxth	r3, r3
 800f762:	4618      	mov	r0, r3
 800f764:	f7f5 fdfc 	bl	8005360 <lwip_htons>
 800f768:	4603      	mov	r3, r0
 800f76a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f76c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f76e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f772:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f776:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f77c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	891b      	ldrh	r3, [r3, #8]
 800f782:	3b14      	subs	r3, #20
 800f784:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f788:	e0e1      	b.n	800f94e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f78a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f78c:	00db      	lsls	r3, r3, #3
 800f78e:	b29b      	uxth	r3, r3
 800f790:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f794:	4293      	cmp	r3, r2
 800f796:	bf28      	it	cs
 800f798:	4613      	movcs	r3, r2
 800f79a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f79c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f7a0:	2114      	movs	r1, #20
 800f7a2:	200e      	movs	r0, #14
 800f7a4:	f7f6 fe56 	bl	8006454 <pbuf_alloc>
 800f7a8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	f000 80d5 	beq.w	800f95c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b4:	895b      	ldrh	r3, [r3, #10]
 800f7b6:	2b13      	cmp	r3, #19
 800f7b8:	d806      	bhi.n	800f7c8 <ip4_frag+0xd0>
 800f7ba:	4b6c      	ldr	r3, [pc, #432]	; (800f96c <ip4_frag+0x274>)
 800f7bc:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f7c0:	496d      	ldr	r1, [pc, #436]	; (800f978 <ip4_frag+0x280>)
 800f7c2:	486c      	ldr	r0, [pc, #432]	; (800f974 <ip4_frag+0x27c>)
 800f7c4:	f000 fa18 	bl	800fbf8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	2214      	movs	r2, #20
 800f7ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f000 f9e1 	bl	800fb98 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d8:	685b      	ldr	r3, [r3, #4]
 800f7da:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f7dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f7de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f7e2:	e064      	b.n	800f8ae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	895a      	ldrh	r2, [r3, #10]
 800f7e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f7ea:	1ad3      	subs	r3, r2, r3
 800f7ec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	895b      	ldrh	r3, [r3, #10]
 800f7f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d906      	bls.n	800f806 <ip4_frag+0x10e>
 800f7f8:	4b5c      	ldr	r3, [pc, #368]	; (800f96c <ip4_frag+0x274>)
 800f7fa:	f240 322d 	movw	r2, #813	; 0x32d
 800f7fe:	495f      	ldr	r1, [pc, #380]	; (800f97c <ip4_frag+0x284>)
 800f800:	485c      	ldr	r0, [pc, #368]	; (800f974 <ip4_frag+0x27c>)
 800f802:	f000 f9f9 	bl	800fbf8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f806:	8bfa      	ldrh	r2, [r7, #30]
 800f808:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f80c:	4293      	cmp	r3, r2
 800f80e:	bf28      	it	cs
 800f810:	4613      	movcs	r3, r2
 800f812:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f816:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d105      	bne.n	800f82a <ip4_frag+0x132>
        poff = 0;
 800f81e:	2300      	movs	r3, #0
 800f820:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	60fb      	str	r3, [r7, #12]
        continue;
 800f828:	e041      	b.n	800f8ae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f82a:	f7ff ff0d 	bl	800f648 <ip_frag_alloc_pbuf_custom_ref>
 800f82e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f830:	69bb      	ldr	r3, [r7, #24]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d103      	bne.n	800f83e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f836:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f838:	f7f7 f8f0 	bl	8006a1c <pbuf_free>
        goto memerr;
 800f83c:	e08f      	b.n	800f95e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f83e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f844:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f846:	4413      	add	r3, r2
 800f848:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f84c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f850:	9201      	str	r2, [sp, #4]
 800f852:	9300      	str	r3, [sp, #0]
 800f854:	4603      	mov	r3, r0
 800f856:	2241      	movs	r2, #65	; 0x41
 800f858:	2000      	movs	r0, #0
 800f85a:	f7f6 ff25 	bl	80066a8 <pbuf_alloced_custom>
 800f85e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d106      	bne.n	800f874 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f866:	69b8      	ldr	r0, [r7, #24]
 800f868:	f7ff fef6 	bl	800f658 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f86c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f86e:	f7f7 f8d5 	bl	8006a1c <pbuf_free>
        goto memerr;
 800f872:	e074      	b.n	800f95e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f874:	68f8      	ldr	r0, [r7, #12]
 800f876:	f7f7 f971 	bl	8006b5c <pbuf_ref>
      pcr->original = p;
 800f87a:	69bb      	ldr	r3, [r7, #24]
 800f87c:	68fa      	ldr	r2, [r7, #12]
 800f87e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f880:	69bb      	ldr	r3, [r7, #24]
 800f882:	4a3f      	ldr	r2, [pc, #252]	; (800f980 <ip4_frag+0x288>)
 800f884:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f886:	6979      	ldr	r1, [r7, #20]
 800f888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f88a:	f7f7 f989 	bl	8006ba0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f88e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f892:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f896:	1ad3      	subs	r3, r2, r3
 800f898:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f89c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d004      	beq.n	800f8ae <ip4_frag+0x1b6>
        poff = 0;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f8ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d196      	bne.n	800f7e4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f8b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f8b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f8bc:	4413      	add	r3, r2
 800f8be:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f8c4:	f1a3 0213 	sub.w	r2, r3, #19
 800f8c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	bfcc      	ite	gt
 800f8d0:	2301      	movgt	r3, #1
 800f8d2:	2300      	movle	r3, #0
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f8d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f8dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f8e2:	6a3b      	ldr	r3, [r7, #32]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d002      	beq.n	800f8ee <ip4_frag+0x1f6>
 800f8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d003      	beq.n	800f8f6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f8ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f8f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f8f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f8f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f7f5 fd31 	bl	8005360 <lwip_htons>
 800f8fe:	4603      	mov	r3, r0
 800f900:	461a      	mov	r2, r3
 800f902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f904:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f906:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f908:	3314      	adds	r3, #20
 800f90a:	b29b      	uxth	r3, r3
 800f90c:	4618      	mov	r0, r3
 800f90e:	f7f5 fd27 	bl	8005360 <lwip_htons>
 800f912:	4603      	mov	r3, r0
 800f914:	461a      	mov	r2, r3
 800f916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f918:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91c:	2200      	movs	r2, #0
 800f91e:	729a      	strb	r2, [r3, #10]
 800f920:	2200      	movs	r2, #0
 800f922:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f924:	68bb      	ldr	r3, [r7, #8]
 800f926:	695b      	ldr	r3, [r3, #20]
 800f928:	687a      	ldr	r2, [r7, #4]
 800f92a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f92c:	68b8      	ldr	r0, [r7, #8]
 800f92e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f932:	f7f7 f873 	bl	8006a1c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f936:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f93a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f93c:	1ad3      	subs	r3, r2, r3
 800f93e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f942:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f946:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f948:	4413      	add	r3, r2
 800f94a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f94e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f952:	2b00      	cmp	r3, #0
 800f954:	f47f af19 	bne.w	800f78a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f958:	2300      	movs	r3, #0
 800f95a:	e002      	b.n	800f962 <ip4_frag+0x26a>
      goto memerr;
 800f95c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f95e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f962:	4618      	mov	r0, r3
 800f964:	3748      	adds	r7, #72	; 0x48
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	08013864 	.word	0x08013864
 800f970:	08013a40 	.word	0x08013a40
 800f974:	080138ac 	.word	0x080138ac
 800f978:	08013a5c 	.word	0x08013a5c
 800f97c:	08013a7c 	.word	0x08013a7c
 800f980:	0800f691 	.word	0x0800f691

0800f984 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b086      	sub	sp, #24
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f98e:	230e      	movs	r3, #14
 800f990:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	895b      	ldrh	r3, [r3, #10]
 800f996:	2b0e      	cmp	r3, #14
 800f998:	d96e      	bls.n	800fa78 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	7bdb      	ldrb	r3, [r3, #15]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d106      	bne.n	800f9b0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	b2da      	uxtb	r2, r3
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	685b      	ldr	r3, [r3, #4]
 800f9b4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	7b1a      	ldrb	r2, [r3, #12]
 800f9ba:	7b5b      	ldrb	r3, [r3, #13]
 800f9bc:	021b      	lsls	r3, r3, #8
 800f9be:	4313      	orrs	r3, r2
 800f9c0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	f003 0301 	and.w	r3, r3, #1
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d023      	beq.n	800fa16 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	781b      	ldrb	r3, [r3, #0]
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d10f      	bne.n	800f9f6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f9d6:	693b      	ldr	r3, [r7, #16]
 800f9d8:	785b      	ldrb	r3, [r3, #1]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d11b      	bne.n	800fa16 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f9de:	693b      	ldr	r3, [r7, #16]
 800f9e0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f9e2:	2b5e      	cmp	r3, #94	; 0x5e
 800f9e4:	d117      	bne.n	800fa16 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	7b5b      	ldrb	r3, [r3, #13]
 800f9ea:	f043 0310 	orr.w	r3, r3, #16
 800f9ee:	b2da      	uxtb	r2, r3
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	735a      	strb	r2, [r3, #13]
 800f9f4:	e00f      	b.n	800fa16 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	2206      	movs	r2, #6
 800f9fa:	4928      	ldr	r1, [pc, #160]	; (800fa9c <ethernet_input+0x118>)
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f000 f8bb 	bl	800fb78 <memcmp>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d106      	bne.n	800fa16 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	7b5b      	ldrb	r3, [r3, #13]
 800fa0c:	f043 0308 	orr.w	r3, r3, #8
 800fa10:	b2da      	uxtb	r2, r3
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800fa16:	89fb      	ldrh	r3, [r7, #14]
 800fa18:	2b08      	cmp	r3, #8
 800fa1a:	d003      	beq.n	800fa24 <ethernet_input+0xa0>
 800fa1c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800fa20:	d014      	beq.n	800fa4c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800fa22:	e032      	b.n	800fa8a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa2a:	f003 0308 	and.w	r3, r3, #8
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d024      	beq.n	800fa7c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fa32:	8afb      	ldrh	r3, [r7, #22]
 800fa34:	4619      	mov	r1, r3
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f7f6 ff6a 	bl	8006910 <pbuf_remove_header>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d11e      	bne.n	800fa80 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fa42:	6839      	ldr	r1, [r7, #0]
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f7fe ff21 	bl	800e88c <ip4_input>
      break;
 800fa4a:	e013      	b.n	800fa74 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa52:	f003 0308 	and.w	r3, r3, #8
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d014      	beq.n	800fa84 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fa5a:	8afb      	ldrh	r3, [r7, #22]
 800fa5c:	4619      	mov	r1, r3
 800fa5e:	6878      	ldr	r0, [r7, #4]
 800fa60:	f7f6 ff56 	bl	8006910 <pbuf_remove_header>
 800fa64:	4603      	mov	r3, r0
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d10e      	bne.n	800fa88 <ethernet_input+0x104>
        etharp_input(p, netif);
 800fa6a:	6839      	ldr	r1, [r7, #0]
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f7fe f8c1 	bl	800dbf4 <etharp_input>
      break;
 800fa72:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fa74:	2300      	movs	r3, #0
 800fa76:	e00c      	b.n	800fa92 <ethernet_input+0x10e>
    goto free_and_return;
 800fa78:	bf00      	nop
 800fa7a:	e006      	b.n	800fa8a <ethernet_input+0x106>
        goto free_and_return;
 800fa7c:	bf00      	nop
 800fa7e:	e004      	b.n	800fa8a <ethernet_input+0x106>
        goto free_and_return;
 800fa80:	bf00      	nop
 800fa82:	e002      	b.n	800fa8a <ethernet_input+0x106>
        goto free_and_return;
 800fa84:	bf00      	nop
 800fa86:	e000      	b.n	800fa8a <ethernet_input+0x106>
        goto free_and_return;
 800fa88:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f7f6 ffc6 	bl	8006a1c <pbuf_free>
  return ERR_OK;
 800fa90:	2300      	movs	r3, #0
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3718      	adds	r7, #24
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	08013c10 	.word	0x08013c10

0800faa0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b086      	sub	sp, #24
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	607a      	str	r2, [r7, #4]
 800faac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800faae:	8c3b      	ldrh	r3, [r7, #32]
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7f5 fc55 	bl	8005360 <lwip_htons>
 800fab6:	4603      	mov	r3, r0
 800fab8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800faba:	210e      	movs	r1, #14
 800fabc:	68b8      	ldr	r0, [r7, #8]
 800fabe:	f7f6 ff17 	bl	80068f0 <pbuf_add_header>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d125      	bne.n	800fb14 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	8afa      	ldrh	r2, [r7, #22]
 800fad2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	2206      	movs	r2, #6
 800fad8:	6839      	ldr	r1, [r7, #0]
 800fada:	4618      	mov	r0, r3
 800fadc:	f000 f85c 	bl	800fb98 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	3306      	adds	r3, #6
 800fae4:	2206      	movs	r2, #6
 800fae6:	6879      	ldr	r1, [r7, #4]
 800fae8:	4618      	mov	r0, r3
 800faea:	f000 f855 	bl	800fb98 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800faf4:	2b06      	cmp	r3, #6
 800faf6:	d006      	beq.n	800fb06 <ethernet_output+0x66>
 800faf8:	4b0a      	ldr	r3, [pc, #40]	; (800fb24 <ethernet_output+0x84>)
 800fafa:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fafe:	490a      	ldr	r1, [pc, #40]	; (800fb28 <ethernet_output+0x88>)
 800fb00:	480a      	ldr	r0, [pc, #40]	; (800fb2c <ethernet_output+0x8c>)
 800fb02:	f000 f879 	bl	800fbf8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	699b      	ldr	r3, [r3, #24]
 800fb0a:	68b9      	ldr	r1, [r7, #8]
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	4798      	blx	r3
 800fb10:	4603      	mov	r3, r0
 800fb12:	e002      	b.n	800fb1a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fb14:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fb16:	f06f 0301 	mvn.w	r3, #1
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3718      	adds	r7, #24
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	08013a8c 	.word	0x08013a8c
 800fb28:	08013ac4 	.word	0x08013ac4
 800fb2c:	08013af8 	.word	0x08013af8

0800fb30 <__libc_init_array>:
 800fb30:	b570      	push	{r4, r5, r6, lr}
 800fb32:	4d0d      	ldr	r5, [pc, #52]	; (800fb68 <__libc_init_array+0x38>)
 800fb34:	4c0d      	ldr	r4, [pc, #52]	; (800fb6c <__libc_init_array+0x3c>)
 800fb36:	1b64      	subs	r4, r4, r5
 800fb38:	10a4      	asrs	r4, r4, #2
 800fb3a:	2600      	movs	r6, #0
 800fb3c:	42a6      	cmp	r6, r4
 800fb3e:	d109      	bne.n	800fb54 <__libc_init_array+0x24>
 800fb40:	4d0b      	ldr	r5, [pc, #44]	; (800fb70 <__libc_init_array+0x40>)
 800fb42:	4c0c      	ldr	r4, [pc, #48]	; (800fb74 <__libc_init_array+0x44>)
 800fb44:	f001 fa5c 	bl	8011000 <_init>
 800fb48:	1b64      	subs	r4, r4, r5
 800fb4a:	10a4      	asrs	r4, r4, #2
 800fb4c:	2600      	movs	r6, #0
 800fb4e:	42a6      	cmp	r6, r4
 800fb50:	d105      	bne.n	800fb5e <__libc_init_array+0x2e>
 800fb52:	bd70      	pop	{r4, r5, r6, pc}
 800fb54:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb58:	4798      	blx	r3
 800fb5a:	3601      	adds	r6, #1
 800fb5c:	e7ee      	b.n	800fb3c <__libc_init_array+0xc>
 800fb5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb62:	4798      	blx	r3
 800fb64:	3601      	adds	r6, #1
 800fb66:	e7f2      	b.n	800fb4e <__libc_init_array+0x1e>
 800fb68:	08013d70 	.word	0x08013d70
 800fb6c:	08013d70 	.word	0x08013d70
 800fb70:	08013d70 	.word	0x08013d70
 800fb74:	08013d74 	.word	0x08013d74

0800fb78 <memcmp>:
 800fb78:	b510      	push	{r4, lr}
 800fb7a:	3901      	subs	r1, #1
 800fb7c:	4402      	add	r2, r0
 800fb7e:	4290      	cmp	r0, r2
 800fb80:	d101      	bne.n	800fb86 <memcmp+0xe>
 800fb82:	2000      	movs	r0, #0
 800fb84:	e005      	b.n	800fb92 <memcmp+0x1a>
 800fb86:	7803      	ldrb	r3, [r0, #0]
 800fb88:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fb8c:	42a3      	cmp	r3, r4
 800fb8e:	d001      	beq.n	800fb94 <memcmp+0x1c>
 800fb90:	1b18      	subs	r0, r3, r4
 800fb92:	bd10      	pop	{r4, pc}
 800fb94:	3001      	adds	r0, #1
 800fb96:	e7f2      	b.n	800fb7e <memcmp+0x6>

0800fb98 <memcpy>:
 800fb98:	440a      	add	r2, r1
 800fb9a:	4291      	cmp	r1, r2
 800fb9c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fba0:	d100      	bne.n	800fba4 <memcpy+0xc>
 800fba2:	4770      	bx	lr
 800fba4:	b510      	push	{r4, lr}
 800fba6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fbaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fbae:	4291      	cmp	r1, r2
 800fbb0:	d1f9      	bne.n	800fba6 <memcpy+0xe>
 800fbb2:	bd10      	pop	{r4, pc}

0800fbb4 <memmove>:
 800fbb4:	4288      	cmp	r0, r1
 800fbb6:	b510      	push	{r4, lr}
 800fbb8:	eb01 0402 	add.w	r4, r1, r2
 800fbbc:	d902      	bls.n	800fbc4 <memmove+0x10>
 800fbbe:	4284      	cmp	r4, r0
 800fbc0:	4623      	mov	r3, r4
 800fbc2:	d807      	bhi.n	800fbd4 <memmove+0x20>
 800fbc4:	1e43      	subs	r3, r0, #1
 800fbc6:	42a1      	cmp	r1, r4
 800fbc8:	d008      	beq.n	800fbdc <memmove+0x28>
 800fbca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fbce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fbd2:	e7f8      	b.n	800fbc6 <memmove+0x12>
 800fbd4:	4402      	add	r2, r0
 800fbd6:	4601      	mov	r1, r0
 800fbd8:	428a      	cmp	r2, r1
 800fbda:	d100      	bne.n	800fbde <memmove+0x2a>
 800fbdc:	bd10      	pop	{r4, pc}
 800fbde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fbe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fbe6:	e7f7      	b.n	800fbd8 <memmove+0x24>

0800fbe8 <memset>:
 800fbe8:	4402      	add	r2, r0
 800fbea:	4603      	mov	r3, r0
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d100      	bne.n	800fbf2 <memset+0xa>
 800fbf0:	4770      	bx	lr
 800fbf2:	f803 1b01 	strb.w	r1, [r3], #1
 800fbf6:	e7f9      	b.n	800fbec <memset+0x4>

0800fbf8 <iprintf>:
 800fbf8:	b40f      	push	{r0, r1, r2, r3}
 800fbfa:	4b0a      	ldr	r3, [pc, #40]	; (800fc24 <iprintf+0x2c>)
 800fbfc:	b513      	push	{r0, r1, r4, lr}
 800fbfe:	681c      	ldr	r4, [r3, #0]
 800fc00:	b124      	cbz	r4, 800fc0c <iprintf+0x14>
 800fc02:	69a3      	ldr	r3, [r4, #24]
 800fc04:	b913      	cbnz	r3, 800fc0c <iprintf+0x14>
 800fc06:	4620      	mov	r0, r4
 800fc08:	f000 f8e2 	bl	800fdd0 <__sinit>
 800fc0c:	ab05      	add	r3, sp, #20
 800fc0e:	9a04      	ldr	r2, [sp, #16]
 800fc10:	68a1      	ldr	r1, [r4, #8]
 800fc12:	9301      	str	r3, [sp, #4]
 800fc14:	4620      	mov	r0, r4
 800fc16:	f000 fbfb 	bl	8010410 <_vfiprintf_r>
 800fc1a:	b002      	add	sp, #8
 800fc1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fc20:	b004      	add	sp, #16
 800fc22:	4770      	bx	lr
 800fc24:	2000002c 	.word	0x2000002c

0800fc28 <rand>:
 800fc28:	4b16      	ldr	r3, [pc, #88]	; (800fc84 <rand+0x5c>)
 800fc2a:	b510      	push	{r4, lr}
 800fc2c:	681c      	ldr	r4, [r3, #0]
 800fc2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fc30:	b9b3      	cbnz	r3, 800fc60 <rand+0x38>
 800fc32:	2018      	movs	r0, #24
 800fc34:	f000 f97e 	bl	800ff34 <malloc>
 800fc38:	63a0      	str	r0, [r4, #56]	; 0x38
 800fc3a:	b928      	cbnz	r0, 800fc48 <rand+0x20>
 800fc3c:	4602      	mov	r2, r0
 800fc3e:	4b12      	ldr	r3, [pc, #72]	; (800fc88 <rand+0x60>)
 800fc40:	4812      	ldr	r0, [pc, #72]	; (800fc8c <rand+0x64>)
 800fc42:	214e      	movs	r1, #78	; 0x4e
 800fc44:	f000 f84e 	bl	800fce4 <__assert_func>
 800fc48:	4a11      	ldr	r2, [pc, #68]	; (800fc90 <rand+0x68>)
 800fc4a:	4b12      	ldr	r3, [pc, #72]	; (800fc94 <rand+0x6c>)
 800fc4c:	e9c0 2300 	strd	r2, r3, [r0]
 800fc50:	4b11      	ldr	r3, [pc, #68]	; (800fc98 <rand+0x70>)
 800fc52:	6083      	str	r3, [r0, #8]
 800fc54:	230b      	movs	r3, #11
 800fc56:	8183      	strh	r3, [r0, #12]
 800fc58:	2201      	movs	r2, #1
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fc60:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800fc62:	4a0e      	ldr	r2, [pc, #56]	; (800fc9c <rand+0x74>)
 800fc64:	6920      	ldr	r0, [r4, #16]
 800fc66:	6963      	ldr	r3, [r4, #20]
 800fc68:	490d      	ldr	r1, [pc, #52]	; (800fca0 <rand+0x78>)
 800fc6a:	4342      	muls	r2, r0
 800fc6c:	fb01 2203 	mla	r2, r1, r3, r2
 800fc70:	fba0 0101 	umull	r0, r1, r0, r1
 800fc74:	1c43      	adds	r3, r0, #1
 800fc76:	eb42 0001 	adc.w	r0, r2, r1
 800fc7a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800fc7e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fc82:	bd10      	pop	{r4, pc}
 800fc84:	2000002c 	.word	0x2000002c
 800fc88:	08013c24 	.word	0x08013c24
 800fc8c:	08013c3b 	.word	0x08013c3b
 800fc90:	abcd330e 	.word	0xabcd330e
 800fc94:	e66d1234 	.word	0xe66d1234
 800fc98:	0005deec 	.word	0x0005deec
 800fc9c:	5851f42d 	.word	0x5851f42d
 800fca0:	4c957f2d 	.word	0x4c957f2d

0800fca4 <siprintf>:
 800fca4:	b40e      	push	{r1, r2, r3}
 800fca6:	b500      	push	{lr}
 800fca8:	b09c      	sub	sp, #112	; 0x70
 800fcaa:	ab1d      	add	r3, sp, #116	; 0x74
 800fcac:	9002      	str	r0, [sp, #8]
 800fcae:	9006      	str	r0, [sp, #24]
 800fcb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fcb4:	4809      	ldr	r0, [pc, #36]	; (800fcdc <siprintf+0x38>)
 800fcb6:	9107      	str	r1, [sp, #28]
 800fcb8:	9104      	str	r1, [sp, #16]
 800fcba:	4909      	ldr	r1, [pc, #36]	; (800fce0 <siprintf+0x3c>)
 800fcbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800fcc0:	9105      	str	r1, [sp, #20]
 800fcc2:	6800      	ldr	r0, [r0, #0]
 800fcc4:	9301      	str	r3, [sp, #4]
 800fcc6:	a902      	add	r1, sp, #8
 800fcc8:	f000 fa78 	bl	80101bc <_svfiprintf_r>
 800fccc:	9b02      	ldr	r3, [sp, #8]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	701a      	strb	r2, [r3, #0]
 800fcd2:	b01c      	add	sp, #112	; 0x70
 800fcd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fcd8:	b003      	add	sp, #12
 800fcda:	4770      	bx	lr
 800fcdc:	2000002c 	.word	0x2000002c
 800fce0:	ffff0208 	.word	0xffff0208

0800fce4 <__assert_func>:
 800fce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fce6:	4614      	mov	r4, r2
 800fce8:	461a      	mov	r2, r3
 800fcea:	4b09      	ldr	r3, [pc, #36]	; (800fd10 <__assert_func+0x2c>)
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	4605      	mov	r5, r0
 800fcf0:	68d8      	ldr	r0, [r3, #12]
 800fcf2:	b14c      	cbz	r4, 800fd08 <__assert_func+0x24>
 800fcf4:	4b07      	ldr	r3, [pc, #28]	; (800fd14 <__assert_func+0x30>)
 800fcf6:	9100      	str	r1, [sp, #0]
 800fcf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fcfc:	4906      	ldr	r1, [pc, #24]	; (800fd18 <__assert_func+0x34>)
 800fcfe:	462b      	mov	r3, r5
 800fd00:	f000 f8e4 	bl	800fecc <fiprintf>
 800fd04:	f000 ff6e 	bl	8010be4 <abort>
 800fd08:	4b04      	ldr	r3, [pc, #16]	; (800fd1c <__assert_func+0x38>)
 800fd0a:	461c      	mov	r4, r3
 800fd0c:	e7f3      	b.n	800fcf6 <__assert_func+0x12>
 800fd0e:	bf00      	nop
 800fd10:	2000002c 	.word	0x2000002c
 800fd14:	08013c96 	.word	0x08013c96
 800fd18:	08013ca3 	.word	0x08013ca3
 800fd1c:	08013cd1 	.word	0x08013cd1

0800fd20 <std>:
 800fd20:	2300      	movs	r3, #0
 800fd22:	b510      	push	{r4, lr}
 800fd24:	4604      	mov	r4, r0
 800fd26:	e9c0 3300 	strd	r3, r3, [r0]
 800fd2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fd2e:	6083      	str	r3, [r0, #8]
 800fd30:	8181      	strh	r1, [r0, #12]
 800fd32:	6643      	str	r3, [r0, #100]	; 0x64
 800fd34:	81c2      	strh	r2, [r0, #14]
 800fd36:	6183      	str	r3, [r0, #24]
 800fd38:	4619      	mov	r1, r3
 800fd3a:	2208      	movs	r2, #8
 800fd3c:	305c      	adds	r0, #92	; 0x5c
 800fd3e:	f7ff ff53 	bl	800fbe8 <memset>
 800fd42:	4b05      	ldr	r3, [pc, #20]	; (800fd58 <std+0x38>)
 800fd44:	6263      	str	r3, [r4, #36]	; 0x24
 800fd46:	4b05      	ldr	r3, [pc, #20]	; (800fd5c <std+0x3c>)
 800fd48:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd4a:	4b05      	ldr	r3, [pc, #20]	; (800fd60 <std+0x40>)
 800fd4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd4e:	4b05      	ldr	r3, [pc, #20]	; (800fd64 <std+0x44>)
 800fd50:	6224      	str	r4, [r4, #32]
 800fd52:	6323      	str	r3, [r4, #48]	; 0x30
 800fd54:	bd10      	pop	{r4, pc}
 800fd56:	bf00      	nop
 800fd58:	080109b9 	.word	0x080109b9
 800fd5c:	080109db 	.word	0x080109db
 800fd60:	08010a13 	.word	0x08010a13
 800fd64:	08010a37 	.word	0x08010a37

0800fd68 <_cleanup_r>:
 800fd68:	4901      	ldr	r1, [pc, #4]	; (800fd70 <_cleanup_r+0x8>)
 800fd6a:	f000 b8c1 	b.w	800fef0 <_fwalk_reent>
 800fd6e:	bf00      	nop
 800fd70:	08010d21 	.word	0x08010d21

0800fd74 <__sfmoreglue>:
 800fd74:	b570      	push	{r4, r5, r6, lr}
 800fd76:	2268      	movs	r2, #104	; 0x68
 800fd78:	1e4d      	subs	r5, r1, #1
 800fd7a:	4355      	muls	r5, r2
 800fd7c:	460e      	mov	r6, r1
 800fd7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd82:	f000 f94b 	bl	801001c <_malloc_r>
 800fd86:	4604      	mov	r4, r0
 800fd88:	b140      	cbz	r0, 800fd9c <__sfmoreglue+0x28>
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	e9c0 1600 	strd	r1, r6, [r0]
 800fd90:	300c      	adds	r0, #12
 800fd92:	60a0      	str	r0, [r4, #8]
 800fd94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd98:	f7ff ff26 	bl	800fbe8 <memset>
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	bd70      	pop	{r4, r5, r6, pc}

0800fda0 <__sfp_lock_acquire>:
 800fda0:	4801      	ldr	r0, [pc, #4]	; (800fda8 <__sfp_lock_acquire+0x8>)
 800fda2:	f000 b8c5 	b.w	800ff30 <__retarget_lock_acquire_recursive>
 800fda6:	bf00      	nop
 800fda8:	200084e9 	.word	0x200084e9

0800fdac <__sfp_lock_release>:
 800fdac:	4801      	ldr	r0, [pc, #4]	; (800fdb4 <__sfp_lock_release+0x8>)
 800fdae:	f000 b8c0 	b.w	800ff32 <__retarget_lock_release_recursive>
 800fdb2:	bf00      	nop
 800fdb4:	200084e9 	.word	0x200084e9

0800fdb8 <__sinit_lock_acquire>:
 800fdb8:	4801      	ldr	r0, [pc, #4]	; (800fdc0 <__sinit_lock_acquire+0x8>)
 800fdba:	f000 b8b9 	b.w	800ff30 <__retarget_lock_acquire_recursive>
 800fdbe:	bf00      	nop
 800fdc0:	200084ea 	.word	0x200084ea

0800fdc4 <__sinit_lock_release>:
 800fdc4:	4801      	ldr	r0, [pc, #4]	; (800fdcc <__sinit_lock_release+0x8>)
 800fdc6:	f000 b8b4 	b.w	800ff32 <__retarget_lock_release_recursive>
 800fdca:	bf00      	nop
 800fdcc:	200084ea 	.word	0x200084ea

0800fdd0 <__sinit>:
 800fdd0:	b510      	push	{r4, lr}
 800fdd2:	4604      	mov	r4, r0
 800fdd4:	f7ff fff0 	bl	800fdb8 <__sinit_lock_acquire>
 800fdd8:	69a3      	ldr	r3, [r4, #24]
 800fdda:	b11b      	cbz	r3, 800fde4 <__sinit+0x14>
 800fddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fde0:	f7ff bff0 	b.w	800fdc4 <__sinit_lock_release>
 800fde4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fde8:	6523      	str	r3, [r4, #80]	; 0x50
 800fdea:	4b13      	ldr	r3, [pc, #76]	; (800fe38 <__sinit+0x68>)
 800fdec:	4a13      	ldr	r2, [pc, #76]	; (800fe3c <__sinit+0x6c>)
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800fdf2:	42a3      	cmp	r3, r4
 800fdf4:	bf04      	itt	eq
 800fdf6:	2301      	moveq	r3, #1
 800fdf8:	61a3      	streq	r3, [r4, #24]
 800fdfa:	4620      	mov	r0, r4
 800fdfc:	f000 f820 	bl	800fe40 <__sfp>
 800fe00:	6060      	str	r0, [r4, #4]
 800fe02:	4620      	mov	r0, r4
 800fe04:	f000 f81c 	bl	800fe40 <__sfp>
 800fe08:	60a0      	str	r0, [r4, #8]
 800fe0a:	4620      	mov	r0, r4
 800fe0c:	f000 f818 	bl	800fe40 <__sfp>
 800fe10:	2200      	movs	r2, #0
 800fe12:	60e0      	str	r0, [r4, #12]
 800fe14:	2104      	movs	r1, #4
 800fe16:	6860      	ldr	r0, [r4, #4]
 800fe18:	f7ff ff82 	bl	800fd20 <std>
 800fe1c:	68a0      	ldr	r0, [r4, #8]
 800fe1e:	2201      	movs	r2, #1
 800fe20:	2109      	movs	r1, #9
 800fe22:	f7ff ff7d 	bl	800fd20 <std>
 800fe26:	68e0      	ldr	r0, [r4, #12]
 800fe28:	2202      	movs	r2, #2
 800fe2a:	2112      	movs	r1, #18
 800fe2c:	f7ff ff78 	bl	800fd20 <std>
 800fe30:	2301      	movs	r3, #1
 800fe32:	61a3      	str	r3, [r4, #24]
 800fe34:	e7d2      	b.n	800fddc <__sinit+0xc>
 800fe36:	bf00      	nop
 800fe38:	08013c20 	.word	0x08013c20
 800fe3c:	0800fd69 	.word	0x0800fd69

0800fe40 <__sfp>:
 800fe40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe42:	4607      	mov	r7, r0
 800fe44:	f7ff ffac 	bl	800fda0 <__sfp_lock_acquire>
 800fe48:	4b1e      	ldr	r3, [pc, #120]	; (800fec4 <__sfp+0x84>)
 800fe4a:	681e      	ldr	r6, [r3, #0]
 800fe4c:	69b3      	ldr	r3, [r6, #24]
 800fe4e:	b913      	cbnz	r3, 800fe56 <__sfp+0x16>
 800fe50:	4630      	mov	r0, r6
 800fe52:	f7ff ffbd 	bl	800fdd0 <__sinit>
 800fe56:	3648      	adds	r6, #72	; 0x48
 800fe58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fe5c:	3b01      	subs	r3, #1
 800fe5e:	d503      	bpl.n	800fe68 <__sfp+0x28>
 800fe60:	6833      	ldr	r3, [r6, #0]
 800fe62:	b30b      	cbz	r3, 800fea8 <__sfp+0x68>
 800fe64:	6836      	ldr	r6, [r6, #0]
 800fe66:	e7f7      	b.n	800fe58 <__sfp+0x18>
 800fe68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fe6c:	b9d5      	cbnz	r5, 800fea4 <__sfp+0x64>
 800fe6e:	4b16      	ldr	r3, [pc, #88]	; (800fec8 <__sfp+0x88>)
 800fe70:	60e3      	str	r3, [r4, #12]
 800fe72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fe76:	6665      	str	r5, [r4, #100]	; 0x64
 800fe78:	f000 f859 	bl	800ff2e <__retarget_lock_init_recursive>
 800fe7c:	f7ff ff96 	bl	800fdac <__sfp_lock_release>
 800fe80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fe84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fe88:	6025      	str	r5, [r4, #0]
 800fe8a:	61a5      	str	r5, [r4, #24]
 800fe8c:	2208      	movs	r2, #8
 800fe8e:	4629      	mov	r1, r5
 800fe90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fe94:	f7ff fea8 	bl	800fbe8 <memset>
 800fe98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fea0:	4620      	mov	r0, r4
 800fea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fea4:	3468      	adds	r4, #104	; 0x68
 800fea6:	e7d9      	b.n	800fe5c <__sfp+0x1c>
 800fea8:	2104      	movs	r1, #4
 800feaa:	4638      	mov	r0, r7
 800feac:	f7ff ff62 	bl	800fd74 <__sfmoreglue>
 800feb0:	4604      	mov	r4, r0
 800feb2:	6030      	str	r0, [r6, #0]
 800feb4:	2800      	cmp	r0, #0
 800feb6:	d1d5      	bne.n	800fe64 <__sfp+0x24>
 800feb8:	f7ff ff78 	bl	800fdac <__sfp_lock_release>
 800febc:	230c      	movs	r3, #12
 800febe:	603b      	str	r3, [r7, #0]
 800fec0:	e7ee      	b.n	800fea0 <__sfp+0x60>
 800fec2:	bf00      	nop
 800fec4:	08013c20 	.word	0x08013c20
 800fec8:	ffff0001 	.word	0xffff0001

0800fecc <fiprintf>:
 800fecc:	b40e      	push	{r1, r2, r3}
 800fece:	b503      	push	{r0, r1, lr}
 800fed0:	4601      	mov	r1, r0
 800fed2:	ab03      	add	r3, sp, #12
 800fed4:	4805      	ldr	r0, [pc, #20]	; (800feec <fiprintf+0x20>)
 800fed6:	f853 2b04 	ldr.w	r2, [r3], #4
 800feda:	6800      	ldr	r0, [r0, #0]
 800fedc:	9301      	str	r3, [sp, #4]
 800fede:	f000 fa97 	bl	8010410 <_vfiprintf_r>
 800fee2:	b002      	add	sp, #8
 800fee4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fee8:	b003      	add	sp, #12
 800feea:	4770      	bx	lr
 800feec:	2000002c 	.word	0x2000002c

0800fef0 <_fwalk_reent>:
 800fef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fef4:	4606      	mov	r6, r0
 800fef6:	4688      	mov	r8, r1
 800fef8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fefc:	2700      	movs	r7, #0
 800fefe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff02:	f1b9 0901 	subs.w	r9, r9, #1
 800ff06:	d505      	bpl.n	800ff14 <_fwalk_reent+0x24>
 800ff08:	6824      	ldr	r4, [r4, #0]
 800ff0a:	2c00      	cmp	r4, #0
 800ff0c:	d1f7      	bne.n	800fefe <_fwalk_reent+0xe>
 800ff0e:	4638      	mov	r0, r7
 800ff10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff14:	89ab      	ldrh	r3, [r5, #12]
 800ff16:	2b01      	cmp	r3, #1
 800ff18:	d907      	bls.n	800ff2a <_fwalk_reent+0x3a>
 800ff1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	d003      	beq.n	800ff2a <_fwalk_reent+0x3a>
 800ff22:	4629      	mov	r1, r5
 800ff24:	4630      	mov	r0, r6
 800ff26:	47c0      	blx	r8
 800ff28:	4307      	orrs	r7, r0
 800ff2a:	3568      	adds	r5, #104	; 0x68
 800ff2c:	e7e9      	b.n	800ff02 <_fwalk_reent+0x12>

0800ff2e <__retarget_lock_init_recursive>:
 800ff2e:	4770      	bx	lr

0800ff30 <__retarget_lock_acquire_recursive>:
 800ff30:	4770      	bx	lr

0800ff32 <__retarget_lock_release_recursive>:
 800ff32:	4770      	bx	lr

0800ff34 <malloc>:
 800ff34:	4b02      	ldr	r3, [pc, #8]	; (800ff40 <malloc+0xc>)
 800ff36:	4601      	mov	r1, r0
 800ff38:	6818      	ldr	r0, [r3, #0]
 800ff3a:	f000 b86f 	b.w	801001c <_malloc_r>
 800ff3e:	bf00      	nop
 800ff40:	2000002c 	.word	0x2000002c

0800ff44 <_free_r>:
 800ff44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff46:	2900      	cmp	r1, #0
 800ff48:	d044      	beq.n	800ffd4 <_free_r+0x90>
 800ff4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff4e:	9001      	str	r0, [sp, #4]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f1a1 0404 	sub.w	r4, r1, #4
 800ff56:	bfb8      	it	lt
 800ff58:	18e4      	addlt	r4, r4, r3
 800ff5a:	f000 ff95 	bl	8010e88 <__malloc_lock>
 800ff5e:	4a1e      	ldr	r2, [pc, #120]	; (800ffd8 <_free_r+0x94>)
 800ff60:	9801      	ldr	r0, [sp, #4]
 800ff62:	6813      	ldr	r3, [r2, #0]
 800ff64:	b933      	cbnz	r3, 800ff74 <_free_r+0x30>
 800ff66:	6063      	str	r3, [r4, #4]
 800ff68:	6014      	str	r4, [r2, #0]
 800ff6a:	b003      	add	sp, #12
 800ff6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ff70:	f000 bf90 	b.w	8010e94 <__malloc_unlock>
 800ff74:	42a3      	cmp	r3, r4
 800ff76:	d908      	bls.n	800ff8a <_free_r+0x46>
 800ff78:	6825      	ldr	r5, [r4, #0]
 800ff7a:	1961      	adds	r1, r4, r5
 800ff7c:	428b      	cmp	r3, r1
 800ff7e:	bf01      	itttt	eq
 800ff80:	6819      	ldreq	r1, [r3, #0]
 800ff82:	685b      	ldreq	r3, [r3, #4]
 800ff84:	1949      	addeq	r1, r1, r5
 800ff86:	6021      	streq	r1, [r4, #0]
 800ff88:	e7ed      	b.n	800ff66 <_free_r+0x22>
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	b10b      	cbz	r3, 800ff94 <_free_r+0x50>
 800ff90:	42a3      	cmp	r3, r4
 800ff92:	d9fa      	bls.n	800ff8a <_free_r+0x46>
 800ff94:	6811      	ldr	r1, [r2, #0]
 800ff96:	1855      	adds	r5, r2, r1
 800ff98:	42a5      	cmp	r5, r4
 800ff9a:	d10b      	bne.n	800ffb4 <_free_r+0x70>
 800ff9c:	6824      	ldr	r4, [r4, #0]
 800ff9e:	4421      	add	r1, r4
 800ffa0:	1854      	adds	r4, r2, r1
 800ffa2:	42a3      	cmp	r3, r4
 800ffa4:	6011      	str	r1, [r2, #0]
 800ffa6:	d1e0      	bne.n	800ff6a <_free_r+0x26>
 800ffa8:	681c      	ldr	r4, [r3, #0]
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	6053      	str	r3, [r2, #4]
 800ffae:	4421      	add	r1, r4
 800ffb0:	6011      	str	r1, [r2, #0]
 800ffb2:	e7da      	b.n	800ff6a <_free_r+0x26>
 800ffb4:	d902      	bls.n	800ffbc <_free_r+0x78>
 800ffb6:	230c      	movs	r3, #12
 800ffb8:	6003      	str	r3, [r0, #0]
 800ffba:	e7d6      	b.n	800ff6a <_free_r+0x26>
 800ffbc:	6825      	ldr	r5, [r4, #0]
 800ffbe:	1961      	adds	r1, r4, r5
 800ffc0:	428b      	cmp	r3, r1
 800ffc2:	bf04      	itt	eq
 800ffc4:	6819      	ldreq	r1, [r3, #0]
 800ffc6:	685b      	ldreq	r3, [r3, #4]
 800ffc8:	6063      	str	r3, [r4, #4]
 800ffca:	bf04      	itt	eq
 800ffcc:	1949      	addeq	r1, r1, r5
 800ffce:	6021      	streq	r1, [r4, #0]
 800ffd0:	6054      	str	r4, [r2, #4]
 800ffd2:	e7ca      	b.n	800ff6a <_free_r+0x26>
 800ffd4:	b003      	add	sp, #12
 800ffd6:	bd30      	pop	{r4, r5, pc}
 800ffd8:	200084ec 	.word	0x200084ec

0800ffdc <sbrk_aligned>:
 800ffdc:	b570      	push	{r4, r5, r6, lr}
 800ffde:	4e0e      	ldr	r6, [pc, #56]	; (8010018 <sbrk_aligned+0x3c>)
 800ffe0:	460c      	mov	r4, r1
 800ffe2:	6831      	ldr	r1, [r6, #0]
 800ffe4:	4605      	mov	r5, r0
 800ffe6:	b911      	cbnz	r1, 800ffee <sbrk_aligned+0x12>
 800ffe8:	f000 fcd6 	bl	8010998 <_sbrk_r>
 800ffec:	6030      	str	r0, [r6, #0]
 800ffee:	4621      	mov	r1, r4
 800fff0:	4628      	mov	r0, r5
 800fff2:	f000 fcd1 	bl	8010998 <_sbrk_r>
 800fff6:	1c43      	adds	r3, r0, #1
 800fff8:	d00a      	beq.n	8010010 <sbrk_aligned+0x34>
 800fffa:	1cc4      	adds	r4, r0, #3
 800fffc:	f024 0403 	bic.w	r4, r4, #3
 8010000:	42a0      	cmp	r0, r4
 8010002:	d007      	beq.n	8010014 <sbrk_aligned+0x38>
 8010004:	1a21      	subs	r1, r4, r0
 8010006:	4628      	mov	r0, r5
 8010008:	f000 fcc6 	bl	8010998 <_sbrk_r>
 801000c:	3001      	adds	r0, #1
 801000e:	d101      	bne.n	8010014 <sbrk_aligned+0x38>
 8010010:	f04f 34ff 	mov.w	r4, #4294967295
 8010014:	4620      	mov	r0, r4
 8010016:	bd70      	pop	{r4, r5, r6, pc}
 8010018:	200084f0 	.word	0x200084f0

0801001c <_malloc_r>:
 801001c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010020:	1ccd      	adds	r5, r1, #3
 8010022:	f025 0503 	bic.w	r5, r5, #3
 8010026:	3508      	adds	r5, #8
 8010028:	2d0c      	cmp	r5, #12
 801002a:	bf38      	it	cc
 801002c:	250c      	movcc	r5, #12
 801002e:	2d00      	cmp	r5, #0
 8010030:	4607      	mov	r7, r0
 8010032:	db01      	blt.n	8010038 <_malloc_r+0x1c>
 8010034:	42a9      	cmp	r1, r5
 8010036:	d905      	bls.n	8010044 <_malloc_r+0x28>
 8010038:	230c      	movs	r3, #12
 801003a:	603b      	str	r3, [r7, #0]
 801003c:	2600      	movs	r6, #0
 801003e:	4630      	mov	r0, r6
 8010040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010044:	4e2e      	ldr	r6, [pc, #184]	; (8010100 <_malloc_r+0xe4>)
 8010046:	f000 ff1f 	bl	8010e88 <__malloc_lock>
 801004a:	6833      	ldr	r3, [r6, #0]
 801004c:	461c      	mov	r4, r3
 801004e:	bb34      	cbnz	r4, 801009e <_malloc_r+0x82>
 8010050:	4629      	mov	r1, r5
 8010052:	4638      	mov	r0, r7
 8010054:	f7ff ffc2 	bl	800ffdc <sbrk_aligned>
 8010058:	1c43      	adds	r3, r0, #1
 801005a:	4604      	mov	r4, r0
 801005c:	d14d      	bne.n	80100fa <_malloc_r+0xde>
 801005e:	6834      	ldr	r4, [r6, #0]
 8010060:	4626      	mov	r6, r4
 8010062:	2e00      	cmp	r6, #0
 8010064:	d140      	bne.n	80100e8 <_malloc_r+0xcc>
 8010066:	6823      	ldr	r3, [r4, #0]
 8010068:	4631      	mov	r1, r6
 801006a:	4638      	mov	r0, r7
 801006c:	eb04 0803 	add.w	r8, r4, r3
 8010070:	f000 fc92 	bl	8010998 <_sbrk_r>
 8010074:	4580      	cmp	r8, r0
 8010076:	d13a      	bne.n	80100ee <_malloc_r+0xd2>
 8010078:	6821      	ldr	r1, [r4, #0]
 801007a:	3503      	adds	r5, #3
 801007c:	1a6d      	subs	r5, r5, r1
 801007e:	f025 0503 	bic.w	r5, r5, #3
 8010082:	3508      	adds	r5, #8
 8010084:	2d0c      	cmp	r5, #12
 8010086:	bf38      	it	cc
 8010088:	250c      	movcc	r5, #12
 801008a:	4629      	mov	r1, r5
 801008c:	4638      	mov	r0, r7
 801008e:	f7ff ffa5 	bl	800ffdc <sbrk_aligned>
 8010092:	3001      	adds	r0, #1
 8010094:	d02b      	beq.n	80100ee <_malloc_r+0xd2>
 8010096:	6823      	ldr	r3, [r4, #0]
 8010098:	442b      	add	r3, r5
 801009a:	6023      	str	r3, [r4, #0]
 801009c:	e00e      	b.n	80100bc <_malloc_r+0xa0>
 801009e:	6822      	ldr	r2, [r4, #0]
 80100a0:	1b52      	subs	r2, r2, r5
 80100a2:	d41e      	bmi.n	80100e2 <_malloc_r+0xc6>
 80100a4:	2a0b      	cmp	r2, #11
 80100a6:	d916      	bls.n	80100d6 <_malloc_r+0xba>
 80100a8:	1961      	adds	r1, r4, r5
 80100aa:	42a3      	cmp	r3, r4
 80100ac:	6025      	str	r5, [r4, #0]
 80100ae:	bf18      	it	ne
 80100b0:	6059      	strne	r1, [r3, #4]
 80100b2:	6863      	ldr	r3, [r4, #4]
 80100b4:	bf08      	it	eq
 80100b6:	6031      	streq	r1, [r6, #0]
 80100b8:	5162      	str	r2, [r4, r5]
 80100ba:	604b      	str	r3, [r1, #4]
 80100bc:	4638      	mov	r0, r7
 80100be:	f104 060b 	add.w	r6, r4, #11
 80100c2:	f000 fee7 	bl	8010e94 <__malloc_unlock>
 80100c6:	f026 0607 	bic.w	r6, r6, #7
 80100ca:	1d23      	adds	r3, r4, #4
 80100cc:	1af2      	subs	r2, r6, r3
 80100ce:	d0b6      	beq.n	801003e <_malloc_r+0x22>
 80100d0:	1b9b      	subs	r3, r3, r6
 80100d2:	50a3      	str	r3, [r4, r2]
 80100d4:	e7b3      	b.n	801003e <_malloc_r+0x22>
 80100d6:	6862      	ldr	r2, [r4, #4]
 80100d8:	42a3      	cmp	r3, r4
 80100da:	bf0c      	ite	eq
 80100dc:	6032      	streq	r2, [r6, #0]
 80100de:	605a      	strne	r2, [r3, #4]
 80100e0:	e7ec      	b.n	80100bc <_malloc_r+0xa0>
 80100e2:	4623      	mov	r3, r4
 80100e4:	6864      	ldr	r4, [r4, #4]
 80100e6:	e7b2      	b.n	801004e <_malloc_r+0x32>
 80100e8:	4634      	mov	r4, r6
 80100ea:	6876      	ldr	r6, [r6, #4]
 80100ec:	e7b9      	b.n	8010062 <_malloc_r+0x46>
 80100ee:	230c      	movs	r3, #12
 80100f0:	603b      	str	r3, [r7, #0]
 80100f2:	4638      	mov	r0, r7
 80100f4:	f000 fece 	bl	8010e94 <__malloc_unlock>
 80100f8:	e7a1      	b.n	801003e <_malloc_r+0x22>
 80100fa:	6025      	str	r5, [r4, #0]
 80100fc:	e7de      	b.n	80100bc <_malloc_r+0xa0>
 80100fe:	bf00      	nop
 8010100:	200084ec 	.word	0x200084ec

08010104 <__ssputs_r>:
 8010104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010108:	688e      	ldr	r6, [r1, #8]
 801010a:	429e      	cmp	r6, r3
 801010c:	4682      	mov	sl, r0
 801010e:	460c      	mov	r4, r1
 8010110:	4690      	mov	r8, r2
 8010112:	461f      	mov	r7, r3
 8010114:	d838      	bhi.n	8010188 <__ssputs_r+0x84>
 8010116:	898a      	ldrh	r2, [r1, #12]
 8010118:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801011c:	d032      	beq.n	8010184 <__ssputs_r+0x80>
 801011e:	6825      	ldr	r5, [r4, #0]
 8010120:	6909      	ldr	r1, [r1, #16]
 8010122:	eba5 0901 	sub.w	r9, r5, r1
 8010126:	6965      	ldr	r5, [r4, #20]
 8010128:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801012c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010130:	3301      	adds	r3, #1
 8010132:	444b      	add	r3, r9
 8010134:	106d      	asrs	r5, r5, #1
 8010136:	429d      	cmp	r5, r3
 8010138:	bf38      	it	cc
 801013a:	461d      	movcc	r5, r3
 801013c:	0553      	lsls	r3, r2, #21
 801013e:	d531      	bpl.n	80101a4 <__ssputs_r+0xa0>
 8010140:	4629      	mov	r1, r5
 8010142:	f7ff ff6b 	bl	801001c <_malloc_r>
 8010146:	4606      	mov	r6, r0
 8010148:	b950      	cbnz	r0, 8010160 <__ssputs_r+0x5c>
 801014a:	230c      	movs	r3, #12
 801014c:	f8ca 3000 	str.w	r3, [sl]
 8010150:	89a3      	ldrh	r3, [r4, #12]
 8010152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010156:	81a3      	strh	r3, [r4, #12]
 8010158:	f04f 30ff 	mov.w	r0, #4294967295
 801015c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010160:	6921      	ldr	r1, [r4, #16]
 8010162:	464a      	mov	r2, r9
 8010164:	f7ff fd18 	bl	800fb98 <memcpy>
 8010168:	89a3      	ldrh	r3, [r4, #12]
 801016a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801016e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010172:	81a3      	strh	r3, [r4, #12]
 8010174:	6126      	str	r6, [r4, #16]
 8010176:	6165      	str	r5, [r4, #20]
 8010178:	444e      	add	r6, r9
 801017a:	eba5 0509 	sub.w	r5, r5, r9
 801017e:	6026      	str	r6, [r4, #0]
 8010180:	60a5      	str	r5, [r4, #8]
 8010182:	463e      	mov	r6, r7
 8010184:	42be      	cmp	r6, r7
 8010186:	d900      	bls.n	801018a <__ssputs_r+0x86>
 8010188:	463e      	mov	r6, r7
 801018a:	6820      	ldr	r0, [r4, #0]
 801018c:	4632      	mov	r2, r6
 801018e:	4641      	mov	r1, r8
 8010190:	f7ff fd10 	bl	800fbb4 <memmove>
 8010194:	68a3      	ldr	r3, [r4, #8]
 8010196:	1b9b      	subs	r3, r3, r6
 8010198:	60a3      	str	r3, [r4, #8]
 801019a:	6823      	ldr	r3, [r4, #0]
 801019c:	4433      	add	r3, r6
 801019e:	6023      	str	r3, [r4, #0]
 80101a0:	2000      	movs	r0, #0
 80101a2:	e7db      	b.n	801015c <__ssputs_r+0x58>
 80101a4:	462a      	mov	r2, r5
 80101a6:	f000 fe7b 	bl	8010ea0 <_realloc_r>
 80101aa:	4606      	mov	r6, r0
 80101ac:	2800      	cmp	r0, #0
 80101ae:	d1e1      	bne.n	8010174 <__ssputs_r+0x70>
 80101b0:	6921      	ldr	r1, [r4, #16]
 80101b2:	4650      	mov	r0, sl
 80101b4:	f7ff fec6 	bl	800ff44 <_free_r>
 80101b8:	e7c7      	b.n	801014a <__ssputs_r+0x46>
	...

080101bc <_svfiprintf_r>:
 80101bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101c0:	4698      	mov	r8, r3
 80101c2:	898b      	ldrh	r3, [r1, #12]
 80101c4:	061b      	lsls	r3, r3, #24
 80101c6:	b09d      	sub	sp, #116	; 0x74
 80101c8:	4607      	mov	r7, r0
 80101ca:	460d      	mov	r5, r1
 80101cc:	4614      	mov	r4, r2
 80101ce:	d50e      	bpl.n	80101ee <_svfiprintf_r+0x32>
 80101d0:	690b      	ldr	r3, [r1, #16]
 80101d2:	b963      	cbnz	r3, 80101ee <_svfiprintf_r+0x32>
 80101d4:	2140      	movs	r1, #64	; 0x40
 80101d6:	f7ff ff21 	bl	801001c <_malloc_r>
 80101da:	6028      	str	r0, [r5, #0]
 80101dc:	6128      	str	r0, [r5, #16]
 80101de:	b920      	cbnz	r0, 80101ea <_svfiprintf_r+0x2e>
 80101e0:	230c      	movs	r3, #12
 80101e2:	603b      	str	r3, [r7, #0]
 80101e4:	f04f 30ff 	mov.w	r0, #4294967295
 80101e8:	e0d1      	b.n	801038e <_svfiprintf_r+0x1d2>
 80101ea:	2340      	movs	r3, #64	; 0x40
 80101ec:	616b      	str	r3, [r5, #20]
 80101ee:	2300      	movs	r3, #0
 80101f0:	9309      	str	r3, [sp, #36]	; 0x24
 80101f2:	2320      	movs	r3, #32
 80101f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80101f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80101fc:	2330      	movs	r3, #48	; 0x30
 80101fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80103a8 <_svfiprintf_r+0x1ec>
 8010202:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010206:	f04f 0901 	mov.w	r9, #1
 801020a:	4623      	mov	r3, r4
 801020c:	469a      	mov	sl, r3
 801020e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010212:	b10a      	cbz	r2, 8010218 <_svfiprintf_r+0x5c>
 8010214:	2a25      	cmp	r2, #37	; 0x25
 8010216:	d1f9      	bne.n	801020c <_svfiprintf_r+0x50>
 8010218:	ebba 0b04 	subs.w	fp, sl, r4
 801021c:	d00b      	beq.n	8010236 <_svfiprintf_r+0x7a>
 801021e:	465b      	mov	r3, fp
 8010220:	4622      	mov	r2, r4
 8010222:	4629      	mov	r1, r5
 8010224:	4638      	mov	r0, r7
 8010226:	f7ff ff6d 	bl	8010104 <__ssputs_r>
 801022a:	3001      	adds	r0, #1
 801022c:	f000 80aa 	beq.w	8010384 <_svfiprintf_r+0x1c8>
 8010230:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010232:	445a      	add	r2, fp
 8010234:	9209      	str	r2, [sp, #36]	; 0x24
 8010236:	f89a 3000 	ldrb.w	r3, [sl]
 801023a:	2b00      	cmp	r3, #0
 801023c:	f000 80a2 	beq.w	8010384 <_svfiprintf_r+0x1c8>
 8010240:	2300      	movs	r3, #0
 8010242:	f04f 32ff 	mov.w	r2, #4294967295
 8010246:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801024a:	f10a 0a01 	add.w	sl, sl, #1
 801024e:	9304      	str	r3, [sp, #16]
 8010250:	9307      	str	r3, [sp, #28]
 8010252:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010256:	931a      	str	r3, [sp, #104]	; 0x68
 8010258:	4654      	mov	r4, sl
 801025a:	2205      	movs	r2, #5
 801025c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010260:	4851      	ldr	r0, [pc, #324]	; (80103a8 <_svfiprintf_r+0x1ec>)
 8010262:	f7ef ffdd 	bl	8000220 <memchr>
 8010266:	9a04      	ldr	r2, [sp, #16]
 8010268:	b9d8      	cbnz	r0, 80102a2 <_svfiprintf_r+0xe6>
 801026a:	06d0      	lsls	r0, r2, #27
 801026c:	bf44      	itt	mi
 801026e:	2320      	movmi	r3, #32
 8010270:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010274:	0711      	lsls	r1, r2, #28
 8010276:	bf44      	itt	mi
 8010278:	232b      	movmi	r3, #43	; 0x2b
 801027a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801027e:	f89a 3000 	ldrb.w	r3, [sl]
 8010282:	2b2a      	cmp	r3, #42	; 0x2a
 8010284:	d015      	beq.n	80102b2 <_svfiprintf_r+0xf6>
 8010286:	9a07      	ldr	r2, [sp, #28]
 8010288:	4654      	mov	r4, sl
 801028a:	2000      	movs	r0, #0
 801028c:	f04f 0c0a 	mov.w	ip, #10
 8010290:	4621      	mov	r1, r4
 8010292:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010296:	3b30      	subs	r3, #48	; 0x30
 8010298:	2b09      	cmp	r3, #9
 801029a:	d94e      	bls.n	801033a <_svfiprintf_r+0x17e>
 801029c:	b1b0      	cbz	r0, 80102cc <_svfiprintf_r+0x110>
 801029e:	9207      	str	r2, [sp, #28]
 80102a0:	e014      	b.n	80102cc <_svfiprintf_r+0x110>
 80102a2:	eba0 0308 	sub.w	r3, r0, r8
 80102a6:	fa09 f303 	lsl.w	r3, r9, r3
 80102aa:	4313      	orrs	r3, r2
 80102ac:	9304      	str	r3, [sp, #16]
 80102ae:	46a2      	mov	sl, r4
 80102b0:	e7d2      	b.n	8010258 <_svfiprintf_r+0x9c>
 80102b2:	9b03      	ldr	r3, [sp, #12]
 80102b4:	1d19      	adds	r1, r3, #4
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	9103      	str	r1, [sp, #12]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	bfbb      	ittet	lt
 80102be:	425b      	neglt	r3, r3
 80102c0:	f042 0202 	orrlt.w	r2, r2, #2
 80102c4:	9307      	strge	r3, [sp, #28]
 80102c6:	9307      	strlt	r3, [sp, #28]
 80102c8:	bfb8      	it	lt
 80102ca:	9204      	strlt	r2, [sp, #16]
 80102cc:	7823      	ldrb	r3, [r4, #0]
 80102ce:	2b2e      	cmp	r3, #46	; 0x2e
 80102d0:	d10c      	bne.n	80102ec <_svfiprintf_r+0x130>
 80102d2:	7863      	ldrb	r3, [r4, #1]
 80102d4:	2b2a      	cmp	r3, #42	; 0x2a
 80102d6:	d135      	bne.n	8010344 <_svfiprintf_r+0x188>
 80102d8:	9b03      	ldr	r3, [sp, #12]
 80102da:	1d1a      	adds	r2, r3, #4
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	9203      	str	r2, [sp, #12]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	bfb8      	it	lt
 80102e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80102e8:	3402      	adds	r4, #2
 80102ea:	9305      	str	r3, [sp, #20]
 80102ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80103b8 <_svfiprintf_r+0x1fc>
 80102f0:	7821      	ldrb	r1, [r4, #0]
 80102f2:	2203      	movs	r2, #3
 80102f4:	4650      	mov	r0, sl
 80102f6:	f7ef ff93 	bl	8000220 <memchr>
 80102fa:	b140      	cbz	r0, 801030e <_svfiprintf_r+0x152>
 80102fc:	2340      	movs	r3, #64	; 0x40
 80102fe:	eba0 000a 	sub.w	r0, r0, sl
 8010302:	fa03 f000 	lsl.w	r0, r3, r0
 8010306:	9b04      	ldr	r3, [sp, #16]
 8010308:	4303      	orrs	r3, r0
 801030a:	3401      	adds	r4, #1
 801030c:	9304      	str	r3, [sp, #16]
 801030e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010312:	4826      	ldr	r0, [pc, #152]	; (80103ac <_svfiprintf_r+0x1f0>)
 8010314:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010318:	2206      	movs	r2, #6
 801031a:	f7ef ff81 	bl	8000220 <memchr>
 801031e:	2800      	cmp	r0, #0
 8010320:	d038      	beq.n	8010394 <_svfiprintf_r+0x1d8>
 8010322:	4b23      	ldr	r3, [pc, #140]	; (80103b0 <_svfiprintf_r+0x1f4>)
 8010324:	bb1b      	cbnz	r3, 801036e <_svfiprintf_r+0x1b2>
 8010326:	9b03      	ldr	r3, [sp, #12]
 8010328:	3307      	adds	r3, #7
 801032a:	f023 0307 	bic.w	r3, r3, #7
 801032e:	3308      	adds	r3, #8
 8010330:	9303      	str	r3, [sp, #12]
 8010332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010334:	4433      	add	r3, r6
 8010336:	9309      	str	r3, [sp, #36]	; 0x24
 8010338:	e767      	b.n	801020a <_svfiprintf_r+0x4e>
 801033a:	fb0c 3202 	mla	r2, ip, r2, r3
 801033e:	460c      	mov	r4, r1
 8010340:	2001      	movs	r0, #1
 8010342:	e7a5      	b.n	8010290 <_svfiprintf_r+0xd4>
 8010344:	2300      	movs	r3, #0
 8010346:	3401      	adds	r4, #1
 8010348:	9305      	str	r3, [sp, #20]
 801034a:	4619      	mov	r1, r3
 801034c:	f04f 0c0a 	mov.w	ip, #10
 8010350:	4620      	mov	r0, r4
 8010352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010356:	3a30      	subs	r2, #48	; 0x30
 8010358:	2a09      	cmp	r2, #9
 801035a:	d903      	bls.n	8010364 <_svfiprintf_r+0x1a8>
 801035c:	2b00      	cmp	r3, #0
 801035e:	d0c5      	beq.n	80102ec <_svfiprintf_r+0x130>
 8010360:	9105      	str	r1, [sp, #20]
 8010362:	e7c3      	b.n	80102ec <_svfiprintf_r+0x130>
 8010364:	fb0c 2101 	mla	r1, ip, r1, r2
 8010368:	4604      	mov	r4, r0
 801036a:	2301      	movs	r3, #1
 801036c:	e7f0      	b.n	8010350 <_svfiprintf_r+0x194>
 801036e:	ab03      	add	r3, sp, #12
 8010370:	9300      	str	r3, [sp, #0]
 8010372:	462a      	mov	r2, r5
 8010374:	4b0f      	ldr	r3, [pc, #60]	; (80103b4 <_svfiprintf_r+0x1f8>)
 8010376:	a904      	add	r1, sp, #16
 8010378:	4638      	mov	r0, r7
 801037a:	f3af 8000 	nop.w
 801037e:	1c42      	adds	r2, r0, #1
 8010380:	4606      	mov	r6, r0
 8010382:	d1d6      	bne.n	8010332 <_svfiprintf_r+0x176>
 8010384:	89ab      	ldrh	r3, [r5, #12]
 8010386:	065b      	lsls	r3, r3, #25
 8010388:	f53f af2c 	bmi.w	80101e4 <_svfiprintf_r+0x28>
 801038c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801038e:	b01d      	add	sp, #116	; 0x74
 8010390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010394:	ab03      	add	r3, sp, #12
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	462a      	mov	r2, r5
 801039a:	4b06      	ldr	r3, [pc, #24]	; (80103b4 <_svfiprintf_r+0x1f8>)
 801039c:	a904      	add	r1, sp, #16
 801039e:	4638      	mov	r0, r7
 80103a0:	f000 f9d4 	bl	801074c <_printf_i>
 80103a4:	e7eb      	b.n	801037e <_svfiprintf_r+0x1c2>
 80103a6:	bf00      	nop
 80103a8:	08013d34 	.word	0x08013d34
 80103ac:	08013d3e 	.word	0x08013d3e
 80103b0:	00000000 	.word	0x00000000
 80103b4:	08010105 	.word	0x08010105
 80103b8:	08013d3a 	.word	0x08013d3a

080103bc <__sfputc_r>:
 80103bc:	6893      	ldr	r3, [r2, #8]
 80103be:	3b01      	subs	r3, #1
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	b410      	push	{r4}
 80103c4:	6093      	str	r3, [r2, #8]
 80103c6:	da08      	bge.n	80103da <__sfputc_r+0x1e>
 80103c8:	6994      	ldr	r4, [r2, #24]
 80103ca:	42a3      	cmp	r3, r4
 80103cc:	db01      	blt.n	80103d2 <__sfputc_r+0x16>
 80103ce:	290a      	cmp	r1, #10
 80103d0:	d103      	bne.n	80103da <__sfputc_r+0x1e>
 80103d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103d6:	f000 bb33 	b.w	8010a40 <__swbuf_r>
 80103da:	6813      	ldr	r3, [r2, #0]
 80103dc:	1c58      	adds	r0, r3, #1
 80103de:	6010      	str	r0, [r2, #0]
 80103e0:	7019      	strb	r1, [r3, #0]
 80103e2:	4608      	mov	r0, r1
 80103e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103e8:	4770      	bx	lr

080103ea <__sfputs_r>:
 80103ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103ec:	4606      	mov	r6, r0
 80103ee:	460f      	mov	r7, r1
 80103f0:	4614      	mov	r4, r2
 80103f2:	18d5      	adds	r5, r2, r3
 80103f4:	42ac      	cmp	r4, r5
 80103f6:	d101      	bne.n	80103fc <__sfputs_r+0x12>
 80103f8:	2000      	movs	r0, #0
 80103fa:	e007      	b.n	801040c <__sfputs_r+0x22>
 80103fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010400:	463a      	mov	r2, r7
 8010402:	4630      	mov	r0, r6
 8010404:	f7ff ffda 	bl	80103bc <__sfputc_r>
 8010408:	1c43      	adds	r3, r0, #1
 801040a:	d1f3      	bne.n	80103f4 <__sfputs_r+0xa>
 801040c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010410 <_vfiprintf_r>:
 8010410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010414:	460d      	mov	r5, r1
 8010416:	b09d      	sub	sp, #116	; 0x74
 8010418:	4614      	mov	r4, r2
 801041a:	4698      	mov	r8, r3
 801041c:	4606      	mov	r6, r0
 801041e:	b118      	cbz	r0, 8010428 <_vfiprintf_r+0x18>
 8010420:	6983      	ldr	r3, [r0, #24]
 8010422:	b90b      	cbnz	r3, 8010428 <_vfiprintf_r+0x18>
 8010424:	f7ff fcd4 	bl	800fdd0 <__sinit>
 8010428:	4b89      	ldr	r3, [pc, #548]	; (8010650 <_vfiprintf_r+0x240>)
 801042a:	429d      	cmp	r5, r3
 801042c:	d11b      	bne.n	8010466 <_vfiprintf_r+0x56>
 801042e:	6875      	ldr	r5, [r6, #4]
 8010430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010432:	07d9      	lsls	r1, r3, #31
 8010434:	d405      	bmi.n	8010442 <_vfiprintf_r+0x32>
 8010436:	89ab      	ldrh	r3, [r5, #12]
 8010438:	059a      	lsls	r2, r3, #22
 801043a:	d402      	bmi.n	8010442 <_vfiprintf_r+0x32>
 801043c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801043e:	f7ff fd77 	bl	800ff30 <__retarget_lock_acquire_recursive>
 8010442:	89ab      	ldrh	r3, [r5, #12]
 8010444:	071b      	lsls	r3, r3, #28
 8010446:	d501      	bpl.n	801044c <_vfiprintf_r+0x3c>
 8010448:	692b      	ldr	r3, [r5, #16]
 801044a:	b9eb      	cbnz	r3, 8010488 <_vfiprintf_r+0x78>
 801044c:	4629      	mov	r1, r5
 801044e:	4630      	mov	r0, r6
 8010450:	f000 fb5a 	bl	8010b08 <__swsetup_r>
 8010454:	b1c0      	cbz	r0, 8010488 <_vfiprintf_r+0x78>
 8010456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010458:	07dc      	lsls	r4, r3, #31
 801045a:	d50e      	bpl.n	801047a <_vfiprintf_r+0x6a>
 801045c:	f04f 30ff 	mov.w	r0, #4294967295
 8010460:	b01d      	add	sp, #116	; 0x74
 8010462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010466:	4b7b      	ldr	r3, [pc, #492]	; (8010654 <_vfiprintf_r+0x244>)
 8010468:	429d      	cmp	r5, r3
 801046a:	d101      	bne.n	8010470 <_vfiprintf_r+0x60>
 801046c:	68b5      	ldr	r5, [r6, #8]
 801046e:	e7df      	b.n	8010430 <_vfiprintf_r+0x20>
 8010470:	4b79      	ldr	r3, [pc, #484]	; (8010658 <_vfiprintf_r+0x248>)
 8010472:	429d      	cmp	r5, r3
 8010474:	bf08      	it	eq
 8010476:	68f5      	ldreq	r5, [r6, #12]
 8010478:	e7da      	b.n	8010430 <_vfiprintf_r+0x20>
 801047a:	89ab      	ldrh	r3, [r5, #12]
 801047c:	0598      	lsls	r0, r3, #22
 801047e:	d4ed      	bmi.n	801045c <_vfiprintf_r+0x4c>
 8010480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010482:	f7ff fd56 	bl	800ff32 <__retarget_lock_release_recursive>
 8010486:	e7e9      	b.n	801045c <_vfiprintf_r+0x4c>
 8010488:	2300      	movs	r3, #0
 801048a:	9309      	str	r3, [sp, #36]	; 0x24
 801048c:	2320      	movs	r3, #32
 801048e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010492:	f8cd 800c 	str.w	r8, [sp, #12]
 8010496:	2330      	movs	r3, #48	; 0x30
 8010498:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801065c <_vfiprintf_r+0x24c>
 801049c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80104a0:	f04f 0901 	mov.w	r9, #1
 80104a4:	4623      	mov	r3, r4
 80104a6:	469a      	mov	sl, r3
 80104a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104ac:	b10a      	cbz	r2, 80104b2 <_vfiprintf_r+0xa2>
 80104ae:	2a25      	cmp	r2, #37	; 0x25
 80104b0:	d1f9      	bne.n	80104a6 <_vfiprintf_r+0x96>
 80104b2:	ebba 0b04 	subs.w	fp, sl, r4
 80104b6:	d00b      	beq.n	80104d0 <_vfiprintf_r+0xc0>
 80104b8:	465b      	mov	r3, fp
 80104ba:	4622      	mov	r2, r4
 80104bc:	4629      	mov	r1, r5
 80104be:	4630      	mov	r0, r6
 80104c0:	f7ff ff93 	bl	80103ea <__sfputs_r>
 80104c4:	3001      	adds	r0, #1
 80104c6:	f000 80aa 	beq.w	801061e <_vfiprintf_r+0x20e>
 80104ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104cc:	445a      	add	r2, fp
 80104ce:	9209      	str	r2, [sp, #36]	; 0x24
 80104d0:	f89a 3000 	ldrb.w	r3, [sl]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	f000 80a2 	beq.w	801061e <_vfiprintf_r+0x20e>
 80104da:	2300      	movs	r3, #0
 80104dc:	f04f 32ff 	mov.w	r2, #4294967295
 80104e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104e4:	f10a 0a01 	add.w	sl, sl, #1
 80104e8:	9304      	str	r3, [sp, #16]
 80104ea:	9307      	str	r3, [sp, #28]
 80104ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104f0:	931a      	str	r3, [sp, #104]	; 0x68
 80104f2:	4654      	mov	r4, sl
 80104f4:	2205      	movs	r2, #5
 80104f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104fa:	4858      	ldr	r0, [pc, #352]	; (801065c <_vfiprintf_r+0x24c>)
 80104fc:	f7ef fe90 	bl	8000220 <memchr>
 8010500:	9a04      	ldr	r2, [sp, #16]
 8010502:	b9d8      	cbnz	r0, 801053c <_vfiprintf_r+0x12c>
 8010504:	06d1      	lsls	r1, r2, #27
 8010506:	bf44      	itt	mi
 8010508:	2320      	movmi	r3, #32
 801050a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801050e:	0713      	lsls	r3, r2, #28
 8010510:	bf44      	itt	mi
 8010512:	232b      	movmi	r3, #43	; 0x2b
 8010514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010518:	f89a 3000 	ldrb.w	r3, [sl]
 801051c:	2b2a      	cmp	r3, #42	; 0x2a
 801051e:	d015      	beq.n	801054c <_vfiprintf_r+0x13c>
 8010520:	9a07      	ldr	r2, [sp, #28]
 8010522:	4654      	mov	r4, sl
 8010524:	2000      	movs	r0, #0
 8010526:	f04f 0c0a 	mov.w	ip, #10
 801052a:	4621      	mov	r1, r4
 801052c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010530:	3b30      	subs	r3, #48	; 0x30
 8010532:	2b09      	cmp	r3, #9
 8010534:	d94e      	bls.n	80105d4 <_vfiprintf_r+0x1c4>
 8010536:	b1b0      	cbz	r0, 8010566 <_vfiprintf_r+0x156>
 8010538:	9207      	str	r2, [sp, #28]
 801053a:	e014      	b.n	8010566 <_vfiprintf_r+0x156>
 801053c:	eba0 0308 	sub.w	r3, r0, r8
 8010540:	fa09 f303 	lsl.w	r3, r9, r3
 8010544:	4313      	orrs	r3, r2
 8010546:	9304      	str	r3, [sp, #16]
 8010548:	46a2      	mov	sl, r4
 801054a:	e7d2      	b.n	80104f2 <_vfiprintf_r+0xe2>
 801054c:	9b03      	ldr	r3, [sp, #12]
 801054e:	1d19      	adds	r1, r3, #4
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	9103      	str	r1, [sp, #12]
 8010554:	2b00      	cmp	r3, #0
 8010556:	bfbb      	ittet	lt
 8010558:	425b      	neglt	r3, r3
 801055a:	f042 0202 	orrlt.w	r2, r2, #2
 801055e:	9307      	strge	r3, [sp, #28]
 8010560:	9307      	strlt	r3, [sp, #28]
 8010562:	bfb8      	it	lt
 8010564:	9204      	strlt	r2, [sp, #16]
 8010566:	7823      	ldrb	r3, [r4, #0]
 8010568:	2b2e      	cmp	r3, #46	; 0x2e
 801056a:	d10c      	bne.n	8010586 <_vfiprintf_r+0x176>
 801056c:	7863      	ldrb	r3, [r4, #1]
 801056e:	2b2a      	cmp	r3, #42	; 0x2a
 8010570:	d135      	bne.n	80105de <_vfiprintf_r+0x1ce>
 8010572:	9b03      	ldr	r3, [sp, #12]
 8010574:	1d1a      	adds	r2, r3, #4
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	9203      	str	r2, [sp, #12]
 801057a:	2b00      	cmp	r3, #0
 801057c:	bfb8      	it	lt
 801057e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010582:	3402      	adds	r4, #2
 8010584:	9305      	str	r3, [sp, #20]
 8010586:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801066c <_vfiprintf_r+0x25c>
 801058a:	7821      	ldrb	r1, [r4, #0]
 801058c:	2203      	movs	r2, #3
 801058e:	4650      	mov	r0, sl
 8010590:	f7ef fe46 	bl	8000220 <memchr>
 8010594:	b140      	cbz	r0, 80105a8 <_vfiprintf_r+0x198>
 8010596:	2340      	movs	r3, #64	; 0x40
 8010598:	eba0 000a 	sub.w	r0, r0, sl
 801059c:	fa03 f000 	lsl.w	r0, r3, r0
 80105a0:	9b04      	ldr	r3, [sp, #16]
 80105a2:	4303      	orrs	r3, r0
 80105a4:	3401      	adds	r4, #1
 80105a6:	9304      	str	r3, [sp, #16]
 80105a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105ac:	482c      	ldr	r0, [pc, #176]	; (8010660 <_vfiprintf_r+0x250>)
 80105ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105b2:	2206      	movs	r2, #6
 80105b4:	f7ef fe34 	bl	8000220 <memchr>
 80105b8:	2800      	cmp	r0, #0
 80105ba:	d03f      	beq.n	801063c <_vfiprintf_r+0x22c>
 80105bc:	4b29      	ldr	r3, [pc, #164]	; (8010664 <_vfiprintf_r+0x254>)
 80105be:	bb1b      	cbnz	r3, 8010608 <_vfiprintf_r+0x1f8>
 80105c0:	9b03      	ldr	r3, [sp, #12]
 80105c2:	3307      	adds	r3, #7
 80105c4:	f023 0307 	bic.w	r3, r3, #7
 80105c8:	3308      	adds	r3, #8
 80105ca:	9303      	str	r3, [sp, #12]
 80105cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ce:	443b      	add	r3, r7
 80105d0:	9309      	str	r3, [sp, #36]	; 0x24
 80105d2:	e767      	b.n	80104a4 <_vfiprintf_r+0x94>
 80105d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80105d8:	460c      	mov	r4, r1
 80105da:	2001      	movs	r0, #1
 80105dc:	e7a5      	b.n	801052a <_vfiprintf_r+0x11a>
 80105de:	2300      	movs	r3, #0
 80105e0:	3401      	adds	r4, #1
 80105e2:	9305      	str	r3, [sp, #20]
 80105e4:	4619      	mov	r1, r3
 80105e6:	f04f 0c0a 	mov.w	ip, #10
 80105ea:	4620      	mov	r0, r4
 80105ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105f0:	3a30      	subs	r2, #48	; 0x30
 80105f2:	2a09      	cmp	r2, #9
 80105f4:	d903      	bls.n	80105fe <_vfiprintf_r+0x1ee>
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d0c5      	beq.n	8010586 <_vfiprintf_r+0x176>
 80105fa:	9105      	str	r1, [sp, #20]
 80105fc:	e7c3      	b.n	8010586 <_vfiprintf_r+0x176>
 80105fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8010602:	4604      	mov	r4, r0
 8010604:	2301      	movs	r3, #1
 8010606:	e7f0      	b.n	80105ea <_vfiprintf_r+0x1da>
 8010608:	ab03      	add	r3, sp, #12
 801060a:	9300      	str	r3, [sp, #0]
 801060c:	462a      	mov	r2, r5
 801060e:	4b16      	ldr	r3, [pc, #88]	; (8010668 <_vfiprintf_r+0x258>)
 8010610:	a904      	add	r1, sp, #16
 8010612:	4630      	mov	r0, r6
 8010614:	f3af 8000 	nop.w
 8010618:	4607      	mov	r7, r0
 801061a:	1c78      	adds	r0, r7, #1
 801061c:	d1d6      	bne.n	80105cc <_vfiprintf_r+0x1bc>
 801061e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010620:	07d9      	lsls	r1, r3, #31
 8010622:	d405      	bmi.n	8010630 <_vfiprintf_r+0x220>
 8010624:	89ab      	ldrh	r3, [r5, #12]
 8010626:	059a      	lsls	r2, r3, #22
 8010628:	d402      	bmi.n	8010630 <_vfiprintf_r+0x220>
 801062a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801062c:	f7ff fc81 	bl	800ff32 <__retarget_lock_release_recursive>
 8010630:	89ab      	ldrh	r3, [r5, #12]
 8010632:	065b      	lsls	r3, r3, #25
 8010634:	f53f af12 	bmi.w	801045c <_vfiprintf_r+0x4c>
 8010638:	9809      	ldr	r0, [sp, #36]	; 0x24
 801063a:	e711      	b.n	8010460 <_vfiprintf_r+0x50>
 801063c:	ab03      	add	r3, sp, #12
 801063e:	9300      	str	r3, [sp, #0]
 8010640:	462a      	mov	r2, r5
 8010642:	4b09      	ldr	r3, [pc, #36]	; (8010668 <_vfiprintf_r+0x258>)
 8010644:	a904      	add	r1, sp, #16
 8010646:	4630      	mov	r0, r6
 8010648:	f000 f880 	bl	801074c <_printf_i>
 801064c:	e7e4      	b.n	8010618 <_vfiprintf_r+0x208>
 801064e:	bf00      	nop
 8010650:	08013cf4 	.word	0x08013cf4
 8010654:	08013d14 	.word	0x08013d14
 8010658:	08013cd4 	.word	0x08013cd4
 801065c:	08013d34 	.word	0x08013d34
 8010660:	08013d3e 	.word	0x08013d3e
 8010664:	00000000 	.word	0x00000000
 8010668:	080103eb 	.word	0x080103eb
 801066c:	08013d3a 	.word	0x08013d3a

08010670 <_printf_common>:
 8010670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010674:	4616      	mov	r6, r2
 8010676:	4699      	mov	r9, r3
 8010678:	688a      	ldr	r2, [r1, #8]
 801067a:	690b      	ldr	r3, [r1, #16]
 801067c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010680:	4293      	cmp	r3, r2
 8010682:	bfb8      	it	lt
 8010684:	4613      	movlt	r3, r2
 8010686:	6033      	str	r3, [r6, #0]
 8010688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801068c:	4607      	mov	r7, r0
 801068e:	460c      	mov	r4, r1
 8010690:	b10a      	cbz	r2, 8010696 <_printf_common+0x26>
 8010692:	3301      	adds	r3, #1
 8010694:	6033      	str	r3, [r6, #0]
 8010696:	6823      	ldr	r3, [r4, #0]
 8010698:	0699      	lsls	r1, r3, #26
 801069a:	bf42      	ittt	mi
 801069c:	6833      	ldrmi	r3, [r6, #0]
 801069e:	3302      	addmi	r3, #2
 80106a0:	6033      	strmi	r3, [r6, #0]
 80106a2:	6825      	ldr	r5, [r4, #0]
 80106a4:	f015 0506 	ands.w	r5, r5, #6
 80106a8:	d106      	bne.n	80106b8 <_printf_common+0x48>
 80106aa:	f104 0a19 	add.w	sl, r4, #25
 80106ae:	68e3      	ldr	r3, [r4, #12]
 80106b0:	6832      	ldr	r2, [r6, #0]
 80106b2:	1a9b      	subs	r3, r3, r2
 80106b4:	42ab      	cmp	r3, r5
 80106b6:	dc26      	bgt.n	8010706 <_printf_common+0x96>
 80106b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80106bc:	1e13      	subs	r3, r2, #0
 80106be:	6822      	ldr	r2, [r4, #0]
 80106c0:	bf18      	it	ne
 80106c2:	2301      	movne	r3, #1
 80106c4:	0692      	lsls	r2, r2, #26
 80106c6:	d42b      	bmi.n	8010720 <_printf_common+0xb0>
 80106c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80106cc:	4649      	mov	r1, r9
 80106ce:	4638      	mov	r0, r7
 80106d0:	47c0      	blx	r8
 80106d2:	3001      	adds	r0, #1
 80106d4:	d01e      	beq.n	8010714 <_printf_common+0xa4>
 80106d6:	6823      	ldr	r3, [r4, #0]
 80106d8:	68e5      	ldr	r5, [r4, #12]
 80106da:	6832      	ldr	r2, [r6, #0]
 80106dc:	f003 0306 	and.w	r3, r3, #6
 80106e0:	2b04      	cmp	r3, #4
 80106e2:	bf08      	it	eq
 80106e4:	1aad      	subeq	r5, r5, r2
 80106e6:	68a3      	ldr	r3, [r4, #8]
 80106e8:	6922      	ldr	r2, [r4, #16]
 80106ea:	bf0c      	ite	eq
 80106ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106f0:	2500      	movne	r5, #0
 80106f2:	4293      	cmp	r3, r2
 80106f4:	bfc4      	itt	gt
 80106f6:	1a9b      	subgt	r3, r3, r2
 80106f8:	18ed      	addgt	r5, r5, r3
 80106fa:	2600      	movs	r6, #0
 80106fc:	341a      	adds	r4, #26
 80106fe:	42b5      	cmp	r5, r6
 8010700:	d11a      	bne.n	8010738 <_printf_common+0xc8>
 8010702:	2000      	movs	r0, #0
 8010704:	e008      	b.n	8010718 <_printf_common+0xa8>
 8010706:	2301      	movs	r3, #1
 8010708:	4652      	mov	r2, sl
 801070a:	4649      	mov	r1, r9
 801070c:	4638      	mov	r0, r7
 801070e:	47c0      	blx	r8
 8010710:	3001      	adds	r0, #1
 8010712:	d103      	bne.n	801071c <_printf_common+0xac>
 8010714:	f04f 30ff 	mov.w	r0, #4294967295
 8010718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801071c:	3501      	adds	r5, #1
 801071e:	e7c6      	b.n	80106ae <_printf_common+0x3e>
 8010720:	18e1      	adds	r1, r4, r3
 8010722:	1c5a      	adds	r2, r3, #1
 8010724:	2030      	movs	r0, #48	; 0x30
 8010726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801072a:	4422      	add	r2, r4
 801072c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010734:	3302      	adds	r3, #2
 8010736:	e7c7      	b.n	80106c8 <_printf_common+0x58>
 8010738:	2301      	movs	r3, #1
 801073a:	4622      	mov	r2, r4
 801073c:	4649      	mov	r1, r9
 801073e:	4638      	mov	r0, r7
 8010740:	47c0      	blx	r8
 8010742:	3001      	adds	r0, #1
 8010744:	d0e6      	beq.n	8010714 <_printf_common+0xa4>
 8010746:	3601      	adds	r6, #1
 8010748:	e7d9      	b.n	80106fe <_printf_common+0x8e>
	...

0801074c <_printf_i>:
 801074c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010750:	7e0f      	ldrb	r7, [r1, #24]
 8010752:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010754:	2f78      	cmp	r7, #120	; 0x78
 8010756:	4691      	mov	r9, r2
 8010758:	4680      	mov	r8, r0
 801075a:	460c      	mov	r4, r1
 801075c:	469a      	mov	sl, r3
 801075e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010762:	d807      	bhi.n	8010774 <_printf_i+0x28>
 8010764:	2f62      	cmp	r7, #98	; 0x62
 8010766:	d80a      	bhi.n	801077e <_printf_i+0x32>
 8010768:	2f00      	cmp	r7, #0
 801076a:	f000 80d8 	beq.w	801091e <_printf_i+0x1d2>
 801076e:	2f58      	cmp	r7, #88	; 0x58
 8010770:	f000 80a3 	beq.w	80108ba <_printf_i+0x16e>
 8010774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801077c:	e03a      	b.n	80107f4 <_printf_i+0xa8>
 801077e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010782:	2b15      	cmp	r3, #21
 8010784:	d8f6      	bhi.n	8010774 <_printf_i+0x28>
 8010786:	a101      	add	r1, pc, #4	; (adr r1, 801078c <_printf_i+0x40>)
 8010788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801078c:	080107e5 	.word	0x080107e5
 8010790:	080107f9 	.word	0x080107f9
 8010794:	08010775 	.word	0x08010775
 8010798:	08010775 	.word	0x08010775
 801079c:	08010775 	.word	0x08010775
 80107a0:	08010775 	.word	0x08010775
 80107a4:	080107f9 	.word	0x080107f9
 80107a8:	08010775 	.word	0x08010775
 80107ac:	08010775 	.word	0x08010775
 80107b0:	08010775 	.word	0x08010775
 80107b4:	08010775 	.word	0x08010775
 80107b8:	08010905 	.word	0x08010905
 80107bc:	08010829 	.word	0x08010829
 80107c0:	080108e7 	.word	0x080108e7
 80107c4:	08010775 	.word	0x08010775
 80107c8:	08010775 	.word	0x08010775
 80107cc:	08010927 	.word	0x08010927
 80107d0:	08010775 	.word	0x08010775
 80107d4:	08010829 	.word	0x08010829
 80107d8:	08010775 	.word	0x08010775
 80107dc:	08010775 	.word	0x08010775
 80107e0:	080108ef 	.word	0x080108ef
 80107e4:	682b      	ldr	r3, [r5, #0]
 80107e6:	1d1a      	adds	r2, r3, #4
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	602a      	str	r2, [r5, #0]
 80107ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107f4:	2301      	movs	r3, #1
 80107f6:	e0a3      	b.n	8010940 <_printf_i+0x1f4>
 80107f8:	6820      	ldr	r0, [r4, #0]
 80107fa:	6829      	ldr	r1, [r5, #0]
 80107fc:	0606      	lsls	r6, r0, #24
 80107fe:	f101 0304 	add.w	r3, r1, #4
 8010802:	d50a      	bpl.n	801081a <_printf_i+0xce>
 8010804:	680e      	ldr	r6, [r1, #0]
 8010806:	602b      	str	r3, [r5, #0]
 8010808:	2e00      	cmp	r6, #0
 801080a:	da03      	bge.n	8010814 <_printf_i+0xc8>
 801080c:	232d      	movs	r3, #45	; 0x2d
 801080e:	4276      	negs	r6, r6
 8010810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010814:	485e      	ldr	r0, [pc, #376]	; (8010990 <_printf_i+0x244>)
 8010816:	230a      	movs	r3, #10
 8010818:	e019      	b.n	801084e <_printf_i+0x102>
 801081a:	680e      	ldr	r6, [r1, #0]
 801081c:	602b      	str	r3, [r5, #0]
 801081e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010822:	bf18      	it	ne
 8010824:	b236      	sxthne	r6, r6
 8010826:	e7ef      	b.n	8010808 <_printf_i+0xbc>
 8010828:	682b      	ldr	r3, [r5, #0]
 801082a:	6820      	ldr	r0, [r4, #0]
 801082c:	1d19      	adds	r1, r3, #4
 801082e:	6029      	str	r1, [r5, #0]
 8010830:	0601      	lsls	r1, r0, #24
 8010832:	d501      	bpl.n	8010838 <_printf_i+0xec>
 8010834:	681e      	ldr	r6, [r3, #0]
 8010836:	e002      	b.n	801083e <_printf_i+0xf2>
 8010838:	0646      	lsls	r6, r0, #25
 801083a:	d5fb      	bpl.n	8010834 <_printf_i+0xe8>
 801083c:	881e      	ldrh	r6, [r3, #0]
 801083e:	4854      	ldr	r0, [pc, #336]	; (8010990 <_printf_i+0x244>)
 8010840:	2f6f      	cmp	r7, #111	; 0x6f
 8010842:	bf0c      	ite	eq
 8010844:	2308      	moveq	r3, #8
 8010846:	230a      	movne	r3, #10
 8010848:	2100      	movs	r1, #0
 801084a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801084e:	6865      	ldr	r5, [r4, #4]
 8010850:	60a5      	str	r5, [r4, #8]
 8010852:	2d00      	cmp	r5, #0
 8010854:	bfa2      	ittt	ge
 8010856:	6821      	ldrge	r1, [r4, #0]
 8010858:	f021 0104 	bicge.w	r1, r1, #4
 801085c:	6021      	strge	r1, [r4, #0]
 801085e:	b90e      	cbnz	r6, 8010864 <_printf_i+0x118>
 8010860:	2d00      	cmp	r5, #0
 8010862:	d04d      	beq.n	8010900 <_printf_i+0x1b4>
 8010864:	4615      	mov	r5, r2
 8010866:	fbb6 f1f3 	udiv	r1, r6, r3
 801086a:	fb03 6711 	mls	r7, r3, r1, r6
 801086e:	5dc7      	ldrb	r7, [r0, r7]
 8010870:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010874:	4637      	mov	r7, r6
 8010876:	42bb      	cmp	r3, r7
 8010878:	460e      	mov	r6, r1
 801087a:	d9f4      	bls.n	8010866 <_printf_i+0x11a>
 801087c:	2b08      	cmp	r3, #8
 801087e:	d10b      	bne.n	8010898 <_printf_i+0x14c>
 8010880:	6823      	ldr	r3, [r4, #0]
 8010882:	07de      	lsls	r6, r3, #31
 8010884:	d508      	bpl.n	8010898 <_printf_i+0x14c>
 8010886:	6923      	ldr	r3, [r4, #16]
 8010888:	6861      	ldr	r1, [r4, #4]
 801088a:	4299      	cmp	r1, r3
 801088c:	bfde      	ittt	le
 801088e:	2330      	movle	r3, #48	; 0x30
 8010890:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010894:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010898:	1b52      	subs	r2, r2, r5
 801089a:	6122      	str	r2, [r4, #16]
 801089c:	f8cd a000 	str.w	sl, [sp]
 80108a0:	464b      	mov	r3, r9
 80108a2:	aa03      	add	r2, sp, #12
 80108a4:	4621      	mov	r1, r4
 80108a6:	4640      	mov	r0, r8
 80108a8:	f7ff fee2 	bl	8010670 <_printf_common>
 80108ac:	3001      	adds	r0, #1
 80108ae:	d14c      	bne.n	801094a <_printf_i+0x1fe>
 80108b0:	f04f 30ff 	mov.w	r0, #4294967295
 80108b4:	b004      	add	sp, #16
 80108b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ba:	4835      	ldr	r0, [pc, #212]	; (8010990 <_printf_i+0x244>)
 80108bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80108c0:	6829      	ldr	r1, [r5, #0]
 80108c2:	6823      	ldr	r3, [r4, #0]
 80108c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80108c8:	6029      	str	r1, [r5, #0]
 80108ca:	061d      	lsls	r5, r3, #24
 80108cc:	d514      	bpl.n	80108f8 <_printf_i+0x1ac>
 80108ce:	07df      	lsls	r7, r3, #31
 80108d0:	bf44      	itt	mi
 80108d2:	f043 0320 	orrmi.w	r3, r3, #32
 80108d6:	6023      	strmi	r3, [r4, #0]
 80108d8:	b91e      	cbnz	r6, 80108e2 <_printf_i+0x196>
 80108da:	6823      	ldr	r3, [r4, #0]
 80108dc:	f023 0320 	bic.w	r3, r3, #32
 80108e0:	6023      	str	r3, [r4, #0]
 80108e2:	2310      	movs	r3, #16
 80108e4:	e7b0      	b.n	8010848 <_printf_i+0xfc>
 80108e6:	6823      	ldr	r3, [r4, #0]
 80108e8:	f043 0320 	orr.w	r3, r3, #32
 80108ec:	6023      	str	r3, [r4, #0]
 80108ee:	2378      	movs	r3, #120	; 0x78
 80108f0:	4828      	ldr	r0, [pc, #160]	; (8010994 <_printf_i+0x248>)
 80108f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80108f6:	e7e3      	b.n	80108c0 <_printf_i+0x174>
 80108f8:	0659      	lsls	r1, r3, #25
 80108fa:	bf48      	it	mi
 80108fc:	b2b6      	uxthmi	r6, r6
 80108fe:	e7e6      	b.n	80108ce <_printf_i+0x182>
 8010900:	4615      	mov	r5, r2
 8010902:	e7bb      	b.n	801087c <_printf_i+0x130>
 8010904:	682b      	ldr	r3, [r5, #0]
 8010906:	6826      	ldr	r6, [r4, #0]
 8010908:	6961      	ldr	r1, [r4, #20]
 801090a:	1d18      	adds	r0, r3, #4
 801090c:	6028      	str	r0, [r5, #0]
 801090e:	0635      	lsls	r5, r6, #24
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	d501      	bpl.n	8010918 <_printf_i+0x1cc>
 8010914:	6019      	str	r1, [r3, #0]
 8010916:	e002      	b.n	801091e <_printf_i+0x1d2>
 8010918:	0670      	lsls	r0, r6, #25
 801091a:	d5fb      	bpl.n	8010914 <_printf_i+0x1c8>
 801091c:	8019      	strh	r1, [r3, #0]
 801091e:	2300      	movs	r3, #0
 8010920:	6123      	str	r3, [r4, #16]
 8010922:	4615      	mov	r5, r2
 8010924:	e7ba      	b.n	801089c <_printf_i+0x150>
 8010926:	682b      	ldr	r3, [r5, #0]
 8010928:	1d1a      	adds	r2, r3, #4
 801092a:	602a      	str	r2, [r5, #0]
 801092c:	681d      	ldr	r5, [r3, #0]
 801092e:	6862      	ldr	r2, [r4, #4]
 8010930:	2100      	movs	r1, #0
 8010932:	4628      	mov	r0, r5
 8010934:	f7ef fc74 	bl	8000220 <memchr>
 8010938:	b108      	cbz	r0, 801093e <_printf_i+0x1f2>
 801093a:	1b40      	subs	r0, r0, r5
 801093c:	6060      	str	r0, [r4, #4]
 801093e:	6863      	ldr	r3, [r4, #4]
 8010940:	6123      	str	r3, [r4, #16]
 8010942:	2300      	movs	r3, #0
 8010944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010948:	e7a8      	b.n	801089c <_printf_i+0x150>
 801094a:	6923      	ldr	r3, [r4, #16]
 801094c:	462a      	mov	r2, r5
 801094e:	4649      	mov	r1, r9
 8010950:	4640      	mov	r0, r8
 8010952:	47d0      	blx	sl
 8010954:	3001      	adds	r0, #1
 8010956:	d0ab      	beq.n	80108b0 <_printf_i+0x164>
 8010958:	6823      	ldr	r3, [r4, #0]
 801095a:	079b      	lsls	r3, r3, #30
 801095c:	d413      	bmi.n	8010986 <_printf_i+0x23a>
 801095e:	68e0      	ldr	r0, [r4, #12]
 8010960:	9b03      	ldr	r3, [sp, #12]
 8010962:	4298      	cmp	r0, r3
 8010964:	bfb8      	it	lt
 8010966:	4618      	movlt	r0, r3
 8010968:	e7a4      	b.n	80108b4 <_printf_i+0x168>
 801096a:	2301      	movs	r3, #1
 801096c:	4632      	mov	r2, r6
 801096e:	4649      	mov	r1, r9
 8010970:	4640      	mov	r0, r8
 8010972:	47d0      	blx	sl
 8010974:	3001      	adds	r0, #1
 8010976:	d09b      	beq.n	80108b0 <_printf_i+0x164>
 8010978:	3501      	adds	r5, #1
 801097a:	68e3      	ldr	r3, [r4, #12]
 801097c:	9903      	ldr	r1, [sp, #12]
 801097e:	1a5b      	subs	r3, r3, r1
 8010980:	42ab      	cmp	r3, r5
 8010982:	dcf2      	bgt.n	801096a <_printf_i+0x21e>
 8010984:	e7eb      	b.n	801095e <_printf_i+0x212>
 8010986:	2500      	movs	r5, #0
 8010988:	f104 0619 	add.w	r6, r4, #25
 801098c:	e7f5      	b.n	801097a <_printf_i+0x22e>
 801098e:	bf00      	nop
 8010990:	08013d45 	.word	0x08013d45
 8010994:	08013d56 	.word	0x08013d56

08010998 <_sbrk_r>:
 8010998:	b538      	push	{r3, r4, r5, lr}
 801099a:	4d06      	ldr	r5, [pc, #24]	; (80109b4 <_sbrk_r+0x1c>)
 801099c:	2300      	movs	r3, #0
 801099e:	4604      	mov	r4, r0
 80109a0:	4608      	mov	r0, r1
 80109a2:	602b      	str	r3, [r5, #0]
 80109a4:	f7f0 fad4 	bl	8000f50 <_sbrk>
 80109a8:	1c43      	adds	r3, r0, #1
 80109aa:	d102      	bne.n	80109b2 <_sbrk_r+0x1a>
 80109ac:	682b      	ldr	r3, [r5, #0]
 80109ae:	b103      	cbz	r3, 80109b2 <_sbrk_r+0x1a>
 80109b0:	6023      	str	r3, [r4, #0]
 80109b2:	bd38      	pop	{r3, r4, r5, pc}
 80109b4:	200084e4 	.word	0x200084e4

080109b8 <__sread>:
 80109b8:	b510      	push	{r4, lr}
 80109ba:	460c      	mov	r4, r1
 80109bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109c0:	f000 fa9e 	bl	8010f00 <_read_r>
 80109c4:	2800      	cmp	r0, #0
 80109c6:	bfab      	itete	ge
 80109c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80109ca:	89a3      	ldrhlt	r3, [r4, #12]
 80109cc:	181b      	addge	r3, r3, r0
 80109ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80109d2:	bfac      	ite	ge
 80109d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80109d6:	81a3      	strhlt	r3, [r4, #12]
 80109d8:	bd10      	pop	{r4, pc}

080109da <__swrite>:
 80109da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109de:	461f      	mov	r7, r3
 80109e0:	898b      	ldrh	r3, [r1, #12]
 80109e2:	05db      	lsls	r3, r3, #23
 80109e4:	4605      	mov	r5, r0
 80109e6:	460c      	mov	r4, r1
 80109e8:	4616      	mov	r6, r2
 80109ea:	d505      	bpl.n	80109f8 <__swrite+0x1e>
 80109ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80109f0:	2302      	movs	r3, #2
 80109f2:	2200      	movs	r2, #0
 80109f4:	f000 f9d0 	bl	8010d98 <_lseek_r>
 80109f8:	89a3      	ldrh	r3, [r4, #12]
 80109fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010a02:	81a3      	strh	r3, [r4, #12]
 8010a04:	4632      	mov	r2, r6
 8010a06:	463b      	mov	r3, r7
 8010a08:	4628      	mov	r0, r5
 8010a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a0e:	f000 b869 	b.w	8010ae4 <_write_r>

08010a12 <__sseek>:
 8010a12:	b510      	push	{r4, lr}
 8010a14:	460c      	mov	r4, r1
 8010a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a1a:	f000 f9bd 	bl	8010d98 <_lseek_r>
 8010a1e:	1c43      	adds	r3, r0, #1
 8010a20:	89a3      	ldrh	r3, [r4, #12]
 8010a22:	bf15      	itete	ne
 8010a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8010a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010a2e:	81a3      	strheq	r3, [r4, #12]
 8010a30:	bf18      	it	ne
 8010a32:	81a3      	strhne	r3, [r4, #12]
 8010a34:	bd10      	pop	{r4, pc}

08010a36 <__sclose>:
 8010a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a3a:	f000 b8db 	b.w	8010bf4 <_close_r>
	...

08010a40 <__swbuf_r>:
 8010a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a42:	460e      	mov	r6, r1
 8010a44:	4614      	mov	r4, r2
 8010a46:	4605      	mov	r5, r0
 8010a48:	b118      	cbz	r0, 8010a52 <__swbuf_r+0x12>
 8010a4a:	6983      	ldr	r3, [r0, #24]
 8010a4c:	b90b      	cbnz	r3, 8010a52 <__swbuf_r+0x12>
 8010a4e:	f7ff f9bf 	bl	800fdd0 <__sinit>
 8010a52:	4b21      	ldr	r3, [pc, #132]	; (8010ad8 <__swbuf_r+0x98>)
 8010a54:	429c      	cmp	r4, r3
 8010a56:	d12b      	bne.n	8010ab0 <__swbuf_r+0x70>
 8010a58:	686c      	ldr	r4, [r5, #4]
 8010a5a:	69a3      	ldr	r3, [r4, #24]
 8010a5c:	60a3      	str	r3, [r4, #8]
 8010a5e:	89a3      	ldrh	r3, [r4, #12]
 8010a60:	071a      	lsls	r2, r3, #28
 8010a62:	d52f      	bpl.n	8010ac4 <__swbuf_r+0x84>
 8010a64:	6923      	ldr	r3, [r4, #16]
 8010a66:	b36b      	cbz	r3, 8010ac4 <__swbuf_r+0x84>
 8010a68:	6923      	ldr	r3, [r4, #16]
 8010a6a:	6820      	ldr	r0, [r4, #0]
 8010a6c:	1ac0      	subs	r0, r0, r3
 8010a6e:	6963      	ldr	r3, [r4, #20]
 8010a70:	b2f6      	uxtb	r6, r6
 8010a72:	4283      	cmp	r3, r0
 8010a74:	4637      	mov	r7, r6
 8010a76:	dc04      	bgt.n	8010a82 <__swbuf_r+0x42>
 8010a78:	4621      	mov	r1, r4
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	f000 f950 	bl	8010d20 <_fflush_r>
 8010a80:	bb30      	cbnz	r0, 8010ad0 <__swbuf_r+0x90>
 8010a82:	68a3      	ldr	r3, [r4, #8]
 8010a84:	3b01      	subs	r3, #1
 8010a86:	60a3      	str	r3, [r4, #8]
 8010a88:	6823      	ldr	r3, [r4, #0]
 8010a8a:	1c5a      	adds	r2, r3, #1
 8010a8c:	6022      	str	r2, [r4, #0]
 8010a8e:	701e      	strb	r6, [r3, #0]
 8010a90:	6963      	ldr	r3, [r4, #20]
 8010a92:	3001      	adds	r0, #1
 8010a94:	4283      	cmp	r3, r0
 8010a96:	d004      	beq.n	8010aa2 <__swbuf_r+0x62>
 8010a98:	89a3      	ldrh	r3, [r4, #12]
 8010a9a:	07db      	lsls	r3, r3, #31
 8010a9c:	d506      	bpl.n	8010aac <__swbuf_r+0x6c>
 8010a9e:	2e0a      	cmp	r6, #10
 8010aa0:	d104      	bne.n	8010aac <__swbuf_r+0x6c>
 8010aa2:	4621      	mov	r1, r4
 8010aa4:	4628      	mov	r0, r5
 8010aa6:	f000 f93b 	bl	8010d20 <_fflush_r>
 8010aaa:	b988      	cbnz	r0, 8010ad0 <__swbuf_r+0x90>
 8010aac:	4638      	mov	r0, r7
 8010aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ab0:	4b0a      	ldr	r3, [pc, #40]	; (8010adc <__swbuf_r+0x9c>)
 8010ab2:	429c      	cmp	r4, r3
 8010ab4:	d101      	bne.n	8010aba <__swbuf_r+0x7a>
 8010ab6:	68ac      	ldr	r4, [r5, #8]
 8010ab8:	e7cf      	b.n	8010a5a <__swbuf_r+0x1a>
 8010aba:	4b09      	ldr	r3, [pc, #36]	; (8010ae0 <__swbuf_r+0xa0>)
 8010abc:	429c      	cmp	r4, r3
 8010abe:	bf08      	it	eq
 8010ac0:	68ec      	ldreq	r4, [r5, #12]
 8010ac2:	e7ca      	b.n	8010a5a <__swbuf_r+0x1a>
 8010ac4:	4621      	mov	r1, r4
 8010ac6:	4628      	mov	r0, r5
 8010ac8:	f000 f81e 	bl	8010b08 <__swsetup_r>
 8010acc:	2800      	cmp	r0, #0
 8010ace:	d0cb      	beq.n	8010a68 <__swbuf_r+0x28>
 8010ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8010ad4:	e7ea      	b.n	8010aac <__swbuf_r+0x6c>
 8010ad6:	bf00      	nop
 8010ad8:	08013cf4 	.word	0x08013cf4
 8010adc:	08013d14 	.word	0x08013d14
 8010ae0:	08013cd4 	.word	0x08013cd4

08010ae4 <_write_r>:
 8010ae4:	b538      	push	{r3, r4, r5, lr}
 8010ae6:	4d07      	ldr	r5, [pc, #28]	; (8010b04 <_write_r+0x20>)
 8010ae8:	4604      	mov	r4, r0
 8010aea:	4608      	mov	r0, r1
 8010aec:	4611      	mov	r1, r2
 8010aee:	2200      	movs	r2, #0
 8010af0:	602a      	str	r2, [r5, #0]
 8010af2:	461a      	mov	r2, r3
 8010af4:	f7f0 f9db 	bl	8000eae <_write>
 8010af8:	1c43      	adds	r3, r0, #1
 8010afa:	d102      	bne.n	8010b02 <_write_r+0x1e>
 8010afc:	682b      	ldr	r3, [r5, #0]
 8010afe:	b103      	cbz	r3, 8010b02 <_write_r+0x1e>
 8010b00:	6023      	str	r3, [r4, #0]
 8010b02:	bd38      	pop	{r3, r4, r5, pc}
 8010b04:	200084e4 	.word	0x200084e4

08010b08 <__swsetup_r>:
 8010b08:	4b32      	ldr	r3, [pc, #200]	; (8010bd4 <__swsetup_r+0xcc>)
 8010b0a:	b570      	push	{r4, r5, r6, lr}
 8010b0c:	681d      	ldr	r5, [r3, #0]
 8010b0e:	4606      	mov	r6, r0
 8010b10:	460c      	mov	r4, r1
 8010b12:	b125      	cbz	r5, 8010b1e <__swsetup_r+0x16>
 8010b14:	69ab      	ldr	r3, [r5, #24]
 8010b16:	b913      	cbnz	r3, 8010b1e <__swsetup_r+0x16>
 8010b18:	4628      	mov	r0, r5
 8010b1a:	f7ff f959 	bl	800fdd0 <__sinit>
 8010b1e:	4b2e      	ldr	r3, [pc, #184]	; (8010bd8 <__swsetup_r+0xd0>)
 8010b20:	429c      	cmp	r4, r3
 8010b22:	d10f      	bne.n	8010b44 <__swsetup_r+0x3c>
 8010b24:	686c      	ldr	r4, [r5, #4]
 8010b26:	89a3      	ldrh	r3, [r4, #12]
 8010b28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010b2c:	0719      	lsls	r1, r3, #28
 8010b2e:	d42c      	bmi.n	8010b8a <__swsetup_r+0x82>
 8010b30:	06dd      	lsls	r5, r3, #27
 8010b32:	d411      	bmi.n	8010b58 <__swsetup_r+0x50>
 8010b34:	2309      	movs	r3, #9
 8010b36:	6033      	str	r3, [r6, #0]
 8010b38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010b3c:	81a3      	strh	r3, [r4, #12]
 8010b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8010b42:	e03e      	b.n	8010bc2 <__swsetup_r+0xba>
 8010b44:	4b25      	ldr	r3, [pc, #148]	; (8010bdc <__swsetup_r+0xd4>)
 8010b46:	429c      	cmp	r4, r3
 8010b48:	d101      	bne.n	8010b4e <__swsetup_r+0x46>
 8010b4a:	68ac      	ldr	r4, [r5, #8]
 8010b4c:	e7eb      	b.n	8010b26 <__swsetup_r+0x1e>
 8010b4e:	4b24      	ldr	r3, [pc, #144]	; (8010be0 <__swsetup_r+0xd8>)
 8010b50:	429c      	cmp	r4, r3
 8010b52:	bf08      	it	eq
 8010b54:	68ec      	ldreq	r4, [r5, #12]
 8010b56:	e7e6      	b.n	8010b26 <__swsetup_r+0x1e>
 8010b58:	0758      	lsls	r0, r3, #29
 8010b5a:	d512      	bpl.n	8010b82 <__swsetup_r+0x7a>
 8010b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010b5e:	b141      	cbz	r1, 8010b72 <__swsetup_r+0x6a>
 8010b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010b64:	4299      	cmp	r1, r3
 8010b66:	d002      	beq.n	8010b6e <__swsetup_r+0x66>
 8010b68:	4630      	mov	r0, r6
 8010b6a:	f7ff f9eb 	bl	800ff44 <_free_r>
 8010b6e:	2300      	movs	r3, #0
 8010b70:	6363      	str	r3, [r4, #52]	; 0x34
 8010b72:	89a3      	ldrh	r3, [r4, #12]
 8010b74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010b78:	81a3      	strh	r3, [r4, #12]
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	6063      	str	r3, [r4, #4]
 8010b7e:	6923      	ldr	r3, [r4, #16]
 8010b80:	6023      	str	r3, [r4, #0]
 8010b82:	89a3      	ldrh	r3, [r4, #12]
 8010b84:	f043 0308 	orr.w	r3, r3, #8
 8010b88:	81a3      	strh	r3, [r4, #12]
 8010b8a:	6923      	ldr	r3, [r4, #16]
 8010b8c:	b94b      	cbnz	r3, 8010ba2 <__swsetup_r+0x9a>
 8010b8e:	89a3      	ldrh	r3, [r4, #12]
 8010b90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010b98:	d003      	beq.n	8010ba2 <__swsetup_r+0x9a>
 8010b9a:	4621      	mov	r1, r4
 8010b9c:	4630      	mov	r0, r6
 8010b9e:	f000 f933 	bl	8010e08 <__smakebuf_r>
 8010ba2:	89a0      	ldrh	r0, [r4, #12]
 8010ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ba8:	f010 0301 	ands.w	r3, r0, #1
 8010bac:	d00a      	beq.n	8010bc4 <__swsetup_r+0xbc>
 8010bae:	2300      	movs	r3, #0
 8010bb0:	60a3      	str	r3, [r4, #8]
 8010bb2:	6963      	ldr	r3, [r4, #20]
 8010bb4:	425b      	negs	r3, r3
 8010bb6:	61a3      	str	r3, [r4, #24]
 8010bb8:	6923      	ldr	r3, [r4, #16]
 8010bba:	b943      	cbnz	r3, 8010bce <__swsetup_r+0xc6>
 8010bbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010bc0:	d1ba      	bne.n	8010b38 <__swsetup_r+0x30>
 8010bc2:	bd70      	pop	{r4, r5, r6, pc}
 8010bc4:	0781      	lsls	r1, r0, #30
 8010bc6:	bf58      	it	pl
 8010bc8:	6963      	ldrpl	r3, [r4, #20]
 8010bca:	60a3      	str	r3, [r4, #8]
 8010bcc:	e7f4      	b.n	8010bb8 <__swsetup_r+0xb0>
 8010bce:	2000      	movs	r0, #0
 8010bd0:	e7f7      	b.n	8010bc2 <__swsetup_r+0xba>
 8010bd2:	bf00      	nop
 8010bd4:	2000002c 	.word	0x2000002c
 8010bd8:	08013cf4 	.word	0x08013cf4
 8010bdc:	08013d14 	.word	0x08013d14
 8010be0:	08013cd4 	.word	0x08013cd4

08010be4 <abort>:
 8010be4:	b508      	push	{r3, lr}
 8010be6:	2006      	movs	r0, #6
 8010be8:	f000 f9c4 	bl	8010f74 <raise>
 8010bec:	2001      	movs	r0, #1
 8010bee:	f7f0 f937 	bl	8000e60 <_exit>
	...

08010bf4 <_close_r>:
 8010bf4:	b538      	push	{r3, r4, r5, lr}
 8010bf6:	4d06      	ldr	r5, [pc, #24]	; (8010c10 <_close_r+0x1c>)
 8010bf8:	2300      	movs	r3, #0
 8010bfa:	4604      	mov	r4, r0
 8010bfc:	4608      	mov	r0, r1
 8010bfe:	602b      	str	r3, [r5, #0]
 8010c00:	f7f0 f971 	bl	8000ee6 <_close>
 8010c04:	1c43      	adds	r3, r0, #1
 8010c06:	d102      	bne.n	8010c0e <_close_r+0x1a>
 8010c08:	682b      	ldr	r3, [r5, #0]
 8010c0a:	b103      	cbz	r3, 8010c0e <_close_r+0x1a>
 8010c0c:	6023      	str	r3, [r4, #0]
 8010c0e:	bd38      	pop	{r3, r4, r5, pc}
 8010c10:	200084e4 	.word	0x200084e4

08010c14 <__sflush_r>:
 8010c14:	898a      	ldrh	r2, [r1, #12]
 8010c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c1a:	4605      	mov	r5, r0
 8010c1c:	0710      	lsls	r0, r2, #28
 8010c1e:	460c      	mov	r4, r1
 8010c20:	d458      	bmi.n	8010cd4 <__sflush_r+0xc0>
 8010c22:	684b      	ldr	r3, [r1, #4]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	dc05      	bgt.n	8010c34 <__sflush_r+0x20>
 8010c28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	dc02      	bgt.n	8010c34 <__sflush_r+0x20>
 8010c2e:	2000      	movs	r0, #0
 8010c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c36:	2e00      	cmp	r6, #0
 8010c38:	d0f9      	beq.n	8010c2e <__sflush_r+0x1a>
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010c40:	682f      	ldr	r7, [r5, #0]
 8010c42:	602b      	str	r3, [r5, #0]
 8010c44:	d032      	beq.n	8010cac <__sflush_r+0x98>
 8010c46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010c48:	89a3      	ldrh	r3, [r4, #12]
 8010c4a:	075a      	lsls	r2, r3, #29
 8010c4c:	d505      	bpl.n	8010c5a <__sflush_r+0x46>
 8010c4e:	6863      	ldr	r3, [r4, #4]
 8010c50:	1ac0      	subs	r0, r0, r3
 8010c52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010c54:	b10b      	cbz	r3, 8010c5a <__sflush_r+0x46>
 8010c56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010c58:	1ac0      	subs	r0, r0, r3
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010c60:	6a21      	ldr	r1, [r4, #32]
 8010c62:	4628      	mov	r0, r5
 8010c64:	47b0      	blx	r6
 8010c66:	1c43      	adds	r3, r0, #1
 8010c68:	89a3      	ldrh	r3, [r4, #12]
 8010c6a:	d106      	bne.n	8010c7a <__sflush_r+0x66>
 8010c6c:	6829      	ldr	r1, [r5, #0]
 8010c6e:	291d      	cmp	r1, #29
 8010c70:	d82c      	bhi.n	8010ccc <__sflush_r+0xb8>
 8010c72:	4a2a      	ldr	r2, [pc, #168]	; (8010d1c <__sflush_r+0x108>)
 8010c74:	40ca      	lsrs	r2, r1
 8010c76:	07d6      	lsls	r6, r2, #31
 8010c78:	d528      	bpl.n	8010ccc <__sflush_r+0xb8>
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	6062      	str	r2, [r4, #4]
 8010c7e:	04d9      	lsls	r1, r3, #19
 8010c80:	6922      	ldr	r2, [r4, #16]
 8010c82:	6022      	str	r2, [r4, #0]
 8010c84:	d504      	bpl.n	8010c90 <__sflush_r+0x7c>
 8010c86:	1c42      	adds	r2, r0, #1
 8010c88:	d101      	bne.n	8010c8e <__sflush_r+0x7a>
 8010c8a:	682b      	ldr	r3, [r5, #0]
 8010c8c:	b903      	cbnz	r3, 8010c90 <__sflush_r+0x7c>
 8010c8e:	6560      	str	r0, [r4, #84]	; 0x54
 8010c90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c92:	602f      	str	r7, [r5, #0]
 8010c94:	2900      	cmp	r1, #0
 8010c96:	d0ca      	beq.n	8010c2e <__sflush_r+0x1a>
 8010c98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c9c:	4299      	cmp	r1, r3
 8010c9e:	d002      	beq.n	8010ca6 <__sflush_r+0x92>
 8010ca0:	4628      	mov	r0, r5
 8010ca2:	f7ff f94f 	bl	800ff44 <_free_r>
 8010ca6:	2000      	movs	r0, #0
 8010ca8:	6360      	str	r0, [r4, #52]	; 0x34
 8010caa:	e7c1      	b.n	8010c30 <__sflush_r+0x1c>
 8010cac:	6a21      	ldr	r1, [r4, #32]
 8010cae:	2301      	movs	r3, #1
 8010cb0:	4628      	mov	r0, r5
 8010cb2:	47b0      	blx	r6
 8010cb4:	1c41      	adds	r1, r0, #1
 8010cb6:	d1c7      	bne.n	8010c48 <__sflush_r+0x34>
 8010cb8:	682b      	ldr	r3, [r5, #0]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d0c4      	beq.n	8010c48 <__sflush_r+0x34>
 8010cbe:	2b1d      	cmp	r3, #29
 8010cc0:	d001      	beq.n	8010cc6 <__sflush_r+0xb2>
 8010cc2:	2b16      	cmp	r3, #22
 8010cc4:	d101      	bne.n	8010cca <__sflush_r+0xb6>
 8010cc6:	602f      	str	r7, [r5, #0]
 8010cc8:	e7b1      	b.n	8010c2e <__sflush_r+0x1a>
 8010cca:	89a3      	ldrh	r3, [r4, #12]
 8010ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cd0:	81a3      	strh	r3, [r4, #12]
 8010cd2:	e7ad      	b.n	8010c30 <__sflush_r+0x1c>
 8010cd4:	690f      	ldr	r7, [r1, #16]
 8010cd6:	2f00      	cmp	r7, #0
 8010cd8:	d0a9      	beq.n	8010c2e <__sflush_r+0x1a>
 8010cda:	0793      	lsls	r3, r2, #30
 8010cdc:	680e      	ldr	r6, [r1, #0]
 8010cde:	bf08      	it	eq
 8010ce0:	694b      	ldreq	r3, [r1, #20]
 8010ce2:	600f      	str	r7, [r1, #0]
 8010ce4:	bf18      	it	ne
 8010ce6:	2300      	movne	r3, #0
 8010ce8:	eba6 0807 	sub.w	r8, r6, r7
 8010cec:	608b      	str	r3, [r1, #8]
 8010cee:	f1b8 0f00 	cmp.w	r8, #0
 8010cf2:	dd9c      	ble.n	8010c2e <__sflush_r+0x1a>
 8010cf4:	6a21      	ldr	r1, [r4, #32]
 8010cf6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010cf8:	4643      	mov	r3, r8
 8010cfa:	463a      	mov	r2, r7
 8010cfc:	4628      	mov	r0, r5
 8010cfe:	47b0      	blx	r6
 8010d00:	2800      	cmp	r0, #0
 8010d02:	dc06      	bgt.n	8010d12 <__sflush_r+0xfe>
 8010d04:	89a3      	ldrh	r3, [r4, #12]
 8010d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d0a:	81a3      	strh	r3, [r4, #12]
 8010d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d10:	e78e      	b.n	8010c30 <__sflush_r+0x1c>
 8010d12:	4407      	add	r7, r0
 8010d14:	eba8 0800 	sub.w	r8, r8, r0
 8010d18:	e7e9      	b.n	8010cee <__sflush_r+0xda>
 8010d1a:	bf00      	nop
 8010d1c:	20400001 	.word	0x20400001

08010d20 <_fflush_r>:
 8010d20:	b538      	push	{r3, r4, r5, lr}
 8010d22:	690b      	ldr	r3, [r1, #16]
 8010d24:	4605      	mov	r5, r0
 8010d26:	460c      	mov	r4, r1
 8010d28:	b913      	cbnz	r3, 8010d30 <_fflush_r+0x10>
 8010d2a:	2500      	movs	r5, #0
 8010d2c:	4628      	mov	r0, r5
 8010d2e:	bd38      	pop	{r3, r4, r5, pc}
 8010d30:	b118      	cbz	r0, 8010d3a <_fflush_r+0x1a>
 8010d32:	6983      	ldr	r3, [r0, #24]
 8010d34:	b90b      	cbnz	r3, 8010d3a <_fflush_r+0x1a>
 8010d36:	f7ff f84b 	bl	800fdd0 <__sinit>
 8010d3a:	4b14      	ldr	r3, [pc, #80]	; (8010d8c <_fflush_r+0x6c>)
 8010d3c:	429c      	cmp	r4, r3
 8010d3e:	d11b      	bne.n	8010d78 <_fflush_r+0x58>
 8010d40:	686c      	ldr	r4, [r5, #4]
 8010d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d0ef      	beq.n	8010d2a <_fflush_r+0xa>
 8010d4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010d4c:	07d0      	lsls	r0, r2, #31
 8010d4e:	d404      	bmi.n	8010d5a <_fflush_r+0x3a>
 8010d50:	0599      	lsls	r1, r3, #22
 8010d52:	d402      	bmi.n	8010d5a <_fflush_r+0x3a>
 8010d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d56:	f7ff f8eb 	bl	800ff30 <__retarget_lock_acquire_recursive>
 8010d5a:	4628      	mov	r0, r5
 8010d5c:	4621      	mov	r1, r4
 8010d5e:	f7ff ff59 	bl	8010c14 <__sflush_r>
 8010d62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010d64:	07da      	lsls	r2, r3, #31
 8010d66:	4605      	mov	r5, r0
 8010d68:	d4e0      	bmi.n	8010d2c <_fflush_r+0xc>
 8010d6a:	89a3      	ldrh	r3, [r4, #12]
 8010d6c:	059b      	lsls	r3, r3, #22
 8010d6e:	d4dd      	bmi.n	8010d2c <_fflush_r+0xc>
 8010d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010d72:	f7ff f8de 	bl	800ff32 <__retarget_lock_release_recursive>
 8010d76:	e7d9      	b.n	8010d2c <_fflush_r+0xc>
 8010d78:	4b05      	ldr	r3, [pc, #20]	; (8010d90 <_fflush_r+0x70>)
 8010d7a:	429c      	cmp	r4, r3
 8010d7c:	d101      	bne.n	8010d82 <_fflush_r+0x62>
 8010d7e:	68ac      	ldr	r4, [r5, #8]
 8010d80:	e7df      	b.n	8010d42 <_fflush_r+0x22>
 8010d82:	4b04      	ldr	r3, [pc, #16]	; (8010d94 <_fflush_r+0x74>)
 8010d84:	429c      	cmp	r4, r3
 8010d86:	bf08      	it	eq
 8010d88:	68ec      	ldreq	r4, [r5, #12]
 8010d8a:	e7da      	b.n	8010d42 <_fflush_r+0x22>
 8010d8c:	08013cf4 	.word	0x08013cf4
 8010d90:	08013d14 	.word	0x08013d14
 8010d94:	08013cd4 	.word	0x08013cd4

08010d98 <_lseek_r>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	4d07      	ldr	r5, [pc, #28]	; (8010db8 <_lseek_r+0x20>)
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	4608      	mov	r0, r1
 8010da0:	4611      	mov	r1, r2
 8010da2:	2200      	movs	r2, #0
 8010da4:	602a      	str	r2, [r5, #0]
 8010da6:	461a      	mov	r2, r3
 8010da8:	f7f0 f8c4 	bl	8000f34 <_lseek>
 8010dac:	1c43      	adds	r3, r0, #1
 8010dae:	d102      	bne.n	8010db6 <_lseek_r+0x1e>
 8010db0:	682b      	ldr	r3, [r5, #0]
 8010db2:	b103      	cbz	r3, 8010db6 <_lseek_r+0x1e>
 8010db4:	6023      	str	r3, [r4, #0]
 8010db6:	bd38      	pop	{r3, r4, r5, pc}
 8010db8:	200084e4 	.word	0x200084e4

08010dbc <__swhatbuf_r>:
 8010dbc:	b570      	push	{r4, r5, r6, lr}
 8010dbe:	460e      	mov	r6, r1
 8010dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dc4:	2900      	cmp	r1, #0
 8010dc6:	b096      	sub	sp, #88	; 0x58
 8010dc8:	4614      	mov	r4, r2
 8010dca:	461d      	mov	r5, r3
 8010dcc:	da08      	bge.n	8010de0 <__swhatbuf_r+0x24>
 8010dce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	602a      	str	r2, [r5, #0]
 8010dd6:	061a      	lsls	r2, r3, #24
 8010dd8:	d410      	bmi.n	8010dfc <__swhatbuf_r+0x40>
 8010dda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010dde:	e00e      	b.n	8010dfe <__swhatbuf_r+0x42>
 8010de0:	466a      	mov	r2, sp
 8010de2:	f000 f8e3 	bl	8010fac <_fstat_r>
 8010de6:	2800      	cmp	r0, #0
 8010de8:	dbf1      	blt.n	8010dce <__swhatbuf_r+0x12>
 8010dea:	9a01      	ldr	r2, [sp, #4]
 8010dec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010df0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010df4:	425a      	negs	r2, r3
 8010df6:	415a      	adcs	r2, r3
 8010df8:	602a      	str	r2, [r5, #0]
 8010dfa:	e7ee      	b.n	8010dda <__swhatbuf_r+0x1e>
 8010dfc:	2340      	movs	r3, #64	; 0x40
 8010dfe:	2000      	movs	r0, #0
 8010e00:	6023      	str	r3, [r4, #0]
 8010e02:	b016      	add	sp, #88	; 0x58
 8010e04:	bd70      	pop	{r4, r5, r6, pc}
	...

08010e08 <__smakebuf_r>:
 8010e08:	898b      	ldrh	r3, [r1, #12]
 8010e0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010e0c:	079d      	lsls	r5, r3, #30
 8010e0e:	4606      	mov	r6, r0
 8010e10:	460c      	mov	r4, r1
 8010e12:	d507      	bpl.n	8010e24 <__smakebuf_r+0x1c>
 8010e14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010e18:	6023      	str	r3, [r4, #0]
 8010e1a:	6123      	str	r3, [r4, #16]
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	6163      	str	r3, [r4, #20]
 8010e20:	b002      	add	sp, #8
 8010e22:	bd70      	pop	{r4, r5, r6, pc}
 8010e24:	ab01      	add	r3, sp, #4
 8010e26:	466a      	mov	r2, sp
 8010e28:	f7ff ffc8 	bl	8010dbc <__swhatbuf_r>
 8010e2c:	9900      	ldr	r1, [sp, #0]
 8010e2e:	4605      	mov	r5, r0
 8010e30:	4630      	mov	r0, r6
 8010e32:	f7ff f8f3 	bl	801001c <_malloc_r>
 8010e36:	b948      	cbnz	r0, 8010e4c <__smakebuf_r+0x44>
 8010e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e3c:	059a      	lsls	r2, r3, #22
 8010e3e:	d4ef      	bmi.n	8010e20 <__smakebuf_r+0x18>
 8010e40:	f023 0303 	bic.w	r3, r3, #3
 8010e44:	f043 0302 	orr.w	r3, r3, #2
 8010e48:	81a3      	strh	r3, [r4, #12]
 8010e4a:	e7e3      	b.n	8010e14 <__smakebuf_r+0xc>
 8010e4c:	4b0d      	ldr	r3, [pc, #52]	; (8010e84 <__smakebuf_r+0x7c>)
 8010e4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010e50:	89a3      	ldrh	r3, [r4, #12]
 8010e52:	6020      	str	r0, [r4, #0]
 8010e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e58:	81a3      	strh	r3, [r4, #12]
 8010e5a:	9b00      	ldr	r3, [sp, #0]
 8010e5c:	6163      	str	r3, [r4, #20]
 8010e5e:	9b01      	ldr	r3, [sp, #4]
 8010e60:	6120      	str	r0, [r4, #16]
 8010e62:	b15b      	cbz	r3, 8010e7c <__smakebuf_r+0x74>
 8010e64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e68:	4630      	mov	r0, r6
 8010e6a:	f000 f8b1 	bl	8010fd0 <_isatty_r>
 8010e6e:	b128      	cbz	r0, 8010e7c <__smakebuf_r+0x74>
 8010e70:	89a3      	ldrh	r3, [r4, #12]
 8010e72:	f023 0303 	bic.w	r3, r3, #3
 8010e76:	f043 0301 	orr.w	r3, r3, #1
 8010e7a:	81a3      	strh	r3, [r4, #12]
 8010e7c:	89a0      	ldrh	r0, [r4, #12]
 8010e7e:	4305      	orrs	r5, r0
 8010e80:	81a5      	strh	r5, [r4, #12]
 8010e82:	e7cd      	b.n	8010e20 <__smakebuf_r+0x18>
 8010e84:	0800fd69 	.word	0x0800fd69

08010e88 <__malloc_lock>:
 8010e88:	4801      	ldr	r0, [pc, #4]	; (8010e90 <__malloc_lock+0x8>)
 8010e8a:	f7ff b851 	b.w	800ff30 <__retarget_lock_acquire_recursive>
 8010e8e:	bf00      	nop
 8010e90:	200084e8 	.word	0x200084e8

08010e94 <__malloc_unlock>:
 8010e94:	4801      	ldr	r0, [pc, #4]	; (8010e9c <__malloc_unlock+0x8>)
 8010e96:	f7ff b84c 	b.w	800ff32 <__retarget_lock_release_recursive>
 8010e9a:	bf00      	nop
 8010e9c:	200084e8 	.word	0x200084e8

08010ea0 <_realloc_r>:
 8010ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ea4:	4680      	mov	r8, r0
 8010ea6:	4614      	mov	r4, r2
 8010ea8:	460e      	mov	r6, r1
 8010eaa:	b921      	cbnz	r1, 8010eb6 <_realloc_r+0x16>
 8010eac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010eb0:	4611      	mov	r1, r2
 8010eb2:	f7ff b8b3 	b.w	801001c <_malloc_r>
 8010eb6:	b92a      	cbnz	r2, 8010ec4 <_realloc_r+0x24>
 8010eb8:	f7ff f844 	bl	800ff44 <_free_r>
 8010ebc:	4625      	mov	r5, r4
 8010ebe:	4628      	mov	r0, r5
 8010ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ec4:	f000 f894 	bl	8010ff0 <_malloc_usable_size_r>
 8010ec8:	4284      	cmp	r4, r0
 8010eca:	4607      	mov	r7, r0
 8010ecc:	d802      	bhi.n	8010ed4 <_realloc_r+0x34>
 8010ece:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010ed2:	d812      	bhi.n	8010efa <_realloc_r+0x5a>
 8010ed4:	4621      	mov	r1, r4
 8010ed6:	4640      	mov	r0, r8
 8010ed8:	f7ff f8a0 	bl	801001c <_malloc_r>
 8010edc:	4605      	mov	r5, r0
 8010ede:	2800      	cmp	r0, #0
 8010ee0:	d0ed      	beq.n	8010ebe <_realloc_r+0x1e>
 8010ee2:	42bc      	cmp	r4, r7
 8010ee4:	4622      	mov	r2, r4
 8010ee6:	4631      	mov	r1, r6
 8010ee8:	bf28      	it	cs
 8010eea:	463a      	movcs	r2, r7
 8010eec:	f7fe fe54 	bl	800fb98 <memcpy>
 8010ef0:	4631      	mov	r1, r6
 8010ef2:	4640      	mov	r0, r8
 8010ef4:	f7ff f826 	bl	800ff44 <_free_r>
 8010ef8:	e7e1      	b.n	8010ebe <_realloc_r+0x1e>
 8010efa:	4635      	mov	r5, r6
 8010efc:	e7df      	b.n	8010ebe <_realloc_r+0x1e>
	...

08010f00 <_read_r>:
 8010f00:	b538      	push	{r3, r4, r5, lr}
 8010f02:	4d07      	ldr	r5, [pc, #28]	; (8010f20 <_read_r+0x20>)
 8010f04:	4604      	mov	r4, r0
 8010f06:	4608      	mov	r0, r1
 8010f08:	4611      	mov	r1, r2
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	602a      	str	r2, [r5, #0]
 8010f0e:	461a      	mov	r2, r3
 8010f10:	f7ef ffb0 	bl	8000e74 <_read>
 8010f14:	1c43      	adds	r3, r0, #1
 8010f16:	d102      	bne.n	8010f1e <_read_r+0x1e>
 8010f18:	682b      	ldr	r3, [r5, #0]
 8010f1a:	b103      	cbz	r3, 8010f1e <_read_r+0x1e>
 8010f1c:	6023      	str	r3, [r4, #0]
 8010f1e:	bd38      	pop	{r3, r4, r5, pc}
 8010f20:	200084e4 	.word	0x200084e4

08010f24 <_raise_r>:
 8010f24:	291f      	cmp	r1, #31
 8010f26:	b538      	push	{r3, r4, r5, lr}
 8010f28:	4604      	mov	r4, r0
 8010f2a:	460d      	mov	r5, r1
 8010f2c:	d904      	bls.n	8010f38 <_raise_r+0x14>
 8010f2e:	2316      	movs	r3, #22
 8010f30:	6003      	str	r3, [r0, #0]
 8010f32:	f04f 30ff 	mov.w	r0, #4294967295
 8010f36:	bd38      	pop	{r3, r4, r5, pc}
 8010f38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010f3a:	b112      	cbz	r2, 8010f42 <_raise_r+0x1e>
 8010f3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f40:	b94b      	cbnz	r3, 8010f56 <_raise_r+0x32>
 8010f42:	4620      	mov	r0, r4
 8010f44:	f000 f830 	bl	8010fa8 <_getpid_r>
 8010f48:	462a      	mov	r2, r5
 8010f4a:	4601      	mov	r1, r0
 8010f4c:	4620      	mov	r0, r4
 8010f4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f52:	f000 b817 	b.w	8010f84 <_kill_r>
 8010f56:	2b01      	cmp	r3, #1
 8010f58:	d00a      	beq.n	8010f70 <_raise_r+0x4c>
 8010f5a:	1c59      	adds	r1, r3, #1
 8010f5c:	d103      	bne.n	8010f66 <_raise_r+0x42>
 8010f5e:	2316      	movs	r3, #22
 8010f60:	6003      	str	r3, [r0, #0]
 8010f62:	2001      	movs	r0, #1
 8010f64:	e7e7      	b.n	8010f36 <_raise_r+0x12>
 8010f66:	2400      	movs	r4, #0
 8010f68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	4798      	blx	r3
 8010f70:	2000      	movs	r0, #0
 8010f72:	e7e0      	b.n	8010f36 <_raise_r+0x12>

08010f74 <raise>:
 8010f74:	4b02      	ldr	r3, [pc, #8]	; (8010f80 <raise+0xc>)
 8010f76:	4601      	mov	r1, r0
 8010f78:	6818      	ldr	r0, [r3, #0]
 8010f7a:	f7ff bfd3 	b.w	8010f24 <_raise_r>
 8010f7e:	bf00      	nop
 8010f80:	2000002c 	.word	0x2000002c

08010f84 <_kill_r>:
 8010f84:	b538      	push	{r3, r4, r5, lr}
 8010f86:	4d07      	ldr	r5, [pc, #28]	; (8010fa4 <_kill_r+0x20>)
 8010f88:	2300      	movs	r3, #0
 8010f8a:	4604      	mov	r4, r0
 8010f8c:	4608      	mov	r0, r1
 8010f8e:	4611      	mov	r1, r2
 8010f90:	602b      	str	r3, [r5, #0]
 8010f92:	f7ef ff53 	bl	8000e3c <_kill>
 8010f96:	1c43      	adds	r3, r0, #1
 8010f98:	d102      	bne.n	8010fa0 <_kill_r+0x1c>
 8010f9a:	682b      	ldr	r3, [r5, #0]
 8010f9c:	b103      	cbz	r3, 8010fa0 <_kill_r+0x1c>
 8010f9e:	6023      	str	r3, [r4, #0]
 8010fa0:	bd38      	pop	{r3, r4, r5, pc}
 8010fa2:	bf00      	nop
 8010fa4:	200084e4 	.word	0x200084e4

08010fa8 <_getpid_r>:
 8010fa8:	f7ef bf40 	b.w	8000e2c <_getpid>

08010fac <_fstat_r>:
 8010fac:	b538      	push	{r3, r4, r5, lr}
 8010fae:	4d07      	ldr	r5, [pc, #28]	; (8010fcc <_fstat_r+0x20>)
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	4604      	mov	r4, r0
 8010fb4:	4608      	mov	r0, r1
 8010fb6:	4611      	mov	r1, r2
 8010fb8:	602b      	str	r3, [r5, #0]
 8010fba:	f7ef ffa0 	bl	8000efe <_fstat>
 8010fbe:	1c43      	adds	r3, r0, #1
 8010fc0:	d102      	bne.n	8010fc8 <_fstat_r+0x1c>
 8010fc2:	682b      	ldr	r3, [r5, #0]
 8010fc4:	b103      	cbz	r3, 8010fc8 <_fstat_r+0x1c>
 8010fc6:	6023      	str	r3, [r4, #0]
 8010fc8:	bd38      	pop	{r3, r4, r5, pc}
 8010fca:	bf00      	nop
 8010fcc:	200084e4 	.word	0x200084e4

08010fd0 <_isatty_r>:
 8010fd0:	b538      	push	{r3, r4, r5, lr}
 8010fd2:	4d06      	ldr	r5, [pc, #24]	; (8010fec <_isatty_r+0x1c>)
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	4604      	mov	r4, r0
 8010fd8:	4608      	mov	r0, r1
 8010fda:	602b      	str	r3, [r5, #0]
 8010fdc:	f7ef ff9f 	bl	8000f1e <_isatty>
 8010fe0:	1c43      	adds	r3, r0, #1
 8010fe2:	d102      	bne.n	8010fea <_isatty_r+0x1a>
 8010fe4:	682b      	ldr	r3, [r5, #0]
 8010fe6:	b103      	cbz	r3, 8010fea <_isatty_r+0x1a>
 8010fe8:	6023      	str	r3, [r4, #0]
 8010fea:	bd38      	pop	{r3, r4, r5, pc}
 8010fec:	200084e4 	.word	0x200084e4

08010ff0 <_malloc_usable_size_r>:
 8010ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ff4:	1f18      	subs	r0, r3, #4
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	bfbc      	itt	lt
 8010ffa:	580b      	ldrlt	r3, [r1, r0]
 8010ffc:	18c0      	addlt	r0, r0, r3
 8010ffe:	4770      	bx	lr

08011000 <_init>:
 8011000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011002:	bf00      	nop
 8011004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011006:	bc08      	pop	{r3}
 8011008:	469e      	mov	lr, r3
 801100a:	4770      	bx	lr

0801100c <_fini>:
 801100c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801100e:	bf00      	nop
 8011010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011012:	bc08      	pop	{r3}
 8011014:	469e      	mov	lr, r3
 8011016:	4770      	bx	lr
