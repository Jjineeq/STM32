
TCPIP_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbf4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d50  0800fda4  0800fda4  0001fda4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012af4  08012af4  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08012af4  08012af4  00022af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012afc  08012afc  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012afc  08012afc  00022afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b00  08012b00  00022b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08012b04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          0000838c  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000841c  2000841c  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001916c  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c5e  00000000  00000000  0004922c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  0004de90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001198  00000000  00000000  0004f0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f27f  00000000  00000000  00050270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000204bf  00000000  00000000  0007f4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e827b  00000000  00000000  0009f9ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00187c29  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052b4  00000000  00000000  00187c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fd8c 	.word	0x0800fd8c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800fd8c 	.word	0x0800fd8c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 ff7c 	bl	80014c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f814 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f882 	bl	80006d8 <MX_GPIO_Init>
  MX_LWIP_Init();
 80005d4:	f003 f872 	bl	80036bc <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  LED_OnOff(LED_ALL, 500);
 80005d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005dc:	20ff      	movs	r0, #255	; 0xff
 80005de:	f000 f917 	bl	8000810 <LED_OnOff>
  User_notification(&gnetif);
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <main+0x30>)
 80005e4:	f000 f932 	bl	800084c <User_notification>
  tcp_echoclient_connect();
 80005e8:	f000 fa9e 	bl	8000b28 <tcp_echoclient_connect>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 80005ec:	f003 f9b2 	bl	8003954 <MX_LWIP_Process>
 80005f0:	e7fc      	b.n	80005ec <main+0x28>
 80005f2:	bf00      	nop
 80005f4:	200000ac 	.word	0x200000ac

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f00e f9b4 	bl	800e974 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <SystemClock_Config+0xd8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a2a      	ldr	r2, [pc, #168]	; (80006d0 <SystemClock_Config+0xd8>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <SystemClock_Config+0xd8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <SystemClock_Config+0xdc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemClock_Config+0xdc>)
 8000642:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xdc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000664:	2300      	movs	r3, #0
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800066c:	23b4      	movs	r3, #180	; 0xb4
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000674:	2304      	movs	r3, #4
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fbed 	bl	8002e5c <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 f8fe 	bl	8000888 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800068c:	f002 fb96 	bl	8002dbc <HAL_PWREx_EnableOverDrive>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000696:	f000 f8f7 	bl	8000888 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2105      	movs	r1, #5
 80006b8:	4618      	mov	r0, r3
 80006ba:	f002 fe47 	bl	800334c <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006c4:	f000 f8e0 	bl	8000888 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	; 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08a      	sub	sp, #40	; 0x28
 80006dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
 80006ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
 80006f2:	4b44      	ldr	r3, [pc, #272]	; (8000804 <MX_GPIO_Init+0x12c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a43      	ldr	r2, [pc, #268]	; (8000804 <MX_GPIO_Init+0x12c>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b41      	ldr	r3, [pc, #260]	; (8000804 <MX_GPIO_Init+0x12c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b3d      	ldr	r3, [pc, #244]	; (8000804 <MX_GPIO_Init+0x12c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a3c      	ldr	r2, [pc, #240]	; (8000804 <MX_GPIO_Init+0x12c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <MX_GPIO_Init+0x12c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	4b36      	ldr	r3, [pc, #216]	; (8000804 <MX_GPIO_Init+0x12c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a35      	ldr	r2, [pc, #212]	; (8000804 <MX_GPIO_Init+0x12c>)
 8000730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b33      	ldr	r3, [pc, #204]	; (8000804 <MX_GPIO_Init+0x12c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <MX_GPIO_Init+0x12c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a2e      	ldr	r2, [pc, #184]	; (8000804 <MX_GPIO_Init+0x12c>)
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <MX_GPIO_Init+0x12c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <MX_GPIO_Init+0x12c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a27      	ldr	r2, [pc, #156]	; (8000804 <MX_GPIO_Init+0x12c>)
 8000768:	f043 0308 	orr.w	r3, r3, #8
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <MX_GPIO_Init+0x12c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0308 	and.w	r3, r3, #8
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800077a:	2200      	movs	r2, #0
 800077c:	21ff      	movs	r1, #255	; 0xff
 800077e:	4822      	ldr	r0, [pc, #136]	; (8000808 <MX_GPIO_Init+0x130>)
 8000780:	f002 faea 	bl	8002d58 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000784:	230f      	movs	r3, #15
 8000786:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000788:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800078c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000792:	f107 0314 	add.w	r3, r7, #20
 8000796:	4619      	mov	r1, r3
 8000798:	481c      	ldr	r0, [pc, #112]	; (800080c <MX_GPIO_Init+0x134>)
 800079a:	f002 f931 	bl	8002a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800079e:	23ff      	movs	r3, #255	; 0xff
 80007a0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007aa:	2302      	movs	r3, #2
 80007ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	4619      	mov	r1, r3
 80007b4:	4814      	ldr	r0, [pc, #80]	; (8000808 <MX_GPIO_Init+0x130>)
 80007b6:	f002 f923 	bl	8002a00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2006      	movs	r0, #6
 80007c0:	f000 fff1 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007c4:	2006      	movs	r0, #6
 80007c6:	f001 f80a 	bl	80017de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	2007      	movs	r0, #7
 80007d0:	f000 ffe9 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007d4:	2007      	movs	r0, #7
 80007d6:	f001 f802 	bl	80017de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2008      	movs	r0, #8
 80007e0:	f000 ffe1 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007e4:	2008      	movs	r0, #8
 80007e6:	f000 fffa 	bl	80017de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2009      	movs	r0, #9
 80007f0:	f000 ffd9 	bl	80017a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80007f4:	2009      	movs	r0, #9
 80007f6:	f000 fff2 	bl	80017de <HAL_NVIC_EnableIRQ>

}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	; 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40020c00 	.word	0x40020c00
 800080c:	40021800 	.word	0x40021800

08000810 <LED_OnOff>:

/* USER CODE BEGIN 4 */
void LED_OnOff(int led, int interval)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_SET);
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	b29b      	uxth	r3, r3
 800081e:	2201      	movs	r2, #1
 8000820:	4619      	mov	r1, r3
 8000822:	4809      	ldr	r0, [pc, #36]	; (8000848 <LED_OnOff+0x38>)
 8000824:	f002 fa98 	bl	8002d58 <HAL_GPIO_WritePin>
	HAL_Delay(interval);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 febc 	bl	80015a8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_RESET);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	b29b      	uxth	r3, r3
 8000834:	2200      	movs	r2, #0
 8000836:	4619      	mov	r1, r3
 8000838:	4803      	ldr	r0, [pc, #12]	; (8000848 <LED_OnOff+0x38>)
 800083a:	f002 fa8d 	bl	8002d58 <HAL_GPIO_WritePin>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40020c00 	.word	0x40020c00

0800084c <User_notification>:

void User_notification(struct netif *netif)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	if(netif_is_up(netif)){
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800085a:	f003 0301 	and.w	r3, r3, #1
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d005      	beq.n	8000870 <User_notification+0x24>
		HAL_GPIO_WritePin(GPIO_LED, LED7, GPIO_PIN_SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2140      	movs	r1, #64	; 0x40
 8000868:	4806      	ldr	r0, [pc, #24]	; (8000884 <User_notification+0x38>)
 800086a:	f002 fa75 	bl	8002d58 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIO_LED, LED8, GPIO_PIN_SET);
	}
}
 800086e:	e004      	b.n	800087a <User_notification+0x2e>
		HAL_GPIO_WritePin(GPIO_LED, LED8, GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2180      	movs	r1, #128	; 0x80
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <User_notification+0x38>)
 8000876:	f002 fa6f 	bl	8002d58 <HAL_GPIO_WritePin>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40020c00 	.word	0x40020c00

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800088c:	b672      	cpsid	i
}
 800088e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000890:	e7fe      	b.n	8000890 <Error_Handler+0x8>
	...

08000894 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <HAL_MspInit+0x4c>)
 80008a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <HAL_MspInit+0x4c>)
 80008a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a8:	6453      	str	r3, [r2, #68]	; 0x44
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <HAL_MspInit+0x4c>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	603b      	str	r3, [r7, #0]
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a08      	ldr	r2, [pc, #32]	; (80008e0 <HAL_MspInit+0x4c>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <HAL_MspInit+0x4c>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <NMI_Handler+0x4>

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 fe1a 	bl	8001568 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800093c:	2001      	movs	r0, #1
 800093e:	f002 fa25 	bl	8002d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}

08000946 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800094a:	2002      	movs	r0, #2
 800094c:	f002 fa1e 	bl	8002d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}

08000954 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000958:	2004      	movs	r0, #4
 800095a:	f002 fa17 	bl	8002d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}

08000962 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000966:	2008      	movs	r0, #8
 8000968:	f002 fa10 	bl	8002d8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}

08000970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
	return 1;
 8000974:	2301      	movs	r3, #1
}
 8000976:	4618      	mov	r0, r3
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_kill>:

int _kill(int pid, int sig)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <_kill+0x20>)
 800098c:	2216      	movs	r2, #22
 800098e:	601a      	str	r2, [r3, #0]
	return -1;
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	2000840c 	.word	0x2000840c

080009a4 <_exit>:

void _exit (int status)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80009ac:	f04f 31ff 	mov.w	r1, #4294967295
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff ffe5 	bl	8000980 <_kill>
	while (1) {}		/* Make sure we hang here */
 80009b6:	e7fe      	b.n	80009b6 <_exit+0x12>

080009b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	e00a      	b.n	80009e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ca:	f3af 8000 	nop.w
 80009ce:	4601      	mov	r1, r0
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	1c5a      	adds	r2, r3, #1
 80009d4:	60ba      	str	r2, [r7, #8]
 80009d6:	b2ca      	uxtb	r2, r1
 80009d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	3301      	adds	r3, #1
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbf0      	blt.n	80009ca <_read+0x12>
	}

return len;
 80009e8:	687b      	ldr	r3, [r7, #4]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	60f8      	str	r0, [r7, #12]
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
 8000a02:	e009      	b.n	8000a18 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	1c5a      	adds	r2, r3, #1
 8000a08:	60ba      	str	r2, [r7, #8]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	3301      	adds	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	dbf1      	blt.n	8000a04 <_write+0x12>
	}
	return len;
 8000a20:	687b      	ldr	r3, [r7, #4]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_close>:

int _close(int file)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	return -1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a52:	605a      	str	r2, [r3, #4]
	return 0;
 8000a54:	2300      	movs	r3, #0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <_isatty>:

int _isatty(int file)
{
 8000a62:	b480      	push	{r7}
 8000a64:	b083      	sub	sp, #12
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	6078      	str	r0, [r7, #4]
	return 1;
 8000a6a:	2301      	movs	r3, #1
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr

08000a78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	607a      	str	r2, [r7, #4]
	return 0;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <_sbrk+0x5c>)
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <_sbrk+0x60>)
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d102      	bne.n	8000ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <_sbrk+0x64>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	; (8000afc <_sbrk+0x68>)
 8000ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <_sbrk+0x64>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4413      	add	r3, r2
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d205      	bcs.n	8000ad0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <_sbrk+0x6c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e009      	b.n	8000ae4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <_sbrk+0x64>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <_sbrk+0x64>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4413      	add	r3, r2
 8000ade:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <_sbrk+0x64>)
 8000ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	371c      	adds	r7, #28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	20030000 	.word	0x20030000
 8000af4:	00000400 	.word	0x00000400
 8000af8:	200000e0 	.word	0x200000e0
 8000afc:	20008420 	.word	0x20008420
 8000b00:	2000840c 	.word	0x2000840c

08000b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <SystemInit+0x20>)
 8000b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <SystemInit+0x20>)
 8000b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <tcp_echoclient_connect>:
//	      - 이 함수는 변경할 필요없이 그대로 사용하면 된다.
//
// -------------------------------------------------------------------------

void tcp_echoclient_connect(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
		struct ip4_addr DestIPaddr;
		
		// -- <4-1> create new tcp pcb 
		echoclient_pcb = tcp_new();
 8000b2e:	f006 fc8b 	bl	8007448 <tcp_new>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <tcp_echoclient_connect+0x44>)
 8000b36:	6013      	str	r3, [r2, #0]
		
		if (echoclient_pcb != NULL)  {
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <tcp_echoclient_connect+0x44>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d00a      	beq.n	8000b56 <tcp_echoclient_connect+0x2e>
			// -- <4-2> 접속할 server의 IP를 지정함
			IP4_ADDR( &DestIPaddr, DEST_IP_ADDR0, DEST_IP_ADDR1, DEST_IP_ADDR2, DEST_IP_ADDR3 );
 8000b40:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <tcp_echoclient_connect+0x48>)
 8000b42:	607b      	str	r3, [r7, #4]
			// -- <4-3> 지정된 IP(&DestIPaddr), 포트(DEST_PORT)에 접속함
			tcp_connect(echoclient_pcb, &DestIPaddr, DEST_PORT, tcp_echoclient_connected);
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <tcp_echoclient_connect+0x44>)
 8000b46:	6818      	ldr	r0, [r3, #0]
 8000b48:	1d39      	adds	r1, r7, #4
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <tcp_echoclient_connect+0x4c>)
 8000b4c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000b50:	f005 fd40 	bl	80065d4 <tcp_connect>
			memp_free(MEMP_TCP_PCB, echoclient_pcb);
			#ifdef SERIAL_DEBUG
			printf("\n\r can not create tcp pcb");
			#endif 
		}
}
 8000b54:	e005      	b.n	8000b62 <tcp_echoclient_connect+0x3a>
			memp_free(MEMP_TCP_PCB, echoclient_pcb);
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <tcp_echoclient_connect+0x44>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f003 ffad 	bl	8004abc <memp_free>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000e4 	.word	0x200000e4
 8000b70:	0c25a8c0 	.word	0x0c25a8c0
 8000b74:	08000b79 	.word	0x08000b79

08000b78 <tcp_echoclient_connected>:
  * retval err_t	: returned error 
  */
// ------------------------------------------------------------------------------------

static err_t tcp_echoclient_connected(void *arg, struct tcp_pcb *tpcb, err_t err)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	4613      	mov	r3, r2
 8000b84:	71fb      	strb	r3, [r7, #7]
		// --<5-1> echoclient형 구조체 변수 es를 선언함
		struct echoclient *es = NULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
		
		if (err == ERR_OK)   {
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d14c      	bne.n	8000c2c <tcp_echoclient_connected+0xb4>
				/* allocate structure es to maintain tcp connection informations */
				es = (struct echoclient *)mem_malloc(sizeof(struct echoclient));
 8000b92:	200c      	movs	r0, #12
 8000b94:	f003 fd92 	bl	80046bc <mem_malloc>
 8000b98:	6178      	str	r0, [r7, #20]
				
				if (es != NULL)	{
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d03e      	beq.n	8000c1e <tcp_echoclient_connected+0xa6>
						es->state = ES_CONNECTED;
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	701a      	strb	r2, [r3, #0]
						es->pcb = tpcb;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	68ba      	ldr	r2, [r7, #8]
 8000baa:	605a      	str	r2, [r3, #4]
						
						// -- <5-2-1> 접속완료시에 메시지를 보낸다
						 sprintf((char*)data, " Client is connected ! ");				
 8000bac:	4924      	ldr	r1, [pc, #144]	; (8000c40 <tcp_echoclient_connected+0xc8>)
 8000bae:	4825      	ldr	r0, [pc, #148]	; (8000c44 <tcp_echoclient_connected+0xcc>)
 8000bb0:	f00d ff3e 	bl	800ea30 <siprintf>

						 // -- <5-2-2> 접속완료시에 송신할 데이터를 pbuf (es->p_tx)에 넣는다
						 /* allocate pbuf */
						es->p_tx = pbuf_alloc(PBUF_TRANSPORT, strlen((char*)data) , PBUF_POOL);
 8000bb4:	4823      	ldr	r0, [pc, #140]	; (8000c44 <tcp_echoclient_connected+0xcc>)
 8000bb6:	f7ff fb25 	bl	8000204 <strlen>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	2036      	movs	r0, #54	; 0x36
 8000bc6:	f004 fb0b 	bl	80051e0 <pbuf_alloc>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	609a      	str	r2, [r3, #8]
						 
						if (es->p_tx)  { 
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d02d      	beq.n	8000c34 <tcp_echoclient_connected+0xbc>
							/* pass newly allocated es structure as argument to tpcb */
							tcp_arg(tpcb, es);
 8000bd8:	6979      	ldr	r1, [r7, #20]
 8000bda:	68b8      	ldr	r0, [r7, #8]
 8000bdc:	f006 fc3c 	bl	8007458 <tcp_arg>

							// -- <5-3> 데이터 송신이 완료되면 호출될 콜백함수를 지정
							tcp_recv(tpcb, tcp_echoclient_recv);		  
 8000be0:	4919      	ldr	r1, [pc, #100]	; (8000c48 <tcp_echoclient_connected+0xd0>)
 8000be2:	68b8      	ldr	r0, [r7, #8]
 8000be4:	f006 fc4a 	bl	800747c <tcp_recv>
							// -- <5-4> 데이터 수신이 완료되면 호출될 콜백함수를 지정
							tcp_sent(tpcb, tcp_echoclient_sent);
 8000be8:	4918      	ldr	r1, [pc, #96]	; (8000c4c <tcp_echoclient_connected+0xd4>)
 8000bea:	68b8      	ldr	r0, [r7, #8]
 8000bec:	f006 fc68 	bl	80074c0 <tcp_sent>

							// -- <5-5> polling시 호출될 콜백함수를 지정
							// 	- 이 콜백함수는 주기적으로 호출되어야 한다.
							//	- 이 콜백함수에서는 송신할 데이터 중에서 아직 미송신된 것이
							//	     있는지와 close되어야 할 conecction이 있는지를 체크한다.
							tcp_poll(tpcb, tcp_echoclient_poll, 1);		
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4917      	ldr	r1, [pc, #92]	; (8000c50 <tcp_echoclient_connected+0xd8>)
 8000bf4:	68b8      	ldr	r0, [r7, #8]
 8000bf6:	f006 fc85 	bl	8007504 <tcp_poll>
							
							// pbuf에 있는 데이터를 서버로 송신함
							/* copy data to pbuf */
							pbuf_take(es->p_tx, (char*)data, strlen((char*)data));
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	689c      	ldr	r4, [r3, #8]
 8000bfe:	4811      	ldr	r0, [pc, #68]	; (8000c44 <tcp_echoclient_connected+0xcc>)
 8000c00:	f7ff fb00 	bl	8000204 <strlen>
 8000c04:	4603      	mov	r3, r0
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	461a      	mov	r2, r3
 8000c0a:	490e      	ldr	r1, [pc, #56]	; (8000c44 <tcp_echoclient_connected+0xcc>)
 8000c0c:	4620      	mov	r0, r4
 8000c0e:	f005 f827 	bl	8005c60 <pbuf_take>
							/* send data */
							tcp_echoclient_send(tpcb,es);
 8000c12:	6979      	ldr	r1, [r7, #20]
 8000c14:	68b8      	ldr	r0, [r7, #8]
 8000c16:	f000 f8c9 	bl	8000dac <tcp_echoclient_send>
							
							return ERR_OK;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e00c      	b.n	8000c38 <tcp_echoclient_connected+0xc0>
						}
				}	
				else	{
						/* close connection */
						tcp_echoclient_connection_close(tpcb, es);		  
 8000c1e:	6979      	ldr	r1, [r7, #20]
 8000c20:	68b8      	ldr	r0, [r7, #8]
 8000c22:	f000 f948 	bl	8000eb6 <tcp_echoclient_connection_close>
						/* return memory allocation error */
						return ERR_MEM;  
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e005      	b.n	8000c38 <tcp_echoclient_connected+0xc0>
				}
		}
		else  {
				/* close connection */
				tcp_echoclient_connection_close(tpcb, es);
 8000c2c:	6979      	ldr	r1, [r7, #20]
 8000c2e:	68b8      	ldr	r0, [r7, #8]
 8000c30:	f000 f941 	bl	8000eb6 <tcp_echoclient_connection_close>
		}
		return err;
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	371c      	adds	r7, #28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd90      	pop	{r4, r7, pc}
 8000c40:	0800fda4 	.word	0x0800fda4
 8000c44:	200000e8 	.word	0x200000e8
 8000c48:	08000c55 	.word	0x08000c55
 8000c4c:	08000e39 	.word	0x08000e39
 8000c50:	08000e65 	.word	0x08000e65

08000c54 <tcp_echoclient_recv>:
  * retval err_t	: retuned error  
  */
// ------------------------------------------------------------------------------------

static err_t   tcp_echoclient_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{ 
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
 8000c60:	70fb      	strb	r3, [r7, #3]
		char * cp;
		
	 // -- <6-1> 수신받은 데이터를 cp에 대입
		cp  = p->payload; 
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	617b      	str	r3, [r7, #20]

	 // -- <6-2> cp == <L10>이면 LED1을 Off하고 대응되는 메시지를 서버로 보낸다
	 // 이하 비슷한 작업을 수행한다.

		if(strcmp(cp,"<L10>") == 0) {
 8000c68:	4947      	ldr	r1, [pc, #284]	; (8000d88 <tcp_echoclient_recv+0x134>)
 8000c6a:	6978      	ldr	r0, [r7, #20]
 8000c6c:	f7ff fac0 	bl	80001f0 <strcmp>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d109      	bne.n	8000c8a <tcp_echoclient_recv+0x36>
			HAL_GPIO_WritePin(GPIO_LED, LED1, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2101      	movs	r1, #1
 8000c7a:	4844      	ldr	r0, [pc, #272]	; (8000d8c <tcp_echoclient_recv+0x138>)
 8000c7c:	f002 f86c 	bl	8002d58 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 10);
 8000c80:	210a      	movs	r1, #10
 8000c82:	68b8      	ldr	r0, [r7, #8]
 8000c84:	f000 f936 	bl	8000ef4 <message_send_client>
 8000c88:	e075      	b.n	8000d76 <tcp_echoclient_recv+0x122>
		}
		else if(strcmp(cp,"<L11>") == 0) {
 8000c8a:	4941      	ldr	r1, [pc, #260]	; (8000d90 <tcp_echoclient_recv+0x13c>)
 8000c8c:	6978      	ldr	r0, [r7, #20]
 8000c8e:	f7ff faaf 	bl	80001f0 <strcmp>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d109      	bne.n	8000cac <tcp_echoclient_recv+0x58>
			HAL_GPIO_WritePin(GPIO_LED, LED1, GPIO_PIN_SET);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	483b      	ldr	r0, [pc, #236]	; (8000d8c <tcp_echoclient_recv+0x138>)
 8000c9e:	f002 f85b 	bl	8002d58 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 11);
 8000ca2:	210b      	movs	r1, #11
 8000ca4:	68b8      	ldr	r0, [r7, #8]
 8000ca6:	f000 f925 	bl	8000ef4 <message_send_client>
 8000caa:	e064      	b.n	8000d76 <tcp_echoclient_recv+0x122>
		}
		 else if(strcmp(cp,"<L20>") == 0) {
 8000cac:	4939      	ldr	r1, [pc, #228]	; (8000d94 <tcp_echoclient_recv+0x140>)
 8000cae:	6978      	ldr	r0, [r7, #20]
 8000cb0:	f7ff fa9e 	bl	80001f0 <strcmp>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d109      	bne.n	8000cce <tcp_echoclient_recv+0x7a>
			HAL_GPIO_WritePin(GPIO_LED, LED2, GPIO_PIN_RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4833      	ldr	r0, [pc, #204]	; (8000d8c <tcp_echoclient_recv+0x138>)
 8000cc0:	f002 f84a 	bl	8002d58 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 20);
 8000cc4:	2114      	movs	r1, #20
 8000cc6:	68b8      	ldr	r0, [r7, #8]
 8000cc8:	f000 f914 	bl	8000ef4 <message_send_client>
 8000ccc:	e053      	b.n	8000d76 <tcp_echoclient_recv+0x122>
		 }
		else if(strcmp(cp,"<L21>") == 0) {
 8000cce:	4932      	ldr	r1, [pc, #200]	; (8000d98 <tcp_echoclient_recv+0x144>)
 8000cd0:	6978      	ldr	r0, [r7, #20]
 8000cd2:	f7ff fa8d 	bl	80001f0 <strcmp>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d109      	bne.n	8000cf0 <tcp_echoclient_recv+0x9c>
			HAL_GPIO_WritePin(GPIO_LED, LED2, GPIO_PIN_SET);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2102      	movs	r1, #2
 8000ce0:	482a      	ldr	r0, [pc, #168]	; (8000d8c <tcp_echoclient_recv+0x138>)
 8000ce2:	f002 f839 	bl	8002d58 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 21);
 8000ce6:	2115      	movs	r1, #21
 8000ce8:	68b8      	ldr	r0, [r7, #8]
 8000cea:	f000 f903 	bl	8000ef4 <message_send_client>
 8000cee:	e042      	b.n	8000d76 <tcp_echoclient_recv+0x122>
		}
		else if(strcmp(cp,"<L30>") == 0)	{
 8000cf0:	492a      	ldr	r1, [pc, #168]	; (8000d9c <tcp_echoclient_recv+0x148>)
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff fa7c 	bl	80001f0 <strcmp>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d109      	bne.n	8000d12 <tcp_echoclient_recv+0xbe>
			HAL_GPIO_WritePin(GPIO_LED, LED3, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2104      	movs	r1, #4
 8000d02:	4822      	ldr	r0, [pc, #136]	; (8000d8c <tcp_echoclient_recv+0x138>)
 8000d04:	f002 f828 	bl	8002d58 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 30);
 8000d08:	211e      	movs	r1, #30
 8000d0a:	68b8      	ldr	r0, [r7, #8]
 8000d0c:	f000 f8f2 	bl	8000ef4 <message_send_client>
 8000d10:	e031      	b.n	8000d76 <tcp_echoclient_recv+0x122>
		}
		else if(strcmp(cp,"<L31>") == 0)	{
 8000d12:	4923      	ldr	r1, [pc, #140]	; (8000da0 <tcp_echoclient_recv+0x14c>)
 8000d14:	6978      	ldr	r0, [r7, #20]
 8000d16:	f7ff fa6b 	bl	80001f0 <strcmp>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d109      	bne.n	8000d34 <tcp_echoclient_recv+0xe0>
			HAL_GPIO_WritePin(GPIO_LED, LED3, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2104      	movs	r1, #4
 8000d24:	4819      	ldr	r0, [pc, #100]	; (8000d8c <tcp_echoclient_recv+0x138>)
 8000d26:	f002 f817 	bl	8002d58 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 31);
 8000d2a:	211f      	movs	r1, #31
 8000d2c:	68b8      	ldr	r0, [r7, #8]
 8000d2e:	f000 f8e1 	bl	8000ef4 <message_send_client>
 8000d32:	e020      	b.n	8000d76 <tcp_echoclient_recv+0x122>
		}
		else if(strcmp(cp,"<L40>") == 0)	{
 8000d34:	491b      	ldr	r1, [pc, #108]	; (8000da4 <tcp_echoclient_recv+0x150>)
 8000d36:	6978      	ldr	r0, [r7, #20]
 8000d38:	f7ff fa5a 	bl	80001f0 <strcmp>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d109      	bne.n	8000d56 <tcp_echoclient_recv+0x102>
			HAL_GPIO_WritePin(GPIO_LED, LED4,GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2108      	movs	r1, #8
 8000d46:	4811      	ldr	r0, [pc, #68]	; (8000d8c <tcp_echoclient_recv+0x138>)
 8000d48:	f002 f806 	bl	8002d58 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 40);
 8000d4c:	2128      	movs	r1, #40	; 0x28
 8000d4e:	68b8      	ldr	r0, [r7, #8]
 8000d50:	f000 f8d0 	bl	8000ef4 <message_send_client>
 8000d54:	e00f      	b.n	8000d76 <tcp_echoclient_recv+0x122>
		}
		else if(strcmp(cp,"<L41>") == 0)	{
 8000d56:	4914      	ldr	r1, [pc, #80]	; (8000da8 <tcp_echoclient_recv+0x154>)
 8000d58:	6978      	ldr	r0, [r7, #20]
 8000d5a:	f7ff fa49 	bl	80001f0 <strcmp>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d108      	bne.n	8000d76 <tcp_echoclient_recv+0x122>
			HAL_GPIO_WritePin(GPIO_LED, LED4, GPIO_PIN_SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2108      	movs	r1, #8
 8000d68:	4808      	ldr	r0, [pc, #32]	; (8000d8c <tcp_echoclient_recv+0x138>)
 8000d6a:	f001 fff5 	bl	8002d58 <HAL_GPIO_WritePin>
			message_send_client(tpcb, 41);
 8000d6e:	2129      	movs	r1, #41	; 0x29
 8000d70:	68b8      	ldr	r0, [r7, #8]
 8000d72:	f000 f8bf 	bl	8000ef4 <message_send_client>
		}
		
		// Free the p buffer 
		pbuf_free(p);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f004 fd16 	bl	80057a8 <pbuf_free>

		return ERR_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3718      	adds	r7, #24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	0800fdbc 	.word	0x0800fdbc
 8000d8c:	40020c00 	.word	0x40020c00
 8000d90:	0800fdc4 	.word	0x0800fdc4
 8000d94:	0800fdcc 	.word	0x0800fdcc
 8000d98:	0800fdd4 	.word	0x0800fdd4
 8000d9c:	0800fddc 	.word	0x0800fddc
 8000da0:	0800fde4 	.word	0x0800fde4
 8000da4:	0800fdec 	.word	0x0800fdec
 8000da8:	0800fdf4 	.word	0x0800fdf4

08000dac <tcp_echoclient_send>:
  * retval 	None 
  */
// ------------------------------------------------------------------------------------

static void tcp_echoclient_send(struct tcp_pcb *tpcb, struct echoclient * es)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
		struct pbuf *ptr;
		err_t wr_err = ERR_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	73fb      	strb	r3, [r7, #15]
	 
		while ((wr_err == ERR_OK) &&
 8000dba:	e029      	b.n	8000e10 <tcp_echoclient_send+0x64>
					 (es->p_tx != NULL) && 
					 (es->p_tx->len <= tcp_sndbuf(tpcb)))
		{		
			/* get pointer on pbuf from es structure */
			ptr = es->p_tx;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	60bb      	str	r3, [r7, #8]
			/* enqueue data for transmission */
			wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	6859      	ldr	r1, [r3, #4]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	895a      	ldrh	r2, [r3, #10]
 8000dca:	2301      	movs	r3, #1
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f009 fa4b 	bl	800a268 <tcp_write>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	73fb      	strb	r3, [r7, #15]
			
			if (wr_err == ERR_OK)	{ 
 8000dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d110      	bne.n	8000e00 <tcp_echoclient_send+0x54>
					/* continue with next pbuf in chain (if any) */
					es->p_tx = ptr->next;			  
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	609a      	str	r2, [r3, #8]
					if(es->p_tx != NULL)  {
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d004      	beq.n	8000df8 <tcp_echoclient_send+0x4c>
						/* increment reference count for es->p */
						pbuf_ref(es->p_tx);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f004 fd78 	bl	80058e8 <pbuf_ref>
					}
							/* free pbuf:will free pbufs up to es->p (because es->p has a reference count > 0) */
					pbuf_free(ptr);
 8000df8:	68b8      	ldr	r0, [r7, #8]
 8000dfa:	f004 fcd5 	bl	80057a8 <pbuf_free>
 8000dfe:	e007      	b.n	8000e10 <tcp_echoclient_send+0x64>
			 }
			
			 else if(wr_err == ERR_MEM)   {
 8000e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e08:	d102      	bne.n	8000e10 <tcp_echoclient_send+0x64>
					/* we are low on memory, try later, defer to poll */
				 es->p_tx = ptr;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	68ba      	ldr	r2, [r7, #8]
 8000e0e:	609a      	str	r2, [r3, #8]
		while ((wr_err == ERR_OK) &&
 8000e10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d10b      	bne.n	8000e30 <tcp_echoclient_send+0x84>
					 (es->p_tx != NULL) && 
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
		while ((wr_err == ERR_OK) &&
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d007      	beq.n	8000e30 <tcp_echoclient_send+0x84>
					 (es->p_tx->len <= tcp_sndbuf(tpcb)))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	895a      	ldrh	r2, [r3, #10]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
					 (es->p_tx != NULL) && 
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d9c5      	bls.n	8000dbc <tcp_echoclient_send+0x10>
			 
			 else  {
			 /* other problem ?? */
			 }
		}
}
 8000e30:	bf00      	nop
 8000e32:	3710      	adds	r7, #16
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <tcp_echoclient_sent>:
  * retval 	err_t		: returned error code
  */
// ------------------------------------------------------------------------------------

static err_t tcp_echoclient_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	4613      	mov	r3, r2
 8000e44:	80fb      	strh	r3, [r7, #6]
		struct echoclient *es;

		LWIP_UNUSED_ARG(len);

		es = (struct echoclient *)arg;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	617b      	str	r3, [r7, #20]
		
		if(es->p_tx != NULL)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <tcp_echoclient_sent+0x22>
		{
			/* still got pbufs to send */
			tcp_echoclient_send(tpcb, es);
 8000e52:	6979      	ldr	r1, [r7, #20]
 8000e54:	68b8      	ldr	r0, [r7, #8]
 8000e56:	f7ff ffa9 	bl	8000dac <tcp_echoclient_send>
		}

		return ERR_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <tcp_echoclient_poll>:
  * retval 	err_t	: error code
  */
// ------------------------------------------------------------------------------------

static err_t tcp_echoclient_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
		err_t ret_err;
		struct echoclient *es;

		es = (struct echoclient*)arg;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60bb      	str	r3, [r7, #8]
		if (es != NULL)
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d013      	beq.n	8000ea0 <tcp_echoclient_poll+0x3c>
		{
			if (es->p_tx != NULL)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d004      	beq.n	8000e8a <tcp_echoclient_poll+0x26>
			{
				/* there is a remaining pbuf (chain) , try to send data */
				tcp_echoclient_send(tpcb, es);
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	6838      	ldr	r0, [r7, #0]
 8000e84:	f7ff ff92 	bl	8000dac <tcp_echoclient_send>
 8000e88:	e007      	b.n	8000e9a <tcp_echoclient_poll+0x36>
			}
			else
			{
				/* no remaining pbuf (chain)  */
				if(es->state == ES_CLOSING)
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d103      	bne.n	8000e9a <tcp_echoclient_poll+0x36>
				{
					/* close tcp connection */
					tcp_echoclient_connection_close(tpcb, es);
 8000e92:	68b9      	ldr	r1, [r7, #8]
 8000e94:	6838      	ldr	r0, [r7, #0]
 8000e96:	f000 f80e 	bl	8000eb6 <tcp_echoclient_connection_close>
				}
			}
			ret_err = ERR_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
 8000e9e:	e004      	b.n	8000eaa <tcp_echoclient_poll+0x46>
		}
		else
		{
			/* nothing to be done */
			tcp_abort(tpcb);
 8000ea0:	6838      	ldr	r0, [r7, #0]
 8000ea2:	f005 fa9b 	bl	80063dc <tcp_abort>
			ret_err = ERR_ABRT;
 8000ea6:	23f3      	movs	r3, #243	; 0xf3
 8000ea8:	73fb      	strb	r3, [r7, #15]
		}
		return ret_err;
 8000eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <tcp_echoclient_connection_close>:
  * retval 	None
  */
// ------------------------------------------------------------------------------------

static void tcp_echoclient_connection_close(struct tcp_pcb *tpcb, struct echoclient * es )
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	6039      	str	r1, [r7, #0]
		/* remove callbacks */
		tcp_recv(tpcb, NULL);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f006 fada 	bl	800747c <tcp_recv>
		tcp_sent(tpcb, NULL);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f006 faf8 	bl	80074c0 <tcp_sent>
		tcp_poll(tpcb, NULL,0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	6878      	ldr	r0, [r7, #4]
 8000ed6:	f006 fb15 	bl	8007504 <tcp_poll>

		if (es != NULL) {
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <tcp_echoclient_connection_close+0x30>
			mem_free(es);
 8000ee0:	6838      	ldr	r0, [r7, #0]
 8000ee2:	f003 fa85 	bl	80043f0 <mem_free>
		}

		/* close tcp connection */
		tcp_close(tpcb);  
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f005 f98e 	bl	8006208 <tcp_close>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <message_send_client>:
//  -- <11>  F429 Board(Client)에서 PC(Server)로 메시지를 전송하는 함수
//
// -------------------------------------------------------------------------

void message_send_client(struct tcp_pcb *tpcb, int number)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
			struct echoclient *es = NULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]

			/* allocate structure es to maintain tcp connection informations */
			es = (struct echoclient *)mem_malloc(sizeof(struct echoclient));
 8000f02:	200c      	movs	r0, #12
 8000f04:	f003 fbda 	bl	80046bc <mem_malloc>
 8000f08:	60f8      	str	r0, [r7, #12]
			es->pcb = tpcb;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	605a      	str	r2, [r3, #4]
		
			switch(number) {
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	2b29      	cmp	r3, #41	; 0x29
 8000f14:	dc4a      	bgt.n	8000fac <message_send_client+0xb8>
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	2b0a      	cmp	r3, #10
 8000f1a:	db78      	blt.n	800100e <message_send_client+0x11a>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	3b0a      	subs	r3, #10
 8000f20:	2b1f      	cmp	r3, #31
 8000f22:	d874      	bhi.n	800100e <message_send_client+0x11a>
 8000f24:	a201      	add	r2, pc, #4	; (adr r2, 8000f2c <message_send_client+0x38>)
 8000f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2a:	bf00      	nop
 8000f2c:	08000fb5 	.word	0x08000fb5
 8000f30:	08000fbf 	.word	0x08000fbf
 8000f34:	0800100f 	.word	0x0800100f
 8000f38:	0800100f 	.word	0x0800100f
 8000f3c:	0800100f 	.word	0x0800100f
 8000f40:	0800100f 	.word	0x0800100f
 8000f44:	0800100f 	.word	0x0800100f
 8000f48:	0800100f 	.word	0x0800100f
 8000f4c:	0800100f 	.word	0x0800100f
 8000f50:	0800100f 	.word	0x0800100f
 8000f54:	08000fc9 	.word	0x08000fc9
 8000f58:	08000fd3 	.word	0x08000fd3
 8000f5c:	0800100f 	.word	0x0800100f
 8000f60:	0800100f 	.word	0x0800100f
 8000f64:	0800100f 	.word	0x0800100f
 8000f68:	0800100f 	.word	0x0800100f
 8000f6c:	0800100f 	.word	0x0800100f
 8000f70:	0800100f 	.word	0x0800100f
 8000f74:	0800100f 	.word	0x0800100f
 8000f78:	0800100f 	.word	0x0800100f
 8000f7c:	08000fdd 	.word	0x08000fdd
 8000f80:	08000fe7 	.word	0x08000fe7
 8000f84:	0800100f 	.word	0x0800100f
 8000f88:	0800100f 	.word	0x0800100f
 8000f8c:	0800100f 	.word	0x0800100f
 8000f90:	0800100f 	.word	0x0800100f
 8000f94:	0800100f 	.word	0x0800100f
 8000f98:	0800100f 	.word	0x0800100f
 8000f9c:	0800100f 	.word	0x0800100f
 8000fa0:	0800100f 	.word	0x0800100f
 8000fa4:	08000ff1 	.word	0x08000ff1
 8000fa8:	08000ffb 	.word	0x08000ffb
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	2b63      	cmp	r3, #99	; 0x63
 8000fb0:	d028      	beq.n	8001004 <message_send_client+0x110>
 8000fb2:	e02c      	b.n	800100e <message_send_client+0x11a>
					// --  <11-1>  number의 값에 따라 대응되는 메시지를 data에 저장.
					case 10 :	sprintf((char*)data, " LED 1 is OFF");
 8000fb4:	4929      	ldr	r1, [pc, #164]	; (800105c <message_send_client+0x168>)
 8000fb6:	482a      	ldr	r0, [pc, #168]	; (8001060 <message_send_client+0x16c>)
 8000fb8:	f00d fd3a 	bl	800ea30 <siprintf>
									break;
 8000fbc:	e027      	b.n	800100e <message_send_client+0x11a>
					case 11 :	sprintf((char*)data, " LED 1 is ON !!");
 8000fbe:	4929      	ldr	r1, [pc, #164]	; (8001064 <message_send_client+0x170>)
 8000fc0:	4827      	ldr	r0, [pc, #156]	; (8001060 <message_send_client+0x16c>)
 8000fc2:	f00d fd35 	bl	800ea30 <siprintf>
									break;
 8000fc6:	e022      	b.n	800100e <message_send_client+0x11a>
					case 20 :	sprintf((char*)data, " LED 2 is OFF");
 8000fc8:	4927      	ldr	r1, [pc, #156]	; (8001068 <message_send_client+0x174>)
 8000fca:	4825      	ldr	r0, [pc, #148]	; (8001060 <message_send_client+0x16c>)
 8000fcc:	f00d fd30 	bl	800ea30 <siprintf>
									break;
 8000fd0:	e01d      	b.n	800100e <message_send_client+0x11a>
					case 21 :	sprintf((char*)data, " LED 2 is ON !!");
 8000fd2:	4926      	ldr	r1, [pc, #152]	; (800106c <message_send_client+0x178>)
 8000fd4:	4822      	ldr	r0, [pc, #136]	; (8001060 <message_send_client+0x16c>)
 8000fd6:	f00d fd2b 	bl	800ea30 <siprintf>
									break;
 8000fda:	e018      	b.n	800100e <message_send_client+0x11a>
					case 30 :	sprintf((char*)data, " LED 3 is OFF");
 8000fdc:	4924      	ldr	r1, [pc, #144]	; (8001070 <message_send_client+0x17c>)
 8000fde:	4820      	ldr	r0, [pc, #128]	; (8001060 <message_send_client+0x16c>)
 8000fe0:	f00d fd26 	bl	800ea30 <siprintf>
									break;
 8000fe4:	e013      	b.n	800100e <message_send_client+0x11a>
					case 31 :	sprintf((char*)data, " LED 3 is ON !!");
 8000fe6:	4923      	ldr	r1, [pc, #140]	; (8001074 <message_send_client+0x180>)
 8000fe8:	481d      	ldr	r0, [pc, #116]	; (8001060 <message_send_client+0x16c>)
 8000fea:	f00d fd21 	bl	800ea30 <siprintf>
									break;
 8000fee:	e00e      	b.n	800100e <message_send_client+0x11a>
					case 40 :	sprintf((char*)data, " LED 4 is OFF");
 8000ff0:	4921      	ldr	r1, [pc, #132]	; (8001078 <message_send_client+0x184>)
 8000ff2:	481b      	ldr	r0, [pc, #108]	; (8001060 <message_send_client+0x16c>)
 8000ff4:	f00d fd1c 	bl	800ea30 <siprintf>
									break;
 8000ff8:	e009      	b.n	800100e <message_send_client+0x11a>
					case 41 :	sprintf((char*)data, " LED 4 is ON !!");
 8000ffa:	4920      	ldr	r1, [pc, #128]	; (800107c <message_send_client+0x188>)
 8000ffc:	4818      	ldr	r0, [pc, #96]	; (8001060 <message_send_client+0x16c>)
 8000ffe:	f00d fd17 	bl	800ea30 <siprintf>
									break;
 8001002:	e004      	b.n	800100e <message_send_client+0x11a>
					case 99 :	sprintf((char*)data, " Connected ! ");
 8001004:	491e      	ldr	r1, [pc, #120]	; (8001080 <message_send_client+0x18c>)
 8001006:	4816      	ldr	r0, [pc, #88]	; (8001060 <message_send_client+0x16c>)
 8001008:	f00d fd12 	bl	800ea30 <siprintf>
									break;							
 800100c:	bf00      	nop
			}

			// -- <11-2> 데이터를 보냄 : - server의 message_send() 와 비슷한 방법을 사용
			//                         송신할 데이터를 es->p_tx (pbuf)에 넣는다 (allocate pbuf )

			es->p_tx = pbuf_alloc(PBUF_TRANSPORT, strlen((char*)data) , PBUF_POOL);
 800100e:	4814      	ldr	r0, [pc, #80]	; (8001060 <message_send_client+0x16c>)
 8001010:	f7ff f8f8 	bl	8000204 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	b29b      	uxth	r3, r3
 8001018:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800101c:	4619      	mov	r1, r3
 800101e:	2036      	movs	r0, #54	; 0x36
 8001020:	f004 f8de 	bl	80051e0 <pbuf_alloc>
 8001024:	4602      	mov	r2, r0
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	609a      	str	r2, [r3, #8]
			
			if (es->p_tx) {
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00f      	beq.n	8001052 <message_send_client+0x15e>
						// copy data to pbuf 
						pbuf_take(es->p_tx, (char*)data, strlen((char*)data));
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	689c      	ldr	r4, [r3, #8]
 8001036:	480a      	ldr	r0, [pc, #40]	; (8001060 <message_send_client+0x16c>)
 8001038:	f7ff f8e4 	bl	8000204 <strlen>
 800103c:	4603      	mov	r3, r0
 800103e:	b29b      	uxth	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	4907      	ldr	r1, [pc, #28]	; (8001060 <message_send_client+0x16c>)
 8001044:	4620      	mov	r0, r4
 8001046:	f004 fe0b 	bl	8005c60 <pbuf_take>
						// send data 
						tcp_echoclient_send(tpcb, es);
 800104a:	68f9      	ldr	r1, [r7, #12]
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff fead 	bl	8000dac <tcp_echoclient_send>
			}		
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	bf00      	nop
 800105c:	0800fdfc 	.word	0x0800fdfc
 8001060:	200000e8 	.word	0x200000e8
 8001064:	0800fe0c 	.word	0x0800fe0c
 8001068:	0800fe1c 	.word	0x0800fe1c
 800106c:	0800fe2c 	.word	0x0800fe2c
 8001070:	0800fe3c 	.word	0x0800fe3c
 8001074:	0800fe4c 	.word	0x0800fe4c
 8001078:	0800fe5c 	.word	0x0800fe5c
 800107c:	0800fe6c 	.word	0x0800fe6c
 8001080:	0800fe7c 	.word	0x0800fe7c

08001084 <key_send>:
//  -- <12> SW가 눌러지면 대응되는 메시지를 Client --> Server로 전송하는 함수
//
// -------------------------------------------------------------------------

void key_send(int key_number)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
			struct echoclient *es = NULL;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
			
			/* allocate structure es to maintain tcp connection informations */
			es = (struct echoclient *) mem_malloc( sizeof(struct echoclient) );
 8001090:	200c      	movs	r0, #12
 8001092:	f003 fb13 	bl	80046bc <mem_malloc>
 8001096:	60f8      	str	r0, [r7, #12]
				
			if (es != NULL)	{
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d04a      	beq.n	8001134 <key_send+0xb0>
				es->pcb = echoclient_pcb;
 800109e:	4b27      	ldr	r3, [pc, #156]	; (800113c <key_send+0xb8>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	605a      	str	r2, [r3, #4]
						
				switch(key_number) {
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d81e      	bhi.n	80010ec <key_send+0x68>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <key_send+0x30>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	080010c5 	.word	0x080010c5
 80010b8:	080010cf 	.word	0x080010cf
 80010bc:	080010d9 	.word	0x080010d9
 80010c0:	080010e3 	.word	0x080010e3
					// --  <12-1>  key_number(SW)의 값에 따라 대응되는 메시지를 data에 저장.
					case 1 :	sprintf((char*)data, " SW 1 pressed !");								break;
 80010c4:	491e      	ldr	r1, [pc, #120]	; (8001140 <key_send+0xbc>)
 80010c6:	481f      	ldr	r0, [pc, #124]	; (8001144 <key_send+0xc0>)
 80010c8:	f00d fcb2 	bl	800ea30 <siprintf>
 80010cc:	e00e      	b.n	80010ec <key_send+0x68>
					case 2 :	sprintf((char*)data, " SW 2 pressed !");								break;
 80010ce:	491e      	ldr	r1, [pc, #120]	; (8001148 <key_send+0xc4>)
 80010d0:	481c      	ldr	r0, [pc, #112]	; (8001144 <key_send+0xc0>)
 80010d2:	f00d fcad 	bl	800ea30 <siprintf>
 80010d6:	e009      	b.n	80010ec <key_send+0x68>
					case 3 :	sprintf((char*)data, " SW 3 pressed !");								break;
 80010d8:	491c      	ldr	r1, [pc, #112]	; (800114c <key_send+0xc8>)
 80010da:	481a      	ldr	r0, [pc, #104]	; (8001144 <key_send+0xc0>)
 80010dc:	f00d fca8 	bl	800ea30 <siprintf>
 80010e0:	e004      	b.n	80010ec <key_send+0x68>
					case 4 :	sprintf((char*)data, " SW 4 pressed !");								break;
 80010e2:	491b      	ldr	r1, [pc, #108]	; (8001150 <key_send+0xcc>)
 80010e4:	4817      	ldr	r0, [pc, #92]	; (8001144 <key_send+0xc0>)
 80010e6:	f00d fca3 	bl	800ea30 <siprintf>
 80010ea:	bf00      	nop
				}

				// -- <12-2> 데이터를 보냄
				// 송신할 데이터를 es->p_tx (pbuf)에 넣는다 /* allocate pbuf */

				es->p_tx = pbuf_alloc(PBUF_TRANSPORT, strlen((char*)data) , PBUF_POOL);
 80010ec:	4815      	ldr	r0, [pc, #84]	; (8001144 <key_send+0xc0>)
 80010ee:	f7ff f889 	bl	8000204 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80010fa:	4619      	mov	r1, r3
 80010fc:	2036      	movs	r0, #54	; 0x36
 80010fe:	f004 f86f 	bl	80051e0 <pbuf_alloc>
 8001102:	4602      	mov	r2, r0
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	609a      	str	r2, [r3, #8]
				
				if (es->p_tx) {
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d011      	beq.n	8001134 <key_send+0xb0>
							/* copy data to pbuf */
							pbuf_take(es->p_tx, (char*)data, strlen((char*)data));
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	689c      	ldr	r4, [r3, #8]
 8001114:	480b      	ldr	r0, [pc, #44]	; (8001144 <key_send+0xc0>)
 8001116:	f7ff f875 	bl	8000204 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29b      	uxth	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	4908      	ldr	r1, [pc, #32]	; (8001144 <key_send+0xc0>)
 8001122:	4620      	mov	r0, r4
 8001124:	f004 fd9c 	bl	8005c60 <pbuf_take>
							/* send data */
							tcp_echoclient_send(echoclient_pcb, es);
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <key_send+0xb8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68f9      	ldr	r1, [r7, #12]
 800112e:	4618      	mov	r0, r3
 8001130:	f7ff fe3c 	bl	8000dac <tcp_echoclient_send>
				}
			}			
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	200000e4 	.word	0x200000e4
 8001140:	0800fe8c 	.word	0x0800fe8c
 8001144:	200000e8 	.word	0x200000e8
 8001148:	0800fe9c 	.word	0x0800fe9c
 800114c:	0800feac 	.word	0x0800feac
 8001150:	0800febc 	.word	0x0800febc

08001154 <HAL_GPIO_EXTI_Callback>:
// -- <13> GPIO의 EXTI 가 발생하면 (즉, SW가 눌러지면) 호출되는 함수
//
// ------------------------------------------------------------------------

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	80fb      	strh	r3, [r7, #6]
			// -- <13-1> 눌러지는 SW 값에 따라 key_send( ) 함수를 호출함

			if (GPIO_Pin == SW1)  {
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d102      	bne.n	800116a <HAL_GPIO_EXTI_Callback+0x16>
				key_send(1);
 8001164:	2001      	movs	r0, #1
 8001166:	f7ff ff8d 	bl	8001084 <key_send>
			}
			if (GPIO_Pin == SW2)  {
 800116a:	88fb      	ldrh	r3, [r7, #6]
 800116c:	2b02      	cmp	r3, #2
 800116e:	d102      	bne.n	8001176 <HAL_GPIO_EXTI_Callback+0x22>
				key_send(2);
 8001170:	2002      	movs	r0, #2
 8001172:	f7ff ff87 	bl	8001084 <key_send>
			}
			if (GPIO_Pin == SW3)  {
 8001176:	88fb      	ldrh	r3, [r7, #6]
 8001178:	2b04      	cmp	r3, #4
 800117a:	d102      	bne.n	8001182 <HAL_GPIO_EXTI_Callback+0x2e>
				key_send(3);
 800117c:	2003      	movs	r0, #3
 800117e:	f7ff ff81 	bl	8001084 <key_send>
			}
			if (GPIO_Pin == SW4)  {
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	2b08      	cmp	r3, #8
 8001186:	d102      	bne.n	800118e <HAL_GPIO_EXTI_Callback+0x3a>
				key_send(4);
 8001188:	2004      	movs	r0, #4
 800118a:	f7ff ff7b 	bl	8001084 <key_send>
			}
			
			// -- <13-2> SW의 chattering 현상을 방지하기 위해 시간지연을 준다
			for (int i=0; i<=100000; i++) ;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	e002      	b.n	800119a <HAL_GPIO_EXTI_Callback+0x46>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	3301      	adds	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	4a03      	ldr	r2, [pc, #12]	; (80011ac <HAL_GPIO_EXTI_Callback+0x58>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	ddf8      	ble.n	8001194 <HAL_GPIO_EXTI_Callback+0x40>
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	000186a0 	.word	0x000186a0

080011b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80011b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011e8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011b6:	490e      	ldr	r1, [pc, #56]	; (80011f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011b8:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a0b      	ldr	r2, [pc, #44]	; (80011f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011cc:	4c0b      	ldr	r4, [pc, #44]	; (80011fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011da:	f7ff fc93 	bl	8000b04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011de:	f00d fb6d 	bl	800e8bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011e2:	f7ff f9ef 	bl	80005c4 <main>
  bx  lr    
 80011e6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80011e8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80011f4:	08012b04 	.word	0x08012b04
  ldr r2, =_sbss
 80011f8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80011fc:	2000841c 	.word	0x2000841c

08001200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC_IRQHandler>

08001202 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <LAN8742_RegisterBusIO+0x28>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d007      	beq.n	800122a <LAN8742_RegisterBusIO+0x28>
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <LAN8742_RegisterBusIO+0x28>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800122a:	f04f 33ff 	mov.w	r3, #4294967295
 800122e:	e014      	b.n	800125a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685a      	ldr	r2, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	68da      	ldr	r2, [r3, #12]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d17c      	bne.n	8001380 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2220      	movs	r2, #32
 8001298:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e01c      	b.n	80012da <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	f107 0208 	add.w	r2, r7, #8
 80012a8:	2112      	movs	r1, #18
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	4798      	blx	r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da03      	bge.n	80012bc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80012b4:	f06f 0304 	mvn.w	r3, #4
 80012b8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80012ba:	e00b      	b.n	80012d4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	f003 031f 	and.w	r3, r3, #31
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d105      	bne.n	80012d4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
         break;
 80012d2:	e005      	b.n	80012e0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	2b1f      	cmp	r3, #31
 80012de:	d9df      	bls.n	80012a0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b1f      	cmp	r3, #31
 80012e6:	d902      	bls.n	80012ee <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80012e8:	f06f 0302 	mvn.w	r3, #2
 80012ec:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d145      	bne.n	8001380 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	6810      	ldr	r0, [r2, #0]
 80012fc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001300:	2100      	movs	r1, #0
 8001302:	4798      	blx	r3
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	db37      	blt.n	800137a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	6810      	ldr	r0, [r2, #0]
 8001312:	f107 0208 	add.w	r2, r7, #8
 8001316:	2100      	movs	r1, #0
 8001318:	4798      	blx	r3
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	db28      	blt.n	8001372 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4798      	blx	r3
 8001326:	4603      	mov	r3, r0
 8001328:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800132a:	e01c      	b.n	8001366 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	4798      	blx	r3
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800133e:	d80e      	bhi.n	800135e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	695b      	ldr	r3, [r3, #20]
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	6810      	ldr	r0, [r2, #0]
 8001348:	f107 0208 	add.w	r2, r7, #8
 800134c:	2100      	movs	r1, #0
 800134e:	4798      	blx	r3
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	da07      	bge.n	8001366 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001356:	f06f 0304 	mvn.w	r3, #4
 800135a:	613b      	str	r3, [r7, #16]
                 break;
 800135c:	e010      	b.n	8001380 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800135e:	f06f 0301 	mvn.w	r3, #1
 8001362:	613b      	str	r3, [r7, #16]
               break;
 8001364:	e00c      	b.n	8001380 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d1dd      	bne.n	800132c <LAN8742_Init+0xc6>
 8001370:	e006      	b.n	8001380 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001372:	f06f 0304 	mvn.w	r3, #4
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	e002      	b.n	8001380 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800137a:	f06f 0303 	mvn.w	r3, #3
 800137e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d112      	bne.n	80013ac <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4798      	blx	r3
 800138c:	4603      	mov	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001390:	bf00      	nop
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	4798      	blx	r3
 8001398:	4603      	mov	r3, r0
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013a4:	d9f5      	bls.n	8001392 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80013ac:	693b      	ldr	r3, [r7, #16]
 }
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	6810      	ldr	r0, [r2, #0]
 80013ca:	f107 020c 	add.w	r2, r7, #12
 80013ce:	2101      	movs	r1, #1
 80013d0:	4798      	blx	r3
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	da02      	bge.n	80013de <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013d8:	f06f 0304 	mvn.w	r3, #4
 80013dc:	e06e      	b.n	80014bc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6810      	ldr	r0, [r2, #0]
 80013e6:	f107 020c 	add.w	r2, r7, #12
 80013ea:	2101      	movs	r1, #1
 80013ec:	4798      	blx	r3
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	da02      	bge.n	80013fa <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013f4:	f06f 0304 	mvn.w	r3, #4
 80013f8:	e060      	b.n	80014bc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d101      	bne.n	8001408 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001404:	2301      	movs	r3, #1
 8001406:	e059      	b.n	80014bc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	695b      	ldr	r3, [r3, #20]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6810      	ldr	r0, [r2, #0]
 8001410:	f107 020c 	add.w	r2, r7, #12
 8001414:	2100      	movs	r1, #0
 8001416:	4798      	blx	r3
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	da02      	bge.n	8001424 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800141e:	f06f 0304 	mvn.w	r3, #4
 8001422:	e04b      	b.n	80014bc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d11b      	bne.n	8001466 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d006      	beq.n	8001446 <LAN8742_GetLinkState+0x90>
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001442:	2302      	movs	r3, #2
 8001444:	e03a      	b.n	80014bc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001450:	2303      	movs	r3, #3
 8001452:	e033      	b.n	80014bc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800145e:	2304      	movs	r3, #4
 8001460:	e02c      	b.n	80014bc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001462:	2305      	movs	r3, #5
 8001464:	e02a      	b.n	80014bc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6810      	ldr	r0, [r2, #0]
 800146e:	f107 020c 	add.w	r2, r7, #12
 8001472:	211f      	movs	r1, #31
 8001474:	4798      	blx	r3
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	da02      	bge.n	8001482 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800147c:	f06f 0304 	mvn.w	r3, #4
 8001480:	e01c      	b.n	80014bc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800148c:	2306      	movs	r3, #6
 800148e:	e015      	b.n	80014bc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 031c 	and.w	r3, r3, #28
 8001496:	2b18      	cmp	r3, #24
 8001498:	d101      	bne.n	800149e <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800149a:	2302      	movs	r3, #2
 800149c:	e00e      	b.n	80014bc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f003 031c 	and.w	r3, r3, #28
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d101      	bne.n	80014ac <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e007      	b.n	80014bc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f003 031c 	and.w	r3, r3, #28
 80014b2:	2b14      	cmp	r3, #20
 80014b4:	d101      	bne.n	80014ba <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014b6:	2304      	movs	r3, #4
 80014b8:	e000      	b.n	80014bc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014ba:	2305      	movs	r3, #5
    }				
  }
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_Init+0x40>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <HAL_Init+0x40>)
 80014ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_Init+0x40>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_Init+0x40>)
 80014da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_Init+0x40>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_Init+0x40>)
 80014e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ec:	2003      	movs	r0, #3
 80014ee:	f000 f94f 	bl	8001790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f2:	200f      	movs	r0, #15
 80014f4:	f000 f808 	bl	8001508 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014f8:	f7ff f9cc 	bl	8000894 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023c00 	.word	0x40023c00

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <HAL_InitTick+0x54>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <HAL_InitTick+0x58>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f967 	bl	80017fa <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e00e      	b.n	8001554 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b0f      	cmp	r3, #15
 800153a:	d80a      	bhi.n	8001552 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800153c:	2200      	movs	r2, #0
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f000 f92f 	bl	80017a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001548:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_InitTick+0x5c>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	e000      	b.n	8001554 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000000 	.word	0x20000000
 8001560:	20000008 	.word	0x20000008
 8001564:	20000004 	.word	0x20000004

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	; (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000008 	.word	0x20000008
 800158c:	2000014c 	.word	0x2000014c

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	; (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	2000014c 	.word	0x2000014c

080015a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b0:	f7ff ffee 	bl	8001590 <HAL_GetTick>
 80015b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c0:	d005      	beq.n	80015ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_Delay+0x44>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	461a      	mov	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	4413      	add	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80015ce:	bf00      	nop
 80015d0:	f7ff ffde 	bl	8001590 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d8f7      	bhi.n	80015d0 <HAL_Delay+0x28>
  {
  }
}
 80015e0:	bf00      	nop
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000008 	.word	0x20000008

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001618:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	60d3      	str	r3, [r2, #12]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	79fb      	ldrb	r3, [r7, #7]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	; (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800175c:	d301      	bcc.n	8001762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800175e:	2301      	movs	r3, #1
 8001760:	e00f      	b.n	8001782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <SysTick_Config+0x40>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3b01      	subs	r3, #1
 8001768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176a:	210f      	movs	r1, #15
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f7ff ff8e 	bl	8001690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <SysTick_Config+0x40>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	4b04      	ldr	r3, [pc, #16]	; (800178c <SysTick_Config+0x40>)
 800177c:	2207      	movs	r2, #7
 800177e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	e000e010 	.word	0xe000e010

08001790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff ff29 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b086      	sub	sp, #24
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017b8:	f7ff ff3e 	bl	8001638 <__NVIC_GetPriorityGrouping>
 80017bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	6978      	ldr	r0, [r7, #20]
 80017c4:	f7ff ff8e 	bl	80016e4 <NVIC_EncodePriority>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff5d 	bl	8001690 <__NVIC_SetPriority>
}
 80017d6:	bf00      	nop
 80017d8:	3718      	adds	r7, #24
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	4603      	mov	r3, r0
 80017e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff31 	bl	8001654 <__NVIC_EnableIRQ>
}
 80017f2:	bf00      	nop
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffa2 	bl	800174c <SysTick_Config>
 8001808:	4603      	mov	r3, r0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e06c      	b.n	8001900 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800182c:	2b00      	cmp	r3, #0
 800182e:	d106      	bne.n	800183e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2223      	movs	r2, #35	; 0x23
 8001834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f002 fa47 	bl	8003ccc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_ETH_Init+0xf4>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a30      	ldr	r2, [pc, #192]	; (8001908 <HAL_ETH_Init+0xf4>)
 8001848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <HAL_ETH_Init+0xf4>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800185a:	4b2c      	ldr	r3, [pc, #176]	; (800190c <HAL_ETH_Init+0xf8>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	4a2b      	ldr	r2, [pc, #172]	; (800190c <HAL_ETH_Init+0xf8>)
 8001860:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001864:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001866:	4b29      	ldr	r3, [pc, #164]	; (800190c <HAL_ETH_Init+0xf8>)
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	4927      	ldr	r1, [pc, #156]	; (800190c <HAL_ETH_Init+0xf8>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001874:	4b25      	ldr	r3, [pc, #148]	; (800190c <HAL_ETH_Init+0xf8>)
 8001876:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	6812      	ldr	r2, [r2, #0]
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800188e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001890:	f7ff fe7e 	bl	8001590 <HAL_GetTick>
 8001894:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001896:	e011      	b.n	80018bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001898:	f7ff fe7a 	bl	8001590 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018a6:	d909      	bls.n	80018bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2204      	movs	r2, #4
 80018ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	22e0      	movs	r2, #224	; 0xe0
 80018b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e021      	b.n	8001900 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1e4      	bne.n	8001898 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 fdf0 	bl	80024b4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 fe97 	bl	8002608 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 feed 	bl	80026ba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	461a      	mov	r2, r3
 80018e6:	2100      	movs	r1, #0
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 fe55 	bl	8002598 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2210      	movs	r2, #16
 80018fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40013800 	.word	0x40013800

08001910 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800191e:	2b10      	cmp	r3, #16
 8001920:	d150      	bne.n	80019c4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2223      	movs	r2, #35	; 0x23
 8001926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2204      	movs	r2, #4
 800192e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f000 f9fd 	bl	8001d30 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f042 0208 	orr.w	r2, r2, #8
 8001944:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800194e:	2001      	movs	r0, #1
 8001950:	f7ff fe2a 	bl	80015a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0204 	orr.w	r2, r2, #4
 800196a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001974:	2001      	movs	r0, #1
 8001976:	f7ff fe17 	bl	80015a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68fa      	ldr	r2, [r7, #12]
 8001980:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f000 fc36 	bl	80021f4 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800199a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800199e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	f043 0302 	orr.w	r3, r3, #2
 80019b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019b6:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2223      	movs	r2, #35	; 0x23
 80019bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	e000      	b.n	80019c6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
  }
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019dc:	2b23      	cmp	r3, #35	; 0x23
 80019de:	d14a      	bne.n	8001a76 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2223      	movs	r2, #35	; 0x23
 80019e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019fe:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	f023 0302 	bic.w	r3, r3, #2
 8001a12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a16:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f022 0204 	bic.w	r2, r2, #4
 8001a26:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a30:	2001      	movs	r0, #1
 8001a32:	f7ff fdb9 	bl	80015a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fbd8 	bl	80021f4 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0208 	bic.w	r2, r2, #8
 8001a52:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f7ff fda3 	bl	80015a8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2210      	movs	r2, #16
 8001a6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e000      	b.n	8001a78 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
  }
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e07c      	b.n	8001ba0 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aac:	2b23      	cmp	r3, #35	; 0x23
 8001aae:	d176      	bne.n	8001b9e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	68b9      	ldr	r1, [r7, #8]
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 fe6d 	bl	8002794 <ETH_Prepare_Tx_Descriptors>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d009      	beq.n	8001ad4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac6:	f043 0202 	orr.w	r2, r3, #2
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e065      	b.n	8001ba0 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ad4:	f3bf 8f4f 	dsb	sy
}
 8001ad8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	3206      	adds	r2, #6
 8001ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d904      	bls.n	8001b04 <HAL_ETH_Transmit+0x84>
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	1f1a      	subs	r2, r3, #4
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3106      	adds	r1, #6
 8001b10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b18:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001b1a:	f7ff fd39 	bl	8001590 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b20:	e037      	b.n	8001b92 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d011      	beq.n	8001b58 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	f043 0208 	orr.w	r2, r3, #8
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4c:	695a      	ldr	r2, [r3, #20]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e023      	b.n	8001ba0 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5e:	d018      	beq.n	8001b92 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b60:	f7ff fd16 	bl	8001590 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d302      	bcc.n	8001b76 <HAL_ETH_Transmit+0xf6>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7c:	f043 0204 	orr.w	r2, r3, #4
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001b8c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e006      	b.n	8001ba0 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	dbc3      	blt.n	8001b22 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e000      	b.n	8001ba0 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
  }
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b088      	sub	sp, #32
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0a8      	b.n	8001d26 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bda:	2b23      	cmp	r3, #35	; 0x23
 8001bdc:	d001      	beq.n	8001be2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e0a1      	b.n	8001d26 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	3212      	adds	r2, #18
 8001bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf8:	f1c3 0304 	rsb	r3, r3, #4
 8001bfc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001bfe:	e06a      	b.n	8001cd6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d007      	beq.n	8001c1c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	699a      	ldr	r2, [r3, #24]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	69da      	ldr	r2, [r3, #28]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d103      	bne.n	8001c30 <HAL_ETH_ReadData+0x88>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d040      	beq.n	8001cb2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00c      	beq.n	8001c74 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	0c1b      	lsrs	r3, r3, #16
 8001c60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001c64:	3b04      	subs	r3, #4
 8001c66:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	689a      	ldr	r2, [r3, #8]
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	f002 f9eb 	bl	800406c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	441a      	add	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	61fb      	str	r3, [r7, #28]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d902      	bls.n	8001cc4 <HAL_ETH_ReadData+0x11c>
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b04      	subs	r3, #4
 8001cc2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	3212      	adds	r2, #18
 8001cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cce:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	db06      	blt.n	8001cec <HAL_ETH_ReadData+0x144>
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d202      	bcs.n	8001cec <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001ce6:	7bfb      	ldrb	r3, [r7, #15]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d089      	beq.n	8001c00 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	441a      	add	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f815 	bl	8001d30 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d108      	bne.n	8001d24 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001d20:	2300      	movs	r3, #0
 8001d22:	e000      	b.n	8001d26 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3720      	adds	r7, #32
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d44:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	3212      	adds	r2, #18
 8001d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d50:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d56:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001d58:	e040      	b.n	8001ddc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	6a1b      	ldr	r3, [r3, #32]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d112      	bne.n	8001d88 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 f950 	bl	800400c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d102      	bne.n	8001d78 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	74fb      	strb	r3, [r7, #19]
 8001d76:	e007      	b.n	8001d88 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	461a      	mov	r2, r3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001d88:	7cfb      	ldrb	r3, [r7, #19]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d026      	beq.n	8001ddc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d103      	bne.n	8001d9e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	4a1e      	ldr	r2, [pc, #120]	; (8001e14 <ETH_UpdateDescriptor+0xe4>)
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	e003      	b.n	8001da6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001da4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001da6:	f3bf 8f5f 	dmb	sy
}
 8001daa:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d902      	bls.n	8001dca <ETH_UpdateDescriptor+0x9a>
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69fa      	ldr	r2, [r7, #28]
 8001dce:	3212      	adds	r2, #18
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	617b      	str	r3, [r7, #20]
      desccount--;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <ETH_UpdateDescriptor+0xb8>
 8001de2:	7cfb      	ldrb	r3, [r7, #19]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1b8      	bne.n	8001d5a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d00c      	beq.n	8001e0c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69fa      	ldr	r2, [r7, #28]
 8001e04:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	800045f8 	.word	0x800045f8

08001e18 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
 8001e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f003 031c 	and.w	r3, r3, #28
 8001e34:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	02db      	lsls	r3, r3, #11
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	019b      	lsls	r3, r3, #6
 8001e46:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	f023 0302 	bic.w	r3, r3, #2
 8001e56:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001e68:	f7ff fb92 	bl	8001590 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e6e:	e00d      	b.n	8001e8c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001e70:	f7ff fb8e 	bl	8001590 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7e:	d301      	bcc.n	8001e84 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e010      	b.n	8001ea6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1ec      	bne.n	8001e70 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	f003 031c 	and.w	r3, r3, #28
 8001eca:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	02db      	lsls	r3, r3, #11
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	019b      	lsls	r3, r3, #6
 8001edc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f08:	f7ff fb42 	bl	8001590 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f0e:	e00d      	b.n	8001f2c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001f10:	f7ff fb3e 	bl	8001590 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f1e:	d301      	bcc.n	8001f24 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e009      	b.n	8001f38 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1ec      	bne.n	8001f10 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0d9      	b.n	8002108 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	bf14      	ite	ne
 8001f62:	2301      	movne	r3, #1
 8001f64:	2300      	moveq	r3, #0
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	461a      	mov	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	bf0c      	ite	eq
 8001fc2:	2301      	moveq	r3, #1
 8001fc4:	2300      	movne	r3, #0
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	bf14      	ite	ne
 8001fdc:	2301      	movne	r3, #1
 8001fde:	2300      	moveq	r3, #0
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf0c      	ite	eq
 8002012:	2301      	moveq	r3, #1
 8002014:	2300      	movne	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	461a      	mov	r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf0c      	ite	eq
 800202c:	2301      	moveq	r3, #1
 800202e:	2300      	movne	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002042:	2b00      	cmp	r3, #0
 8002044:	bf14      	ite	ne
 8002046:	2301      	movne	r3, #1
 8002048:	2300      	moveq	r3, #0
 800204a:	b2db      	uxtb	r3, r3
 800204c:	461a      	mov	r2, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf14      	ite	ne
 800206e:	2301      	movne	r3, #1
 8002070:	2300      	moveq	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf14      	ite	ne
 8002088:	2301      	movne	r3, #1
 800208a:	2300      	moveq	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	0c1b      	lsrs	r3, r3, #16
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf14      	ite	ne
 80020dc:	2301      	movne	r3, #1
 80020de:	2300      	moveq	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	bf14      	ite	ne
 80020f8:	2301      	movne	r3, #1
 80020fa:	2300      	moveq	r3, #0
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002106:	2300      	movs	r3, #0
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e00b      	b.n	8002140 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800212e:	2b10      	cmp	r3, #16
 8002130:	d105      	bne.n	800213e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002132:	6839      	ldr	r1, [r7, #0]
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f883 	bl	8002240 <ETH_SetMACConfig>

    return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
  }
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f023 031c 	bic.w	r3, r3, #28
 800215e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002160:	f001 faa0 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 8002164:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	4a1d      	ldr	r2, [pc, #116]	; (80021e0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d908      	bls.n	8002180 <HAL_ETH_SetMDIOClockRange+0x38>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d804      	bhi.n	8002180 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f043 0308 	orr.w	r3, r3, #8
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	e027      	b.n	80021d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	4a18      	ldr	r2, [pc, #96]	; (80021e4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d908      	bls.n	800219a <HAL_ETH_SetMDIOClockRange+0x52>
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	4a17      	ldr	r2, [pc, #92]	; (80021e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d204      	bcs.n	800219a <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f043 030c 	orr.w	r3, r3, #12
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e01a      	b.n	80021d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d303      	bcc.n	80021aa <HAL_ETH_SetMDIOClockRange+0x62>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d911      	bls.n	80021ce <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4a0f      	ldr	r2, [pc, #60]	; (80021ec <HAL_ETH_SetMDIOClockRange+0xa4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d908      	bls.n	80021c4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d804      	bhi.n	80021c4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	e005      	b.n	80021d0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f043 0310 	orr.w	r3, r3, #16
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	e000      	b.n	80021d0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80021ce:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	611a      	str	r2, [r3, #16]
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	01312cff 	.word	0x01312cff
 80021e4:	02160ebf 	.word	0x02160ebf
 80021e8:	03938700 	.word	0x03938700
 80021ec:	05f5e0ff 	.word	0x05f5e0ff
 80021f0:	08f0d17f 	.word	0x08f0d17f

080021f4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	6812      	ldr	r2, [r2, #0]
 800220e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002212:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002216:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002224:	2001      	movs	r0, #1
 8002226:	f7ff f9bf 	bl	80015a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002234:	6193      	str	r3, [r2, #24]
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	4b51      	ldr	r3, [pc, #324]	; (800239c <ETH_SetMACConfig+0x15c>)
 8002256:	4013      	ands	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	7c1b      	ldrb	r3, [r3, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d102      	bne.n	8002268 <ETH_SetMACConfig+0x28>
 8002262:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002266:	e000      	b.n	800226a <ETH_SetMACConfig+0x2a>
 8002268:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	7c5b      	ldrb	r3, [r3, #17]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <ETH_SetMACConfig+0x38>
 8002272:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002276:	e000      	b.n	800227a <ETH_SetMACConfig+0x3a>
 8002278:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800227a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002280:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	7fdb      	ldrb	r3, [r3, #31]
 8002286:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002288:	431a      	orrs	r2, r3
                        macconf->Speed |
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800228e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	7f92      	ldrb	r2, [r2, #30]
 8002294:	2a00      	cmp	r2, #0
 8002296:	d102      	bne.n	800229e <ETH_SetMACConfig+0x5e>
 8002298:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800229c:	e000      	b.n	80022a0 <ETH_SetMACConfig+0x60>
 800229e:	2200      	movs	r2, #0
                        macconf->Speed |
 80022a0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	7f1b      	ldrb	r3, [r3, #28]
 80022a6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80022a8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80022ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	791b      	ldrb	r3, [r3, #4]
 80022b4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80022b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022be:	2a00      	cmp	r2, #0
 80022c0:	d102      	bne.n	80022c8 <ETH_SetMACConfig+0x88>
 80022c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c6:	e000      	b.n	80022ca <ETH_SetMACConfig+0x8a>
 80022c8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80022ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	7bdb      	ldrb	r3, [r3, #15]
 80022d0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80022d2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80022d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022e0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80022e2:	4313      	orrs	r3, r2
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022fa:	2001      	movs	r0, #1
 80022fc:	f7ff f954 	bl	80015a8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002316:	4013      	ands	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002326:	2a00      	cmp	r2, #0
 8002328:	d101      	bne.n	800232e <ETH_SetMACConfig+0xee>
 800232a:	2280      	movs	r2, #128	; 0x80
 800232c:	e000      	b.n	8002330 <ETH_SetMACConfig+0xf0>
 800232e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002330:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002336:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800233e:	2a01      	cmp	r2, #1
 8002340:	d101      	bne.n	8002346 <ETH_SetMACConfig+0x106>
 8002342:	2208      	movs	r2, #8
 8002344:	e000      	b.n	8002348 <ETH_SetMACConfig+0x108>
 8002346:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002348:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002350:	2a01      	cmp	r2, #1
 8002352:	d101      	bne.n	8002358 <ETH_SetMACConfig+0x118>
 8002354:	2204      	movs	r2, #4
 8002356:	e000      	b.n	800235a <ETH_SetMACConfig+0x11a>
 8002358:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800235a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002362:	2a01      	cmp	r2, #1
 8002364:	d101      	bne.n	800236a <ETH_SetMACConfig+0x12a>
 8002366:	2202      	movs	r2, #2
 8002368:	e000      	b.n	800236c <ETH_SetMACConfig+0x12c>
 800236a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800236c:	4313      	orrs	r3, r2
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4313      	orrs	r3, r2
 8002372:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002384:	2001      	movs	r0, #1
 8002386:	f7ff f90f 	bl	80015a8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	619a      	str	r2, [r3, #24]
}
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	ff20810f 	.word	0xff20810f

080023a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <ETH_SetDMAConfig+0x110>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	7b1b      	ldrb	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <ETH_SetDMAConfig+0x2c>
 80023c6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023ca:	e000      	b.n	80023ce <ETH_SetDMAConfig+0x2e>
 80023cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	7b5b      	ldrb	r3, [r3, #13]
 80023d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	7f52      	ldrb	r2, [r2, #29]
 80023da:	2a00      	cmp	r2, #0
 80023dc:	d102      	bne.n	80023e4 <ETH_SetDMAConfig+0x44>
 80023de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80023e2:	e000      	b.n	80023e6 <ETH_SetDMAConfig+0x46>
 80023e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80023e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	7b9b      	ldrb	r3, [r3, #14]
 80023ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80023ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80023f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	7f1b      	ldrb	r3, [r3, #28]
 80023fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80023fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	7f9b      	ldrb	r3, [r3, #30]
 8002402:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002404:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800240a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002412:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002414:	4313      	orrs	r3, r2
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	4313      	orrs	r3, r2
 800241a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002424:	461a      	mov	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002436:	2001      	movs	r0, #1
 8002438:	f7ff f8b6 	bl	80015a8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002444:	461a      	mov	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	791b      	ldrb	r3, [r3, #4]
 800244e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002454:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800245a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002460:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002468:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800246a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002472:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002478:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6812      	ldr	r2, [r2, #0]
 800247e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002482:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002486:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002494:	2001      	movs	r0, #1
 8002496:	f7ff f887 	bl	80015a8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80024a2:	461a      	mov	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	f8de3f23 	.word	0xf8de3f23

080024b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b0a6      	sub	sp, #152	; 0x98
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80024bc:	2301      	movs	r3, #1
 80024be:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80024c2:	2301      	movs	r3, #1
 80024c4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80024c8:	2300      	movs	r3, #0
 80024ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80024cc:	2300      	movs	r3, #0
 80024ce:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80024d2:	2301      	movs	r3, #1
 80024d4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80024d8:	2300      	movs	r3, #0
 80024da:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80024de:	2301      	movs	r3, #1
 80024e0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80024e4:	2300      	movs	r3, #0
 80024e6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024f0:	2300      	movs	r3, #0
 80024f2:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800250a:	2300      	movs	r3, #0
 800250c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002516:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800251a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800251c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002520:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002528:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800252c:	4619      	mov	r1, r3
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff fe86 	bl	8002240 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002534:	2301      	movs	r3, #1
 8002536:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002538:	2301      	movs	r3, #1
 800253a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800253c:	2301      	movs	r3, #1
 800253e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002542:	2301      	movs	r3, #1
 8002544:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800254a:	2300      	movs	r3, #0
 800254c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002556:	2300      	movs	r3, #0
 8002558:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800255a:	2301      	movs	r3, #1
 800255c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002560:	2301      	movs	r3, #1
 8002562:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002568:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800256a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800256e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002570:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002574:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002576:	2301      	movs	r3, #1
 8002578:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800257c:	2300      	movs	r3, #0
 800257e:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002580:	2300      	movs	r3, #0
 8002582:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002584:	f107 0308 	add.w	r3, r7, #8
 8002588:	4619      	mov	r1, r3
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ff08 	bl	80023a0 <ETH_SetDMAConfig>
}
 8002590:	bf00      	nop
 8002592:	3798      	adds	r7, #152	; 0x98
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3305      	adds	r3, #5
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	3204      	adds	r2, #4
 80025b0:	7812      	ldrb	r2, [r2, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	4b11      	ldr	r3, [pc, #68]	; (8002600 <ETH_MACAddressConfig+0x68>)
 80025ba:	4413      	add	r3, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3303      	adds	r3, #3
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	061a      	lsls	r2, r3, #24
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3302      	adds	r3, #2
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3301      	adds	r3, #1
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	4313      	orrs	r3, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	7812      	ldrb	r2, [r2, #0]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <ETH_MACAddressConfig+0x6c>)
 80025ea:	4413      	add	r3, r2
 80025ec:	461a      	mov	r2, r3
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	6013      	str	r3, [r2, #0]
}
 80025f2:	bf00      	nop
 80025f4:	371c      	adds	r7, #28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	40028040 	.word	0x40028040
 8002604:	40028044 	.word	0x40028044

08002608 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002610:	2300      	movs	r3, #0
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	e03e      	b.n	8002694 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68d9      	ldr	r1, [r3, #12]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	440b      	add	r3, r1
 8002626:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	2200      	movs	r2, #0
 800262c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	2200      	movs	r2, #0
 8002632:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2200      	movs	r2, #0
 8002638:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	2200      	movs	r2, #0
 800263e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	3206      	adds	r2, #6
 8002648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d80c      	bhi.n	8002678 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68d9      	ldr	r1, [r3, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	440b      	add	r3, r1
 8002670:	461a      	mov	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	e004      	b.n	8002682 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	3301      	adds	r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b03      	cmp	r3, #3
 8002698:	d9bd      	bls.n	8002616 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ac:	611a      	str	r2, [r3, #16]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e046      	b.n	8002756 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6919      	ldr	r1, [r3, #16]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4613      	mov	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2200      	movs	r2, #0
 80026e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2200      	movs	r2, #0
 80026f6:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	2200      	movs	r2, #0
 80026fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002704:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800270c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	3212      	adds	r2, #18
 8002722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d80c      	bhi.n	8002746 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6919      	ldr	r1, [r3, #16]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	461a      	mov	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	60da      	str	r2, [r3, #12]
 8002744:	e004      	b.n	8002750 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	461a      	mov	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	3301      	adds	r3, #1
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b03      	cmp	r3, #3
 800275a:	d9b5      	bls.n	80026c8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691a      	ldr	r2, [r3, #16]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002786:	60da      	str	r2, [r3, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002794:	b480      	push	{r7}
 8002796:	b08d      	sub	sp, #52	; 0x34
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	3318      	adds	r3, #24
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027be:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027d6:	d007      	beq.n	80027e8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027dc:	3304      	adds	r3, #4
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80027e8:	2302      	movs	r3, #2
 80027ea:	e103      	b.n	80029f4 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	3301      	adds	r3, #1
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002804:	f023 031f 	bic.w	r3, r3, #31
 8002808:	69fa      	ldr	r2, [r7, #28]
 800280a:	6852      	ldr	r2, [r2, #4]
 800280c:	431a      	orrs	r2, r3
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	431a      	orrs	r2, r3
 800282c:	6a3b      	ldr	r3, [r7, #32]
 800282e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	431a      	orrs	r2, r3
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002872:	f3bf 8f5f 	dmb	sy
}
 8002876:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002884:	e084      	b.n	8002990 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002886:	6a3b      	ldr	r3, [r7, #32]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d006      	beq.n	80028a6 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e005      	b.n	80028b2 <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	3301      	adds	r3, #1
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d902      	bls.n	80028c4 <ETH_Prepare_Tx_Descriptors+0x130>
 80028be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c0:	3b04      	subs	r3, #4
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028cc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028e6:	d007      	beq.n	80028f8 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	3304      	adds	r3, #4
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d029      	beq.n	800294c <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002906:	2300      	movs	r3, #0
 8002908:	62bb      	str	r3, [r7, #40]	; 0x28
 800290a:	e019      	b.n	8002940 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 800290c:	f3bf 8f5f 	dmb	sy
}
 8002910:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002920:	3301      	adds	r3, #1
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002926:	2b03      	cmp	r3, #3
 8002928:	d902      	bls.n	8002930 <ETH_Prepare_Tx_Descriptors+0x19c>
 800292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292c:	3b04      	subs	r3, #4
 800292e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002938:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293c:	3301      	adds	r3, #1
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	429a      	cmp	r2, r3
 8002946:	d3e1      	bcc.n	800290c <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002948:	2302      	movs	r3, #2
 800294a:	e053      	b.n	80029f4 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	3301      	adds	r3, #1
 8002950:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 800296a:	f023 031f 	bic.w	r3, r3, #31
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	6852      	ldr	r2, [r2, #4]
 8002972:	431a      	orrs	r2, r3
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	3301      	adds	r3, #1
 800297c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800297e:	f3bf 8f5f 	dmb	sy
}
 8002982:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	f47f af76 	bne.w	8002886 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d006      	beq.n	80029ae <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e005      	b.n	80029ba <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ca:	6979      	ldr	r1, [r7, #20]
 80029cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ce:	3304      	adds	r3, #4
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029da:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80029dc:	b672      	cpsid	i
}
 80029de:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	4413      	add	r3, r2
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80029ee:	b662      	cpsie	i
}
 80029f0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3734      	adds	r7, #52	; 0x34
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a16:	2300      	movs	r3, #0
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	e177      	b.n	8002d0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	f040 8166 	bne.w	8002d06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d005      	beq.n	8002a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d130      	bne.n	8002ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	43db      	mvns	r3, r3
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	4013      	ands	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 0201 	and.w	r2, r3, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d017      	beq.n	8002af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	2203      	movs	r2, #3
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d123      	bne.n	8002b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	08da      	lsrs	r2, r3, #3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3208      	adds	r2, #8
 8002b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	220f      	movs	r2, #15
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	69b9      	ldr	r1, [r7, #24]
 8002b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0203 	and.w	r2, r3, #3
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80c0 	beq.w	8002d06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b66      	ldr	r3, [pc, #408]	; (8002d24 <HAL_GPIO_Init+0x324>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	4a65      	ldr	r2, [pc, #404]	; (8002d24 <HAL_GPIO_Init+0x324>)
 8002b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b94:	6453      	str	r3, [r2, #68]	; 0x44
 8002b96:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_GPIO_Init+0x324>)
 8002b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ba2:	4a61      	ldr	r2, [pc, #388]	; (8002d28 <HAL_GPIO_Init+0x328>)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	3302      	adds	r3, #2
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	220f      	movs	r2, #15
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a58      	ldr	r2, [pc, #352]	; (8002d2c <HAL_GPIO_Init+0x32c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d037      	beq.n	8002c3e <HAL_GPIO_Init+0x23e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a57      	ldr	r2, [pc, #348]	; (8002d30 <HAL_GPIO_Init+0x330>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d031      	beq.n	8002c3a <HAL_GPIO_Init+0x23a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a56      	ldr	r2, [pc, #344]	; (8002d34 <HAL_GPIO_Init+0x334>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d02b      	beq.n	8002c36 <HAL_GPIO_Init+0x236>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a55      	ldr	r2, [pc, #340]	; (8002d38 <HAL_GPIO_Init+0x338>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d025      	beq.n	8002c32 <HAL_GPIO_Init+0x232>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a54      	ldr	r2, [pc, #336]	; (8002d3c <HAL_GPIO_Init+0x33c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01f      	beq.n	8002c2e <HAL_GPIO_Init+0x22e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a53      	ldr	r2, [pc, #332]	; (8002d40 <HAL_GPIO_Init+0x340>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d019      	beq.n	8002c2a <HAL_GPIO_Init+0x22a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <HAL_GPIO_Init+0x344>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d013      	beq.n	8002c26 <HAL_GPIO_Init+0x226>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a51      	ldr	r2, [pc, #324]	; (8002d48 <HAL_GPIO_Init+0x348>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d00d      	beq.n	8002c22 <HAL_GPIO_Init+0x222>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a50      	ldr	r2, [pc, #320]	; (8002d4c <HAL_GPIO_Init+0x34c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d007      	beq.n	8002c1e <HAL_GPIO_Init+0x21e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4f      	ldr	r2, [pc, #316]	; (8002d50 <HAL_GPIO_Init+0x350>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d101      	bne.n	8002c1a <HAL_GPIO_Init+0x21a>
 8002c16:	2309      	movs	r3, #9
 8002c18:	e012      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c1a:	230a      	movs	r3, #10
 8002c1c:	e010      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c1e:	2308      	movs	r3, #8
 8002c20:	e00e      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c22:	2307      	movs	r3, #7
 8002c24:	e00c      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c26:	2306      	movs	r3, #6
 8002c28:	e00a      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c2a:	2305      	movs	r3, #5
 8002c2c:	e008      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c2e:	2304      	movs	r3, #4
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e004      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x240>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	f002 0203 	and.w	r2, r2, #3
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	4093      	lsls	r3, r2
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c50:	4935      	ldr	r1, [pc, #212]	; (8002d28 <HAL_GPIO_Init+0x328>)
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5e:	4b3d      	ldr	r3, [pc, #244]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c82:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c88:	4b32      	ldr	r3, [pc, #200]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cac:	4a29      	ldr	r2, [pc, #164]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cb2:	4b28      	ldr	r3, [pc, #160]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cd6:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cdc:	4b1d      	ldr	r3, [pc, #116]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d00:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <HAL_GPIO_Init+0x354>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	f67f ae84 	bls.w	8002a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3724      	adds	r7, #36	; 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40021400 	.word	0x40021400
 8002d44:	40021800 	.word	0x40021800
 8002d48:	40021c00 	.word	0x40021c00
 8002d4c:	40022000 	.word	0x40022000
 8002d50:	40022400 	.word	0x40022400
 8002d54:	40013c00 	.word	0x40013c00

08002d58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	807b      	strh	r3, [r7, #2]
 8002d64:	4613      	mov	r3, r2
 8002d66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d68:	787b      	ldrb	r3, [r7, #1]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d74:	e003      	b.n	8002d7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d76:	887b      	ldrh	r3, [r7, #2]
 8002d78:	041a      	lsls	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	619a      	str	r2, [r3, #24]
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	4603      	mov	r3, r0
 8002d94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d96:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002da2:	4a05      	ldr	r2, [pc, #20]	; (8002db8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002da4:	88fb      	ldrh	r3, [r7, #6]
 8002da6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe f9d2 	bl	8001154 <HAL_GPIO_EXTI_Callback>
  }
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40013c00 	.word	0x40013c00

08002dbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	4b20      	ldr	r3, [pc, #128]	; (8002e4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a1f      	ldr	r2, [pc, #124]	; (8002e4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002de2:	4b1b      	ldr	r3, [pc, #108]	; (8002e50 <HAL_PWREx_EnableOverDrive+0x94>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002de8:	f7fe fbd2 	bl	8001590 <HAL_GetTick>
 8002dec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dee:	e009      	b.n	8002e04 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002df0:	f7fe fbce 	bl	8001590 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dfe:	d901      	bls.n	8002e04 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e01f      	b.n	8002e44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e10:	d1ee      	bne.n	8002df0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002e12:	4b11      	ldr	r3, [pc, #68]	; (8002e58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e18:	f7fe fbba 	bl	8001590 <HAL_GetTick>
 8002e1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e1e:	e009      	b.n	8002e34 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002e20:	f7fe fbb6 	bl	8001590 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e2e:	d901      	bls.n	8002e34 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e007      	b.n	8002e44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002e34:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e40:	d1ee      	bne.n	8002e20 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	420e0040 	.word	0x420e0040
 8002e54:	40007000 	.word	0x40007000
 8002e58:	420e0044 	.word	0x420e0044

08002e5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e267      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d075      	beq.n	8002f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e7a:	4b88      	ldr	r3, [pc, #544]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d00c      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e86:	4b85      	ldr	r3, [pc, #532]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d112      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e92:	4b82      	ldr	r3, [pc, #520]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	4b7e      	ldr	r3, [pc, #504]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d05b      	beq.n	8002f64 <HAL_RCC_OscConfig+0x108>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d157      	bne.n	8002f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e242      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec0:	d106      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x74>
 8002ec2:	4b76      	ldr	r3, [pc, #472]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a75      	ldr	r2, [pc, #468]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e01d      	b.n	8002f0c <HAL_RCC_OscConfig+0xb0>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x98>
 8002eda:	4b70      	ldr	r3, [pc, #448]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a6f      	ldr	r2, [pc, #444]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b6d      	ldr	r3, [pc, #436]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a6c      	ldr	r2, [pc, #432]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0xb0>
 8002ef4:	4b69      	ldr	r3, [pc, #420]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a68      	ldr	r2, [pc, #416]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b66      	ldr	r3, [pc, #408]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a65      	ldr	r2, [pc, #404]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fb3c 	bl	8001590 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fb38 	bl	8001590 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e207      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b5b      	ldr	r3, [pc, #364]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0xc0>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fb28 	bl	8001590 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe fb24 	bl	8001590 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e1f3      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	4b51      	ldr	r3, [pc, #324]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0xe8>
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d063      	beq.n	800303a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f72:	4b4a      	ldr	r3, [pc, #296]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b47      	ldr	r3, [pc, #284]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d11c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8a:	4b44      	ldr	r3, [pc, #272]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d116      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f96:	4b41      	ldr	r3, [pc, #260]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x152>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e1c7      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4937      	ldr	r1, [pc, #220]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	e03a      	b.n	800303a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fcc:	4b34      	ldr	r3, [pc, #208]	; (80030a0 <HAL_RCC_OscConfig+0x244>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd2:	f7fe fadd 	bl	8001590 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fda:	f7fe fad9 	bl	8001590 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e1a8      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b28      	ldr	r3, [pc, #160]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4925      	ldr	r1, [pc, #148]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	e015      	b.n	800303a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300e:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <HAL_RCC_OscConfig+0x244>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe fabc 	bl	8001590 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301c:	f7fe fab8 	bl	8001590 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e187      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	4b1b      	ldr	r3, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d036      	beq.n	80030b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d016      	beq.n	800307c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304e:	4b15      	ldr	r3, [pc, #84]	; (80030a4 <HAL_RCC_OscConfig+0x248>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fe fa9c 	bl	8001590 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305c:	f7fe fa98 	bl	8001590 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e167      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	4b0b      	ldr	r3, [pc, #44]	; (800309c <HAL_RCC_OscConfig+0x240>)
 8003070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x200>
 800307a:	e01b      	b.n	80030b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307c:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_RCC_OscConfig+0x248>)
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003082:	f7fe fa85 	bl	8001590 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003088:	e00e      	b.n	80030a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308a:	f7fe fa81 	bl	8001590 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d907      	bls.n	80030a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e150      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
 800309c:	40023800 	.word	0x40023800
 80030a0:	42470000 	.word	0x42470000
 80030a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	4b88      	ldr	r3, [pc, #544]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1ea      	bne.n	800308a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8097 	beq.w	80031f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c6:	4b81      	ldr	r3, [pc, #516]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	4b7d      	ldr	r3, [pc, #500]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	4a7c      	ldr	r2, [pc, #496]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030e0:	6413      	str	r3, [r2, #64]	; 0x40
 80030e2:	4b7a      	ldr	r3, [pc, #488]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ee:	2301      	movs	r3, #1
 80030f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f2:	4b77      	ldr	r3, [pc, #476]	; (80032d0 <HAL_RCC_OscConfig+0x474>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d118      	bne.n	8003130 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fe:	4b74      	ldr	r3, [pc, #464]	; (80032d0 <HAL_RCC_OscConfig+0x474>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a73      	ldr	r2, [pc, #460]	; (80032d0 <HAL_RCC_OscConfig+0x474>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310a:	f7fe fa41 	bl	8001590 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003112:	f7fe fa3d 	bl	8001590 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e10c      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	4b6a      	ldr	r3, [pc, #424]	; (80032d0 <HAL_RCC_OscConfig+0x474>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x2ea>
 8003138:	4b64      	ldr	r3, [pc, #400]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	4a63      	ldr	r2, [pc, #396]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6713      	str	r3, [r2, #112]	; 0x70
 8003144:	e01c      	b.n	8003180 <HAL_RCC_OscConfig+0x324>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b05      	cmp	r3, #5
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x30c>
 800314e:	4b5f      	ldr	r3, [pc, #380]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003152:	4a5e      	ldr	r2, [pc, #376]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	6713      	str	r3, [r2, #112]	; 0x70
 800315a:	4b5c      	ldr	r3, [pc, #368]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	4a5b      	ldr	r2, [pc, #364]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6713      	str	r3, [r2, #112]	; 0x70
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0x324>
 8003168:	4b58      	ldr	r3, [pc, #352]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316c:	4a57      	ldr	r2, [pc, #348]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	6713      	str	r3, [r2, #112]	; 0x70
 8003174:	4b55      	ldr	r3, [pc, #340]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	4a54      	ldr	r2, [pc, #336]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 800317a:	f023 0304 	bic.w	r3, r3, #4
 800317e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d015      	beq.n	80031b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe fa02 	bl	8001590 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003190:	f7fe f9fe 	bl	8001590 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e0cb      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a6:	4b49      	ldr	r3, [pc, #292]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0ee      	beq.n	8003190 <HAL_RCC_OscConfig+0x334>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b4:	f7fe f9ec 	bl	8001590 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fe f9e8 	bl	8001590 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0b5      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d2:	4b3e      	ldr	r3, [pc, #248]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1ee      	bne.n	80031bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e4:	4b39      	ldr	r3, [pc, #228]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	4a38      	ldr	r2, [pc, #224]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80a1 	beq.w	800333c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031fa:	4b34      	ldr	r3, [pc, #208]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b08      	cmp	r3, #8
 8003204:	d05c      	beq.n	80032c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d141      	bne.n	8003292 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	4b31      	ldr	r3, [pc, #196]	; (80032d4 <HAL_RCC_OscConfig+0x478>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003214:	f7fe f9bc 	bl	8001590 <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe f9b8 	bl	8001590 <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e087      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	4b27      	ldr	r3, [pc, #156]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69da      	ldr	r2, [r3, #28]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	019b      	lsls	r3, r3, #6
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	3b01      	subs	r3, #1
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325c:	061b      	lsls	r3, r3, #24
 800325e:	491b      	ldr	r1, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003264:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <HAL_RCC_OscConfig+0x478>)
 8003266:	2201      	movs	r2, #1
 8003268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7fe f991 	bl	8001590 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003272:	f7fe f98d 	bl	8001590 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e05c      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003284:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x416>
 8003290:	e054      	b.n	800333c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003292:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <HAL_RCC_OscConfig+0x478>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7fe f97a 	bl	8001590 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a0:	f7fe f976 	bl	8001590 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e045      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	4b06      	ldr	r3, [pc, #24]	; (80032cc <HAL_RCC_OscConfig+0x470>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x444>
 80032be:	e03d      	b.n	800333c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d107      	bne.n	80032d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e038      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
 80032cc:	40023800 	.word	0x40023800
 80032d0:	40007000 	.word	0x40007000
 80032d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d8:	4b1b      	ldr	r3, [pc, #108]	; (8003348 <HAL_RCC_OscConfig+0x4ec>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d028      	beq.n	8003338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d121      	bne.n	8003338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032fe:	429a      	cmp	r2, r3
 8003300:	d11a      	bne.n	8003338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003308:	4013      	ands	r3, r2
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800330e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003310:	4293      	cmp	r3, r2
 8003312:	d111      	bne.n	8003338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	085b      	lsrs	r3, r3, #1
 8003320:	3b01      	subs	r3, #1
 8003322:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d107      	bne.n	8003338 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d001      	beq.n	800333c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3718      	adds	r7, #24
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40023800 	.word	0x40023800

0800334c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e0cc      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003360:	4b68      	ldr	r3, [pc, #416]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 030f 	and.w	r3, r3, #15
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	429a      	cmp	r2, r3
 800336c:	d90c      	bls.n	8003388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336e:	4b65      	ldr	r3, [pc, #404]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003376:	4b63      	ldr	r3, [pc, #396]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0b8      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d020      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033a0:	4b59      	ldr	r3, [pc, #356]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a58      	ldr	r2, [pc, #352]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d005      	beq.n	80033c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033b8:	4b53      	ldr	r3, [pc, #332]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	4a52      	ldr	r2, [pc, #328]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c4:	4b50      	ldr	r3, [pc, #320]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	494d      	ldr	r1, [pc, #308]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d044      	beq.n	800346c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d107      	bne.n	80033fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	4b47      	ldr	r3, [pc, #284]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d119      	bne.n	800342a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e07f      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d003      	beq.n	800340a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003406:	2b03      	cmp	r3, #3
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340a:	4b3f      	ldr	r3, [pc, #252]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d109      	bne.n	800342a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e06f      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341a:	4b3b      	ldr	r3, [pc, #236]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e067      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800342a:	4b37      	ldr	r3, [pc, #220]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f023 0203 	bic.w	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4934      	ldr	r1, [pc, #208]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 8003438:	4313      	orrs	r3, r2
 800343a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800343c:	f7fe f8a8 	bl	8001590 <HAL_GetTick>
 8003440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003442:	e00a      	b.n	800345a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003444:	f7fe f8a4 	bl	8001590 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003452:	4293      	cmp	r3, r2
 8003454:	d901      	bls.n	800345a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e04f      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800345a:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 020c 	and.w	r2, r3, #12
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	429a      	cmp	r2, r3
 800346a:	d1eb      	bne.n	8003444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800346c:	4b25      	ldr	r3, [pc, #148]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d20c      	bcs.n	8003494 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b22      	ldr	r3, [pc, #136]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b20      	ldr	r3, [pc, #128]	; (8003504 <HAL_RCC_ClockConfig+0x1b8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e032      	b.n	80034fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	d008      	beq.n	80034b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a0:	4b19      	ldr	r3, [pc, #100]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4916      	ldr	r1, [pc, #88]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034be:	4b12      	ldr	r3, [pc, #72]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	490e      	ldr	r1, [pc, #56]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034d2:	f000 f821 	bl	8003518 <HAL_RCC_GetSysClockFreq>
 80034d6:	4602      	mov	r2, r0
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 030f 	and.w	r3, r3, #15
 80034e2:	490a      	ldr	r1, [pc, #40]	; (800350c <HAL_RCC_ClockConfig+0x1c0>)
 80034e4:	5ccb      	ldrb	r3, [r1, r3]
 80034e6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ea:	4a09      	ldr	r2, [pc, #36]	; (8003510 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_RCC_ClockConfig+0x1c8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4618      	mov	r0, r3
 80034f4:	f7fe f808 	bl	8001508 <HAL_InitTick>

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	40023c00 	.word	0x40023c00
 8003508:	40023800 	.word	0x40023800
 800350c:	080128ac 	.word	0x080128ac
 8003510:	20000000 	.word	0x20000000
 8003514:	20000004 	.word	0x20000004

08003518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800351c:	b090      	sub	sp, #64	; 0x40
 800351e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
 8003524:	2300      	movs	r3, #0
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003528:	2300      	movs	r3, #0
 800352a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003530:	4b59      	ldr	r3, [pc, #356]	; (8003698 <HAL_RCC_GetSysClockFreq+0x180>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 030c 	and.w	r3, r3, #12
 8003538:	2b08      	cmp	r3, #8
 800353a:	d00d      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x40>
 800353c:	2b08      	cmp	r3, #8
 800353e:	f200 80a1 	bhi.w	8003684 <HAL_RCC_GetSysClockFreq+0x16c>
 8003542:	2b00      	cmp	r3, #0
 8003544:	d002      	beq.n	800354c <HAL_RCC_GetSysClockFreq+0x34>
 8003546:	2b04      	cmp	r3, #4
 8003548:	d003      	beq.n	8003552 <HAL_RCC_GetSysClockFreq+0x3a>
 800354a:	e09b      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800354c:	4b53      	ldr	r3, [pc, #332]	; (800369c <HAL_RCC_GetSysClockFreq+0x184>)
 800354e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003550:	e09b      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003552:	4b53      	ldr	r3, [pc, #332]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003554:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003556:	e098      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003558:	4b4f      	ldr	r3, [pc, #316]	; (8003698 <HAL_RCC_GetSysClockFreq+0x180>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003560:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003562:	4b4d      	ldr	r3, [pc, #308]	; (8003698 <HAL_RCC_GetSysClockFreq+0x180>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d028      	beq.n	80035c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800356e:	4b4a      	ldr	r3, [pc, #296]	; (8003698 <HAL_RCC_GetSysClockFreq+0x180>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	099b      	lsrs	r3, r3, #6
 8003574:	2200      	movs	r2, #0
 8003576:	623b      	str	r3, [r7, #32]
 8003578:	627a      	str	r2, [r7, #36]	; 0x24
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003580:	2100      	movs	r1, #0
 8003582:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003584:	fb03 f201 	mul.w	r2, r3, r1
 8003588:	2300      	movs	r3, #0
 800358a:	fb00 f303 	mul.w	r3, r0, r3
 800358e:	4413      	add	r3, r2
 8003590:	4a43      	ldr	r2, [pc, #268]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003592:	fba0 1202 	umull	r1, r2, r0, r2
 8003596:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003598:	460a      	mov	r2, r1
 800359a:	62ba      	str	r2, [r7, #40]	; 0x28
 800359c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359e:	4413      	add	r3, r2
 80035a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a4:	2200      	movs	r2, #0
 80035a6:	61bb      	str	r3, [r7, #24]
 80035a8:	61fa      	str	r2, [r7, #28]
 80035aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035b2:	f7fc fe85 	bl	80002c0 <__aeabi_uldivmod>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	4613      	mov	r3, r2
 80035bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035be:	e053      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035c0:	4b35      	ldr	r3, [pc, #212]	; (8003698 <HAL_RCC_GetSysClockFreq+0x180>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	099b      	lsrs	r3, r3, #6
 80035c6:	2200      	movs	r2, #0
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	617a      	str	r2, [r7, #20]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035d2:	f04f 0b00 	mov.w	fp, #0
 80035d6:	4652      	mov	r2, sl
 80035d8:	465b      	mov	r3, fp
 80035da:	f04f 0000 	mov.w	r0, #0
 80035de:	f04f 0100 	mov.w	r1, #0
 80035e2:	0159      	lsls	r1, r3, #5
 80035e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e8:	0150      	lsls	r0, r2, #5
 80035ea:	4602      	mov	r2, r0
 80035ec:	460b      	mov	r3, r1
 80035ee:	ebb2 080a 	subs.w	r8, r2, sl
 80035f2:	eb63 090b 	sbc.w	r9, r3, fp
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003602:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003606:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800360a:	ebb2 0408 	subs.w	r4, r2, r8
 800360e:	eb63 0509 	sbc.w	r5, r3, r9
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	f04f 0300 	mov.w	r3, #0
 800361a:	00eb      	lsls	r3, r5, #3
 800361c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003620:	00e2      	lsls	r2, r4, #3
 8003622:	4614      	mov	r4, r2
 8003624:	461d      	mov	r5, r3
 8003626:	eb14 030a 	adds.w	r3, r4, sl
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	eb45 030b 	adc.w	r3, r5, fp
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800363e:	4629      	mov	r1, r5
 8003640:	028b      	lsls	r3, r1, #10
 8003642:	4621      	mov	r1, r4
 8003644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003648:	4621      	mov	r1, r4
 800364a:	028a      	lsls	r2, r1, #10
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003652:	2200      	movs	r2, #0
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	60fa      	str	r2, [r7, #12]
 8003658:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800365c:	f7fc fe30 	bl	80002c0 <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4613      	mov	r3, r2
 8003666:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCC_GetSysClockFreq+0x180>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	3301      	adds	r3, #1
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003678:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003682:	e002      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetSysClockFreq+0x184>)
 8003686:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800368c:	4618      	mov	r0, r3
 800368e:	3740      	adds	r7, #64	; 0x40
 8003690:	46bd      	mov	sp, r7
 8003692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	00f42400 	.word	0x00f42400
 80036a0:	017d7840 	.word	0x017d7840

080036a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000000 	.word	0x20000000

080036bc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80036c2:	4b8d      	ldr	r3, [pc, #564]	; (80038f8 <MX_LWIP_Init+0x23c>)
 80036c4:	22c0      	movs	r2, #192	; 0xc0
 80036c6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80036c8:	4b8b      	ldr	r3, [pc, #556]	; (80038f8 <MX_LWIP_Init+0x23c>)
 80036ca:	22a8      	movs	r2, #168	; 0xa8
 80036cc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 37;
 80036ce:	4b8a      	ldr	r3, [pc, #552]	; (80038f8 <MX_LWIP_Init+0x23c>)
 80036d0:	2225      	movs	r2, #37	; 0x25
 80036d2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 12;
 80036d4:	4b88      	ldr	r3, [pc, #544]	; (80038f8 <MX_LWIP_Init+0x23c>)
 80036d6:	220c      	movs	r2, #12
 80036d8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80036da:	4b88      	ldr	r3, [pc, #544]	; (80038fc <MX_LWIP_Init+0x240>)
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80036e0:	4b86      	ldr	r3, [pc, #536]	; (80038fc <MX_LWIP_Init+0x240>)
 80036e2:	22ff      	movs	r2, #255	; 0xff
 80036e4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80036e6:	4b85      	ldr	r3, [pc, #532]	; (80038fc <MX_LWIP_Init+0x240>)
 80036e8:	22ff      	movs	r2, #255	; 0xff
 80036ea:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80036ec:	4b83      	ldr	r3, [pc, #524]	; (80038fc <MX_LWIP_Init+0x240>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80036f2:	4b83      	ldr	r3, [pc, #524]	; (8003900 <MX_LWIP_Init+0x244>)
 80036f4:	22c0      	movs	r2, #192	; 0xc0
 80036f6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80036f8:	4b81      	ldr	r3, [pc, #516]	; (8003900 <MX_LWIP_Init+0x244>)
 80036fa:	22a8      	movs	r2, #168	; 0xa8
 80036fc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 37;
 80036fe:	4b80      	ldr	r3, [pc, #512]	; (8003900 <MX_LWIP_Init+0x244>)
 8003700:	2225      	movs	r2, #37	; 0x25
 8003702:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003704:	4b7e      	ldr	r3, [pc, #504]	; (8003900 <MX_LWIP_Init+0x244>)
 8003706:	2201      	movs	r2, #1
 8003708:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800370a:	f000 fd1d 	bl	8004148 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800370e:	4b7a      	ldr	r3, [pc, #488]	; (80038f8 <MX_LWIP_Init+0x23c>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	061a      	lsls	r2, r3, #24
 8003714:	4b78      	ldr	r3, [pc, #480]	; (80038f8 <MX_LWIP_Init+0x23c>)
 8003716:	785b      	ldrb	r3, [r3, #1]
 8003718:	041b      	lsls	r3, r3, #16
 800371a:	431a      	orrs	r2, r3
 800371c:	4b76      	ldr	r3, [pc, #472]	; (80038f8 <MX_LWIP_Init+0x23c>)
 800371e:	789b      	ldrb	r3, [r3, #2]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	4313      	orrs	r3, r2
 8003724:	4a74      	ldr	r2, [pc, #464]	; (80038f8 <MX_LWIP_Init+0x23c>)
 8003726:	78d2      	ldrb	r2, [r2, #3]
 8003728:	4313      	orrs	r3, r2
 800372a:	061a      	lsls	r2, r3, #24
 800372c:	4b72      	ldr	r3, [pc, #456]	; (80038f8 <MX_LWIP_Init+0x23c>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	0619      	lsls	r1, r3, #24
 8003732:	4b71      	ldr	r3, [pc, #452]	; (80038f8 <MX_LWIP_Init+0x23c>)
 8003734:	785b      	ldrb	r3, [r3, #1]
 8003736:	041b      	lsls	r3, r3, #16
 8003738:	4319      	orrs	r1, r3
 800373a:	4b6f      	ldr	r3, [pc, #444]	; (80038f8 <MX_LWIP_Init+0x23c>)
 800373c:	789b      	ldrb	r3, [r3, #2]
 800373e:	021b      	lsls	r3, r3, #8
 8003740:	430b      	orrs	r3, r1
 8003742:	496d      	ldr	r1, [pc, #436]	; (80038f8 <MX_LWIP_Init+0x23c>)
 8003744:	78c9      	ldrb	r1, [r1, #3]
 8003746:	430b      	orrs	r3, r1
 8003748:	021b      	lsls	r3, r3, #8
 800374a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800374e:	431a      	orrs	r2, r3
 8003750:	4b69      	ldr	r3, [pc, #420]	; (80038f8 <MX_LWIP_Init+0x23c>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	0619      	lsls	r1, r3, #24
 8003756:	4b68      	ldr	r3, [pc, #416]	; (80038f8 <MX_LWIP_Init+0x23c>)
 8003758:	785b      	ldrb	r3, [r3, #1]
 800375a:	041b      	lsls	r3, r3, #16
 800375c:	4319      	orrs	r1, r3
 800375e:	4b66      	ldr	r3, [pc, #408]	; (80038f8 <MX_LWIP_Init+0x23c>)
 8003760:	789b      	ldrb	r3, [r3, #2]
 8003762:	021b      	lsls	r3, r3, #8
 8003764:	430b      	orrs	r3, r1
 8003766:	4964      	ldr	r1, [pc, #400]	; (80038f8 <MX_LWIP_Init+0x23c>)
 8003768:	78c9      	ldrb	r1, [r1, #3]
 800376a:	430b      	orrs	r3, r1
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003772:	431a      	orrs	r2, r3
 8003774:	4b60      	ldr	r3, [pc, #384]	; (80038f8 <MX_LWIP_Init+0x23c>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	0619      	lsls	r1, r3, #24
 800377a:	4b5f      	ldr	r3, [pc, #380]	; (80038f8 <MX_LWIP_Init+0x23c>)
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	041b      	lsls	r3, r3, #16
 8003780:	4319      	orrs	r1, r3
 8003782:	4b5d      	ldr	r3, [pc, #372]	; (80038f8 <MX_LWIP_Init+0x23c>)
 8003784:	789b      	ldrb	r3, [r3, #2]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	430b      	orrs	r3, r1
 800378a:	495b      	ldr	r1, [pc, #364]	; (80038f8 <MX_LWIP_Init+0x23c>)
 800378c:	78c9      	ldrb	r1, [r1, #3]
 800378e:	430b      	orrs	r3, r1
 8003790:	0e1b      	lsrs	r3, r3, #24
 8003792:	4313      	orrs	r3, r2
 8003794:	4a5b      	ldr	r2, [pc, #364]	; (8003904 <MX_LWIP_Init+0x248>)
 8003796:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8003798:	4b58      	ldr	r3, [pc, #352]	; (80038fc <MX_LWIP_Init+0x240>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	061a      	lsls	r2, r3, #24
 800379e:	4b57      	ldr	r3, [pc, #348]	; (80038fc <MX_LWIP_Init+0x240>)
 80037a0:	785b      	ldrb	r3, [r3, #1]
 80037a2:	041b      	lsls	r3, r3, #16
 80037a4:	431a      	orrs	r2, r3
 80037a6:	4b55      	ldr	r3, [pc, #340]	; (80038fc <MX_LWIP_Init+0x240>)
 80037a8:	789b      	ldrb	r3, [r3, #2]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	4313      	orrs	r3, r2
 80037ae:	4a53      	ldr	r2, [pc, #332]	; (80038fc <MX_LWIP_Init+0x240>)
 80037b0:	78d2      	ldrb	r2, [r2, #3]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	061a      	lsls	r2, r3, #24
 80037b6:	4b51      	ldr	r3, [pc, #324]	; (80038fc <MX_LWIP_Init+0x240>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	0619      	lsls	r1, r3, #24
 80037bc:	4b4f      	ldr	r3, [pc, #316]	; (80038fc <MX_LWIP_Init+0x240>)
 80037be:	785b      	ldrb	r3, [r3, #1]
 80037c0:	041b      	lsls	r3, r3, #16
 80037c2:	4319      	orrs	r1, r3
 80037c4:	4b4d      	ldr	r3, [pc, #308]	; (80038fc <MX_LWIP_Init+0x240>)
 80037c6:	789b      	ldrb	r3, [r3, #2]
 80037c8:	021b      	lsls	r3, r3, #8
 80037ca:	430b      	orrs	r3, r1
 80037cc:	494b      	ldr	r1, [pc, #300]	; (80038fc <MX_LWIP_Init+0x240>)
 80037ce:	78c9      	ldrb	r1, [r1, #3]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	021b      	lsls	r3, r3, #8
 80037d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037d8:	431a      	orrs	r2, r3
 80037da:	4b48      	ldr	r3, [pc, #288]	; (80038fc <MX_LWIP_Init+0x240>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	0619      	lsls	r1, r3, #24
 80037e0:	4b46      	ldr	r3, [pc, #280]	; (80038fc <MX_LWIP_Init+0x240>)
 80037e2:	785b      	ldrb	r3, [r3, #1]
 80037e4:	041b      	lsls	r3, r3, #16
 80037e6:	4319      	orrs	r1, r3
 80037e8:	4b44      	ldr	r3, [pc, #272]	; (80038fc <MX_LWIP_Init+0x240>)
 80037ea:	789b      	ldrb	r3, [r3, #2]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	430b      	orrs	r3, r1
 80037f0:	4942      	ldr	r1, [pc, #264]	; (80038fc <MX_LWIP_Init+0x240>)
 80037f2:	78c9      	ldrb	r1, [r1, #3]
 80037f4:	430b      	orrs	r3, r1
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80037fc:	431a      	orrs	r2, r3
 80037fe:	4b3f      	ldr	r3, [pc, #252]	; (80038fc <MX_LWIP_Init+0x240>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	0619      	lsls	r1, r3, #24
 8003804:	4b3d      	ldr	r3, [pc, #244]	; (80038fc <MX_LWIP_Init+0x240>)
 8003806:	785b      	ldrb	r3, [r3, #1]
 8003808:	041b      	lsls	r3, r3, #16
 800380a:	4319      	orrs	r1, r3
 800380c:	4b3b      	ldr	r3, [pc, #236]	; (80038fc <MX_LWIP_Init+0x240>)
 800380e:	789b      	ldrb	r3, [r3, #2]
 8003810:	021b      	lsls	r3, r3, #8
 8003812:	430b      	orrs	r3, r1
 8003814:	4939      	ldr	r1, [pc, #228]	; (80038fc <MX_LWIP_Init+0x240>)
 8003816:	78c9      	ldrb	r1, [r1, #3]
 8003818:	430b      	orrs	r3, r1
 800381a:	0e1b      	lsrs	r3, r3, #24
 800381c:	4313      	orrs	r3, r2
 800381e:	4a3a      	ldr	r2, [pc, #232]	; (8003908 <MX_LWIP_Init+0x24c>)
 8003820:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003822:	4b37      	ldr	r3, [pc, #220]	; (8003900 <MX_LWIP_Init+0x244>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	061a      	lsls	r2, r3, #24
 8003828:	4b35      	ldr	r3, [pc, #212]	; (8003900 <MX_LWIP_Init+0x244>)
 800382a:	785b      	ldrb	r3, [r3, #1]
 800382c:	041b      	lsls	r3, r3, #16
 800382e:	431a      	orrs	r2, r3
 8003830:	4b33      	ldr	r3, [pc, #204]	; (8003900 <MX_LWIP_Init+0x244>)
 8003832:	789b      	ldrb	r3, [r3, #2]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	4313      	orrs	r3, r2
 8003838:	4a31      	ldr	r2, [pc, #196]	; (8003900 <MX_LWIP_Init+0x244>)
 800383a:	78d2      	ldrb	r2, [r2, #3]
 800383c:	4313      	orrs	r3, r2
 800383e:	061a      	lsls	r2, r3, #24
 8003840:	4b2f      	ldr	r3, [pc, #188]	; (8003900 <MX_LWIP_Init+0x244>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	0619      	lsls	r1, r3, #24
 8003846:	4b2e      	ldr	r3, [pc, #184]	; (8003900 <MX_LWIP_Init+0x244>)
 8003848:	785b      	ldrb	r3, [r3, #1]
 800384a:	041b      	lsls	r3, r3, #16
 800384c:	4319      	orrs	r1, r3
 800384e:	4b2c      	ldr	r3, [pc, #176]	; (8003900 <MX_LWIP_Init+0x244>)
 8003850:	789b      	ldrb	r3, [r3, #2]
 8003852:	021b      	lsls	r3, r3, #8
 8003854:	430b      	orrs	r3, r1
 8003856:	492a      	ldr	r1, [pc, #168]	; (8003900 <MX_LWIP_Init+0x244>)
 8003858:	78c9      	ldrb	r1, [r1, #3]
 800385a:	430b      	orrs	r3, r1
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003862:	431a      	orrs	r2, r3
 8003864:	4b26      	ldr	r3, [pc, #152]	; (8003900 <MX_LWIP_Init+0x244>)
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	0619      	lsls	r1, r3, #24
 800386a:	4b25      	ldr	r3, [pc, #148]	; (8003900 <MX_LWIP_Init+0x244>)
 800386c:	785b      	ldrb	r3, [r3, #1]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	4319      	orrs	r1, r3
 8003872:	4b23      	ldr	r3, [pc, #140]	; (8003900 <MX_LWIP_Init+0x244>)
 8003874:	789b      	ldrb	r3, [r3, #2]
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	430b      	orrs	r3, r1
 800387a:	4921      	ldr	r1, [pc, #132]	; (8003900 <MX_LWIP_Init+0x244>)
 800387c:	78c9      	ldrb	r1, [r1, #3]
 800387e:	430b      	orrs	r3, r1
 8003880:	0a1b      	lsrs	r3, r3, #8
 8003882:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003886:	431a      	orrs	r2, r3
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <MX_LWIP_Init+0x244>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	0619      	lsls	r1, r3, #24
 800388e:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <MX_LWIP_Init+0x244>)
 8003890:	785b      	ldrb	r3, [r3, #1]
 8003892:	041b      	lsls	r3, r3, #16
 8003894:	4319      	orrs	r1, r3
 8003896:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <MX_LWIP_Init+0x244>)
 8003898:	789b      	ldrb	r3, [r3, #2]
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	430b      	orrs	r3, r1
 800389e:	4918      	ldr	r1, [pc, #96]	; (8003900 <MX_LWIP_Init+0x244>)
 80038a0:	78c9      	ldrb	r1, [r1, #3]
 80038a2:	430b      	orrs	r3, r1
 80038a4:	0e1b      	lsrs	r3, r3, #24
 80038a6:	4313      	orrs	r3, r2
 80038a8:	4a18      	ldr	r2, [pc, #96]	; (800390c <MX_LWIP_Init+0x250>)
 80038aa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80038ac:	4b18      	ldr	r3, [pc, #96]	; (8003910 <MX_LWIP_Init+0x254>)
 80038ae:	9302      	str	r3, [sp, #8]
 80038b0:	4b18      	ldr	r3, [pc, #96]	; (8003914 <MX_LWIP_Init+0x258>)
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	2300      	movs	r3, #0
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	4b14      	ldr	r3, [pc, #80]	; (800390c <MX_LWIP_Init+0x250>)
 80038ba:	4a13      	ldr	r2, [pc, #76]	; (8003908 <MX_LWIP_Init+0x24c>)
 80038bc:	4911      	ldr	r1, [pc, #68]	; (8003904 <MX_LWIP_Init+0x248>)
 80038be:	4816      	ldr	r0, [pc, #88]	; (8003918 <MX_LWIP_Init+0x25c>)
 80038c0:	f001 f92e 	bl	8004b20 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80038c4:	4814      	ldr	r0, [pc, #80]	; (8003918 <MX_LWIP_Init+0x25c>)
 80038c6:	f001 fadd 	bl	8004e84 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80038ca:	4b13      	ldr	r3, [pc, #76]	; (8003918 <MX_LWIP_Init+0x25c>)
 80038cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80038d0:	089b      	lsrs	r3, r3, #2
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80038dc:	480e      	ldr	r0, [pc, #56]	; (8003918 <MX_LWIP_Init+0x25c>)
 80038de:	f001 fae1 	bl	8004ea4 <netif_set_up>
 80038e2:	e002      	b.n	80038ea <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80038e4:	480c      	ldr	r0, [pc, #48]	; (8003918 <MX_LWIP_Init+0x25c>)
 80038e6:	f001 fb49 	bl	8004f7c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80038ea:	490c      	ldr	r1, [pc, #48]	; (800391c <MX_LWIP_Init+0x260>)
 80038ec:	480a      	ldr	r0, [pc, #40]	; (8003918 <MX_LWIP_Init+0x25c>)
 80038ee:	f001 fbdb 	bl	80050a8 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80038f2:	bf00      	nop
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	20000160 	.word	0x20000160
 80038fc:	20000164 	.word	0x20000164
 8003900:	20000168 	.word	0x20000168
 8003904:	20000154 	.word	0x20000154
 8003908:	20000158 	.word	0x20000158
 800390c:	2000015c 	.word	0x2000015c
 8003910:	0800e711 	.word	0x0800e711
 8003914:	08003c2d 	.word	0x08003c2d
 8003918:	200000ac 	.word	0x200000ac
 800391c:	08003971 	.word	0x08003971

08003920 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8003928:	f7fd fe32 	bl	8001590 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <Ethernet_Link_Periodic_Handle+0x30>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b63      	cmp	r3, #99	; 0x63
 8003936:	d907      	bls.n	8003948 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8003938:	f7fd fe2a 	bl	8001590 <HAL_GetTick>
 800393c:	4603      	mov	r3, r0
 800393e:	4a04      	ldr	r2, [pc, #16]	; (8003950 <Ethernet_Link_Periodic_Handle+0x30>)
 8003940:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f000 fad6 	bl	8003ef4 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8003948:	bf00      	nop
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20000150 	.word	0x20000150

08003954 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8003958:	4804      	ldr	r0, [pc, #16]	; (800396c <MX_LWIP_Process+0x18>)
 800395a:	f000 f947 	bl	8003bec <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 800395e:	f008 faeb 	bl	800bf38 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8003962:	4802      	ldr	r0, [pc, #8]	; (800396c <MX_LWIP_Process+0x18>)
 8003964:	f7ff ffdc 	bl	8003920 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8003968:	bf00      	nop
 800396a:	bd80      	pop	{r7, pc}
 800396c:	200000ac 	.word	0x200000ac

08003970 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003990:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <low_level_init+0x110>)
 8003992:	4a41      	ldr	r2, [pc, #260]	; (8003a98 <low_level_init+0x114>)
 8003994:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003996:	2300      	movs	r3, #0
 8003998:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800399e:	23e1      	movs	r3, #225	; 0xe1
 80039a0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80039a2:	2300      	movs	r3, #0
 80039a4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80039a6:	2300      	movs	r3, #0
 80039a8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80039aa:	2300      	movs	r3, #0
 80039ac:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80039ae:	4a39      	ldr	r2, [pc, #228]	; (8003a94 <low_level_init+0x110>)
 80039b0:	f107 0308 	add.w	r3, r7, #8
 80039b4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80039b6:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <low_level_init+0x110>)
 80039b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80039bc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80039be:	4b35      	ldr	r3, [pc, #212]	; (8003a94 <low_level_init+0x110>)
 80039c0:	4a36      	ldr	r2, [pc, #216]	; (8003a9c <low_level_init+0x118>)
 80039c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80039c4:	4b33      	ldr	r3, [pc, #204]	; (8003a94 <low_level_init+0x110>)
 80039c6:	4a36      	ldr	r2, [pc, #216]	; (8003aa0 <low_level_init+0x11c>)
 80039c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80039ca:	4b32      	ldr	r3, [pc, #200]	; (8003a94 <low_level_init+0x110>)
 80039cc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80039d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80039d2:	4830      	ldr	r0, [pc, #192]	; (8003a94 <low_level_init+0x110>)
 80039d4:	f7fd ff1e 	bl	8001814 <HAL_ETH_Init>
 80039d8:	4603      	mov	r3, r0
 80039da:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80039dc:	2238      	movs	r2, #56	; 0x38
 80039de:	2100      	movs	r1, #0
 80039e0:	4830      	ldr	r0, [pc, #192]	; (8003aa4 <low_level_init+0x120>)
 80039e2:	f00a ffc7 	bl	800e974 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80039e6:	4b2f      	ldr	r3, [pc, #188]	; (8003aa4 <low_level_init+0x120>)
 80039e8:	2221      	movs	r2, #33	; 0x21
 80039ea:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80039ec:	4b2d      	ldr	r3, [pc, #180]	; (8003aa4 <low_level_init+0x120>)
 80039ee:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80039f2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80039f4:	4b2b      	ldr	r3, [pc, #172]	; (8003aa4 <low_level_init+0x120>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80039fa:	482b      	ldr	r0, [pc, #172]	; (8003aa8 <low_level_init+0x124>)
 80039fc:	f000 ff58 	bl	80048b0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2206      	movs	r2, #6
 8003a04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003a08:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <low_level_init+0x110>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003a14:	4b1f      	ldr	r3, [pc, #124]	; (8003a94 <low_level_init+0x110>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	785a      	ldrb	r2, [r3, #1]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003a20:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <low_level_init+0x110>)
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	789a      	ldrb	r2, [r3, #2]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <low_level_init+0x110>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	78da      	ldrb	r2, [r3, #3]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003a38:	4b16      	ldr	r3, [pc, #88]	; (8003a94 <low_level_init+0x110>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	791a      	ldrb	r2, [r3, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003a44:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <low_level_init+0x110>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	795a      	ldrb	r2, [r3, #5]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003a56:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003a5e:	f043 030a 	orr.w	r3, r3, #10
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003a6a:	4910      	ldr	r1, [pc, #64]	; (8003aac <low_level_init+0x128>)
 8003a6c:	4810      	ldr	r0, [pc, #64]	; (8003ab0 <low_level_init+0x12c>)
 8003a6e:	f7fd fbc8 	bl	8001202 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8003a72:	480f      	ldr	r0, [pc, #60]	; (8003ab0 <low_level_init+0x12c>)
 8003a74:	f7fd fbf7 	bl	8001266 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d103      	bne.n	8003a86 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fa38 	bl	8003ef4 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003a84:	e001      	b.n	8003a8a <low_level_init+0x106>
    Error_Handler();
 8003a86:	f7fc feff 	bl	8000888 <Error_Handler>
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20004c38 	.word	0x20004c38
 8003a98:	40028000 	.word	0x40028000
 8003a9c:	20004b98 	.word	0x20004b98
 8003aa0:	20004af8 	.word	0x20004af8
 8003aa4:	20004ce8 	.word	0x20004ce8
 8003aa8:	080128bc 	.word	0x080128bc
 8003aac:	2000000c 	.word	0x2000000c
 8003ab0:	20004d20 	.word	0x20004d20

08003ab4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b092      	sub	sp, #72	; 0x48
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003acc:	f107 030c 	add.w	r3, r7, #12
 8003ad0:	2230      	movs	r2, #48	; 0x30
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f00a ff4d 	bl	800e974 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003ada:	f107 030c 	add.w	r3, r7, #12
 8003ade:	2230      	movs	r2, #48	; 0x30
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f00a ff46 	bl	800e974 <memset>

  for(q = p; q != NULL; q = q->next)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	643b      	str	r3, [r7, #64]	; 0x40
 8003aec:	e045      	b.n	8003b7a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d902      	bls.n	8003afa <low_level_output+0x46>
      return ERR_IF;
 8003af4:	f06f 030b 	mvn.w	r3, #11
 8003af8:	e055      	b.n	8003ba6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8003afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003afc:	6859      	ldr	r1, [r3, #4]
 8003afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b00:	4613      	mov	r3, r2
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	4413      	add	r3, r2
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	3348      	adds	r3, #72	; 0x48
 8003b0a:	443b      	add	r3, r7
 8003b0c:	3b3c      	subs	r3, #60	; 0x3c
 8003b0e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b12:	895b      	ldrh	r3, [r3, #10]
 8003b14:	4619      	mov	r1, r3
 8003b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b18:	4613      	mov	r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	3348      	adds	r3, #72	; 0x48
 8003b22:	443b      	add	r3, r7
 8003b24:	3b38      	subs	r3, #56	; 0x38
 8003b26:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d011      	beq.n	8003b52 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b30:	1e5a      	subs	r2, r3, #1
 8003b32:	f107 000c 	add.w	r0, r7, #12
 8003b36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b38:	460b      	mov	r3, r1
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	440b      	add	r3, r1
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	18c1      	adds	r1, r0, r3
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	3348      	adds	r3, #72	; 0x48
 8003b4c:	443b      	add	r3, r7
 8003b4e:	3b34      	subs	r3, #52	; 0x34
 8003b50:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003b52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003b5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	3348      	adds	r3, #72	; 0x48
 8003b66:	443b      	add	r3, r7
 8003b68:	3b34      	subs	r3, #52	; 0x34
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b70:	3301      	adds	r3, #1
 8003b72:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8003b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	643b      	str	r3, [r7, #64]	; 0x40
 8003b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1b6      	bne.n	8003aee <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	891b      	ldrh	r3, [r3, #8]
 8003b84:	461a      	mov	r2, r3
 8003b86:	4b0a      	ldr	r3, [pc, #40]	; (8003bb0 <low_level_output+0xfc>)
 8003b88:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003b8a:	4a09      	ldr	r2, [pc, #36]	; (8003bb0 <low_level_output+0xfc>)
 8003b8c:	f107 030c 	add.w	r3, r7, #12
 8003b90:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003b92:	4a07      	ldr	r2, [pc, #28]	; (8003bb0 <low_level_output+0xfc>)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8003b98:	2214      	movs	r2, #20
 8003b9a:	4905      	ldr	r1, [pc, #20]	; (8003bb0 <low_level_output+0xfc>)
 8003b9c:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <low_level_output+0x100>)
 8003b9e:	f7fd ff6f 	bl	8001a80 <HAL_ETH_Transmit>

  return errval;
 8003ba2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3748      	adds	r7, #72	; 0x48
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20004ce8 	.word	0x20004ce8
 8003bb4:	20004c38 	.word	0x20004c38

08003bb8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003bc4:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <low_level_input+0x2c>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4805      	ldr	r0, [pc, #20]	; (8003be8 <low_level_input+0x30>)
 8003bd4:	f7fd ffe8 	bl	8001ba8 <HAL_ETH_ReadData>
  }

  return p;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20004af4 	.word	0x20004af4
 8003be8:	20004c38 	.word	0x20004c38

08003bec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ffdd 	bl	8003bb8 <low_level_input>
 8003bfe:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00a      	beq.n	8003c1c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	4798      	blx	r3
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f001 fdc6 	bl	80057a8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1ea      	bne.n	8003bf8 <ethernetif_input+0xc>
}
 8003c22:	bf00      	nop
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <ethernetif_init+0x1c>
 8003c3a:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <ethernetif_init+0x48>)
 8003c3c:	f240 126b 	movw	r2, #363	; 0x16b
 8003c40:	490d      	ldr	r1, [pc, #52]	; (8003c78 <ethernetif_init+0x4c>)
 8003c42:	480e      	ldr	r0, [pc, #56]	; (8003c7c <ethernetif_init+0x50>)
 8003c44:	f00a fe9e 	bl	800e984 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2273      	movs	r2, #115	; 0x73
 8003c4c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2274      	movs	r2, #116	; 0x74
 8003c54:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a09      	ldr	r2, [pc, #36]	; (8003c80 <ethernetif_init+0x54>)
 8003c5c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a08      	ldr	r2, [pc, #32]	; (8003c84 <ethernetif_init+0x58>)
 8003c62:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff fe8d 	bl	8003984 <low_level_init>

  return ERR_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	0800fecc 	.word	0x0800fecc
 8003c78:	0800fee8 	.word	0x0800fee8
 8003c7c:	0800fef8 	.word	0x0800fef8
 8003c80:	0800cbc9 	.word	0x0800cbc9
 8003c84:	08003ab5 	.word	0x08003ab5

08003c88 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003c94:	68f9      	ldr	r1, [r7, #12]
 8003c96:	4807      	ldr	r0, [pc, #28]	; (8003cb4 <pbuf_free_custom+0x2c>)
 8003c98:	f000 feec 	bl	8004a74 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003c9c:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <pbuf_free_custom+0x30>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d102      	bne.n	8003caa <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003ca4:	4b04      	ldr	r3, [pc, #16]	; (8003cb8 <pbuf_free_custom+0x30>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	701a      	strb	r2, [r3, #0]
  }
}
 8003caa:	bf00      	nop
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	080128bc 	.word	0x080128bc
 8003cb8:	20004af4 	.word	0x20004af4

08003cbc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003cc0:	f7fd fc66 	bl	8001590 <HAL_GetTick>
 8003cc4:	4603      	mov	r3, r0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	bd80      	pop	{r7, pc}
	...

08003ccc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08e      	sub	sp, #56	; 0x38
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a55      	ldr	r2, [pc, #340]	; (8003e40 <HAL_ETH_MspInit+0x174>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	f040 80a4 	bne.w	8003e38 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	623b      	str	r3, [r7, #32]
 8003cf4:	4b53      	ldr	r3, [pc, #332]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf8:	4a52      	ldr	r2, [pc, #328]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003cfa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8003d00:	4b50      	ldr	r3, [pc, #320]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d08:	623b      	str	r3, [r7, #32]
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	61fb      	str	r3, [r7, #28]
 8003d10:	4b4c      	ldr	r3, [pc, #304]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	4a4b      	ldr	r2, [pc, #300]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d1c:	4b49      	ldr	r3, [pc, #292]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61bb      	str	r3, [r7, #24]
 8003d2c:	4b45      	ldr	r3, [pc, #276]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	4a44      	ldr	r2, [pc, #272]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d36:	6313      	str	r3, [r2, #48]	; 0x30
 8003d38:	4b42      	ldr	r3, [pc, #264]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d4c:	4a3d      	ldr	r2, [pc, #244]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d4e:	f043 0304 	orr.w	r3, r3, #4
 8003d52:	6313      	str	r3, [r2, #48]	; 0x30
 8003d54:	4b3b      	ldr	r3, [pc, #236]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	4b37      	ldr	r3, [pc, #220]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	4a36      	ldr	r2, [pc, #216]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8003d70:	4b34      	ldr	r3, [pc, #208]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	4b30      	ldr	r3, [pc, #192]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	4a2f      	ldr	r2, [pc, #188]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d86:	f043 0302 	orr.w	r3, r3, #2
 8003d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8c:	4b2d      	ldr	r3, [pc, #180]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d98:	2300      	movs	r3, #0
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	4a28      	ldr	r2, [pc, #160]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003da2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003da6:	6313      	str	r3, [r2, #48]	; 0x30
 8003da8:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <HAL_ETH_MspInit+0x178>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003db4:	2332      	movs	r3, #50	; 0x32
 8003db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db8:	2302      	movs	r3, #2
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003dc4:	230b      	movs	r3, #11
 8003dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dcc:	4619      	mov	r1, r3
 8003dce:	481e      	ldr	r0, [pc, #120]	; (8003e48 <HAL_ETH_MspInit+0x17c>)
 8003dd0:	f7fe fe16 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003dd4:	2386      	movs	r3, #134	; 0x86
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de0:	2303      	movs	r3, #3
 8003de2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003de4:	230b      	movs	r3, #11
 8003de6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dec:	4619      	mov	r1, r3
 8003dee:	4817      	ldr	r0, [pc, #92]	; (8003e4c <HAL_ETH_MspInit+0x180>)
 8003df0:	f7fe fe06 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003df4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e02:	2303      	movs	r3, #3
 8003e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e06:	230b      	movs	r3, #11
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e0e:	4619      	mov	r1, r3
 8003e10:	480f      	ldr	r0, [pc, #60]	; (8003e50 <HAL_ETH_MspInit+0x184>)
 8003e12:	f7fe fdf5 	bl	8002a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003e16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e20:	2300      	movs	r3, #0
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e24:	2303      	movs	r3, #3
 8003e26:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003e28:	230b      	movs	r3, #11
 8003e2a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e30:	4619      	mov	r1, r3
 8003e32:	4808      	ldr	r0, [pc, #32]	; (8003e54 <HAL_ETH_MspInit+0x188>)
 8003e34:	f7fe fde4 	bl	8002a00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003e38:	bf00      	nop
 8003e3a:	3738      	adds	r7, #56	; 0x38
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40028000 	.word	0x40028000
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40020800 	.word	0x40020800
 8003e4c:	40020000 	.word	0x40020000
 8003e50:	40020400 	.word	0x40020400
 8003e54:	40021800 	.word	0x40021800

08003e58 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8003e5c:	4802      	ldr	r0, [pc, #8]	; (8003e68 <ETH_PHY_IO_Init+0x10>)
 8003e5e:	f7fe f973 	bl	8002148 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20004c38 	.word	0x20004c38

08003e6c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  return 0;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	68f9      	ldr	r1, [r7, #12]
 8003e8e:	4807      	ldr	r0, [pc, #28]	; (8003eac <ETH_PHY_IO_ReadReg+0x30>)
 8003e90:	f7fd ffc2 	bl	8001e18 <HAL_ETH_ReadPHYRegister>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9e:	e000      	b.n	8003ea2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20004c38 	.word	0x20004c38

08003eb0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	68f9      	ldr	r1, [r7, #12]
 8003ec2:	4807      	ldr	r0, [pc, #28]	; (8003ee0 <ETH_PHY_IO_WriteReg+0x30>)
 8003ec4:	f7fd fff3 	bl	8001eae <HAL_ETH_WritePHYRegister>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed2:	e000      	b.n	8003ed6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20004c38 	.word	0x20004c38

08003ee4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003ee8:	f7fd fb52 	bl	8001590 <HAL_GetTick>
 8003eec:	4603      	mov	r3, r0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b0a0      	sub	sp, #128	; 0x80
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8003efc:	f107 030c 	add.w	r3, r7, #12
 8003f00:	2264      	movs	r2, #100	; 0x64
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f00a fd35 	bl	800e974 <memset>
  int32_t PHYLinkState = 0;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f12:	2300      	movs	r3, #0
 8003f14:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f16:	2300      	movs	r3, #0
 8003f18:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003f1a:	483a      	ldr	r0, [pc, #232]	; (8004004 <ethernet_link_check_state+0x110>)
 8003f1c:	f7fd fa4b 	bl	80013b6 <LAN8742_GetLinkState>
 8003f20:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003f28:	089b      	lsrs	r3, r3, #2
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00c      	beq.n	8003f4e <ethernet_link_check_state+0x5a>
 8003f34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	dc09      	bgt.n	8003f4e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8003f3a:	4833      	ldr	r0, [pc, #204]	; (8004008 <ethernet_link_check_state+0x114>)
 8003f3c:	f7fd fd47 	bl	80019ce <HAL_ETH_Stop>
    netif_set_down(netif);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f001 f81b 	bl	8004f7c <netif_set_down>
    netif_set_link_down(netif);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f001 f87e 	bl	8005048 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003f4c:	e055      	b.n	8003ffa <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d14e      	bne.n	8003ffa <ethernet_link_check_state+0x106>
 8003f5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	dd4b      	ble.n	8003ffa <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8003f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f64:	3b02      	subs	r3, #2
 8003f66:	2b03      	cmp	r3, #3
 8003f68:	d82a      	bhi.n	8003fc0 <ethernet_link_check_state+0xcc>
 8003f6a:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <ethernet_link_check_state+0x7c>)
 8003f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f70:	08003f81 	.word	0x08003f81
 8003f74:	08003f93 	.word	0x08003f93
 8003f78:	08003fa3 	.word	0x08003fa3
 8003f7c:	08003fb3 	.word	0x08003fb3
      duplex = ETH_FULLDUPLEX_MODE;
 8003f80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f84:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003f86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f8a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003f90:	e017      	b.n	8003fc2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8003f96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f9a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003fa0:	e00f      	b.n	8003fc2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8003fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003fa6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003fac:	2301      	movs	r3, #1
 8003fae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003fb0:	e007      	b.n	8003fc2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8003fbe:	e000      	b.n	8003fc2 <ethernet_link_check_state+0xce>
      break;
 8003fc0:	bf00      	nop
    if(linkchanged)
 8003fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d018      	beq.n	8003ffa <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003fc8:	f107 030c 	add.w	r3, r7, #12
 8003fcc:	4619      	mov	r1, r3
 8003fce:	480e      	ldr	r0, [pc, #56]	; (8004008 <ethernet_link_check_state+0x114>)
 8003fd0:	f7fd ffb6 	bl	8001f40 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003fd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8003fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fda:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003fdc:	f107 030c 	add.w	r3, r7, #12
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4809      	ldr	r0, [pc, #36]	; (8004008 <ethernet_link_check_state+0x114>)
 8003fe4:	f7fe f896 	bl	8002114 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003fe8:	4807      	ldr	r0, [pc, #28]	; (8004008 <ethernet_link_check_state+0x114>)
 8003fea:	f7fd fc91 	bl	8001910 <HAL_ETH_Start>
      netif_set_up(netif);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 ff58 	bl	8004ea4 <netif_set_up>
      netif_set_link_up(netif);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fff3 	bl	8004fe0 <netif_set_link_up>
}
 8003ffa:	bf00      	nop
 8003ffc:	3780      	adds	r7, #128	; 0x80
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20004d20 	.word	0x20004d20
 8004008:	20004c38 	.word	0x20004c38

0800400c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af02      	add	r7, sp, #8
 8004012:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004014:	4812      	ldr	r0, [pc, #72]	; (8004060 <HAL_ETH_RxAllocateCallback+0x54>)
 8004016:	f000 fcbf 	bl	8004998 <memp_malloc_pool>
 800401a:	60f8      	str	r0, [r7, #12]
  if (p)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d014      	beq.n	800404c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f103 0220 	add.w	r2, r3, #32
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4a0d      	ldr	r2, [pc, #52]	; (8004064 <HAL_ETH_RxAllocateCallback+0x58>)
 8004030:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800403a:	9201      	str	r2, [sp, #4]
 800403c:	9300      	str	r3, [sp, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2241      	movs	r2, #65	; 0x41
 8004042:	2100      	movs	r1, #0
 8004044:	2000      	movs	r0, #0
 8004046:	f001 f9f5 	bl	8005434 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800404a:	e005      	b.n	8004058 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_ETH_RxAllocateCallback+0x5c>)
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
}
 8004058:	bf00      	nop
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	080128bc 	.word	0x080128bc
 8004064:	08003c89 	.word	0x08003c89
 8004068:	20004af4 	.word	0x20004af4

0800406c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800406c:	b480      	push	{r7}
 800406e:	b089      	sub	sp, #36	; 0x24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3b20      	subs	r3, #32
 800408a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2200      	movs	r2, #0
 8004096:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	887a      	ldrh	r2, [r7, #2]
 800409c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d103      	bne.n	80040ae <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	601a      	str	r2, [r3, #0]
 80040ac:	e003      	b.n	80040b6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	69fa      	ldr	r2, [r7, #28]
 80040b4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	61fb      	str	r3, [r7, #28]
 80040c2:	e009      	b.n	80040d8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	891a      	ldrh	r2, [r3, #8]
 80040c8:	887b      	ldrh	r3, [r7, #2]
 80040ca:	4413      	add	r3, r2
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	61fb      	str	r3, [r7, #28]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f2      	bne.n	80040c4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	3724      	adds	r7, #36	; 0x24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	b21a      	sxth	r2, r3
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	0a1b      	lsrs	r3, r3, #8
 8004100:	b29b      	uxth	r3, r3
 8004102:	b21b      	sxth	r3, r3
 8004104:	4313      	orrs	r3, r2
 8004106:	b21b      	sxth	r3, r3
 8004108:	b29b      	uxth	r3, r3
}
 800410a:	4618      	mov	r0, r3
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	061a      	lsls	r2, r3, #24
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	021b      	lsls	r3, r3, #8
 8004126:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	0e1b      	lsrs	r3, r3, #24
 800413a:	4313      	orrs	r3, r2
}
 800413c:	4618      	mov	r0, r3
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8004152:	f000 f8d5 	bl	8004300 <mem_init>
  memp_init();
 8004156:	f000 fbdb 	bl	8004910 <memp_init>
  pbuf_init();
  netif_init();
 800415a:	f000 fcd9 	bl	8004b10 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800415e:	f007 ff2d 	bl	800bfbc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8004162:	f001 fe41 	bl	8005de8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8004166:	f007 fe9f 	bl	800bea8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	4603      	mov	r3, r0
 800417c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <ptr_to_mem+0x20>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	88fb      	ldrh	r3, [r7, #6]
 8004184:	4413      	add	r3, r2
}
 8004186:	4618      	mov	r0, r3
 8004188:	370c      	adds	r7, #12
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	200053ac 	.word	0x200053ac

08004198 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <mem_to_ptr+0x20>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	b29b      	uxth	r3, r3
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	200053ac 	.word	0x200053ac

080041bc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80041bc:	b590      	push	{r4, r7, lr}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80041c4:	4b45      	ldr	r3, [pc, #276]	; (80042dc <plug_holes+0x120>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d206      	bcs.n	80041dc <plug_holes+0x20>
 80041ce:	4b44      	ldr	r3, [pc, #272]	; (80042e0 <plug_holes+0x124>)
 80041d0:	f240 12df 	movw	r2, #479	; 0x1df
 80041d4:	4943      	ldr	r1, [pc, #268]	; (80042e4 <plug_holes+0x128>)
 80041d6:	4844      	ldr	r0, [pc, #272]	; (80042e8 <plug_holes+0x12c>)
 80041d8:	f00a fbd4 	bl	800e984 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80041dc:	4b43      	ldr	r3, [pc, #268]	; (80042ec <plug_holes+0x130>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d306      	bcc.n	80041f4 <plug_holes+0x38>
 80041e6:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <plug_holes+0x124>)
 80041e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80041ec:	4940      	ldr	r1, [pc, #256]	; (80042f0 <plug_holes+0x134>)
 80041ee:	483e      	ldr	r0, [pc, #248]	; (80042e8 <plug_holes+0x12c>)
 80041f0:	f00a fbc8 	bl	800e984 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	791b      	ldrb	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d006      	beq.n	800420a <plug_holes+0x4e>
 80041fc:	4b38      	ldr	r3, [pc, #224]	; (80042e0 <plug_holes+0x124>)
 80041fe:	f240 12e1 	movw	r2, #481	; 0x1e1
 8004202:	493c      	ldr	r1, [pc, #240]	; (80042f4 <plug_holes+0x138>)
 8004204:	4838      	ldr	r0, [pc, #224]	; (80042e8 <plug_holes+0x12c>)
 8004206:	f00a fbbd 	bl	800e984 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	881b      	ldrh	r3, [r3, #0]
 800420e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004212:	d906      	bls.n	8004222 <plug_holes+0x66>
 8004214:	4b32      	ldr	r3, [pc, #200]	; (80042e0 <plug_holes+0x124>)
 8004216:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800421a:	4937      	ldr	r1, [pc, #220]	; (80042f8 <plug_holes+0x13c>)
 800421c:	4832      	ldr	r0, [pc, #200]	; (80042e8 <plug_holes+0x12c>)
 800421e:	f00a fbb1 	bl	800e984 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	881b      	ldrh	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff ffa4 	bl	8004174 <ptr_to_mem>
 800422c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	429a      	cmp	r2, r3
 8004234:	d024      	beq.n	8004280 <plug_holes+0xc4>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	791b      	ldrb	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d120      	bne.n	8004280 <plug_holes+0xc4>
 800423e:	4b2b      	ldr	r3, [pc, #172]	; (80042ec <plug_holes+0x130>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	429a      	cmp	r2, r3
 8004246:	d01b      	beq.n	8004280 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8004248:	4b2c      	ldr	r3, [pc, #176]	; (80042fc <plug_holes+0x140>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	429a      	cmp	r2, r3
 8004250:	d102      	bne.n	8004258 <plug_holes+0x9c>
      lfree = mem;
 8004252:	4a2a      	ldr	r2, [pc, #168]	; (80042fc <plug_holes+0x140>)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	881a      	ldrh	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004268:	d00a      	beq.n	8004280 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ff80 	bl	8004174 <ptr_to_mem>
 8004274:	4604      	mov	r4, r0
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff ff8e 	bl	8004198 <mem_to_ptr>
 800427c:	4603      	mov	r3, r0
 800427e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	885b      	ldrh	r3, [r3, #2]
 8004284:	4618      	mov	r0, r3
 8004286:	f7ff ff75 	bl	8004174 <ptr_to_mem>
 800428a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	429a      	cmp	r2, r3
 8004292:	d01f      	beq.n	80042d4 <plug_holes+0x118>
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	791b      	ldrb	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11b      	bne.n	80042d4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800429c:	4b17      	ldr	r3, [pc, #92]	; (80042fc <plug_holes+0x140>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d102      	bne.n	80042ac <plug_holes+0xf0>
      lfree = pmem;
 80042a6:	4a15      	ldr	r2, [pc, #84]	; (80042fc <plug_holes+0x140>)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	881a      	ldrh	r2, [r3, #0]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80042bc:	d00a      	beq.n	80042d4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7ff ff56 	bl	8004174 <ptr_to_mem>
 80042c8:	4604      	mov	r4, r0
 80042ca:	68b8      	ldr	r0, [r7, #8]
 80042cc:	f7ff ff64 	bl	8004198 <mem_to_ptr>
 80042d0:	4603      	mov	r3, r0
 80042d2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd90      	pop	{r4, r7, pc}
 80042dc:	200053ac 	.word	0x200053ac
 80042e0:	0800ff20 	.word	0x0800ff20
 80042e4:	0800ff50 	.word	0x0800ff50
 80042e8:	0800ff68 	.word	0x0800ff68
 80042ec:	200053b0 	.word	0x200053b0
 80042f0:	0800ff90 	.word	0x0800ff90
 80042f4:	0800ffac 	.word	0x0800ffac
 80042f8:	0800ffc8 	.word	0x0800ffc8
 80042fc:	200053b4 	.word	0x200053b4

08004300 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8004306:	4b18      	ldr	r3, [pc, #96]	; (8004368 <mem_init+0x68>)
 8004308:	3303      	adds	r3, #3
 800430a:	f023 0303 	bic.w	r3, r3, #3
 800430e:	461a      	mov	r2, r3
 8004310:	4b16      	ldr	r3, [pc, #88]	; (800436c <mem_init+0x6c>)
 8004312:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8004314:	4b15      	ldr	r3, [pc, #84]	; (800436c <mem_init+0x6c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004320:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800432e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8004332:	f7ff ff1f 	bl	8004174 <ptr_to_mem>
 8004336:	4603      	mov	r3, r0
 8004338:	4a0d      	ldr	r2, [pc, #52]	; (8004370 <mem_init+0x70>)
 800433a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <mem_init+0x70>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2201      	movs	r2, #1
 8004342:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8004344:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <mem_init+0x70>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800434c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800434e:	4b08      	ldr	r3, [pc, #32]	; (8004370 <mem_init+0x70>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8004356:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8004358:	4b04      	ldr	r3, [pc, #16]	; (800436c <mem_init+0x6c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a05      	ldr	r2, [pc, #20]	; (8004374 <mem_init+0x74>)
 800435e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	20004d58 	.word	0x20004d58
 800436c:	200053ac 	.word	0x200053ac
 8004370:	200053b0 	.word	0x200053b0
 8004374:	200053b4 	.word	0x200053b4

08004378 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff ff09 	bl	8004198 <mem_to_ptr>
 8004386:	4603      	mov	r3, r0
 8004388:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	4618      	mov	r0, r3
 8004390:	f7ff fef0 	bl	8004174 <ptr_to_mem>
 8004394:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	885b      	ldrh	r3, [r3, #2]
 800439a:	4618      	mov	r0, r3
 800439c:	f7ff feea 	bl	8004174 <ptr_to_mem>
 80043a0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80043aa:	d818      	bhi.n	80043de <mem_link_valid+0x66>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	885b      	ldrh	r3, [r3, #2]
 80043b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80043b4:	d813      	bhi.n	80043de <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80043ba:	8afa      	ldrh	r2, [r7, #22]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d004      	beq.n	80043ca <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	8afa      	ldrh	r2, [r7, #22]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d109      	bne.n	80043de <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80043ca:	4b08      	ldr	r3, [pc, #32]	; (80043ec <mem_link_valid+0x74>)
 80043cc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d006      	beq.n	80043e2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	885b      	ldrh	r3, [r3, #2]
 80043d8:	8afa      	ldrh	r2, [r7, #22]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d001      	beq.n	80043e2 <mem_link_valid+0x6a>
    return 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	e000      	b.n	80043e4 <mem_link_valid+0x6c>
  }
  return 1;
 80043e2:	2301      	movs	r3, #1
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	200053b0 	.word	0x200053b0

080043f0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d04c      	beq.n	8004498 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8004408:	4b25      	ldr	r3, [pc, #148]	; (80044a0 <mem_free+0xb0>)
 800440a:	f240 2273 	movw	r2, #627	; 0x273
 800440e:	4925      	ldr	r1, [pc, #148]	; (80044a4 <mem_free+0xb4>)
 8004410:	4825      	ldr	r0, [pc, #148]	; (80044a8 <mem_free+0xb8>)
 8004412:	f00a fab7 	bl	800e984 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004416:	e040      	b.n	800449a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3b08      	subs	r3, #8
 800441c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800441e:	4b23      	ldr	r3, [pc, #140]	; (80044ac <mem_free+0xbc>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	429a      	cmp	r2, r3
 8004426:	d306      	bcc.n	8004436 <mem_free+0x46>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f103 020c 	add.w	r2, r3, #12
 800442e:	4b20      	ldr	r3, [pc, #128]	; (80044b0 <mem_free+0xc0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d907      	bls.n	8004446 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8004436:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <mem_free+0xb0>)
 8004438:	f240 227f 	movw	r2, #639	; 0x27f
 800443c:	491d      	ldr	r1, [pc, #116]	; (80044b4 <mem_free+0xc4>)
 800443e:	481a      	ldr	r0, [pc, #104]	; (80044a8 <mem_free+0xb8>)
 8004440:	f00a faa0 	bl	800e984 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004444:	e029      	b.n	800449a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	791b      	ldrb	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d107      	bne.n	800445e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800444e:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <mem_free+0xb0>)
 8004450:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8004454:	4918      	ldr	r1, [pc, #96]	; (80044b8 <mem_free+0xc8>)
 8004456:	4814      	ldr	r0, [pc, #80]	; (80044a8 <mem_free+0xb8>)
 8004458:	f00a fa94 	bl	800e984 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800445c:	e01d      	b.n	800449a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f7ff ff8a 	bl	8004378 <mem_link_valid>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d107      	bne.n	800447a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800446a:	4b0d      	ldr	r3, [pc, #52]	; (80044a0 <mem_free+0xb0>)
 800446c:	f240 2295 	movw	r2, #661	; 0x295
 8004470:	4912      	ldr	r1, [pc, #72]	; (80044bc <mem_free+0xcc>)
 8004472:	480d      	ldr	r0, [pc, #52]	; (80044a8 <mem_free+0xb8>)
 8004474:	f00a fa86 	bl	800e984 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004478:	e00f      	b.n	800449a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004480:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <mem_free+0xd0>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	429a      	cmp	r2, r3
 8004488:	d202      	bcs.n	8004490 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800448a:	4a0d      	ldr	r2, [pc, #52]	; (80044c0 <mem_free+0xd0>)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f7ff fe93 	bl	80041bc <plug_holes>
 8004496:	e000      	b.n	800449a <mem_free+0xaa>
    return;
 8004498:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	0800ff20 	.word	0x0800ff20
 80044a4:	0800fff4 	.word	0x0800fff4
 80044a8:	0800ff68 	.word	0x0800ff68
 80044ac:	200053ac 	.word	0x200053ac
 80044b0:	200053b0 	.word	0x200053b0
 80044b4:	08010018 	.word	0x08010018
 80044b8:	08010034 	.word	0x08010034
 80044bc:	0801005c 	.word	0x0801005c
 80044c0:	200053b4 	.word	0x200053b4

080044c4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b088      	sub	sp, #32
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80044d0:	887b      	ldrh	r3, [r7, #2]
 80044d2:	3303      	adds	r3, #3
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	f023 0303 	bic.w	r3, r3, #3
 80044da:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80044dc:	8bfb      	ldrh	r3, [r7, #30]
 80044de:	2b0b      	cmp	r3, #11
 80044e0:	d801      	bhi.n	80044e6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80044e2:	230c      	movs	r3, #12
 80044e4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80044e6:	8bfb      	ldrh	r3, [r7, #30]
 80044e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80044ec:	d803      	bhi.n	80044f6 <mem_trim+0x32>
 80044ee:	8bfa      	ldrh	r2, [r7, #30]
 80044f0:	887b      	ldrh	r3, [r7, #2]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d201      	bcs.n	80044fa <mem_trim+0x36>
    return NULL;
 80044f6:	2300      	movs	r3, #0
 80044f8:	e0cc      	b.n	8004694 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80044fa:	4b68      	ldr	r3, [pc, #416]	; (800469c <mem_trim+0x1d8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	429a      	cmp	r2, r3
 8004502:	d304      	bcc.n	800450e <mem_trim+0x4a>
 8004504:	4b66      	ldr	r3, [pc, #408]	; (80046a0 <mem_trim+0x1dc>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	429a      	cmp	r2, r3
 800450c:	d306      	bcc.n	800451c <mem_trim+0x58>
 800450e:	4b65      	ldr	r3, [pc, #404]	; (80046a4 <mem_trim+0x1e0>)
 8004510:	f240 22d1 	movw	r2, #721	; 0x2d1
 8004514:	4964      	ldr	r1, [pc, #400]	; (80046a8 <mem_trim+0x1e4>)
 8004516:	4865      	ldr	r0, [pc, #404]	; (80046ac <mem_trim+0x1e8>)
 8004518:	f00a fa34 	bl	800e984 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800451c:	4b5f      	ldr	r3, [pc, #380]	; (800469c <mem_trim+0x1d8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	d304      	bcc.n	8004530 <mem_trim+0x6c>
 8004526:	4b5e      	ldr	r3, [pc, #376]	; (80046a0 <mem_trim+0x1dc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d301      	bcc.n	8004534 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	e0af      	b.n	8004694 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	3b08      	subs	r3, #8
 8004538:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800453a:	69b8      	ldr	r0, [r7, #24]
 800453c:	f7ff fe2c 	bl	8004198 <mem_to_ptr>
 8004540:	4603      	mov	r3, r0
 8004542:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	881a      	ldrh	r2, [r3, #0]
 8004548:	8afb      	ldrh	r3, [r7, #22]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	b29b      	uxth	r3, r3
 800454e:	3b08      	subs	r3, #8
 8004550:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8004552:	8bfa      	ldrh	r2, [r7, #30]
 8004554:	8abb      	ldrh	r3, [r7, #20]
 8004556:	429a      	cmp	r2, r3
 8004558:	d906      	bls.n	8004568 <mem_trim+0xa4>
 800455a:	4b52      	ldr	r3, [pc, #328]	; (80046a4 <mem_trim+0x1e0>)
 800455c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004560:	4953      	ldr	r1, [pc, #332]	; (80046b0 <mem_trim+0x1ec>)
 8004562:	4852      	ldr	r0, [pc, #328]	; (80046ac <mem_trim+0x1e8>)
 8004564:	f00a fa0e 	bl	800e984 <iprintf>
  if (newsize > size) {
 8004568:	8bfa      	ldrh	r2, [r7, #30]
 800456a:	8abb      	ldrh	r3, [r7, #20]
 800456c:	429a      	cmp	r2, r3
 800456e:	d901      	bls.n	8004574 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004570:	2300      	movs	r3, #0
 8004572:	e08f      	b.n	8004694 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004574:	8bfa      	ldrh	r2, [r7, #30]
 8004576:	8abb      	ldrh	r3, [r7, #20]
 8004578:	429a      	cmp	r2, r3
 800457a:	d101      	bne.n	8004580 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	e089      	b.n	8004694 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff fdf5 	bl	8004174 <ptr_to_mem>
 800458a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	791b      	ldrb	r3, [r3, #4]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d13f      	bne.n	8004614 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	881b      	ldrh	r3, [r3, #0]
 8004598:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800459c:	d106      	bne.n	80045ac <mem_trim+0xe8>
 800459e:	4b41      	ldr	r3, [pc, #260]	; (80046a4 <mem_trim+0x1e0>)
 80045a0:	f240 22f5 	movw	r2, #757	; 0x2f5
 80045a4:	4943      	ldr	r1, [pc, #268]	; (80046b4 <mem_trim+0x1f0>)
 80045a6:	4841      	ldr	r0, [pc, #260]	; (80046ac <mem_trim+0x1e8>)
 80045a8:	f00a f9ec 	bl	800e984 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	881b      	ldrh	r3, [r3, #0]
 80045b0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80045b2:	8afa      	ldrh	r2, [r7, #22]
 80045b4:	8bfb      	ldrh	r3, [r7, #30]
 80045b6:	4413      	add	r3, r2
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3308      	adds	r3, #8
 80045bc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80045be:	4b3e      	ldr	r3, [pc, #248]	; (80046b8 <mem_trim+0x1f4>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d106      	bne.n	80045d6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80045c8:	89fb      	ldrh	r3, [r7, #14]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7ff fdd2 	bl	8004174 <ptr_to_mem>
 80045d0:	4603      	mov	r3, r0
 80045d2:	4a39      	ldr	r2, [pc, #228]	; (80046b8 <mem_trim+0x1f4>)
 80045d4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80045d6:	89fb      	ldrh	r3, [r7, #14]
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff fdcb 	bl	8004174 <ptr_to_mem>
 80045de:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2200      	movs	r2, #0
 80045e4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	89ba      	ldrh	r2, [r7, #12]
 80045ea:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	8afa      	ldrh	r2, [r7, #22]
 80045f0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	89fa      	ldrh	r2, [r7, #14]
 80045f6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004600:	d047      	beq.n	8004692 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fdb4 	bl	8004174 <ptr_to_mem>
 800460c:	4602      	mov	r2, r0
 800460e:	89fb      	ldrh	r3, [r7, #14]
 8004610:	8053      	strh	r3, [r2, #2]
 8004612:	e03e      	b.n	8004692 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8004614:	8bfb      	ldrh	r3, [r7, #30]
 8004616:	f103 0214 	add.w	r2, r3, #20
 800461a:	8abb      	ldrh	r3, [r7, #20]
 800461c:	429a      	cmp	r2, r3
 800461e:	d838      	bhi.n	8004692 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004620:	8afa      	ldrh	r2, [r7, #22]
 8004622:	8bfb      	ldrh	r3, [r7, #30]
 8004624:	4413      	add	r3, r2
 8004626:	b29b      	uxth	r3, r3
 8004628:	3308      	adds	r3, #8
 800462a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004634:	d106      	bne.n	8004644 <mem_trim+0x180>
 8004636:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <mem_trim+0x1e0>)
 8004638:	f240 3216 	movw	r2, #790	; 0x316
 800463c:	491d      	ldr	r1, [pc, #116]	; (80046b4 <mem_trim+0x1f0>)
 800463e:	481b      	ldr	r0, [pc, #108]	; (80046ac <mem_trim+0x1e8>)
 8004640:	f00a f9a0 	bl	800e984 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8004644:	89fb      	ldrh	r3, [r7, #14]
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff fd94 	bl	8004174 <ptr_to_mem>
 800464c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800464e:	4b1a      	ldr	r3, [pc, #104]	; (80046b8 <mem_trim+0x1f4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	429a      	cmp	r2, r3
 8004656:	d202      	bcs.n	800465e <mem_trim+0x19a>
      lfree = mem2;
 8004658:	4a17      	ldr	r2, [pc, #92]	; (80046b8 <mem_trim+0x1f4>)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2200      	movs	r2, #0
 8004662:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	881a      	ldrh	r2, [r3, #0]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	8afa      	ldrh	r2, [r7, #22]
 8004670:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	89fa      	ldrh	r2, [r7, #14]
 8004676:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004680:	d007      	beq.n	8004692 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	881b      	ldrh	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fd74 	bl	8004174 <ptr_to_mem>
 800468c:	4602      	mov	r2, r0
 800468e:	89fb      	ldrh	r3, [r7, #14]
 8004690:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004692:	687b      	ldr	r3, [r7, #4]
}
 8004694:	4618      	mov	r0, r3
 8004696:	3720      	adds	r7, #32
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	200053ac 	.word	0x200053ac
 80046a0:	200053b0 	.word	0x200053b0
 80046a4:	0800ff20 	.word	0x0800ff20
 80046a8:	08010090 	.word	0x08010090
 80046ac:	0800ff68 	.word	0x0800ff68
 80046b0:	080100a8 	.word	0x080100a8
 80046b4:	080100c8 	.word	0x080100c8
 80046b8:	200053b4 	.word	0x200053b4

080046bc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <mem_malloc+0x14>
    return NULL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e0d9      	b.n	8004884 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80046d0:	88fb      	ldrh	r3, [r7, #6]
 80046d2:	3303      	adds	r3, #3
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	f023 0303 	bic.w	r3, r3, #3
 80046da:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80046dc:	8bbb      	ldrh	r3, [r7, #28]
 80046de:	2b0b      	cmp	r3, #11
 80046e0:	d801      	bhi.n	80046e6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80046e2:	230c      	movs	r3, #12
 80046e4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80046e6:	8bbb      	ldrh	r3, [r7, #28]
 80046e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80046ec:	d803      	bhi.n	80046f6 <mem_malloc+0x3a>
 80046ee:	8bba      	ldrh	r2, [r7, #28]
 80046f0:	88fb      	ldrh	r3, [r7, #6]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d201      	bcs.n	80046fa <mem_malloc+0x3e>
    return NULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	e0c4      	b.n	8004884 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80046fa:	4b64      	ldr	r3, [pc, #400]	; (800488c <mem_malloc+0x1d0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fd4a 	bl	8004198 <mem_to_ptr>
 8004704:	4603      	mov	r3, r0
 8004706:	83fb      	strh	r3, [r7, #30]
 8004708:	e0b4      	b.n	8004874 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800470a:	8bfb      	ldrh	r3, [r7, #30]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fd31 	bl	8004174 <ptr_to_mem>
 8004712:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	791b      	ldrb	r3, [r3, #4]
 8004718:	2b00      	cmp	r3, #0
 800471a:	f040 80a4 	bne.w	8004866 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	461a      	mov	r2, r3
 8004724:	8bfb      	ldrh	r3, [r7, #30]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	f1a3 0208 	sub.w	r2, r3, #8
 800472c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800472e:	429a      	cmp	r2, r3
 8004730:	f0c0 8099 	bcc.w	8004866 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	8bfb      	ldrh	r3, [r7, #30]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	f1a3 0208 	sub.w	r2, r3, #8
 8004742:	8bbb      	ldrh	r3, [r7, #28]
 8004744:	3314      	adds	r3, #20
 8004746:	429a      	cmp	r2, r3
 8004748:	d333      	bcc.n	80047b2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800474a:	8bfa      	ldrh	r2, [r7, #30]
 800474c:	8bbb      	ldrh	r3, [r7, #28]
 800474e:	4413      	add	r3, r2
 8004750:	b29b      	uxth	r3, r3
 8004752:	3308      	adds	r3, #8
 8004754:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004756:	8a7b      	ldrh	r3, [r7, #18]
 8004758:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800475c:	d106      	bne.n	800476c <mem_malloc+0xb0>
 800475e:	4b4c      	ldr	r3, [pc, #304]	; (8004890 <mem_malloc+0x1d4>)
 8004760:	f240 3287 	movw	r2, #903	; 0x387
 8004764:	494b      	ldr	r1, [pc, #300]	; (8004894 <mem_malloc+0x1d8>)
 8004766:	484c      	ldr	r0, [pc, #304]	; (8004898 <mem_malloc+0x1dc>)
 8004768:	f00a f90c 	bl	800e984 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800476c:	8a7b      	ldrh	r3, [r7, #18]
 800476e:	4618      	mov	r0, r3
 8004770:	f7ff fd00 	bl	8004174 <ptr_to_mem>
 8004774:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	881a      	ldrh	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8bfa      	ldrh	r2, [r7, #30]
 8004788:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	8a7a      	ldrh	r2, [r7, #18]
 800478e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2201      	movs	r2, #1
 8004794:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800479e:	d00b      	beq.n	80047b8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	881b      	ldrh	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fce5 	bl	8004174 <ptr_to_mem>
 80047aa:	4602      	mov	r2, r0
 80047ac:	8a7b      	ldrh	r3, [r7, #18]
 80047ae:	8053      	strh	r3, [r2, #2]
 80047b0:	e002      	b.n	80047b8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2201      	movs	r2, #1
 80047b6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80047b8:	4b34      	ldr	r3, [pc, #208]	; (800488c <mem_malloc+0x1d0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	697a      	ldr	r2, [r7, #20]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d127      	bne.n	8004812 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80047c2:	4b32      	ldr	r3, [pc, #200]	; (800488c <mem_malloc+0x1d0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80047c8:	e005      	b.n	80047d6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	881b      	ldrh	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff fcd0 	bl	8004174 <ptr_to_mem>
 80047d4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	791b      	ldrb	r3, [r3, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d004      	beq.n	80047e8 <mem_malloc+0x12c>
 80047de:	4b2f      	ldr	r3, [pc, #188]	; (800489c <mem_malloc+0x1e0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d1f0      	bne.n	80047ca <mem_malloc+0x10e>
          }
          lfree = cur;
 80047e8:	4a28      	ldr	r2, [pc, #160]	; (800488c <mem_malloc+0x1d0>)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80047ee:	4b27      	ldr	r3, [pc, #156]	; (800488c <mem_malloc+0x1d0>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b2a      	ldr	r3, [pc, #168]	; (800489c <mem_malloc+0x1e0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d00b      	beq.n	8004812 <mem_malloc+0x156>
 80047fa:	4b24      	ldr	r3, [pc, #144]	; (800488c <mem_malloc+0x1d0>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	791b      	ldrb	r3, [r3, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d006      	beq.n	8004812 <mem_malloc+0x156>
 8004804:	4b22      	ldr	r3, [pc, #136]	; (8004890 <mem_malloc+0x1d4>)
 8004806:	f240 32b5 	movw	r2, #949	; 0x3b5
 800480a:	4925      	ldr	r1, [pc, #148]	; (80048a0 <mem_malloc+0x1e4>)
 800480c:	4822      	ldr	r0, [pc, #136]	; (8004898 <mem_malloc+0x1dc>)
 800480e:	f00a f8b9 	bl	800e984 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8004812:	8bba      	ldrh	r2, [r7, #28]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	4413      	add	r3, r2
 8004818:	3308      	adds	r3, #8
 800481a:	4a20      	ldr	r2, [pc, #128]	; (800489c <mem_malloc+0x1e0>)
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	4293      	cmp	r3, r2
 8004820:	d906      	bls.n	8004830 <mem_malloc+0x174>
 8004822:	4b1b      	ldr	r3, [pc, #108]	; (8004890 <mem_malloc+0x1d4>)
 8004824:	f240 32b9 	movw	r2, #953	; 0x3b9
 8004828:	491e      	ldr	r1, [pc, #120]	; (80048a4 <mem_malloc+0x1e8>)
 800482a:	481b      	ldr	r0, [pc, #108]	; (8004898 <mem_malloc+0x1dc>)
 800482c:	f00a f8aa 	bl	800e984 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d006      	beq.n	8004848 <mem_malloc+0x18c>
 800483a:	4b15      	ldr	r3, [pc, #84]	; (8004890 <mem_malloc+0x1d4>)
 800483c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8004840:	4919      	ldr	r1, [pc, #100]	; (80048a8 <mem_malloc+0x1ec>)
 8004842:	4815      	ldr	r0, [pc, #84]	; (8004898 <mem_malloc+0x1dc>)
 8004844:	f00a f89e 	bl	800e984 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d006      	beq.n	8004860 <mem_malloc+0x1a4>
 8004852:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <mem_malloc+0x1d4>)
 8004854:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004858:	4914      	ldr	r1, [pc, #80]	; (80048ac <mem_malloc+0x1f0>)
 800485a:	480f      	ldr	r0, [pc, #60]	; (8004898 <mem_malloc+0x1dc>)
 800485c:	f00a f892 	bl	800e984 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	3308      	adds	r3, #8
 8004864:	e00e      	b.n	8004884 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004866:	8bfb      	ldrh	r3, [r7, #30]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff fc83 	bl	8004174 <ptr_to_mem>
 800486e:	4603      	mov	r3, r0
 8004870:	881b      	ldrh	r3, [r3, #0]
 8004872:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004874:	8bfa      	ldrh	r2, [r7, #30]
 8004876:	8bbb      	ldrh	r3, [r7, #28]
 8004878:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800487c:	429a      	cmp	r2, r3
 800487e:	f4ff af44 	bcc.w	800470a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3720      	adds	r7, #32
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	200053b4 	.word	0x200053b4
 8004890:	0800ff20 	.word	0x0800ff20
 8004894:	080100c8 	.word	0x080100c8
 8004898:	0800ff68 	.word	0x0800ff68
 800489c:	200053b0 	.word	0x200053b0
 80048a0:	080100dc 	.word	0x080100dc
 80048a4:	080100f8 	.word	0x080100f8
 80048a8:	08010128 	.word	0x08010128
 80048ac:	08010158 	.word	0x08010158

080048b0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	3303      	adds	r3, #3
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e011      	b.n	80048f6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	461a      	mov	r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	4413      	add	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3301      	adds	r3, #1
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	885b      	ldrh	r3, [r3, #2]
 80048fa:	461a      	mov	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4293      	cmp	r3, r2
 8004900:	dbe7      	blt.n	80048d2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8004902:	bf00      	nop
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004916:	2300      	movs	r3, #0
 8004918:	80fb      	strh	r3, [r7, #6]
 800491a:	e009      	b.n	8004930 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	4a08      	ldr	r2, [pc, #32]	; (8004940 <memp_init+0x30>)
 8004920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004924:	4618      	mov	r0, r3
 8004926:	f7ff ffc3 	bl	80048b0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	3301      	adds	r3, #1
 800492e:	80fb      	strh	r3, [r7, #6]
 8004930:	88fb      	ldrh	r3, [r7, #6]
 8004932:	2b08      	cmp	r3, #8
 8004934:	d9f2      	bls.n	800491c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004936:	bf00      	nop
 8004938:	bf00      	nop
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	08012934 	.word	0x08012934

08004944 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d012      	beq.n	8004980 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d006      	beq.n	800497c <do_memp_malloc_pool+0x38>
 800496e:	4b07      	ldr	r3, [pc, #28]	; (800498c <do_memp_malloc_pool+0x48>)
 8004970:	f44f 728c 	mov.w	r2, #280	; 0x118
 8004974:	4906      	ldr	r1, [pc, #24]	; (8004990 <do_memp_malloc_pool+0x4c>)
 8004976:	4807      	ldr	r0, [pc, #28]	; (8004994 <do_memp_malloc_pool+0x50>)
 8004978:	f00a f804 	bl	800e984 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	e000      	b.n	8004982 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	0801017c 	.word	0x0801017c
 8004990:	080101ac 	.word	0x080101ac
 8004994:	080101d0 	.word	0x080101d0

08004998 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <memp_malloc_pool+0x1c>
 80049a6:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <memp_malloc_pool+0x38>)
 80049a8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80049ac:	4909      	ldr	r1, [pc, #36]	; (80049d4 <memp_malloc_pool+0x3c>)
 80049ae:	480a      	ldr	r0, [pc, #40]	; (80049d8 <memp_malloc_pool+0x40>)
 80049b0:	f009 ffe8 	bl	800e984 <iprintf>
  if (desc == NULL) {
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <memp_malloc_pool+0x26>
    return NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e003      	b.n	80049c6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff ffc0 	bl	8004944 <do_memp_malloc_pool>
 80049c4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	0801017c 	.word	0x0801017c
 80049d4:	080101f8 	.word	0x080101f8
 80049d8:	080101d0 	.word	0x080101d0

080049dc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80049e6:	79fb      	ldrb	r3, [r7, #7]
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	d908      	bls.n	80049fe <memp_malloc+0x22>
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <memp_malloc+0x3c>)
 80049ee:	f240 1257 	movw	r2, #343	; 0x157
 80049f2:	490a      	ldr	r1, [pc, #40]	; (8004a1c <memp_malloc+0x40>)
 80049f4:	480a      	ldr	r0, [pc, #40]	; (8004a20 <memp_malloc+0x44>)
 80049f6:	f009 ffc5 	bl	800e984 <iprintf>
 80049fa:	2300      	movs	r3, #0
 80049fc:	e008      	b.n	8004a10 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	4a08      	ldr	r2, [pc, #32]	; (8004a24 <memp_malloc+0x48>)
 8004a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff ff9c 	bl	8004944 <do_memp_malloc_pool>
 8004a0c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	0801017c 	.word	0x0801017c
 8004a1c:	0801020c 	.word	0x0801020c
 8004a20:	080101d0 	.word	0x080101d0
 8004a24:	08012934 	.word	0x08012934

08004a28 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d006      	beq.n	8004a4a <do_memp_free_pool+0x22>
 8004a3c:	4b0a      	ldr	r3, [pc, #40]	; (8004a68 <do_memp_free_pool+0x40>)
 8004a3e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8004a42:	490a      	ldr	r1, [pc, #40]	; (8004a6c <do_memp_free_pool+0x44>)
 8004a44:	480a      	ldr	r0, [pc, #40]	; (8004a70 <do_memp_free_pool+0x48>)
 8004a46:	f009 ff9d 	bl	800e984 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8004a60:	bf00      	nop
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	0801017c 	.word	0x0801017c
 8004a6c:	0801022c 	.word	0x0801022c
 8004a70:	080101d0 	.word	0x080101d0

08004a74 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d106      	bne.n	8004a92 <memp_free_pool+0x1e>
 8004a84:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <memp_free_pool+0x3c>)
 8004a86:	f240 1295 	movw	r2, #405	; 0x195
 8004a8a:	490a      	ldr	r1, [pc, #40]	; (8004ab4 <memp_free_pool+0x40>)
 8004a8c:	480a      	ldr	r0, [pc, #40]	; (8004ab8 <memp_free_pool+0x44>)
 8004a8e:	f009 ff79 	bl	800e984 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d007      	beq.n	8004aa8 <memp_free_pool+0x34>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d004      	beq.n	8004aa8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8004a9e:	6839      	ldr	r1, [r7, #0]
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7ff ffc1 	bl	8004a28 <do_memp_free_pool>
 8004aa6:	e000      	b.n	8004aaa <memp_free_pool+0x36>
    return;
 8004aa8:	bf00      	nop
}
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	0801017c 	.word	0x0801017c
 8004ab4:	080101f8 	.word	0x080101f8
 8004ab8:	080101d0 	.word	0x080101d0

08004abc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	6039      	str	r1, [r7, #0]
 8004ac6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d907      	bls.n	8004ade <memp_free+0x22>
 8004ace:	4b0c      	ldr	r3, [pc, #48]	; (8004b00 <memp_free+0x44>)
 8004ad0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004ad4:	490b      	ldr	r1, [pc, #44]	; (8004b04 <memp_free+0x48>)
 8004ad6:	480c      	ldr	r0, [pc, #48]	; (8004b08 <memp_free+0x4c>)
 8004ad8:	f009 ff54 	bl	800e984 <iprintf>
 8004adc:	e00c      	b.n	8004af8 <memp_free+0x3c>

  if (mem == NULL) {
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004ae4:	79fb      	ldrb	r3, [r7, #7]
 8004ae6:	4a09      	ldr	r2, [pc, #36]	; (8004b0c <memp_free+0x50>)
 8004ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff ff9a 	bl	8004a28 <do_memp_free_pool>
 8004af4:	e000      	b.n	8004af8 <memp_free+0x3c>
    return;
 8004af6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	0801017c 	.word	0x0801017c
 8004b04:	0801024c 	.word	0x0801024c
 8004b08:	080101d0 	.word	0x080101d0
 8004b0c:	08012934 	.word	0x08012934

08004b10 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004b14:	bf00      	nop
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
	...

08004b20 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d108      	bne.n	8004b46 <netif_add+0x26>
 8004b34:	4b57      	ldr	r3, [pc, #348]	; (8004c94 <netif_add+0x174>)
 8004b36:	f240 1227 	movw	r2, #295	; 0x127
 8004b3a:	4957      	ldr	r1, [pc, #348]	; (8004c98 <netif_add+0x178>)
 8004b3c:	4857      	ldr	r0, [pc, #348]	; (8004c9c <netif_add+0x17c>)
 8004b3e:	f009 ff21 	bl	800e984 <iprintf>
 8004b42:	2300      	movs	r3, #0
 8004b44:	e0a2      	b.n	8004c8c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d108      	bne.n	8004b5e <netif_add+0x3e>
 8004b4c:	4b51      	ldr	r3, [pc, #324]	; (8004c94 <netif_add+0x174>)
 8004b4e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8004b52:	4953      	ldr	r1, [pc, #332]	; (8004ca0 <netif_add+0x180>)
 8004b54:	4851      	ldr	r0, [pc, #324]	; (8004c9c <netif_add+0x17c>)
 8004b56:	f009 ff15 	bl	800e984 <iprintf>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	e096      	b.n	8004c8c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8004b64:	4b4f      	ldr	r3, [pc, #316]	; (8004ca4 <netif_add+0x184>)
 8004b66:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004b6e:	4b4d      	ldr	r3, [pc, #308]	; (8004ca4 <netif_add+0x184>)
 8004b70:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004b78:	4b4a      	ldr	r3, [pc, #296]	; (8004ca4 <netif_add+0x184>)
 8004b7a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a45      	ldr	r2, [pc, #276]	; (8004ca8 <netif_add+0x188>)
 8004b92:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a3a      	ldr	r2, [r7, #32]
 8004bac:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8004bae:	4b3f      	ldr	r3, [pc, #252]	; (8004cac <netif_add+0x18c>)
 8004bb0:	781a      	ldrb	r2, [r3, #0]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bbc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	68b9      	ldr	r1, [r7, #8]
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f000 f913 	bl	8004df0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	4798      	blx	r3
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <netif_add+0xba>
    return NULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e058      	b.n	8004c8c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004be0:	2bff      	cmp	r3, #255	; 0xff
 8004be2:	d103      	bne.n	8004bec <netif_add+0xcc>
        netif->num = 0;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004bf0:	4b2f      	ldr	r3, [pc, #188]	; (8004cb0 <netif_add+0x190>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	617b      	str	r3, [r7, #20]
 8004bf6:	e02b      	b.n	8004c50 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d106      	bne.n	8004c0e <netif_add+0xee>
 8004c00:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <netif_add+0x174>)
 8004c02:	f240 128b 	movw	r2, #395	; 0x18b
 8004c06:	492b      	ldr	r1, [pc, #172]	; (8004cb4 <netif_add+0x194>)
 8004c08:	4824      	ldr	r0, [pc, #144]	; (8004c9c <netif_add+0x17c>)
 8004c0a:	f009 febb 	bl	800e984 <iprintf>
        num_netifs++;
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	3301      	adds	r3, #1
 8004c12:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	2bff      	cmp	r3, #255	; 0xff
 8004c18:	dd06      	ble.n	8004c28 <netif_add+0x108>
 8004c1a:	4b1e      	ldr	r3, [pc, #120]	; (8004c94 <netif_add+0x174>)
 8004c1c:	f240 128d 	movw	r2, #397	; 0x18d
 8004c20:	4925      	ldr	r1, [pc, #148]	; (8004cb8 <netif_add+0x198>)
 8004c22:	481e      	ldr	r0, [pc, #120]	; (8004c9c <netif_add+0x17c>)
 8004c24:	f009 feae 	bl	800e984 <iprintf>
        if (netif2->num == netif->num) {
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d108      	bne.n	8004c4a <netif_add+0x12a>
          netif->num++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c3e:	3301      	adds	r3, #1
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8004c48:	e005      	b.n	8004c56 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1d0      	bne.n	8004bf8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1be      	bne.n	8004bda <netif_add+0xba>
  }
  if (netif->num == 254) {
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c62:	2bfe      	cmp	r3, #254	; 0xfe
 8004c64:	d103      	bne.n	8004c6e <netif_add+0x14e>
    netif_num = 0;
 8004c66:	4b11      	ldr	r3, [pc, #68]	; (8004cac <netif_add+0x18c>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e006      	b.n	8004c7c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004c74:	3301      	adds	r3, #1
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	4b0c      	ldr	r3, [pc, #48]	; (8004cac <netif_add+0x18c>)
 8004c7a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <netif_add+0x190>)
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8004c84:	4a0a      	ldr	r2, [pc, #40]	; (8004cb0 <netif_add+0x190>)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	08010268 	.word	0x08010268
 8004c98:	080102fc 	.word	0x080102fc
 8004c9c:	080102b8 	.word	0x080102b8
 8004ca0:	08010318 	.word	0x08010318
 8004ca4:	08012998 	.word	0x08012998
 8004ca8:	080050cb 	.word	0x080050cb
 8004cac:	200082ac 	.word	0x200082ac
 8004cb0:	200082a4 	.word	0x200082a4
 8004cb4:	0801033c 	.word	0x0801033c
 8004cb8:	08010350 	.word	0x08010350

08004cbc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004cc6:	6839      	ldr	r1, [r7, #0]
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f002 fdc1 	bl	8007850 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8004cce:	6839      	ldr	r1, [r7, #0]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f007 fafd 	bl	800c2d0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
	...

08004ce0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <netif_do_set_ipaddr+0x20>
 8004cf2:	4b1d      	ldr	r3, [pc, #116]	; (8004d68 <netif_do_set_ipaddr+0x88>)
 8004cf4:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004cf8:	491c      	ldr	r1, [pc, #112]	; (8004d6c <netif_do_set_ipaddr+0x8c>)
 8004cfa:	481d      	ldr	r0, [pc, #116]	; (8004d70 <netif_do_set_ipaddr+0x90>)
 8004cfc:	f009 fe42 	bl	800e984 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <netif_do_set_ipaddr+0x34>
 8004d06:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <netif_do_set_ipaddr+0x88>)
 8004d08:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004d0c:	4917      	ldr	r1, [pc, #92]	; (8004d6c <netif_do_set_ipaddr+0x8c>)
 8004d0e:	4818      	ldr	r0, [pc, #96]	; (8004d70 <netif_do_set_ipaddr+0x90>)
 8004d10:	f009 fe38 	bl	800e984 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d01c      	beq.n	8004d5c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004d32:	f107 0314 	add.w	r3, r7, #20
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff ffbf 	bl	8004cbc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d002      	beq.n	8004d4a <netif_do_set_ipaddr+0x6a>
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	e000      	b.n	8004d4c <netif_do_set_ipaddr+0x6c>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004d50:	2101      	movs	r1, #1
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f8d2 	bl	8004efc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	08010268 	.word	0x08010268
 8004d6c:	08010380 	.word	0x08010380
 8004d70:	080102b8 	.word	0x080102b8

08004d74 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	3308      	adds	r3, #8
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d00a      	beq.n	8004da4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <netif_do_set_netmask+0x26>
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	e000      	b.n	8004d9c <netif_do_set_netmask+0x28>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004da0:	2301      	movs	r3, #1
 8004da2:	e000      	b.n	8004da6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	60f8      	str	r0, [r7, #12]
 8004dba:	60b9      	str	r1, [r7, #8]
 8004dbc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d00a      	beq.n	8004de2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d002      	beq.n	8004dd8 <netif_do_set_gw+0x26>
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	e000      	b.n	8004dda <netif_do_set_gw+0x28>
 8004dd8:	2300      	movs	r3, #0
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b088      	sub	sp, #32
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004e02:	2300      	movs	r3, #0
 8004e04:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004e0c:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <netif_set_addr+0x90>)
 8004e0e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <netif_set_addr+0x90>)
 8004e18:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004e20:	4b17      	ldr	r3, [pc, #92]	; (8004e80 <netif_set_addr+0x90>)
 8004e22:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <netif_set_addr+0x42>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d101      	bne.n	8004e36 <netif_set_addr+0x46>
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <netif_set_addr+0x48>
 8004e36:	2300      	movs	r3, #0
 8004e38:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d006      	beq.n	8004e4e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004e40:	f107 0310 	add.w	r3, r7, #16
 8004e44:	461a      	mov	r2, r3
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f7ff ff49 	bl	8004ce0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004e4e:	69fa      	ldr	r2, [r7, #28]
 8004e50:	6879      	ldr	r1, [r7, #4]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f7ff ff8e 	bl	8004d74 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004e58:	69ba      	ldr	r2, [r7, #24]
 8004e5a:	6839      	ldr	r1, [r7, #0]
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7ff ffa8 	bl	8004db2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d106      	bne.n	8004e76 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004e68:	f107 0310 	add.w	r3, r7, #16
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f7ff ff35 	bl	8004ce0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004e76:	bf00      	nop
 8004e78:	3720      	adds	r7, #32
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	08012998 	.word	0x08012998

08004e84 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004e8c:	4a04      	ldr	r2, [pc, #16]	; (8004ea0 <netif_set_default+0x1c>)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	200082a8 	.word	0x200082a8

08004ea4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d107      	bne.n	8004ec2 <netif_set_up+0x1e>
 8004eb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ef0 <netif_set_up+0x4c>)
 8004eb4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004eb8:	490e      	ldr	r1, [pc, #56]	; (8004ef4 <netif_set_up+0x50>)
 8004eba:	480f      	ldr	r0, [pc, #60]	; (8004ef8 <netif_set_up+0x54>)
 8004ebc:	f009 fd62 	bl	800e984 <iprintf>
 8004ec0:	e013      	b.n	8004eea <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ec8:	f003 0301 	and.w	r3, r3, #1
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10c      	bne.n	8004eea <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ed6:	f043 0301 	orr.w	r3, r3, #1
 8004eda:	b2da      	uxtb	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004ee2:	2103      	movs	r1, #3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f809 	bl	8004efc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	08010268 	.word	0x08010268
 8004ef4:	080103f0 	.word	0x080103f0
 8004ef8:	080102b8 	.word	0x080102b8

08004efc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <netif_issue_reports+0x20>
 8004f0e:	4b18      	ldr	r3, [pc, #96]	; (8004f70 <netif_issue_reports+0x74>)
 8004f10:	f240 326d 	movw	r2, #877	; 0x36d
 8004f14:	4917      	ldr	r1, [pc, #92]	; (8004f74 <netif_issue_reports+0x78>)
 8004f16:	4818      	ldr	r0, [pc, #96]	; (8004f78 <netif_issue_reports+0x7c>)
 8004f18:	f009 fd34 	bl	800e984 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01e      	beq.n	8004f68 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f30:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d017      	beq.n	8004f68 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004f38:	78fb      	ldrb	r3, [r7, #3]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d013      	beq.n	8004f6a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3304      	adds	r3, #4
 8004f46:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00e      	beq.n	8004f6a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f52:	f003 0308 	and.w	r3, r3, #8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d007      	beq.n	8004f6a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f008 f91f 	bl	800d1a4 <etharp_request>
 8004f66:	e000      	b.n	8004f6a <netif_issue_reports+0x6e>
    return;
 8004f68:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	08010268 	.word	0x08010268
 8004f74:	0801040c 	.word	0x0801040c
 8004f78:	080102b8 	.word	0x080102b8

08004f7c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d107      	bne.n	8004f9a <netif_set_down+0x1e>
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <netif_set_down+0x58>)
 8004f8c:	f240 329b 	movw	r2, #923	; 0x39b
 8004f90:	4911      	ldr	r1, [pc, #68]	; (8004fd8 <netif_set_down+0x5c>)
 8004f92:	4812      	ldr	r0, [pc, #72]	; (8004fdc <netif_set_down+0x60>)
 8004f94:	f009 fcf6 	bl	800e984 <iprintf>
 8004f98:	e019      	b.n	8004fce <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d012      	beq.n	8004fce <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004fae:	f023 0301 	bic.w	r3, r3, #1
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d002      	beq.n	8004fce <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f007 fca9 	bl	800c920 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	08010268 	.word	0x08010268
 8004fd8:	08010430 	.word	0x08010430
 8004fdc:	080102b8 	.word	0x080102b8

08004fe0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d107      	bne.n	8004ffe <netif_set_link_up+0x1e>
 8004fee:	4b13      	ldr	r3, [pc, #76]	; (800503c <netif_set_link_up+0x5c>)
 8004ff0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8004ff4:	4912      	ldr	r1, [pc, #72]	; (8005040 <netif_set_link_up+0x60>)
 8004ff6:	4813      	ldr	r0, [pc, #76]	; (8005044 <netif_set_link_up+0x64>)
 8004ff8:	f009 fcc4 	bl	800e984 <iprintf>
 8004ffc:	e01b      	b.n	8005036 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b00      	cmp	r3, #0
 800500a:	d114      	bne.n	8005036 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005012:	f043 0304 	orr.w	r3, r3, #4
 8005016:	b2da      	uxtb	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800501e:	2103      	movs	r1, #3
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7ff ff6b 	bl	8004efc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <netif_set_link_up+0x56>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	08010268 	.word	0x08010268
 8005040:	08010450 	.word	0x08010450
 8005044:	080102b8 	.word	0x080102b8

08005048 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d107      	bne.n	8005066 <netif_set_link_down+0x1e>
 8005056:	4b11      	ldr	r3, [pc, #68]	; (800509c <netif_set_link_down+0x54>)
 8005058:	f240 4206 	movw	r2, #1030	; 0x406
 800505c:	4910      	ldr	r1, [pc, #64]	; (80050a0 <netif_set_link_down+0x58>)
 800505e:	4811      	ldr	r0, [pc, #68]	; (80050a4 <netif_set_link_down+0x5c>)
 8005060:	f009 fc90 	bl	800e984 <iprintf>
 8005064:	e017      	b.n	8005096 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d010      	beq.n	8005096 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800507a:	f023 0304 	bic.w	r3, r3, #4
 800507e:	b2da      	uxtb	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d003      	beq.n	8005096 <netif_set_link_down+0x4e>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	08010268 	.word	0x08010268
 80050a0:	08010474 	.word	0x08010474
 80050a4:	080102b8 	.word	0x080102b8

080050a8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	683a      	ldr	r2, [r7, #0]
 80050bc:	61da      	str	r2, [r3, #28]
  }
}
 80050be:	bf00      	nop
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	60f8      	str	r0, [r7, #12]
 80050d2:	60b9      	str	r1, [r7, #8]
 80050d4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80050d6:	f06f 030b 	mvn.w	r3, #11
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d013      	beq.n	8005120 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80050f8:	4b0d      	ldr	r3, [pc, #52]	; (8005130 <netif_get_by_index+0x48>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	60fb      	str	r3, [r7, #12]
 80050fe:	e00c      	b.n	800511a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005106:	3301      	adds	r3, #1
 8005108:	b2db      	uxtb	r3, r3
 800510a:	79fa      	ldrb	r2, [r7, #7]
 800510c:	429a      	cmp	r2, r3
 800510e:	d101      	bne.n	8005114 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	e006      	b.n	8005122 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	60fb      	str	r3, [r7, #12]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1ef      	bne.n	8005100 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	200082a4 	.word	0x200082a4

08005134 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800513a:	4b0c      	ldr	r3, [pc, #48]	; (800516c <pbuf_free_ooseq+0x38>)
 800513c:	2200      	movs	r2, #0
 800513e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <pbuf_free_ooseq+0x3c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	607b      	str	r3, [r7, #4]
 8005146:	e00a      	b.n	800515e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f002 fbbb 	bl	80078cc <tcp_free_ooseq>
      return;
 8005156:	e005      	b.n	8005164 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	607b      	str	r3, [r7, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f1      	bne.n	8005148 <pbuf_free_ooseq+0x14>
    }
  }
}
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	200082ad 	.word	0x200082ad
 8005170:	200082bc 	.word	0x200082bc

08005174 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8005178:	4b03      	ldr	r3, [pc, #12]	; (8005188 <pbuf_pool_is_empty+0x14>)
 800517a:	2201      	movs	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800517e:	bf00      	nop
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	200082ad 	.word	0x200082ad

0800518c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	4611      	mov	r1, r2
 8005198:	461a      	mov	r2, r3
 800519a:	460b      	mov	r3, r1
 800519c:	80fb      	strh	r3, [r7, #6]
 800519e:	4613      	mov	r3, r2
 80051a0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	88fa      	ldrh	r2, [r7, #6]
 80051b2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	88ba      	ldrh	r2, [r7, #4]
 80051b8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80051ba:	8b3b      	ldrh	r3, [r7, #24]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	7f3a      	ldrb	r2, [r7, #28]
 80051c6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	73da      	strb	r2, [r3, #15]
}
 80051d4:	bf00      	nop
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b08c      	sub	sp, #48	; 0x30
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	4603      	mov	r3, r0
 80051e8:	71fb      	strb	r3, [r7, #7]
 80051ea:	460b      	mov	r3, r1
 80051ec:	80bb      	strh	r3, [r7, #4]
 80051ee:	4613      	mov	r3, r2
 80051f0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80051f2:	79fb      	ldrb	r3, [r7, #7]
 80051f4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80051f6:	887b      	ldrh	r3, [r7, #2]
 80051f8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80051fc:	d07f      	beq.n	80052fe <pbuf_alloc+0x11e>
 80051fe:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8005202:	f300 80c8 	bgt.w	8005396 <pbuf_alloc+0x1b6>
 8005206:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800520a:	d010      	beq.n	800522e <pbuf_alloc+0x4e>
 800520c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8005210:	f300 80c1 	bgt.w	8005396 <pbuf_alloc+0x1b6>
 8005214:	2b01      	cmp	r3, #1
 8005216:	d002      	beq.n	800521e <pbuf_alloc+0x3e>
 8005218:	2b41      	cmp	r3, #65	; 0x41
 800521a:	f040 80bc 	bne.w	8005396 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800521e:	887a      	ldrh	r2, [r7, #2]
 8005220:	88bb      	ldrh	r3, [r7, #4]
 8005222:	4619      	mov	r1, r3
 8005224:	2000      	movs	r0, #0
 8005226:	f000 f8d1 	bl	80053cc <pbuf_alloc_reference>
 800522a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800522c:	e0bd      	b.n	80053aa <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8005236:	88bb      	ldrh	r3, [r7, #4]
 8005238:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800523a:	2008      	movs	r0, #8
 800523c:	f7ff fbce 	bl	80049dc <memp_malloc>
 8005240:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8005248:	f7ff ff94 	bl	8005174 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <pbuf_alloc+0x78>
            pbuf_free(p);
 8005252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005254:	f000 faa8 	bl	80057a8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8005258:	2300      	movs	r3, #0
 800525a:	e0a7      	b.n	80053ac <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800525c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800525e:	3303      	adds	r3, #3
 8005260:	b29b      	uxth	r3, r3
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	b29b      	uxth	r3, r3
 8005268:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800526c:	b29b      	uxth	r3, r3
 800526e:	8b7a      	ldrh	r2, [r7, #26]
 8005270:	4293      	cmp	r3, r2
 8005272:	bf28      	it	cs
 8005274:	4613      	movcs	r3, r2
 8005276:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8005278:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800527a:	3310      	adds	r3, #16
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4413      	add	r3, r2
 8005280:	3303      	adds	r3, #3
 8005282:	f023 0303 	bic.w	r3, r3, #3
 8005286:	4618      	mov	r0, r3
 8005288:	89f9      	ldrh	r1, [r7, #14]
 800528a:	8b7a      	ldrh	r2, [r7, #26]
 800528c:	2300      	movs	r3, #0
 800528e:	9301      	str	r3, [sp, #4]
 8005290:	887b      	ldrh	r3, [r7, #2]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	460b      	mov	r3, r1
 8005296:	4601      	mov	r1, r0
 8005298:	6938      	ldr	r0, [r7, #16]
 800529a:	f7ff ff77 	bl	800518c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f003 0303 	and.w	r3, r3, #3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d006      	beq.n	80052b8 <pbuf_alloc+0xd8>
 80052aa:	4b42      	ldr	r3, [pc, #264]	; (80053b4 <pbuf_alloc+0x1d4>)
 80052ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052b0:	4941      	ldr	r1, [pc, #260]	; (80053b8 <pbuf_alloc+0x1d8>)
 80052b2:	4842      	ldr	r0, [pc, #264]	; (80053bc <pbuf_alloc+0x1dc>)
 80052b4:	f009 fb66 	bl	800e984 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80052b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80052ba:	3303      	adds	r3, #3
 80052bc:	f023 0303 	bic.w	r3, r3, #3
 80052c0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80052c4:	d106      	bne.n	80052d4 <pbuf_alloc+0xf4>
 80052c6:	4b3b      	ldr	r3, [pc, #236]	; (80053b4 <pbuf_alloc+0x1d4>)
 80052c8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80052cc:	493c      	ldr	r1, [pc, #240]	; (80053c0 <pbuf_alloc+0x1e0>)
 80052ce:	483b      	ldr	r0, [pc, #236]	; (80053bc <pbuf_alloc+0x1dc>)
 80052d0:	f009 fb58 	bl	800e984 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d102      	bne.n	80052e0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
 80052de:	e002      	b.n	80052e6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80052ea:	8b7a      	ldrh	r2, [r7, #26]
 80052ec:	89fb      	ldrh	r3, [r7, #14]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80052f2:	2300      	movs	r3, #0
 80052f4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80052f6:	8b7b      	ldrh	r3, [r7, #26]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d19e      	bne.n	800523a <pbuf_alloc+0x5a>
      break;
 80052fc:	e055      	b.n	80053aa <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80052fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005300:	3303      	adds	r3, #3
 8005302:	b29b      	uxth	r3, r3
 8005304:	f023 0303 	bic.w	r3, r3, #3
 8005308:	b29a      	uxth	r2, r3
 800530a:	88bb      	ldrh	r3, [r7, #4]
 800530c:	3303      	adds	r3, #3
 800530e:	b29b      	uxth	r3, r3
 8005310:	f023 0303 	bic.w	r3, r3, #3
 8005314:	b29b      	uxth	r3, r3
 8005316:	4413      	add	r3, r2
 8005318:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800531a:	8b3b      	ldrh	r3, [r7, #24]
 800531c:	3310      	adds	r3, #16
 800531e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005320:	8b3a      	ldrh	r2, [r7, #24]
 8005322:	88bb      	ldrh	r3, [r7, #4]
 8005324:	3303      	adds	r3, #3
 8005326:	f023 0303 	bic.w	r3, r3, #3
 800532a:	429a      	cmp	r2, r3
 800532c:	d306      	bcc.n	800533c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800532e:	8afa      	ldrh	r2, [r7, #22]
 8005330:	88bb      	ldrh	r3, [r7, #4]
 8005332:	3303      	adds	r3, #3
 8005334:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d201      	bcs.n	8005340 <pbuf_alloc+0x160>
        return NULL;
 800533c:	2300      	movs	r3, #0
 800533e:	e035      	b.n	80053ac <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8005340:	8afb      	ldrh	r3, [r7, #22]
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff f9ba 	bl	80046bc <mem_malloc>
 8005348:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <pbuf_alloc+0x174>
        return NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	e02b      	b.n	80053ac <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8005354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005356:	3310      	adds	r3, #16
 8005358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535a:	4413      	add	r3, r2
 800535c:	3303      	adds	r3, #3
 800535e:	f023 0303 	bic.w	r3, r3, #3
 8005362:	4618      	mov	r0, r3
 8005364:	88b9      	ldrh	r1, [r7, #4]
 8005366:	88ba      	ldrh	r2, [r7, #4]
 8005368:	2300      	movs	r3, #0
 800536a:	9301      	str	r3, [sp, #4]
 800536c:	887b      	ldrh	r3, [r7, #2]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	460b      	mov	r3, r1
 8005372:	4601      	mov	r1, r0
 8005374:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005376:	f7ff ff09 	bl	800518c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d010      	beq.n	80053a8 <pbuf_alloc+0x1c8>
 8005386:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <pbuf_alloc+0x1d4>)
 8005388:	f44f 7291 	mov.w	r2, #290	; 0x122
 800538c:	490d      	ldr	r1, [pc, #52]	; (80053c4 <pbuf_alloc+0x1e4>)
 800538e:	480b      	ldr	r0, [pc, #44]	; (80053bc <pbuf_alloc+0x1dc>)
 8005390:	f009 faf8 	bl	800e984 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8005394:	e008      	b.n	80053a8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8005396:	4b07      	ldr	r3, [pc, #28]	; (80053b4 <pbuf_alloc+0x1d4>)
 8005398:	f240 1227 	movw	r2, #295	; 0x127
 800539c:	490a      	ldr	r1, [pc, #40]	; (80053c8 <pbuf_alloc+0x1e8>)
 800539e:	4807      	ldr	r0, [pc, #28]	; (80053bc <pbuf_alloc+0x1dc>)
 80053a0:	f009 faf0 	bl	800e984 <iprintf>
      return NULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	e001      	b.n	80053ac <pbuf_alloc+0x1cc>
      break;
 80053a8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80053aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3728      	adds	r7, #40	; 0x28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	08010498 	.word	0x08010498
 80053b8:	080104c8 	.word	0x080104c8
 80053bc:	080104f8 	.word	0x080104f8
 80053c0:	08010520 	.word	0x08010520
 80053c4:	08010554 	.word	0x08010554
 80053c8:	08010580 	.word	0x08010580

080053cc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af02      	add	r7, sp, #8
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	807b      	strh	r3, [r7, #2]
 80053d8:	4613      	mov	r3, r2
 80053da:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80053dc:	883b      	ldrh	r3, [r7, #0]
 80053de:	2b41      	cmp	r3, #65	; 0x41
 80053e0:	d009      	beq.n	80053f6 <pbuf_alloc_reference+0x2a>
 80053e2:	883b      	ldrh	r3, [r7, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d006      	beq.n	80053f6 <pbuf_alloc_reference+0x2a>
 80053e8:	4b0f      	ldr	r3, [pc, #60]	; (8005428 <pbuf_alloc_reference+0x5c>)
 80053ea:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80053ee:	490f      	ldr	r1, [pc, #60]	; (800542c <pbuf_alloc_reference+0x60>)
 80053f0:	480f      	ldr	r0, [pc, #60]	; (8005430 <pbuf_alloc_reference+0x64>)
 80053f2:	f009 fac7 	bl	800e984 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80053f6:	2007      	movs	r0, #7
 80053f8:	f7ff faf0 	bl	80049dc <memp_malloc>
 80053fc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	e00b      	b.n	8005420 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005408:	8879      	ldrh	r1, [r7, #2]
 800540a:	887a      	ldrh	r2, [r7, #2]
 800540c:	2300      	movs	r3, #0
 800540e:	9301      	str	r3, [sp, #4]
 8005410:	883b      	ldrh	r3, [r7, #0]
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	460b      	mov	r3, r1
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f7ff feb7 	bl	800518c <pbuf_init_alloced_pbuf>
  return p;
 800541e:	68fb      	ldr	r3, [r7, #12]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	08010498 	.word	0x08010498
 800542c:	0801059c 	.word	0x0801059c
 8005430:	080104f8 	.word	0x080104f8

08005434 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af02      	add	r7, sp, #8
 800543a:	607b      	str	r3, [r7, #4]
 800543c:	4603      	mov	r3, r0
 800543e:	73fb      	strb	r3, [r7, #15]
 8005440:	460b      	mov	r3, r1
 8005442:	81bb      	strh	r3, [r7, #12]
 8005444:	4613      	mov	r3, r2
 8005446:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800544c:	8a7b      	ldrh	r3, [r7, #18]
 800544e:	3303      	adds	r3, #3
 8005450:	f023 0203 	bic.w	r2, r3, #3
 8005454:	89bb      	ldrh	r3, [r7, #12]
 8005456:	441a      	add	r2, r3
 8005458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800545a:	429a      	cmp	r2, r3
 800545c:	d901      	bls.n	8005462 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	e018      	b.n	8005494 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d007      	beq.n	8005478 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005468:	8a7b      	ldrh	r3, [r7, #18]
 800546a:	3303      	adds	r3, #3
 800546c:	f023 0303 	bic.w	r3, r3, #3
 8005470:	6a3a      	ldr	r2, [r7, #32]
 8005472:	4413      	add	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	e001      	b.n	800547c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8005478:	2300      	movs	r3, #0
 800547a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	89b9      	ldrh	r1, [r7, #12]
 8005480:	89ba      	ldrh	r2, [r7, #12]
 8005482:	2302      	movs	r3, #2
 8005484:	9301      	str	r3, [sp, #4]
 8005486:	897b      	ldrh	r3, [r7, #10]
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	460b      	mov	r3, r1
 800548c:	6979      	ldr	r1, [r7, #20]
 800548e:	f7ff fe7d 	bl	800518c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8005492:	687b      	ldr	r3, [r7, #4]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <pbuf_realloc+0x20>
 80054ae:	4b3a      	ldr	r3, [pc, #232]	; (8005598 <pbuf_realloc+0xfc>)
 80054b0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80054b4:	4939      	ldr	r1, [pc, #228]	; (800559c <pbuf_realloc+0x100>)
 80054b6:	483a      	ldr	r0, [pc, #232]	; (80055a0 <pbuf_realloc+0x104>)
 80054b8:	f009 fa64 	bl	800e984 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	891b      	ldrh	r3, [r3, #8]
 80054c0:	887a      	ldrh	r2, [r7, #2]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d263      	bcs.n	800558e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	891a      	ldrh	r2, [r3, #8]
 80054ca:	887b      	ldrh	r3, [r7, #2]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80054d0:	887b      	ldrh	r3, [r7, #2]
 80054d2:	817b      	strh	r3, [r7, #10]
  q = p;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80054d8:	e018      	b.n	800550c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	895b      	ldrh	r3, [r3, #10]
 80054de:	897a      	ldrh	r2, [r7, #10]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	891a      	ldrh	r2, [r3, #8]
 80054e8:	893b      	ldrh	r3, [r7, #8]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d106      	bne.n	800550c <pbuf_realloc+0x70>
 80054fe:	4b26      	ldr	r3, [pc, #152]	; (8005598 <pbuf_realloc+0xfc>)
 8005500:	f240 12af 	movw	r2, #431	; 0x1af
 8005504:	4927      	ldr	r1, [pc, #156]	; (80055a4 <pbuf_realloc+0x108>)
 8005506:	4826      	ldr	r0, [pc, #152]	; (80055a0 <pbuf_realloc+0x104>)
 8005508:	f009 fa3c 	bl	800e984 <iprintf>
  while (rem_len > q->len) {
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	895b      	ldrh	r3, [r3, #10]
 8005510:	897a      	ldrh	r2, [r7, #10]
 8005512:	429a      	cmp	r2, r3
 8005514:	d8e1      	bhi.n	80054da <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	7b1b      	ldrb	r3, [r3, #12]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	2b00      	cmp	r3, #0
 8005520:	d121      	bne.n	8005566 <pbuf_realloc+0xca>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	895b      	ldrh	r3, [r3, #10]
 8005526:	897a      	ldrh	r2, [r7, #10]
 8005528:	429a      	cmp	r2, r3
 800552a:	d01c      	beq.n	8005566 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	7b5b      	ldrb	r3, [r3, #13]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d116      	bne.n	8005566 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	b29a      	uxth	r2, r3
 8005542:	897b      	ldrh	r3, [r7, #10]
 8005544:	4413      	add	r3, r2
 8005546:	b29b      	uxth	r3, r3
 8005548:	4619      	mov	r1, r3
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f7fe ffba 	bl	80044c4 <mem_trim>
 8005550:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <pbuf_realloc+0xca>
 8005558:	4b0f      	ldr	r3, [pc, #60]	; (8005598 <pbuf_realloc+0xfc>)
 800555a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800555e:	4912      	ldr	r1, [pc, #72]	; (80055a8 <pbuf_realloc+0x10c>)
 8005560:	480f      	ldr	r0, [pc, #60]	; (80055a0 <pbuf_realloc+0x104>)
 8005562:	f009 fa0f 	bl	800e984 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	897a      	ldrh	r2, [r7, #10]
 800556a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	895a      	ldrh	r2, [r3, #10]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 f911 	bl	80057a8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	e000      	b.n	8005590 <pbuf_realloc+0xf4>
    return;
 800558e:	bf00      	nop

}
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	08010498 	.word	0x08010498
 800559c:	080105b0 	.word	0x080105b0
 80055a0:	080104f8 	.word	0x080104f8
 80055a4:	080105c8 	.word	0x080105c8
 80055a8:	080105e0 	.word	0x080105e0

080055ac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	4613      	mov	r3, r2
 80055b8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d106      	bne.n	80055ce <pbuf_add_header_impl+0x22>
 80055c0:	4b2b      	ldr	r3, [pc, #172]	; (8005670 <pbuf_add_header_impl+0xc4>)
 80055c2:	f240 12df 	movw	r2, #479	; 0x1df
 80055c6:	492b      	ldr	r1, [pc, #172]	; (8005674 <pbuf_add_header_impl+0xc8>)
 80055c8:	482b      	ldr	r0, [pc, #172]	; (8005678 <pbuf_add_header_impl+0xcc>)
 80055ca:	f009 f9db 	bl	800e984 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <pbuf_add_header_impl+0x30>
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055da:	d301      	bcc.n	80055e0 <pbuf_add_header_impl+0x34>
    return 1;
 80055dc:	2301      	movs	r3, #1
 80055de:	e043      	b.n	8005668 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <pbuf_add_header_impl+0x3e>
    return 0;
 80055e6:	2300      	movs	r3, #0
 80055e8:	e03e      	b.n	8005668 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	891a      	ldrh	r2, [r3, #8]
 80055f2:	8a7b      	ldrh	r3, [r7, #18]
 80055f4:	4413      	add	r3, r2
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	8a7a      	ldrh	r2, [r7, #18]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d901      	bls.n	8005602 <pbuf_add_header_impl+0x56>
    return 1;
 80055fe:	2301      	movs	r3, #1
 8005600:	e032      	b.n	8005668 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	7b1b      	ldrb	r3, [r3, #12]
 8005606:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005608:	8a3b      	ldrh	r3, [r7, #16]
 800560a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00c      	beq.n	800562c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	425b      	negs	r3, r3
 800561a:	4413      	add	r3, r2
 800561c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	3310      	adds	r3, #16
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	429a      	cmp	r2, r3
 8005626:	d20d      	bcs.n	8005644 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005628:	2301      	movs	r3, #1
 800562a:	e01d      	b.n	8005668 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800562c:	79fb      	ldrb	r3, [r7, #7]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d006      	beq.n	8005640 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	425b      	negs	r3, r3
 800563a:	4413      	add	r3, r2
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	e001      	b.n	8005644 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005640:	2301      	movs	r3, #1
 8005642:	e011      	b.n	8005668 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	895a      	ldrh	r2, [r3, #10]
 800564e:	8a7b      	ldrh	r3, [r7, #18]
 8005650:	4413      	add	r3, r2
 8005652:	b29a      	uxth	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	891a      	ldrh	r2, [r3, #8]
 800565c:	8a7b      	ldrh	r3, [r7, #18]
 800565e:	4413      	add	r3, r2
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	811a      	strh	r2, [r3, #8]


  return 0;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3718      	adds	r7, #24
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	08010498 	.word	0x08010498
 8005674:	080105fc 	.word	0x080105fc
 8005678:	080104f8 	.word	0x080104f8

0800567c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8005686:	2200      	movs	r2, #0
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff ff8e 	bl	80055ac <pbuf_add_header_impl>
 8005690:	4603      	mov	r3, r0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <pbuf_remove_header+0x1e>
 80056ac:	4b20      	ldr	r3, [pc, #128]	; (8005730 <pbuf_remove_header+0x94>)
 80056ae:	f240 224b 	movw	r2, #587	; 0x24b
 80056b2:	4920      	ldr	r1, [pc, #128]	; (8005734 <pbuf_remove_header+0x98>)
 80056b4:	4820      	ldr	r0, [pc, #128]	; (8005738 <pbuf_remove_header+0x9c>)
 80056b6:	f009 f965 	bl	800e984 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <pbuf_remove_header+0x2c>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c6:	d301      	bcc.n	80056cc <pbuf_remove_header+0x30>
    return 1;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e02c      	b.n	8005726 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <pbuf_remove_header+0x3a>
    return 0;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e027      	b.n	8005726 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	895b      	ldrh	r3, [r3, #10]
 80056de:	89fa      	ldrh	r2, [r7, #14]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d908      	bls.n	80056f6 <pbuf_remove_header+0x5a>
 80056e4:	4b12      	ldr	r3, [pc, #72]	; (8005730 <pbuf_remove_header+0x94>)
 80056e6:	f240 2255 	movw	r2, #597	; 0x255
 80056ea:	4914      	ldr	r1, [pc, #80]	; (800573c <pbuf_remove_header+0xa0>)
 80056ec:	4812      	ldr	r0, [pc, #72]	; (8005738 <pbuf_remove_header+0x9c>)
 80056ee:	f009 f949 	bl	800e984 <iprintf>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e017      	b.n	8005726 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685a      	ldr	r2, [r3, #4]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	441a      	add	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	895a      	ldrh	r2, [r3, #10]
 800570c:	89fb      	ldrh	r3, [r7, #14]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	b29a      	uxth	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	891a      	ldrh	r2, [r3, #8]
 800571a:	89fb      	ldrh	r3, [r7, #14]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	b29a      	uxth	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	08010498 	.word	0x08010498
 8005734:	080105fc 	.word	0x080105fc
 8005738:	080104f8 	.word	0x080104f8
 800573c:	08010608 	.word	0x08010608

08005740 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	807b      	strh	r3, [r7, #2]
 800574c:	4613      	mov	r3, r2
 800574e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005750:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005754:	2b00      	cmp	r3, #0
 8005756:	da08      	bge.n	800576a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005758:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800575c:	425b      	negs	r3, r3
 800575e:	4619      	mov	r1, r3
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff ff9b 	bl	800569c <pbuf_remove_header>
 8005766:	4603      	mov	r3, r0
 8005768:	e007      	b.n	800577a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800576a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800576e:	787a      	ldrb	r2, [r7, #1]
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7ff ff1a 	bl	80055ac <pbuf_add_header_impl>
 8005778:	4603      	mov	r3, r0
  }
}
 800577a:	4618      	mov	r0, r3
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	460b      	mov	r3, r1
 800578c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800578e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005792:	2201      	movs	r2, #1
 8005794:	4619      	mov	r1, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff ffd2 	bl	8005740 <pbuf_header_impl>
 800579c:	4603      	mov	r3, r0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10b      	bne.n	80057ce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <pbuf_free+0x22>
 80057bc:	4b38      	ldr	r3, [pc, #224]	; (80058a0 <pbuf_free+0xf8>)
 80057be:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80057c2:	4938      	ldr	r1, [pc, #224]	; (80058a4 <pbuf_free+0xfc>)
 80057c4:	4838      	ldr	r0, [pc, #224]	; (80058a8 <pbuf_free+0x100>)
 80057c6:	f009 f8dd 	bl	800e984 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	e063      	b.n	8005896 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80057ce:	2300      	movs	r3, #0
 80057d0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80057d2:	e05c      	b.n	800588e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	7b9b      	ldrb	r3, [r3, #14]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d106      	bne.n	80057ea <pbuf_free+0x42>
 80057dc:	4b30      	ldr	r3, [pc, #192]	; (80058a0 <pbuf_free+0xf8>)
 80057de:	f240 22f1 	movw	r2, #753	; 0x2f1
 80057e2:	4932      	ldr	r1, [pc, #200]	; (80058ac <pbuf_free+0x104>)
 80057e4:	4830      	ldr	r0, [pc, #192]	; (80058a8 <pbuf_free+0x100>)
 80057e6:	f009 f8cd 	bl	800e984 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	7b9b      	ldrb	r3, [r3, #14]
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b2da      	uxtb	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	739a      	strb	r2, [r3, #14]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	7b9b      	ldrb	r3, [r3, #14]
 80057fa:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80057fc:	7dbb      	ldrb	r3, [r7, #22]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d143      	bne.n	800588a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	7b1b      	ldrb	r3, [r3, #12]
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	7b5b      	ldrb	r3, [r3, #13]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d011      	beq.n	8005842 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <pbuf_free+0x90>
 800582a:	4b1d      	ldr	r3, [pc, #116]	; (80058a0 <pbuf_free+0xf8>)
 800582c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005830:	491f      	ldr	r1, [pc, #124]	; (80058b0 <pbuf_free+0x108>)
 8005832:	481d      	ldr	r0, [pc, #116]	; (80058a8 <pbuf_free+0x100>)
 8005834:	f009 f8a6 	bl	800e984 <iprintf>
        pc->custom_free_function(p);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	4798      	blx	r3
 8005840:	e01d      	b.n	800587e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d104      	bne.n	8005852 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005848:	6879      	ldr	r1, [r7, #4]
 800584a:	2008      	movs	r0, #8
 800584c:	f7ff f936 	bl	8004abc <memp_free>
 8005850:	e015      	b.n	800587e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d104      	bne.n	8005862 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	2007      	movs	r0, #7
 800585c:	f7ff f92e 	bl	8004abc <memp_free>
 8005860:	e00d      	b.n	800587e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8005862:	7bfb      	ldrb	r3, [r7, #15]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d103      	bne.n	8005870 <pbuf_free+0xc8>
          mem_free(p);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7fe fdc1 	bl	80043f0 <mem_free>
 800586e:	e006      	b.n	800587e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005870:	4b0b      	ldr	r3, [pc, #44]	; (80058a0 <pbuf_free+0xf8>)
 8005872:	f240 320f 	movw	r2, #783	; 0x30f
 8005876:	490f      	ldr	r1, [pc, #60]	; (80058b4 <pbuf_free+0x10c>)
 8005878:	480b      	ldr	r0, [pc, #44]	; (80058a8 <pbuf_free+0x100>)
 800587a:	f009 f883 	bl	800e984 <iprintf>
        }
      }
      count++;
 800587e:	7dfb      	ldrb	r3, [r7, #23]
 8005880:	3301      	adds	r3, #1
 8005882:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	607b      	str	r3, [r7, #4]
 8005888:	e001      	b.n	800588e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d19f      	bne.n	80057d4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8005894:	7dfb      	ldrb	r3, [r7, #23]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3718      	adds	r7, #24
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	08010498 	.word	0x08010498
 80058a4:	080105fc 	.word	0x080105fc
 80058a8:	080104f8 	.word	0x080104f8
 80058ac:	08010628 	.word	0x08010628
 80058b0:	08010640 	.word	0x08010640
 80058b4:	08010664 	.word	0x08010664

080058b8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80058c0:	2300      	movs	r3, #0
 80058c2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80058c4:	e005      	b.n	80058d2 <pbuf_clen+0x1a>
    ++len;
 80058c6:	89fb      	ldrh	r3, [r7, #14]
 80058c8:	3301      	adds	r3, #1
 80058ca:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1f6      	bne.n	80058c6 <pbuf_clen+0xe>
  }
  return len;
 80058d8:	89fb      	ldrh	r3, [r7, #14]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3714      	adds	r7, #20
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d010      	beq.n	8005918 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7b9b      	ldrb	r3, [r3, #14]
 80058fa:	3301      	adds	r3, #1
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	7b9b      	ldrb	r3, [r3, #14]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <pbuf_ref+0x30>
 800590a:	4b05      	ldr	r3, [pc, #20]	; (8005920 <pbuf_ref+0x38>)
 800590c:	f240 3242 	movw	r2, #834	; 0x342
 8005910:	4904      	ldr	r1, [pc, #16]	; (8005924 <pbuf_ref+0x3c>)
 8005912:	4805      	ldr	r0, [pc, #20]	; (8005928 <pbuf_ref+0x40>)
 8005914:	f009 f836 	bl	800e984 <iprintf>
  }
}
 8005918:	bf00      	nop
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	08010498 	.word	0x08010498
 8005924:	08010678 	.word	0x08010678
 8005928:	080104f8 	.word	0x080104f8

0800592c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d002      	beq.n	8005942 <pbuf_cat+0x16>
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d107      	bne.n	8005952 <pbuf_cat+0x26>
 8005942:	4b20      	ldr	r3, [pc, #128]	; (80059c4 <pbuf_cat+0x98>)
 8005944:	f240 3259 	movw	r2, #857	; 0x359
 8005948:	491f      	ldr	r1, [pc, #124]	; (80059c8 <pbuf_cat+0x9c>)
 800594a:	4820      	ldr	r0, [pc, #128]	; (80059cc <pbuf_cat+0xa0>)
 800594c:	f009 f81a 	bl	800e984 <iprintf>
 8005950:	e034      	b.n	80059bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	e00a      	b.n	800596e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	891a      	ldrh	r2, [r3, #8]
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	891b      	ldrh	r3, [r3, #8]
 8005960:	4413      	add	r3, r2
 8005962:	b29a      	uxth	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d1f0      	bne.n	8005958 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	891a      	ldrh	r2, [r3, #8]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	895b      	ldrh	r3, [r3, #10]
 800597e:	429a      	cmp	r2, r3
 8005980:	d006      	beq.n	8005990 <pbuf_cat+0x64>
 8005982:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <pbuf_cat+0x98>)
 8005984:	f240 3262 	movw	r2, #866	; 0x362
 8005988:	4911      	ldr	r1, [pc, #68]	; (80059d0 <pbuf_cat+0xa4>)
 800598a:	4810      	ldr	r0, [pc, #64]	; (80059cc <pbuf_cat+0xa0>)
 800598c:	f008 fffa 	bl	800e984 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d006      	beq.n	80059a6 <pbuf_cat+0x7a>
 8005998:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <pbuf_cat+0x98>)
 800599a:	f240 3263 	movw	r2, #867	; 0x363
 800599e:	490d      	ldr	r1, [pc, #52]	; (80059d4 <pbuf_cat+0xa8>)
 80059a0:	480a      	ldr	r0, [pc, #40]	; (80059cc <pbuf_cat+0xa0>)
 80059a2:	f008 ffef 	bl	800e984 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	891a      	ldrh	r2, [r3, #8]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	891b      	ldrh	r3, [r3, #8]
 80059ae:	4413      	add	r3, r2
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	08010498 	.word	0x08010498
 80059c8:	0801068c 	.word	0x0801068c
 80059cc:	080104f8 	.word	0x080104f8
 80059d0:	080106c4 	.word	0x080106c4
 80059d4:	080106f4 	.word	0x080106f4

080059d8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	2300      	movs	r3, #0
 80059e8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <pbuf_copy+0x2a>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d005      	beq.n	8005a02 <pbuf_copy+0x2a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	891a      	ldrh	r2, [r3, #8]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	891b      	ldrh	r3, [r3, #8]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d209      	bcs.n	8005a16 <pbuf_copy+0x3e>
 8005a02:	4b57      	ldr	r3, [pc, #348]	; (8005b60 <pbuf_copy+0x188>)
 8005a04:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005a08:	4956      	ldr	r1, [pc, #344]	; (8005b64 <pbuf_copy+0x18c>)
 8005a0a:	4857      	ldr	r0, [pc, #348]	; (8005b68 <pbuf_copy+0x190>)
 8005a0c:	f008 ffba 	bl	800e984 <iprintf>
 8005a10:	f06f 030f 	mvn.w	r3, #15
 8005a14:	e09f      	b.n	8005b56 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	895b      	ldrh	r3, [r3, #10]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	1ad2      	subs	r2, r2, r3
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	895b      	ldrh	r3, [r3, #10]
 8005a24:	4619      	mov	r1, r3
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	1acb      	subs	r3, r1, r3
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d306      	bcc.n	8005a3c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	895b      	ldrh	r3, [r3, #10]
 8005a32:	461a      	mov	r2, r3
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	e005      	b.n	8005a48 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	895b      	ldrh	r3, [r3, #10]
 8005a40:	461a      	mov	r2, r3
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	18d0      	adds	r0, r2, r3
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	4413      	add	r3, r2
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f008 ff62 	bl	800e924 <memcpy>
    offset_to += len;
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4413      	add	r3, r2
 8005a66:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	895b      	ldrh	r3, [r3, #10]
 8005a74:	461a      	mov	r2, r3
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d906      	bls.n	8005a8a <pbuf_copy+0xb2>
 8005a7c:	4b38      	ldr	r3, [pc, #224]	; (8005b60 <pbuf_copy+0x188>)
 8005a7e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005a82:	493a      	ldr	r1, [pc, #232]	; (8005b6c <pbuf_copy+0x194>)
 8005a84:	4838      	ldr	r0, [pc, #224]	; (8005b68 <pbuf_copy+0x190>)
 8005a86:	f008 ff7d 	bl	800e984 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	895b      	ldrh	r3, [r3, #10]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d906      	bls.n	8005aa4 <pbuf_copy+0xcc>
 8005a96:	4b32      	ldr	r3, [pc, #200]	; (8005b60 <pbuf_copy+0x188>)
 8005a98:	f240 32da 	movw	r2, #986	; 0x3da
 8005a9c:	4934      	ldr	r1, [pc, #208]	; (8005b70 <pbuf_copy+0x198>)
 8005a9e:	4832      	ldr	r0, [pc, #200]	; (8005b68 <pbuf_copy+0x190>)
 8005aa0:	f008 ff70 	bl	800e984 <iprintf>
    if (offset_from >= p_from->len) {
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	895b      	ldrh	r3, [r3, #10]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d304      	bcc.n	8005aba <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	895b      	ldrh	r3, [r3, #10]
 8005abe:	461a      	mov	r2, r3
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d114      	bne.n	8005af0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10c      	bne.n	8005af0 <pbuf_copy+0x118>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <pbuf_copy+0x118>
 8005adc:	4b20      	ldr	r3, [pc, #128]	; (8005b60 <pbuf_copy+0x188>)
 8005ade:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005ae2:	4924      	ldr	r1, [pc, #144]	; (8005b74 <pbuf_copy+0x19c>)
 8005ae4:	4820      	ldr	r0, [pc, #128]	; (8005b68 <pbuf_copy+0x190>)
 8005ae6:	f008 ff4d 	bl	800e984 <iprintf>
 8005aea:	f06f 030f 	mvn.w	r3, #15
 8005aee:	e032      	b.n	8005b56 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d013      	beq.n	8005b1e <pbuf_copy+0x146>
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	895a      	ldrh	r2, [r3, #10]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	891b      	ldrh	r3, [r3, #8]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d10d      	bne.n	8005b1e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d009      	beq.n	8005b1e <pbuf_copy+0x146>
 8005b0a:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <pbuf_copy+0x188>)
 8005b0c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8005b10:	4919      	ldr	r1, [pc, #100]	; (8005b78 <pbuf_copy+0x1a0>)
 8005b12:	4815      	ldr	r0, [pc, #84]	; (8005b68 <pbuf_copy+0x190>)
 8005b14:	f008 ff36 	bl	800e984 <iprintf>
 8005b18:	f06f 0305 	mvn.w	r3, #5
 8005b1c:	e01b      	b.n	8005b56 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d013      	beq.n	8005b4c <pbuf_copy+0x174>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	895a      	ldrh	r2, [r3, #10]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	891b      	ldrh	r3, [r3, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d10d      	bne.n	8005b4c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d009      	beq.n	8005b4c <pbuf_copy+0x174>
 8005b38:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <pbuf_copy+0x188>)
 8005b3a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8005b3e:	490e      	ldr	r1, [pc, #56]	; (8005b78 <pbuf_copy+0x1a0>)
 8005b40:	4809      	ldr	r0, [pc, #36]	; (8005b68 <pbuf_copy+0x190>)
 8005b42:	f008 ff1f 	bl	800e984 <iprintf>
 8005b46:	f06f 0305 	mvn.w	r3, #5
 8005b4a:	e004      	b.n	8005b56 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f47f af61 	bne.w	8005a16 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3718      	adds	r7, #24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	08010498 	.word	0x08010498
 8005b64:	08010740 	.word	0x08010740
 8005b68:	080104f8 	.word	0x080104f8
 8005b6c:	08010770 	.word	0x08010770
 8005b70:	08010788 	.word	0x08010788
 8005b74:	080107a4 	.word	0x080107a4
 8005b78:	080107b4 	.word	0x080107b4

08005b7c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b088      	sub	sp, #32
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	4611      	mov	r1, r2
 8005b88:	461a      	mov	r2, r3
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	80fb      	strh	r3, [r7, #6]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d108      	bne.n	8005bb2 <pbuf_copy_partial+0x36>
 8005ba0:	4b2b      	ldr	r3, [pc, #172]	; (8005c50 <pbuf_copy_partial+0xd4>)
 8005ba2:	f240 420a 	movw	r2, #1034	; 0x40a
 8005ba6:	492b      	ldr	r1, [pc, #172]	; (8005c54 <pbuf_copy_partial+0xd8>)
 8005ba8:	482b      	ldr	r0, [pc, #172]	; (8005c58 <pbuf_copy_partial+0xdc>)
 8005baa:	f008 feeb 	bl	800e984 <iprintf>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	e04a      	b.n	8005c48 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d108      	bne.n	8005bca <pbuf_copy_partial+0x4e>
 8005bb8:	4b25      	ldr	r3, [pc, #148]	; (8005c50 <pbuf_copy_partial+0xd4>)
 8005bba:	f240 420b 	movw	r2, #1035	; 0x40b
 8005bbe:	4927      	ldr	r1, [pc, #156]	; (8005c5c <pbuf_copy_partial+0xe0>)
 8005bc0:	4825      	ldr	r0, [pc, #148]	; (8005c58 <pbuf_copy_partial+0xdc>)
 8005bc2:	f008 fedf 	bl	800e984 <iprintf>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	e03e      	b.n	8005c48 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	61fb      	str	r3, [r7, #28]
 8005bce:	e034      	b.n	8005c3a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005bd0:	88bb      	ldrh	r3, [r7, #4]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <pbuf_copy_partial+0x70>
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	895b      	ldrh	r3, [r3, #10]
 8005bda:	88ba      	ldrh	r2, [r7, #4]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d305      	bcc.n	8005bec <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	895b      	ldrh	r3, [r3, #10]
 8005be4:	88ba      	ldrh	r2, [r7, #4]
 8005be6:	1ad3      	subs	r3, r2, r3
 8005be8:	80bb      	strh	r3, [r7, #4]
 8005bea:	e023      	b.n	8005c34 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	895a      	ldrh	r2, [r3, #10]
 8005bf0:	88bb      	ldrh	r3, [r7, #4]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005bf6:	8b3a      	ldrh	r2, [r7, #24]
 8005bf8:	88fb      	ldrh	r3, [r7, #6]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d901      	bls.n	8005c02 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005c02:	8b7b      	ldrh	r3, [r7, #26]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	18d0      	adds	r0, r2, r3
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	88bb      	ldrh	r3, [r7, #4]
 8005c0e:	4413      	add	r3, r2
 8005c10:	8b3a      	ldrh	r2, [r7, #24]
 8005c12:	4619      	mov	r1, r3
 8005c14:	f008 fe86 	bl	800e924 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005c18:	8afa      	ldrh	r2, [r7, #22]
 8005c1a:	8b3b      	ldrh	r3, [r7, #24]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005c20:	8b7a      	ldrh	r2, [r7, #26]
 8005c22:	8b3b      	ldrh	r3, [r7, #24]
 8005c24:	4413      	add	r3, r2
 8005c26:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005c28:	88fa      	ldrh	r2, [r7, #6]
 8005c2a:	8b3b      	ldrh	r3, [r7, #24]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	61fb      	str	r3, [r7, #28]
 8005c3a:	88fb      	ldrh	r3, [r7, #6]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <pbuf_copy_partial+0xca>
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d1c4      	bne.n	8005bd0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8005c46:	8afb      	ldrh	r3, [r7, #22]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3720      	adds	r7, #32
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	08010498 	.word	0x08010498
 8005c54:	080107e0 	.word	0x080107e0
 8005c58:	080104f8 	.word	0x080104f8
 8005c5c:	08010800 	.word	0x08010800

08005c60 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8005c6e:	88fb      	ldrh	r3, [r7, #6]
 8005c70:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8005c72:	2300      	movs	r3, #0
 8005c74:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d109      	bne.n	8005c90 <pbuf_take+0x30>
 8005c7c:	4b3a      	ldr	r3, [pc, #232]	; (8005d68 <pbuf_take+0x108>)
 8005c7e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8005c82:	493a      	ldr	r1, [pc, #232]	; (8005d6c <pbuf_take+0x10c>)
 8005c84:	483a      	ldr	r0, [pc, #232]	; (8005d70 <pbuf_take+0x110>)
 8005c86:	f008 fe7d 	bl	800e984 <iprintf>
 8005c8a:	f06f 030f 	mvn.w	r3, #15
 8005c8e:	e067      	b.n	8005d60 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d109      	bne.n	8005caa <pbuf_take+0x4a>
 8005c96:	4b34      	ldr	r3, [pc, #208]	; (8005d68 <pbuf_take+0x108>)
 8005c98:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8005c9c:	4935      	ldr	r1, [pc, #212]	; (8005d74 <pbuf_take+0x114>)
 8005c9e:	4834      	ldr	r0, [pc, #208]	; (8005d70 <pbuf_take+0x110>)
 8005ca0:	f008 fe70 	bl	800e984 <iprintf>
 8005ca4:	f06f 030f 	mvn.w	r3, #15
 8005ca8:	e05a      	b.n	8005d60 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	891b      	ldrh	r3, [r3, #8]
 8005cae:	88fa      	ldrh	r2, [r7, #6]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d909      	bls.n	8005cc8 <pbuf_take+0x68>
 8005cb4:	4b2c      	ldr	r3, [pc, #176]	; (8005d68 <pbuf_take+0x108>)
 8005cb6:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8005cba:	492f      	ldr	r1, [pc, #188]	; (8005d78 <pbuf_take+0x118>)
 8005cbc:	482c      	ldr	r0, [pc, #176]	; (8005d70 <pbuf_take+0x110>)
 8005cbe:	f008 fe61 	bl	800e984 <iprintf>
 8005cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc6:	e04b      	b.n	8005d60 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d007      	beq.n	8005cde <pbuf_take+0x7e>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d004      	beq.n	8005cde <pbuf_take+0x7e>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	891b      	ldrh	r3, [r3, #8]
 8005cd8:	88fa      	ldrh	r2, [r7, #6]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d902      	bls.n	8005ce4 <pbuf_take+0x84>
    return ERR_ARG;
 8005cde:	f06f 030f 	mvn.w	r3, #15
 8005ce2:	e03d      	b.n	8005d60 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	61fb      	str	r3, [r7, #28]
 8005ce8:	e028      	b.n	8005d3c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d106      	bne.n	8005cfe <pbuf_take+0x9e>
 8005cf0:	4b1d      	ldr	r3, [pc, #116]	; (8005d68 <pbuf_take+0x108>)
 8005cf2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005cf6:	4921      	ldr	r1, [pc, #132]	; (8005d7c <pbuf_take+0x11c>)
 8005cf8:	481d      	ldr	r0, [pc, #116]	; (8005d70 <pbuf_take+0x110>)
 8005cfa:	f008 fe43 	bl	800e984 <iprintf>
    buf_copy_len = total_copy_len;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	895b      	ldrh	r3, [r3, #10]
 8005d06:	461a      	mov	r2, r3
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d902      	bls.n	8005d14 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	895b      	ldrh	r3, [r3, #10]
 8005d12:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	6858      	ldr	r0, [r3, #4]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	4619      	mov	r1, r3
 8005d22:	f008 fdff 	bl	800e924 <memcpy>
    total_copy_len -= buf_copy_len;
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	4413      	add	r3, r2
 8005d34:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	61fb      	str	r3, [r7, #28]
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1d3      	bne.n	8005cea <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d103      	bne.n	8005d50 <pbuf_take+0xf0>
 8005d48:	88fb      	ldrh	r3, [r7, #6]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d006      	beq.n	8005d5e <pbuf_take+0xfe>
 8005d50:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <pbuf_take+0x108>)
 8005d52:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8005d56:	490a      	ldr	r1, [pc, #40]	; (8005d80 <pbuf_take+0x120>)
 8005d58:	4805      	ldr	r0, [pc, #20]	; (8005d70 <pbuf_take+0x110>)
 8005d5a:	f008 fe13 	bl	800e984 <iprintf>
  return ERR_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3720      	adds	r7, #32
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	08010498 	.word	0x08010498
 8005d6c:	08010870 	.word	0x08010870
 8005d70:	080104f8 	.word	0x080104f8
 8005d74:	08010888 	.word	0x08010888
 8005d78:	080108a4 	.word	0x080108a4
 8005d7c:	080108c4 	.word	0x080108c4
 8005d80:	080108dc 	.word	0x080108dc

08005d84 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	603a      	str	r2, [r7, #0]
 8005d8e:	71fb      	strb	r3, [r7, #7]
 8005d90:	460b      	mov	r3, r1
 8005d92:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	8919      	ldrh	r1, [r3, #8]
 8005d98:	88ba      	ldrh	r2, [r7, #4]
 8005d9a:	79fb      	ldrb	r3, [r7, #7]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff fa1f 	bl	80051e0 <pbuf_alloc>
 8005da2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <pbuf_clone+0x2a>
    return NULL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	e011      	b.n	8005dd2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f7ff fe11 	bl	80059d8 <pbuf_copy>
 8005db6:	4603      	mov	r3, r0
 8005db8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005dba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d006      	beq.n	8005dd0 <pbuf_clone+0x4c>
 8005dc2:	4b06      	ldr	r3, [pc, #24]	; (8005ddc <pbuf_clone+0x58>)
 8005dc4:	f240 5224 	movw	r2, #1316	; 0x524
 8005dc8:	4905      	ldr	r1, [pc, #20]	; (8005de0 <pbuf_clone+0x5c>)
 8005dca:	4806      	ldr	r0, [pc, #24]	; (8005de4 <pbuf_clone+0x60>)
 8005dcc:	f008 fdda 	bl	800e984 <iprintf>
  return q;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	08010498 	.word	0x08010498
 8005de0:	0801090c 	.word	0x0801090c
 8005de4:	080104f8 	.word	0x080104f8

08005de8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005dec:	f008 fde2 	bl	800e9b4 <rand>
 8005df0:	4603      	mov	r3, r0
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	4b01      	ldr	r3, [pc, #4]	; (8005e08 <tcp_init+0x20>)
 8005e02:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005e04:	bf00      	nop
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	20000020 	.word	0x20000020

08005e0c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	7d1b      	ldrb	r3, [r3, #20]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d105      	bne.n	8005e28 <tcp_free+0x1c>
 8005e1c:	4b06      	ldr	r3, [pc, #24]	; (8005e38 <tcp_free+0x2c>)
 8005e1e:	22d4      	movs	r2, #212	; 0xd4
 8005e20:	4906      	ldr	r1, [pc, #24]	; (8005e3c <tcp_free+0x30>)
 8005e22:	4807      	ldr	r0, [pc, #28]	; (8005e40 <tcp_free+0x34>)
 8005e24:	f008 fdae 	bl	800e984 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	2001      	movs	r0, #1
 8005e2c:	f7fe fe46 	bl	8004abc <memp_free>
}
 8005e30:	bf00      	nop
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	08010998 	.word	0x08010998
 8005e3c:	080109c8 	.word	0x080109c8
 8005e40:	080109dc 	.word	0x080109dc

08005e44 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	7d1b      	ldrb	r3, [r3, #20]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d105      	bne.n	8005e60 <tcp_free_listen+0x1c>
 8005e54:	4b06      	ldr	r3, [pc, #24]	; (8005e70 <tcp_free_listen+0x2c>)
 8005e56:	22df      	movs	r2, #223	; 0xdf
 8005e58:	4906      	ldr	r1, [pc, #24]	; (8005e74 <tcp_free_listen+0x30>)
 8005e5a:	4807      	ldr	r0, [pc, #28]	; (8005e78 <tcp_free_listen+0x34>)
 8005e5c:	f008 fd92 	bl	800e984 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005e60:	6879      	ldr	r1, [r7, #4]
 8005e62:	2002      	movs	r0, #2
 8005e64:	f7fe fe2a 	bl	8004abc <memp_free>
}
 8005e68:	bf00      	nop
 8005e6a:	3708      	adds	r7, #8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	08010998 	.word	0x08010998
 8005e74:	08010a04 	.word	0x08010a04
 8005e78:	080109dc 	.word	0x080109dc

08005e7c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005e80:	f001 f800 	bl	8006e84 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005e84:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <tcp_tmr+0x28>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	3301      	adds	r3, #1
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <tcp_tmr+0x28>)
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	4b04      	ldr	r3, [pc, #16]	; (8005ea4 <tcp_tmr+0x28>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005e9c:	f000 fcb2 	bl	8006804 <tcp_slowtmr>
  }
}
 8005ea0:	bf00      	nop
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	200082c5 	.word	0x200082c5

08005ea8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <tcp_remove_listener+0x1c>
 8005eb8:	4b0d      	ldr	r3, [pc, #52]	; (8005ef0 <tcp_remove_listener+0x48>)
 8005eba:	22ff      	movs	r2, #255	; 0xff
 8005ebc:	490d      	ldr	r1, [pc, #52]	; (8005ef4 <tcp_remove_listener+0x4c>)
 8005ebe:	480e      	ldr	r0, [pc, #56]	; (8005ef8 <tcp_remove_listener+0x50>)
 8005ec0:	f008 fd60 	bl	800e984 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e00a      	b.n	8005ee0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d102      	bne.n	8005eda <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f1      	bne.n	8005eca <tcp_remove_listener+0x22>
    }
  }
}
 8005ee6:	bf00      	nop
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	08010998 	.word	0x08010998
 8005ef4:	08010a20 	.word	0x08010a20
 8005ef8:	080109dc 	.word	0x080109dc

08005efc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <tcp_listen_closed+0x1c>
 8005f0a:	4b14      	ldr	r3, [pc, #80]	; (8005f5c <tcp_listen_closed+0x60>)
 8005f0c:	f240 1211 	movw	r2, #273	; 0x111
 8005f10:	4913      	ldr	r1, [pc, #76]	; (8005f60 <tcp_listen_closed+0x64>)
 8005f12:	4814      	ldr	r0, [pc, #80]	; (8005f64 <tcp_listen_closed+0x68>)
 8005f14:	f008 fd36 	bl	800e984 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	7d1b      	ldrb	r3, [r3, #20]
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d006      	beq.n	8005f2e <tcp_listen_closed+0x32>
 8005f20:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <tcp_listen_closed+0x60>)
 8005f22:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005f26:	4910      	ldr	r1, [pc, #64]	; (8005f68 <tcp_listen_closed+0x6c>)
 8005f28:	480e      	ldr	r0, [pc, #56]	; (8005f64 <tcp_listen_closed+0x68>)
 8005f2a:	f008 fd2b 	bl	800e984 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005f2e:	2301      	movs	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	e00b      	b.n	8005f4c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005f34:	4a0d      	ldr	r2, [pc, #52]	; (8005f6c <tcp_listen_closed+0x70>)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff ffb1 	bl	8005ea8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d9f0      	bls.n	8005f34 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005f52:	bf00      	nop
 8005f54:	bf00      	nop
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	08010998 	.word	0x08010998
 8005f60:	08010a48 	.word	0x08010a48
 8005f64:	080109dc 	.word	0x080109dc
 8005f68:	08010a54 	.word	0x08010a54
 8005f6c:	08012970 	.word	0x08012970

08005f70 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005f70:	b5b0      	push	{r4, r5, r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af04      	add	r7, sp, #16
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <tcp_close_shutdown+0x20>
 8005f82:	4b63      	ldr	r3, [pc, #396]	; (8006110 <tcp_close_shutdown+0x1a0>)
 8005f84:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005f88:	4962      	ldr	r1, [pc, #392]	; (8006114 <tcp_close_shutdown+0x1a4>)
 8005f8a:	4863      	ldr	r0, [pc, #396]	; (8006118 <tcp_close_shutdown+0x1a8>)
 8005f8c:	f008 fcfa 	bl	800e984 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005f90:	78fb      	ldrb	r3, [r7, #3]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d066      	beq.n	8006064 <tcp_close_shutdown+0xf4>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	7d1b      	ldrb	r3, [r3, #20]
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d003      	beq.n	8005fa6 <tcp_close_shutdown+0x36>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	7d1b      	ldrb	r3, [r3, #20]
 8005fa2:	2b07      	cmp	r3, #7
 8005fa4:	d15e      	bne.n	8006064 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d104      	bne.n	8005fb8 <tcp_close_shutdown+0x48>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fb2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005fb6:	d055      	beq.n	8006064 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	8b5b      	ldrh	r3, [r3, #26]
 8005fbc:	f003 0310 	and.w	r3, r3, #16
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d106      	bne.n	8005fd2 <tcp_close_shutdown+0x62>
 8005fc4:	4b52      	ldr	r3, [pc, #328]	; (8006110 <tcp_close_shutdown+0x1a0>)
 8005fc6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005fca:	4954      	ldr	r1, [pc, #336]	; (800611c <tcp_close_shutdown+0x1ac>)
 8005fcc:	4852      	ldr	r0, [pc, #328]	; (8006118 <tcp_close_shutdown+0x1a8>)
 8005fce:	f008 fcd9 	bl	800e984 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005fda:	687d      	ldr	r5, [r7, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3304      	adds	r3, #4
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	8ad2      	ldrh	r2, [r2, #22]
 8005fe4:	6879      	ldr	r1, [r7, #4]
 8005fe6:	8b09      	ldrh	r1, [r1, #24]
 8005fe8:	9102      	str	r1, [sp, #8]
 8005fea:	9201      	str	r2, [sp, #4]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	462b      	mov	r3, r5
 8005ff0:	4622      	mov	r2, r4
 8005ff2:	4601      	mov	r1, r0
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f005 fcd5 	bl	800b9a4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f001 fab2 	bl	8007564 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006000:	4b47      	ldr	r3, [pc, #284]	; (8006120 <tcp_close_shutdown+0x1b0>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	429a      	cmp	r2, r3
 8006008:	d105      	bne.n	8006016 <tcp_close_shutdown+0xa6>
 800600a:	4b45      	ldr	r3, [pc, #276]	; (8006120 <tcp_close_shutdown+0x1b0>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	4a43      	ldr	r2, [pc, #268]	; (8006120 <tcp_close_shutdown+0x1b0>)
 8006012:	6013      	str	r3, [r2, #0]
 8006014:	e013      	b.n	800603e <tcp_close_shutdown+0xce>
 8006016:	4b42      	ldr	r3, [pc, #264]	; (8006120 <tcp_close_shutdown+0x1b0>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	e00c      	b.n	8006038 <tcp_close_shutdown+0xc8>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	429a      	cmp	r2, r3
 8006026:	d104      	bne.n	8006032 <tcp_close_shutdown+0xc2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	60da      	str	r2, [r3, #12]
 8006030:	e005      	b.n	800603e <tcp_close_shutdown+0xce>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1ef      	bne.n	800601e <tcp_close_shutdown+0xae>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	60da      	str	r2, [r3, #12]
 8006044:	4b37      	ldr	r3, [pc, #220]	; (8006124 <tcp_close_shutdown+0x1b4>)
 8006046:	2201      	movs	r2, #1
 8006048:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800604a:	4b37      	ldr	r3, [pc, #220]	; (8006128 <tcp_close_shutdown+0x1b8>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	429a      	cmp	r2, r3
 8006052:	d102      	bne.n	800605a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006054:	f003 ff4a 	bl	8009eec <tcp_trigger_input_pcb_close>
 8006058:	e002      	b.n	8006060 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff fed6 	bl	8005e0c <tcp_free>
      }
      return ERR_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	e050      	b.n	8006106 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	7d1b      	ldrb	r3, [r3, #20]
 8006068:	2b02      	cmp	r3, #2
 800606a:	d03b      	beq.n	80060e4 <tcp_close_shutdown+0x174>
 800606c:	2b02      	cmp	r3, #2
 800606e:	dc44      	bgt.n	80060fa <tcp_close_shutdown+0x18a>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <tcp_close_shutdown+0x10a>
 8006074:	2b01      	cmp	r3, #1
 8006076:	d02a      	beq.n	80060ce <tcp_close_shutdown+0x15e>
 8006078:	e03f      	b.n	80060fa <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	8adb      	ldrh	r3, [r3, #22]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d021      	beq.n	80060c6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006082:	4b2a      	ldr	r3, [pc, #168]	; (800612c <tcp_close_shutdown+0x1bc>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	429a      	cmp	r2, r3
 800608a:	d105      	bne.n	8006098 <tcp_close_shutdown+0x128>
 800608c:	4b27      	ldr	r3, [pc, #156]	; (800612c <tcp_close_shutdown+0x1bc>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	4a26      	ldr	r2, [pc, #152]	; (800612c <tcp_close_shutdown+0x1bc>)
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	e013      	b.n	80060c0 <tcp_close_shutdown+0x150>
 8006098:	4b24      	ldr	r3, [pc, #144]	; (800612c <tcp_close_shutdown+0x1bc>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	e00c      	b.n	80060ba <tcp_close_shutdown+0x14a>
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d104      	bne.n	80060b4 <tcp_close_shutdown+0x144>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	60da      	str	r2, [r3, #12]
 80060b2:	e005      	b.n	80060c0 <tcp_close_shutdown+0x150>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1ef      	bne.n	80060a0 <tcp_close_shutdown+0x130>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff fea0 	bl	8005e0c <tcp_free>
      break;
 80060cc:	e01a      	b.n	8006104 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7ff ff14 	bl	8005efc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	4816      	ldr	r0, [pc, #88]	; (8006130 <tcp_close_shutdown+0x1c0>)
 80060d8:	f001 fa94 	bl	8007604 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7ff feb1 	bl	8005e44 <tcp_free_listen>
      break;
 80060e2:	e00f      	b.n	8006104 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	480e      	ldr	r0, [pc, #56]	; (8006120 <tcp_close_shutdown+0x1b0>)
 80060e8:	f001 fa8c 	bl	8007604 <tcp_pcb_remove>
 80060ec:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <tcp_close_shutdown+0x1b4>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f7ff fe8a 	bl	8005e0c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80060f8:	e004      	b.n	8006104 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f81a 	bl	8006134 <tcp_close_shutdown_fin>
 8006100:	4603      	mov	r3, r0
 8006102:	e000      	b.n	8006106 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bdb0      	pop	{r4, r5, r7, pc}
 800610e:	bf00      	nop
 8006110:	08010998 	.word	0x08010998
 8006114:	08010a6c 	.word	0x08010a6c
 8006118:	080109dc 	.word	0x080109dc
 800611c:	08010a8c 	.word	0x08010a8c
 8006120:	200082bc 	.word	0x200082bc
 8006124:	200082c4 	.word	0x200082c4
 8006128:	200082fc 	.word	0x200082fc
 800612c:	200082b4 	.word	0x200082b4
 8006130:	200082b8 	.word	0x200082b8

08006134 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <tcp_close_shutdown_fin+0x1c>
 8006142:	4b2e      	ldr	r3, [pc, #184]	; (80061fc <tcp_close_shutdown_fin+0xc8>)
 8006144:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8006148:	492d      	ldr	r1, [pc, #180]	; (8006200 <tcp_close_shutdown_fin+0xcc>)
 800614a:	482e      	ldr	r0, [pc, #184]	; (8006204 <tcp_close_shutdown_fin+0xd0>)
 800614c:	f008 fc1a 	bl	800e984 <iprintf>

  switch (pcb->state) {
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	7d1b      	ldrb	r3, [r3, #20]
 8006154:	2b07      	cmp	r3, #7
 8006156:	d020      	beq.n	800619a <tcp_close_shutdown_fin+0x66>
 8006158:	2b07      	cmp	r3, #7
 800615a:	dc2b      	bgt.n	80061b4 <tcp_close_shutdown_fin+0x80>
 800615c:	2b03      	cmp	r3, #3
 800615e:	d002      	beq.n	8006166 <tcp_close_shutdown_fin+0x32>
 8006160:	2b04      	cmp	r3, #4
 8006162:	d00d      	beq.n	8006180 <tcp_close_shutdown_fin+0x4c>
 8006164:	e026      	b.n	80061b4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f004 fd2a 	bl	800abc0 <tcp_send_fin>
 800616c:	4603      	mov	r3, r0
 800616e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8006170:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d11f      	bne.n	80061b8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2205      	movs	r2, #5
 800617c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800617e:	e01b      	b.n	80061b8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f004 fd1d 	bl	800abc0 <tcp_send_fin>
 8006186:	4603      	mov	r3, r0
 8006188:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800618a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d114      	bne.n	80061bc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2205      	movs	r2, #5
 8006196:	751a      	strb	r2, [r3, #20]
      }
      break;
 8006198:	e010      	b.n	80061bc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f004 fd10 	bl	800abc0 <tcp_send_fin>
 80061a0:	4603      	mov	r3, r0
 80061a2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80061a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d109      	bne.n	80061c0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2209      	movs	r2, #9
 80061b0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80061b2:	e005      	b.n	80061c0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80061b4:	2300      	movs	r3, #0
 80061b6:	e01c      	b.n	80061f2 <tcp_close_shutdown_fin+0xbe>
      break;
 80061b8:	bf00      	nop
 80061ba:	e002      	b.n	80061c2 <tcp_close_shutdown_fin+0x8e>
      break;
 80061bc:	bf00      	nop
 80061be:	e000      	b.n	80061c2 <tcp_close_shutdown_fin+0x8e>
      break;
 80061c0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80061c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d103      	bne.n	80061d2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f004 fe36 	bl	800ae3c <tcp_output>
 80061d0:	e00d      	b.n	80061ee <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80061d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061da:	d108      	bne.n	80061ee <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	8b5b      	ldrh	r3, [r3, #26]
 80061e0:	f043 0308 	orr.w	r3, r3, #8
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e001      	b.n	80061f2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80061ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	08010998 	.word	0x08010998
 8006200:	08010a48 	.word	0x08010a48
 8006204:	080109dc 	.word	0x080109dc

08006208 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d109      	bne.n	800622a <tcp_close+0x22>
 8006216:	4b0f      	ldr	r3, [pc, #60]	; (8006254 <tcp_close+0x4c>)
 8006218:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800621c:	490e      	ldr	r1, [pc, #56]	; (8006258 <tcp_close+0x50>)
 800621e:	480f      	ldr	r0, [pc, #60]	; (800625c <tcp_close+0x54>)
 8006220:	f008 fbb0 	bl	800e984 <iprintf>
 8006224:	f06f 030f 	mvn.w	r3, #15
 8006228:	e00f      	b.n	800624a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	7d1b      	ldrb	r3, [r3, #20]
 800622e:	2b01      	cmp	r3, #1
 8006230:	d006      	beq.n	8006240 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	8b5b      	ldrh	r3, [r3, #26]
 8006236:	f043 0310 	orr.w	r3, r3, #16
 800623a:	b29a      	uxth	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006240:	2101      	movs	r1, #1
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff fe94 	bl	8005f70 <tcp_close_shutdown>
 8006248:	4603      	mov	r3, r0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	08010998 	.word	0x08010998
 8006258:	08010aa8 	.word	0x08010aa8
 800625c:	080109dc 	.word	0x080109dc

08006260 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08e      	sub	sp, #56	; 0x38
 8006264:	af04      	add	r7, sp, #16
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d107      	bne.n	8006280 <tcp_abandon+0x20>
 8006270:	4b52      	ldr	r3, [pc, #328]	; (80063bc <tcp_abandon+0x15c>)
 8006272:	f240 223d 	movw	r2, #573	; 0x23d
 8006276:	4952      	ldr	r1, [pc, #328]	; (80063c0 <tcp_abandon+0x160>)
 8006278:	4852      	ldr	r0, [pc, #328]	; (80063c4 <tcp_abandon+0x164>)
 800627a:	f008 fb83 	bl	800e984 <iprintf>
 800627e:	e099      	b.n	80063b4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	7d1b      	ldrb	r3, [r3, #20]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d106      	bne.n	8006296 <tcp_abandon+0x36>
 8006288:	4b4c      	ldr	r3, [pc, #304]	; (80063bc <tcp_abandon+0x15c>)
 800628a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800628e:	494e      	ldr	r1, [pc, #312]	; (80063c8 <tcp_abandon+0x168>)
 8006290:	484c      	ldr	r0, [pc, #304]	; (80063c4 <tcp_abandon+0x164>)
 8006292:	f008 fb77 	bl	800e984 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	7d1b      	ldrb	r3, [r3, #20]
 800629a:	2b0a      	cmp	r3, #10
 800629c:	d107      	bne.n	80062ae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	484a      	ldr	r0, [pc, #296]	; (80063cc <tcp_abandon+0x16c>)
 80062a2:	f001 f9af 	bl	8007604 <tcp_pcb_remove>
    tcp_free(pcb);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7ff fdb0 	bl	8005e0c <tcp_free>
 80062ac:	e082      	b.n	80063b4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80062ae:	2300      	movs	r3, #0
 80062b0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	7d1b      	ldrb	r3, [r3, #20]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d126      	bne.n	8006326 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8adb      	ldrh	r3, [r3, #22]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d02e      	beq.n	800633e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80062e0:	4b3b      	ldr	r3, [pc, #236]	; (80063d0 <tcp_abandon+0x170>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d105      	bne.n	80062f6 <tcp_abandon+0x96>
 80062ea:	4b39      	ldr	r3, [pc, #228]	; (80063d0 <tcp_abandon+0x170>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	4a37      	ldr	r2, [pc, #220]	; (80063d0 <tcp_abandon+0x170>)
 80062f2:	6013      	str	r3, [r2, #0]
 80062f4:	e013      	b.n	800631e <tcp_abandon+0xbe>
 80062f6:	4b36      	ldr	r3, [pc, #216]	; (80063d0 <tcp_abandon+0x170>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	61fb      	str	r3, [r7, #28]
 80062fc:	e00c      	b.n	8006318 <tcp_abandon+0xb8>
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	429a      	cmp	r2, r3
 8006306:	d104      	bne.n	8006312 <tcp_abandon+0xb2>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	60da      	str	r2, [r3, #12]
 8006310:	e005      	b.n	800631e <tcp_abandon+0xbe>
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1ef      	bne.n	80062fe <tcp_abandon+0x9e>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	60da      	str	r2, [r3, #12]
 8006324:	e00b      	b.n	800633e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	8adb      	ldrh	r3, [r3, #22]
 800632e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8006330:	6879      	ldr	r1, [r7, #4]
 8006332:	4828      	ldr	r0, [pc, #160]	; (80063d4 <tcp_abandon+0x174>)
 8006334:	f001 f966 	bl	8007604 <tcp_pcb_remove>
 8006338:	4b27      	ldr	r3, [pc, #156]	; (80063d8 <tcp_abandon+0x178>)
 800633a:	2201      	movs	r2, #1
 800633c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	2b00      	cmp	r3, #0
 8006344:	d004      	beq.n	8006350 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fe7a 	bl	8007044 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006354:	2b00      	cmp	r3, #0
 8006356:	d004      	beq.n	8006362 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fe71 	bl	8007044 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006366:	2b00      	cmp	r3, #0
 8006368:	d004      	beq.n	8006374 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fe68 	bl	8007044 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00e      	beq.n	8006398 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800637a:	6879      	ldr	r1, [r7, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3304      	adds	r3, #4
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	8b12      	ldrh	r2, [r2, #24]
 8006384:	9202      	str	r2, [sp, #8]
 8006386:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006388:	9201      	str	r2, [sp, #4]
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	460b      	mov	r3, r1
 800638e:	697a      	ldr	r2, [r7, #20]
 8006390:	69b9      	ldr	r1, [r7, #24]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f005 fb06 	bl	800b9a4 <tcp_rst>
    }
    last_state = pcb->state;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	7d1b      	ldrb	r3, [r3, #20]
 800639c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fd34 	bl	8005e0c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d004      	beq.n	80063b4 <tcp_abandon+0x154>
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f06f 010c 	mvn.w	r1, #12
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	4798      	blx	r3
  }
}
 80063b4:	3728      	adds	r7, #40	; 0x28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	08010998 	.word	0x08010998
 80063c0:	08010adc 	.word	0x08010adc
 80063c4:	080109dc 	.word	0x080109dc
 80063c8:	08010af8 	.word	0x08010af8
 80063cc:	200082c0 	.word	0x200082c0
 80063d0:	200082b4 	.word	0x200082b4
 80063d4:	200082bc 	.word	0x200082bc
 80063d8:	200082c4 	.word	0x200082c4

080063dc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80063e4:	2101      	movs	r1, #1
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff ff3a 	bl	8006260 <tcp_abandon>
}
 80063ec:	bf00      	nop
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d106      	bne.n	8006410 <tcp_update_rcv_ann_wnd+0x1c>
 8006402:	4b25      	ldr	r3, [pc, #148]	; (8006498 <tcp_update_rcv_ann_wnd+0xa4>)
 8006404:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006408:	4924      	ldr	r1, [pc, #144]	; (800649c <tcp_update_rcv_ann_wnd+0xa8>)
 800640a:	4825      	ldr	r0, [pc, #148]	; (80064a0 <tcp_update_rcv_ann_wnd+0xac>)
 800640c:	f008 faba 	bl	800e984 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8006418:	4413      	add	r3, r2
 800641a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8006424:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006428:	bf28      	it	cs
 800642a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800642e:	b292      	uxth	r2, r2
 8006430:	4413      	add	r3, r2
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	db08      	blt.n	800644c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006446:	68fa      	ldr	r2, [r7, #12]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	e020      	b.n	800648e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	dd03      	ble.n	8006462 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006460:	e014      	b.n	800648c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006474:	d306      	bcc.n	8006484 <tcp_update_rcv_ann_wnd+0x90>
 8006476:	4b08      	ldr	r3, [pc, #32]	; (8006498 <tcp_update_rcv_ann_wnd+0xa4>)
 8006478:	f240 32b6 	movw	r2, #950	; 0x3b6
 800647c:	4909      	ldr	r1, [pc, #36]	; (80064a4 <tcp_update_rcv_ann_wnd+0xb0>)
 800647e:	4808      	ldr	r0, [pc, #32]	; (80064a0 <tcp_update_rcv_ann_wnd+0xac>)
 8006480:	f008 fa80 	bl	800e984 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	b29a      	uxth	r2, r3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800648c:	2300      	movs	r3, #0
  }
}
 800648e:	4618      	mov	r0, r3
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	08010998 	.word	0x08010998
 800649c:	08010bf4 	.word	0x08010bf4
 80064a0:	080109dc 	.word	0x080109dc
 80064a4:	08010c18 	.word	0x08010c18

080064a8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	460b      	mov	r3, r1
 80064b2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d107      	bne.n	80064ca <tcp_recved+0x22>
 80064ba:	4b1f      	ldr	r3, [pc, #124]	; (8006538 <tcp_recved+0x90>)
 80064bc:	f240 32cf 	movw	r2, #975	; 0x3cf
 80064c0:	491e      	ldr	r1, [pc, #120]	; (800653c <tcp_recved+0x94>)
 80064c2:	481f      	ldr	r0, [pc, #124]	; (8006540 <tcp_recved+0x98>)
 80064c4:	f008 fa5e 	bl	800e984 <iprintf>
 80064c8:	e032      	b.n	8006530 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	7d1b      	ldrb	r3, [r3, #20]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d106      	bne.n	80064e0 <tcp_recved+0x38>
 80064d2:	4b19      	ldr	r3, [pc, #100]	; (8006538 <tcp_recved+0x90>)
 80064d4:	f240 32d2 	movw	r2, #978	; 0x3d2
 80064d8:	491a      	ldr	r1, [pc, #104]	; (8006544 <tcp_recved+0x9c>)
 80064da:	4819      	ldr	r0, [pc, #100]	; (8006540 <tcp_recved+0x98>)
 80064dc:	f008 fa52 	bl	800e984 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80064e4:	887b      	ldrh	r3, [r7, #2]
 80064e6:	4413      	add	r3, r2
 80064e8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80064ea:	89fb      	ldrh	r3, [r7, #14]
 80064ec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80064f0:	d804      	bhi.n	80064fc <tcp_recved+0x54>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f6:	89fa      	ldrh	r2, [r7, #14]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d204      	bcs.n	8006506 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006502:	851a      	strh	r2, [r3, #40]	; 0x28
 8006504:	e002      	b.n	800650c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	89fa      	ldrh	r2, [r7, #14]
 800650a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff ff71 	bl	80063f4 <tcp_update_rcv_ann_wnd>
 8006512:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800651a:	d309      	bcc.n	8006530 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	8b5b      	ldrh	r3, [r3, #26]
 8006520:	f043 0302 	orr.w	r3, r3, #2
 8006524:	b29a      	uxth	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f004 fc86 	bl	800ae3c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	08010998 	.word	0x08010998
 800653c:	08010c34 	.word	0x08010c34
 8006540:	080109dc 	.word	0x080109dc
 8006544:	08010c4c 	.word	0x08010c4c

08006548 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8006552:	4b1e      	ldr	r3, [pc, #120]	; (80065cc <tcp_new_port+0x84>)
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	4b1c      	ldr	r3, [pc, #112]	; (80065cc <tcp_new_port+0x84>)
 800655c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800655e:	4b1b      	ldr	r3, [pc, #108]	; (80065cc <tcp_new_port+0x84>)
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006566:	4293      	cmp	r3, r2
 8006568:	d103      	bne.n	8006572 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800656a:	4b18      	ldr	r3, [pc, #96]	; (80065cc <tcp_new_port+0x84>)
 800656c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006570:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006572:	2300      	movs	r3, #0
 8006574:	71fb      	strb	r3, [r7, #7]
 8006576:	e01e      	b.n	80065b6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006578:	79fb      	ldrb	r3, [r7, #7]
 800657a:	4a15      	ldr	r2, [pc, #84]	; (80065d0 <tcp_new_port+0x88>)
 800657c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	e011      	b.n	80065aa <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	8ada      	ldrh	r2, [r3, #22]
 800658a:	4b10      	ldr	r3, [pc, #64]	; (80065cc <tcp_new_port+0x84>)
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	429a      	cmp	r2, r3
 8006590:	d108      	bne.n	80065a4 <tcp_new_port+0x5c>
        n++;
 8006592:	88bb      	ldrh	r3, [r7, #4]
 8006594:	3301      	adds	r3, #1
 8006596:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006598:	88bb      	ldrh	r3, [r7, #4]
 800659a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800659e:	d3d8      	bcc.n	8006552 <tcp_new_port+0xa>
          return 0;
 80065a0:	2300      	movs	r3, #0
 80065a2:	e00d      	b.n	80065c0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	603b      	str	r3, [r7, #0]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1ea      	bne.n	8006586 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	3301      	adds	r3, #1
 80065b4:	71fb      	strb	r3, [r7, #7]
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d9dd      	bls.n	8006578 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80065bc:	4b03      	ldr	r3, [pc, #12]	; (80065cc <tcp_new_port+0x84>)
 80065be:	881b      	ldrh	r3, [r3, #0]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	20000020 	.word	0x20000020
 80065d0:	08012970 	.word	0x08012970

080065d4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b08a      	sub	sp, #40	; 0x28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	603b      	str	r3, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80065e4:	2300      	movs	r3, #0
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d109      	bne.n	8006602 <tcp_connect+0x2e>
 80065ee:	4b7d      	ldr	r3, [pc, #500]	; (80067e4 <tcp_connect+0x210>)
 80065f0:	f240 4235 	movw	r2, #1077	; 0x435
 80065f4:	497c      	ldr	r1, [pc, #496]	; (80067e8 <tcp_connect+0x214>)
 80065f6:	487d      	ldr	r0, [pc, #500]	; (80067ec <tcp_connect+0x218>)
 80065f8:	f008 f9c4 	bl	800e984 <iprintf>
 80065fc:	f06f 030f 	mvn.w	r3, #15
 8006600:	e0ec      	b.n	80067dc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d109      	bne.n	800661c <tcp_connect+0x48>
 8006608:	4b76      	ldr	r3, [pc, #472]	; (80067e4 <tcp_connect+0x210>)
 800660a:	f240 4236 	movw	r2, #1078	; 0x436
 800660e:	4978      	ldr	r1, [pc, #480]	; (80067f0 <tcp_connect+0x21c>)
 8006610:	4876      	ldr	r0, [pc, #472]	; (80067ec <tcp_connect+0x218>)
 8006612:	f008 f9b7 	bl	800e984 <iprintf>
 8006616:	f06f 030f 	mvn.w	r3, #15
 800661a:	e0df      	b.n	80067dc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	7d1b      	ldrb	r3, [r3, #20]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d009      	beq.n	8006638 <tcp_connect+0x64>
 8006624:	4b6f      	ldr	r3, [pc, #444]	; (80067e4 <tcp_connect+0x210>)
 8006626:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800662a:	4972      	ldr	r1, [pc, #456]	; (80067f4 <tcp_connect+0x220>)
 800662c:	486f      	ldr	r0, [pc, #444]	; (80067ec <tcp_connect+0x218>)
 800662e:	f008 f9a9 	bl	800e984 <iprintf>
 8006632:	f06f 0309 	mvn.w	r3, #9
 8006636:	e0d1      	b.n	80067dc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <tcp_connect+0x70>
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	e000      	b.n	8006646 <tcp_connect+0x72>
 8006644:	2300      	movs	r3, #0
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	88fa      	ldrh	r2, [r7, #6]
 800664e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	7a1b      	ldrb	r3, [r3, #8]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d006      	beq.n	8006666 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	7a1b      	ldrb	r3, [r3, #8]
 800665c:	4618      	mov	r0, r3
 800665e:	f7fe fd43 	bl	80050e8 <netif_get_by_index>
 8006662:	6278      	str	r0, [r7, #36]	; 0x24
 8006664:	e005      	b.n	8006672 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	3304      	adds	r3, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f006 ff3a 	bl	800d4e4 <ip4_route>
 8006670:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	2b00      	cmp	r3, #0
 8006676:	d102      	bne.n	800667e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8006678:	f06f 0303 	mvn.w	r3, #3
 800667c:	e0ae      	b.n	80067dc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d003      	beq.n	800668c <tcp_connect+0xb8>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d111      	bne.n	80066b0 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <tcp_connect+0xc4>
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	3304      	adds	r3, #4
 8006696:	e000      	b.n	800669a <tcp_connect+0xc6>
 8006698:	2300      	movs	r3, #0
 800669a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <tcp_connect+0xd4>
      return ERR_RTE;
 80066a2:	f06f 0303 	mvn.w	r3, #3
 80066a6:	e099      	b.n	80067dc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8adb      	ldrh	r3, [r3, #22]
 80066b4:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8adb      	ldrh	r3, [r3, #22]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d10c      	bne.n	80066d8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80066be:	f7ff ff43 	bl	8006548 <tcp_new_port>
 80066c2:	4603      	mov	r3, r0
 80066c4:	461a      	mov	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8adb      	ldrh	r3, [r3, #22]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d102      	bne.n	80066d8 <tcp_connect+0x104>
      return ERR_BUF;
 80066d2:	f06f 0301 	mvn.w	r3, #1
 80066d6:	e081      	b.n	80067dc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f001 f827 	bl	800772c <tcp_next_iss>
 80066de:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	1e5a      	subs	r2, r3, #1
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	1e5a      	subs	r2, r3, #1
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	1e5a      	subs	r2, r3, #1
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800670a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006722:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f44f 7206 	mov.w	r2, #536	; 0x218
 800672c:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3304      	adds	r3, #4
 8006736:	461a      	mov	r2, r3
 8006738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800673a:	f001 f81d 	bl	8007778 <tcp_eff_send_mss_netif>
 800673e:	4603      	mov	r3, r0
 8006740:	461a      	mov	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8006756:	2102      	movs	r1, #2
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f004 fa81 	bl	800ac60 <tcp_enqueue_flags>
 800675e:	4603      	mov	r3, r0
 8006760:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8006762:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d136      	bne.n	80067d8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2202      	movs	r2, #2
 800676e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8006770:	8b7b      	ldrh	r3, [r7, #26]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d021      	beq.n	80067ba <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8006776:	4b20      	ldr	r3, [pc, #128]	; (80067f8 <tcp_connect+0x224>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	429a      	cmp	r2, r3
 800677e:	d105      	bne.n	800678c <tcp_connect+0x1b8>
 8006780:	4b1d      	ldr	r3, [pc, #116]	; (80067f8 <tcp_connect+0x224>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	4a1c      	ldr	r2, [pc, #112]	; (80067f8 <tcp_connect+0x224>)
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	e013      	b.n	80067b4 <tcp_connect+0x1e0>
 800678c:	4b1a      	ldr	r3, [pc, #104]	; (80067f8 <tcp_connect+0x224>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	623b      	str	r3, [r7, #32]
 8006792:	e00c      	b.n	80067ae <tcp_connect+0x1da>
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	429a      	cmp	r2, r3
 800679c:	d104      	bne.n	80067a8 <tcp_connect+0x1d4>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68da      	ldr	r2, [r3, #12]
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	60da      	str	r2, [r3, #12]
 80067a6:	e005      	b.n	80067b4 <tcp_connect+0x1e0>
 80067a8:	6a3b      	ldr	r3, [r7, #32]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	623b      	str	r3, [r7, #32]
 80067ae:	6a3b      	ldr	r3, [r7, #32]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1ef      	bne.n	8006794 <tcp_connect+0x1c0>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80067ba:	4b10      	ldr	r3, [pc, #64]	; (80067fc <tcp_connect+0x228>)
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	60da      	str	r2, [r3, #12]
 80067c2:	4a0e      	ldr	r2, [pc, #56]	; (80067fc <tcp_connect+0x228>)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	f005 faae 	bl	800bd28 <tcp_timer_needed>
 80067cc:	4b0c      	ldr	r3, [pc, #48]	; (8006800 <tcp_connect+0x22c>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f004 fb32 	bl	800ae3c <tcp_output>
  }
  return ret;
 80067d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3728      	adds	r7, #40	; 0x28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	08010998 	.word	0x08010998
 80067e8:	08010c74 	.word	0x08010c74
 80067ec:	080109dc 	.word	0x080109dc
 80067f0:	08010c90 	.word	0x08010c90
 80067f4:	08010cac 	.word	0x08010cac
 80067f8:	200082b4 	.word	0x200082b4
 80067fc:	200082bc 	.word	0x200082bc
 8006800:	200082c4 	.word	0x200082c4

08006804 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8006804:	b5b0      	push	{r4, r5, r7, lr}
 8006806:	b090      	sub	sp, #64	; 0x40
 8006808:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8006810:	4b94      	ldr	r3, [pc, #592]	; (8006a64 <tcp_slowtmr+0x260>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	3301      	adds	r3, #1
 8006816:	4a93      	ldr	r2, [pc, #588]	; (8006a64 <tcp_slowtmr+0x260>)
 8006818:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800681a:	4b93      	ldr	r3, [pc, #588]	; (8006a68 <tcp_slowtmr+0x264>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	3301      	adds	r3, #1
 8006820:	b2da      	uxtb	r2, r3
 8006822:	4b91      	ldr	r3, [pc, #580]	; (8006a68 <tcp_slowtmr+0x264>)
 8006824:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800682a:	4b90      	ldr	r3, [pc, #576]	; (8006a6c <tcp_slowtmr+0x268>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8006830:	e29f      	b.n	8006d72 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	7d1b      	ldrb	r3, [r3, #20]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d106      	bne.n	8006848 <tcp_slowtmr+0x44>
 800683a:	4b8d      	ldr	r3, [pc, #564]	; (8006a70 <tcp_slowtmr+0x26c>)
 800683c:	f240 42be 	movw	r2, #1214	; 0x4be
 8006840:	498c      	ldr	r1, [pc, #560]	; (8006a74 <tcp_slowtmr+0x270>)
 8006842:	488d      	ldr	r0, [pc, #564]	; (8006a78 <tcp_slowtmr+0x274>)
 8006844:	f008 f89e 	bl	800e984 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	7d1b      	ldrb	r3, [r3, #20]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d106      	bne.n	800685e <tcp_slowtmr+0x5a>
 8006850:	4b87      	ldr	r3, [pc, #540]	; (8006a70 <tcp_slowtmr+0x26c>)
 8006852:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8006856:	4989      	ldr	r1, [pc, #548]	; (8006a7c <tcp_slowtmr+0x278>)
 8006858:	4887      	ldr	r0, [pc, #540]	; (8006a78 <tcp_slowtmr+0x274>)
 800685a:	f008 f893 	bl	800e984 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	7d1b      	ldrb	r3, [r3, #20]
 8006862:	2b0a      	cmp	r3, #10
 8006864:	d106      	bne.n	8006874 <tcp_slowtmr+0x70>
 8006866:	4b82      	ldr	r3, [pc, #520]	; (8006a70 <tcp_slowtmr+0x26c>)
 8006868:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800686c:	4984      	ldr	r1, [pc, #528]	; (8006a80 <tcp_slowtmr+0x27c>)
 800686e:	4882      	ldr	r0, [pc, #520]	; (8006a78 <tcp_slowtmr+0x274>)
 8006870:	f008 f888 	bl	800e984 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8006874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006876:	7f9a      	ldrb	r2, [r3, #30]
 8006878:	4b7b      	ldr	r3, [pc, #492]	; (8006a68 <tcp_slowtmr+0x264>)
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	429a      	cmp	r2, r3
 800687e:	d105      	bne.n	800688c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006882:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800688a:	e272      	b.n	8006d72 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800688c:	4b76      	ldr	r3, [pc, #472]	; (8006a68 <tcp_slowtmr+0x264>)
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800689a:	2300      	movs	r3, #0
 800689c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	7d1b      	ldrb	r3, [r3, #20]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d10a      	bne.n	80068be <tcp_slowtmr+0xba>
 80068a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068ae:	2b05      	cmp	r3, #5
 80068b0:	d905      	bls.n	80068be <tcp_slowtmr+0xba>
      ++pcb_remove;
 80068b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068b6:	3301      	adds	r3, #1
 80068b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068bc:	e11e      	b.n	8006afc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068c4:	2b0b      	cmp	r3, #11
 80068c6:	d905      	bls.n	80068d4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80068c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068cc:	3301      	adds	r3, #1
 80068ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068d2:	e113      	b.n	8006afc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80068d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068d6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d075      	beq.n	80069ca <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80068de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d006      	beq.n	80068f4 <tcp_slowtmr+0xf0>
 80068e6:	4b62      	ldr	r3, [pc, #392]	; (8006a70 <tcp_slowtmr+0x26c>)
 80068e8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80068ec:	4965      	ldr	r1, [pc, #404]	; (8006a84 <tcp_slowtmr+0x280>)
 80068ee:	4862      	ldr	r0, [pc, #392]	; (8006a78 <tcp_slowtmr+0x274>)
 80068f0:	f008 f848 	bl	800e984 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80068f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d106      	bne.n	800690a <tcp_slowtmr+0x106>
 80068fc:	4b5c      	ldr	r3, [pc, #368]	; (8006a70 <tcp_slowtmr+0x26c>)
 80068fe:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006902:	4961      	ldr	r1, [pc, #388]	; (8006a88 <tcp_slowtmr+0x284>)
 8006904:	485c      	ldr	r0, [pc, #368]	; (8006a78 <tcp_slowtmr+0x274>)
 8006906:	f008 f83d 	bl	800e984 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800690a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800690c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006910:	2b0b      	cmp	r3, #11
 8006912:	d905      	bls.n	8006920 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006918:	3301      	adds	r3, #1
 800691a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800691e:	e0ed      	b.n	8006afc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006922:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006926:	3b01      	subs	r3, #1
 8006928:	4a58      	ldr	r2, [pc, #352]	; (8006a8c <tcp_slowtmr+0x288>)
 800692a:	5cd3      	ldrb	r3, [r2, r3]
 800692c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800692e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006930:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006934:	7c7a      	ldrb	r2, [r7, #17]
 8006936:	429a      	cmp	r2, r3
 8006938:	d907      	bls.n	800694a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006940:	3301      	adds	r3, #1
 8006942:	b2da      	uxtb	r2, r3
 8006944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006946:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006950:	7c7a      	ldrb	r2, [r7, #17]
 8006952:	429a      	cmp	r2, r3
 8006954:	f200 80d2 	bhi.w	8006afc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006958:	2301      	movs	r3, #1
 800695a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800695c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006962:	2b00      	cmp	r3, #0
 8006964:	d108      	bne.n	8006978 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8006966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006968:	f005 f910 	bl	800bb8c <tcp_zero_window_probe>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d014      	beq.n	800699c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8006972:	2300      	movs	r3, #0
 8006974:	623b      	str	r3, [r7, #32]
 8006976:	e011      	b.n	800699c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800697e:	4619      	mov	r1, r3
 8006980:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006982:	f003 ffd5 	bl	800a930 <tcp_split_unsent_seg>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d107      	bne.n	800699c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800698c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800698e:	f004 fa55 	bl	800ae3c <tcp_output>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006998:	2300      	movs	r3, #0
 800699a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	f000 80ac 	beq.w	8006afc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80069ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80069b2:	2b06      	cmp	r3, #6
 80069b4:	f200 80a2 	bhi.w	8006afc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80069be:	3301      	adds	r3, #1
 80069c0:	b2da      	uxtb	r2, r3
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80069c8:	e098      	b.n	8006afc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	db0f      	blt.n	80069f4 <tcp_slowtmr+0x1f0>
 80069d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80069da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80069de:	4293      	cmp	r3, r2
 80069e0:	d008      	beq.n	80069f4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3301      	adds	r3, #1
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	b21a      	sxth	r2, r3
 80069f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80069f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006a00:	429a      	cmp	r2, r3
 8006a02:	db7b      	blt.n	8006afc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006a04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a06:	f004 fd0b 	bl	800b420 <tcp_rexmit_rto_prepare>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d007      	beq.n	8006a20 <tcp_slowtmr+0x21c>
 8006a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d171      	bne.n	8006afc <tcp_slowtmr+0x2f8>
 8006a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d06d      	beq.n	8006afc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a22:	7d1b      	ldrb	r3, [r3, #20]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d03a      	beq.n	8006a9e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a2e:	2b0c      	cmp	r3, #12
 8006a30:	bf28      	it	cs
 8006a32:	230c      	movcs	r3, #12
 8006a34:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006a3c:	10db      	asrs	r3, r3, #3
 8006a3e:	b21b      	sxth	r3, r3
 8006a40:	461a      	mov	r2, r3
 8006a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a44:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006a48:	4413      	add	r3, r2
 8006a4a:	7efa      	ldrb	r2, [r7, #27]
 8006a4c:	4910      	ldr	r1, [pc, #64]	; (8006a90 <tcp_slowtmr+0x28c>)
 8006a4e:	5c8a      	ldrb	r2, [r1, r2]
 8006a50:	4093      	lsls	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	dc1a      	bgt.n	8006a94 <tcp_slowtmr+0x290>
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	b21a      	sxth	r2, r3
 8006a62:	e019      	b.n	8006a98 <tcp_slowtmr+0x294>
 8006a64:	200082b0 	.word	0x200082b0
 8006a68:	200082c6 	.word	0x200082c6
 8006a6c:	200082bc 	.word	0x200082bc
 8006a70:	08010998 	.word	0x08010998
 8006a74:	08010cdc 	.word	0x08010cdc
 8006a78:	080109dc 	.word	0x080109dc
 8006a7c:	08010d08 	.word	0x08010d08
 8006a80:	08010d34 	.word	0x08010d34
 8006a84:	08010d64 	.word	0x08010d64
 8006a88:	08010d98 	.word	0x08010d98
 8006a8c:	08012968 	.word	0x08012968
 8006a90:	08012958 	.word	0x08012958
 8006a94:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8006aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	bf28      	it	cs
 8006ab4:	4613      	movcs	r3, r2
 8006ab6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006ab8:	8a7b      	ldrh	r3, [r7, #18]
 8006aba:	085b      	lsrs	r3, r3, #1
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d206      	bcs.n	8006ae4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8006ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ada:	005b      	lsls	r3, r3, #1
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ae6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8006af6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006af8:	f004 fd02 	bl	800b500 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afe:	7d1b      	ldrb	r3, [r3, #20]
 8006b00:	2b06      	cmp	r3, #6
 8006b02:	d111      	bne.n	8006b28 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b06:	8b5b      	ldrh	r3, [r3, #26]
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b10:	4b9d      	ldr	r3, [pc, #628]	; (8006d88 <tcp_slowtmr+0x584>)
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b28      	cmp	r3, #40	; 0x28
 8006b1c:	d904      	bls.n	8006b28 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b22:	3301      	adds	r3, #1
 8006b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	7a5b      	ldrb	r3, [r3, #9]
 8006b2c:	f003 0308 	and.w	r3, r3, #8
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d04c      	beq.n	8006bce <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006b38:	2b04      	cmp	r3, #4
 8006b3a:	d003      	beq.n	8006b44 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006b40:	2b07      	cmp	r3, #7
 8006b42:	d144      	bne.n	8006bce <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b44:	4b90      	ldr	r3, [pc, #576]	; (8006d88 <tcp_slowtmr+0x584>)
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b54:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006b58:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006b5c:	498b      	ldr	r1, [pc, #556]	; (8006d8c <tcp_slowtmr+0x588>)
 8006b5e:	fba1 1303 	umull	r1, r3, r1, r3
 8006b62:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d90a      	bls.n	8006b7e <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8006b72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006b76:	3301      	adds	r3, #1
 8006b78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b7c:	e027      	b.n	8006bce <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006b7e:	4b82      	ldr	r3, [pc, #520]	; (8006d88 <tcp_slowtmr+0x584>)
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b90:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006b94:	4618      	mov	r0, r3
 8006b96:	4b7e      	ldr	r3, [pc, #504]	; (8006d90 <tcp_slowtmr+0x58c>)
 8006b98:	fb00 f303 	mul.w	r3, r0, r3
 8006b9c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006b9e:	497b      	ldr	r1, [pc, #492]	; (8006d8c <tcp_slowtmr+0x588>)
 8006ba0:	fba1 1303 	umull	r1, r3, r1, r3
 8006ba4:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d911      	bls.n	8006bce <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006baa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bac:	f004 ffae 	bl	800bb0c <tcp_keepalive>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8006bb6:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d107      	bne.n	8006bce <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc0:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bca:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d011      	beq.n	8006bfa <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8006bd6:	4b6c      	ldr	r3, [pc, #432]	; (8006d88 <tcp_slowtmr+0x584>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bdc:	6a1b      	ldr	r3, [r3, #32]
 8006bde:	1ad2      	subs	r2, r2, r3
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006be6:	4619      	mov	r1, r3
 8006be8:	460b      	mov	r3, r1
 8006bea:	005b      	lsls	r3, r3, #1
 8006bec:	440b      	add	r3, r1
 8006bee:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d302      	bcc.n	8006bfa <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006bf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bf6:	f000 fe69 	bl	80078cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	7d1b      	ldrb	r3, [r3, #20]
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d10b      	bne.n	8006c1a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006c02:	4b61      	ldr	r3, [pc, #388]	; (8006d88 <tcp_slowtmr+0x584>)
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b28      	cmp	r3, #40	; 0x28
 8006c0e:	d904      	bls.n	8006c1a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c14:	3301      	adds	r3, #1
 8006c16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8006c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1c:	7d1b      	ldrb	r3, [r3, #20]
 8006c1e:	2b09      	cmp	r3, #9
 8006c20:	d10b      	bne.n	8006c3a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006c22:	4b59      	ldr	r3, [pc, #356]	; (8006d88 <tcp_slowtmr+0x584>)
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	2bf0      	cmp	r3, #240	; 0xf0
 8006c2e:	d904      	bls.n	8006c3a <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c34:	3301      	adds	r3, #1
 8006c36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d060      	beq.n	8006d04 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c48:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006c4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006c4c:	f000 fc8a 	bl	8007564 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d010      	beq.n	8006c78 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006c56:	4b4f      	ldr	r3, [pc, #316]	; (8006d94 <tcp_slowtmr+0x590>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d106      	bne.n	8006c6e <tcp_slowtmr+0x46a>
 8006c60:	4b4d      	ldr	r3, [pc, #308]	; (8006d98 <tcp_slowtmr+0x594>)
 8006c62:	f240 526d 	movw	r2, #1389	; 0x56d
 8006c66:	494d      	ldr	r1, [pc, #308]	; (8006d9c <tcp_slowtmr+0x598>)
 8006c68:	484d      	ldr	r0, [pc, #308]	; (8006da0 <tcp_slowtmr+0x59c>)
 8006c6a:	f007 fe8b 	bl	800e984 <iprintf>
        prev->next = pcb->next;
 8006c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	60da      	str	r2, [r3, #12]
 8006c76:	e00f      	b.n	8006c98 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006c78:	4b46      	ldr	r3, [pc, #280]	; (8006d94 <tcp_slowtmr+0x590>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d006      	beq.n	8006c90 <tcp_slowtmr+0x48c>
 8006c82:	4b45      	ldr	r3, [pc, #276]	; (8006d98 <tcp_slowtmr+0x594>)
 8006c84:	f240 5271 	movw	r2, #1393	; 0x571
 8006c88:	4946      	ldr	r1, [pc, #280]	; (8006da4 <tcp_slowtmr+0x5a0>)
 8006c8a:	4845      	ldr	r0, [pc, #276]	; (8006da0 <tcp_slowtmr+0x59c>)
 8006c8c:	f007 fe7a 	bl	800e984 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4a3f      	ldr	r2, [pc, #252]	; (8006d94 <tcp_slowtmr+0x590>)
 8006c96:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006c98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d013      	beq.n	8006cc8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006ca8:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	3304      	adds	r3, #4
 8006cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cb0:	8ad2      	ldrh	r2, [r2, #22]
 8006cb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cb4:	8b09      	ldrh	r1, [r1, #24]
 8006cb6:	9102      	str	r1, [sp, #8]
 8006cb8:	9201      	str	r2, [sp, #4]
 8006cba:	9300      	str	r3, [sp, #0]
 8006cbc:	462b      	mov	r3, r5
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	4601      	mov	r1, r0
 8006cc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006cc4:	f004 fe6e 	bl	800b9a4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd0:	7d1b      	ldrb	r3, [r3, #20]
 8006cd2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006cde:	6838      	ldr	r0, [r7, #0]
 8006ce0:	f7ff f894 	bl	8005e0c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006ce4:	4b30      	ldr	r3, [pc, #192]	; (8006da8 <tcp_slowtmr+0x5a4>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <tcp_slowtmr+0x4f6>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f06f 010c 	mvn.w	r1, #12
 8006cf6:	68b8      	ldr	r0, [r7, #8]
 8006cf8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006cfa:	4b2b      	ldr	r3, [pc, #172]	; (8006da8 <tcp_slowtmr+0x5a4>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d037      	beq.n	8006d72 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006d02:	e590      	b.n	8006826 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	7f1b      	ldrb	r3, [r3, #28]
 8006d12:	3301      	adds	r3, #1
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d18:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	7f1a      	ldrb	r2, [r3, #28]
 8006d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d20:	7f5b      	ldrb	r3, [r3, #29]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d325      	bcc.n	8006d72 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	2200      	movs	r2, #0
 8006d2a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006d2c:	4b1e      	ldr	r3, [pc, #120]	; (8006da8 <tcp_slowtmr+0x5a4>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <tcp_slowtmr+0x550>
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d44:	6912      	ldr	r2, [r2, #16]
 8006d46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4798      	blx	r3
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006d52:	e002      	b.n	8006d5a <tcp_slowtmr+0x556>
 8006d54:	2300      	movs	r3, #0
 8006d56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006d5a:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <tcp_slowtmr+0x5a4>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d000      	beq.n	8006d64 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006d62:	e560      	b.n	8006826 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006d64:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d102      	bne.n	8006d72 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6e:	f004 f865 	bl	800ae3c <tcp_output>
  while (pcb != NULL) {
 8006d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f47f ad5c 	bne.w	8006832 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006d7e:	4b0b      	ldr	r3, [pc, #44]	; (8006dac <tcp_slowtmr+0x5a8>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006d84:	e067      	b.n	8006e56 <tcp_slowtmr+0x652>
 8006d86:	bf00      	nop
 8006d88:	200082b0 	.word	0x200082b0
 8006d8c:	10624dd3 	.word	0x10624dd3
 8006d90:	000124f8 	.word	0x000124f8
 8006d94:	200082bc 	.word	0x200082bc
 8006d98:	08010998 	.word	0x08010998
 8006d9c:	08010dd0 	.word	0x08010dd0
 8006da0:	080109dc 	.word	0x080109dc
 8006da4:	08010dfc 	.word	0x08010dfc
 8006da8:	200082c4 	.word	0x200082c4
 8006dac:	200082c0 	.word	0x200082c0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	7d1b      	ldrb	r3, [r3, #20]
 8006db4:	2b0a      	cmp	r3, #10
 8006db6:	d006      	beq.n	8006dc6 <tcp_slowtmr+0x5c2>
 8006db8:	4b2b      	ldr	r3, [pc, #172]	; (8006e68 <tcp_slowtmr+0x664>)
 8006dba:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006dbe:	492b      	ldr	r1, [pc, #172]	; (8006e6c <tcp_slowtmr+0x668>)
 8006dc0:	482b      	ldr	r0, [pc, #172]	; (8006e70 <tcp_slowtmr+0x66c>)
 8006dc2:	f007 fddf 	bl	800e984 <iprintf>
    pcb_remove = 0;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006dcc:	4b29      	ldr	r3, [pc, #164]	; (8006e74 <tcp_slowtmr+0x670>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2bf0      	cmp	r3, #240	; 0xf0
 8006dd8:	d904      	bls.n	8006de4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006dde:	3301      	adds	r3, #1
 8006de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006de4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d02f      	beq.n	8006e4c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006dec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dee:	f000 fbb9 	bl	8007564 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d010      	beq.n	8006e1a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006df8:	4b1f      	ldr	r3, [pc, #124]	; (8006e78 <tcp_slowtmr+0x674>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d106      	bne.n	8006e10 <tcp_slowtmr+0x60c>
 8006e02:	4b19      	ldr	r3, [pc, #100]	; (8006e68 <tcp_slowtmr+0x664>)
 8006e04:	f240 52af 	movw	r2, #1455	; 0x5af
 8006e08:	491c      	ldr	r1, [pc, #112]	; (8006e7c <tcp_slowtmr+0x678>)
 8006e0a:	4819      	ldr	r0, [pc, #100]	; (8006e70 <tcp_slowtmr+0x66c>)
 8006e0c:	f007 fdba 	bl	800e984 <iprintf>
        prev->next = pcb->next;
 8006e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	60da      	str	r2, [r3, #12]
 8006e18:	e00f      	b.n	8006e3a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006e1a:	4b17      	ldr	r3, [pc, #92]	; (8006e78 <tcp_slowtmr+0x674>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d006      	beq.n	8006e32 <tcp_slowtmr+0x62e>
 8006e24:	4b10      	ldr	r3, [pc, #64]	; (8006e68 <tcp_slowtmr+0x664>)
 8006e26:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006e2a:	4915      	ldr	r1, [pc, #84]	; (8006e80 <tcp_slowtmr+0x67c>)
 8006e2c:	4810      	ldr	r0, [pc, #64]	; (8006e70 <tcp_slowtmr+0x66c>)
 8006e2e:	f007 fda9 	bl	800e984 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	4a10      	ldr	r2, [pc, #64]	; (8006e78 <tcp_slowtmr+0x674>)
 8006e38:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e3c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006e44:	69f8      	ldr	r0, [r7, #28]
 8006e46:	f7fe ffe1 	bl	8005e0c <tcp_free>
 8006e4a:	e004      	b.n	8006e56 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e4e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1a9      	bne.n	8006db0 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	3730      	adds	r7, #48	; 0x30
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bdb0      	pop	{r4, r5, r7, pc}
 8006e66:	bf00      	nop
 8006e68:	08010998 	.word	0x08010998
 8006e6c:	08010e28 	.word	0x08010e28
 8006e70:	080109dc 	.word	0x080109dc
 8006e74:	200082b0 	.word	0x200082b0
 8006e78:	200082c0 	.word	0x200082c0
 8006e7c:	08010e58 	.word	0x08010e58
 8006e80:	08010e80 	.word	0x08010e80

08006e84 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006e8a:	4b2d      	ldr	r3, [pc, #180]	; (8006f40 <tcp_fasttmr+0xbc>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	b2da      	uxtb	r2, r3
 8006e92:	4b2b      	ldr	r3, [pc, #172]	; (8006f40 <tcp_fasttmr+0xbc>)
 8006e94:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006e96:	4b2b      	ldr	r3, [pc, #172]	; (8006f44 <tcp_fasttmr+0xc0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006e9c:	e048      	b.n	8006f30 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7f9a      	ldrb	r2, [r3, #30]
 8006ea2:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <tcp_fasttmr+0xbc>)
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d03f      	beq.n	8006f2a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006eaa:	4b25      	ldr	r3, [pc, #148]	; (8006f40 <tcp_fasttmr+0xbc>)
 8006eac:	781a      	ldrb	r2, [r3, #0]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	8b5b      	ldrh	r3, [r3, #26]
 8006eb6:	f003 0301 	and.w	r3, r3, #1
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d010      	beq.n	8006ee0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	8b5b      	ldrh	r3, [r3, #26]
 8006ec2:	f043 0302 	orr.w	r3, r3, #2
 8006ec6:	b29a      	uxth	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f003 ffb5 	bl	800ae3c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	8b5b      	ldrh	r3, [r3, #26]
 8006ed6:	f023 0303 	bic.w	r3, r3, #3
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	8b5b      	ldrh	r3, [r3, #26]
 8006ee4:	f003 0308 	and.w	r3, r3, #8
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d009      	beq.n	8006f00 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	8b5b      	ldrh	r3, [r3, #26]
 8006ef0:	f023 0308 	bic.w	r3, r3, #8
 8006ef4:	b29a      	uxth	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7ff f91a 	bl	8006134 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006f0e:	4b0e      	ldr	r3, [pc, #56]	; (8006f48 <tcp_fasttmr+0xc4>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f819 	bl	8006f4c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <tcp_fasttmr+0xc4>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d000      	beq.n	8006f24 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006f22:	e7b8      	b.n	8006e96 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	607b      	str	r3, [r7, #4]
 8006f28:	e002      	b.n	8006f30 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1b3      	bne.n	8006e9e <tcp_fasttmr+0x1a>
    }
  }
}
 8006f36:	bf00      	nop
 8006f38:	bf00      	nop
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	200082c6 	.word	0x200082c6
 8006f44:	200082bc 	.word	0x200082bc
 8006f48:	200082c4 	.word	0x200082c4

08006f4c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006f4c:	b590      	push	{r4, r7, lr}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d109      	bne.n	8006f6e <tcp_process_refused_data+0x22>
 8006f5a:	4b37      	ldr	r3, [pc, #220]	; (8007038 <tcp_process_refused_data+0xec>)
 8006f5c:	f240 6209 	movw	r2, #1545	; 0x609
 8006f60:	4936      	ldr	r1, [pc, #216]	; (800703c <tcp_process_refused_data+0xf0>)
 8006f62:	4837      	ldr	r0, [pc, #220]	; (8007040 <tcp_process_refused_data+0xf4>)
 8006f64:	f007 fd0e 	bl	800e984 <iprintf>
 8006f68:	f06f 030f 	mvn.w	r3, #15
 8006f6c:	e060      	b.n	8007030 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f72:	7b5b      	ldrb	r3, [r3, #13]
 8006f74:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f7a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <tcp_process_refused_data+0x58>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6918      	ldr	r0, [r3, #16]
 8006f96:	2300      	movs	r3, #0
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	47a0      	blx	r4
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73fb      	strb	r3, [r7, #15]
 8006fa2:	e007      	b.n	8006fb4 <tcp_process_refused_data+0x68>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	2000      	movs	r0, #0
 8006fac:	f000 f8a4 	bl	80070f8 <tcp_recv_null>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d12a      	bne.n	8007012 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d033      	beq.n	800702e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006fce:	d005      	beq.n	8006fdc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00b      	beq.n	8006ffe <tcp_process_refused_data+0xb2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6918      	ldr	r0, [r3, #16]
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	6879      	ldr	r1, [r7, #4]
 8006ff6:	47a0      	blx	r4
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
 8006ffc:	e001      	b.n	8007002 <tcp_process_refused_data+0xb6>
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8007002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007006:	f113 0f0d 	cmn.w	r3, #13
 800700a:	d110      	bne.n	800702e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800700c:	f06f 030c 	mvn.w	r3, #12
 8007010:	e00e      	b.n	8007030 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8007012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007016:	f113 0f0d 	cmn.w	r3, #13
 800701a:	d102      	bne.n	8007022 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800701c:	f06f 030c 	mvn.w	r3, #12
 8007020:	e006      	b.n	8007030 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8007028:	f06f 0304 	mvn.w	r3, #4
 800702c:	e000      	b.n	8007030 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	bd90      	pop	{r4, r7, pc}
 8007038:	08010998 	.word	0x08010998
 800703c:	08010ea8 	.word	0x08010ea8
 8007040:	080109dc 	.word	0x080109dc

08007044 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800704c:	e007      	b.n	800705e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f80a 	bl	800706e <tcp_seg_free>
    seg = next;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1f4      	bne.n	800704e <tcp_segs_free+0xa>
  }
}
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}

0800706e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b082      	sub	sp, #8
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00c      	beq.n	8007096 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	4618      	mov	r0, r3
 800708a:	f7fe fb8d 	bl	80057a8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800708e:	6879      	ldr	r1, [r7, #4]
 8007090:	2003      	movs	r0, #3
 8007092:	f7fd fd13 	bl	8004abc <memp_free>
  }
}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
	...

080070a0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d106      	bne.n	80070bc <tcp_seg_copy+0x1c>
 80070ae:	4b0f      	ldr	r3, [pc, #60]	; (80070ec <tcp_seg_copy+0x4c>)
 80070b0:	f240 6282 	movw	r2, #1666	; 0x682
 80070b4:	490e      	ldr	r1, [pc, #56]	; (80070f0 <tcp_seg_copy+0x50>)
 80070b6:	480f      	ldr	r0, [pc, #60]	; (80070f4 <tcp_seg_copy+0x54>)
 80070b8:	f007 fc64 	bl	800e984 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80070bc:	2003      	movs	r0, #3
 80070be:	f7fd fc8d 	bl	80049dc <memp_malloc>
 80070c2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <tcp_seg_copy+0x2e>
    return NULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	e00a      	b.n	80070e4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80070ce:	2210      	movs	r2, #16
 80070d0:	6879      	ldr	r1, [r7, #4]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f007 fc26 	bl	800e924 <memcpy>
  pbuf_ref(cseg->p);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe fc03 	bl	80058e8 <pbuf_ref>
  return cseg;
 80070e2:	68fb      	ldr	r3, [r7, #12]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	08010998 	.word	0x08010998
 80070f0:	08010eec 	.word	0x08010eec
 80070f4:	080109dc 	.word	0x080109dc

080070f8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60f8      	str	r0, [r7, #12]
 8007100:	60b9      	str	r1, [r7, #8]
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d109      	bne.n	8007120 <tcp_recv_null+0x28>
 800710c:	4b12      	ldr	r3, [pc, #72]	; (8007158 <tcp_recv_null+0x60>)
 800710e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8007112:	4912      	ldr	r1, [pc, #72]	; (800715c <tcp_recv_null+0x64>)
 8007114:	4812      	ldr	r0, [pc, #72]	; (8007160 <tcp_recv_null+0x68>)
 8007116:	f007 fc35 	bl	800e984 <iprintf>
 800711a:	f06f 030f 	mvn.w	r3, #15
 800711e:	e016      	b.n	800714e <tcp_recv_null+0x56>

  if (p != NULL) {
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d009      	beq.n	800713a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	891b      	ldrh	r3, [r3, #8]
 800712a:	4619      	mov	r1, r3
 800712c:	68b8      	ldr	r0, [r7, #8]
 800712e:	f7ff f9bb 	bl	80064a8 <tcp_recved>
    pbuf_free(p);
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7fe fb38 	bl	80057a8 <pbuf_free>
 8007138:	e008      	b.n	800714c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800713a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d104      	bne.n	800714c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8007142:	68b8      	ldr	r0, [r7, #8]
 8007144:	f7ff f860 	bl	8006208 <tcp_close>
 8007148:	4603      	mov	r3, r0
 800714a:	e000      	b.n	800714e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	08010998 	.word	0x08010998
 800715c:	08010f08 	.word	0x08010f08
 8007160:	080109dc 	.word	0x080109dc

08007164 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800716e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007172:	2b00      	cmp	r3, #0
 8007174:	db01      	blt.n	800717a <tcp_kill_prio+0x16>
 8007176:	79fb      	ldrb	r3, [r7, #7]
 8007178:	e000      	b.n	800717c <tcp_kill_prio+0x18>
 800717a:	237f      	movs	r3, #127	; 0x7f
 800717c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800717e:	7afb      	ldrb	r3, [r7, #11]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d034      	beq.n	80071ee <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8007184:	7afb      	ldrb	r3, [r7, #11]
 8007186:	3b01      	subs	r3, #1
 8007188:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800718a:	2300      	movs	r3, #0
 800718c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800718e:	2300      	movs	r3, #0
 8007190:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007192:	4b19      	ldr	r3, [pc, #100]	; (80071f8 <tcp_kill_prio+0x94>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	617b      	str	r3, [r7, #20]
 8007198:	e01f      	b.n	80071da <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	7d5b      	ldrb	r3, [r3, #21]
 800719e:	7afa      	ldrb	r2, [r7, #11]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d80c      	bhi.n	80071be <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80071a8:	7afa      	ldrb	r2, [r7, #11]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d112      	bne.n	80071d4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80071ae:	4b13      	ldr	r3, [pc, #76]	; (80071fc <tcp_kill_prio+0x98>)
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	6a1b      	ldr	r3, [r3, #32]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d80a      	bhi.n	80071d4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80071be:	4b0f      	ldr	r3, [pc, #60]	; (80071fc <tcp_kill_prio+0x98>)
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	7d5b      	ldrb	r3, [r3, #21]
 80071d2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	617b      	str	r3, [r7, #20]
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1dc      	bne.n	800719a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d004      	beq.n	80071f0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80071e6:	6938      	ldr	r0, [r7, #16]
 80071e8:	f7ff f8f8 	bl	80063dc <tcp_abort>
 80071ec:	e000      	b.n	80071f0 <tcp_kill_prio+0x8c>
    return;
 80071ee:	bf00      	nop
  }
}
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	200082bc 	.word	0x200082bc
 80071fc:	200082b0 	.word	0x200082b0

08007200 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	4603      	mov	r3, r0
 8007208:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800720a:	79fb      	ldrb	r3, [r7, #7]
 800720c:	2b08      	cmp	r3, #8
 800720e:	d009      	beq.n	8007224 <tcp_kill_state+0x24>
 8007210:	79fb      	ldrb	r3, [r7, #7]
 8007212:	2b09      	cmp	r3, #9
 8007214:	d006      	beq.n	8007224 <tcp_kill_state+0x24>
 8007216:	4b1a      	ldr	r3, [pc, #104]	; (8007280 <tcp_kill_state+0x80>)
 8007218:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800721c:	4919      	ldr	r1, [pc, #100]	; (8007284 <tcp_kill_state+0x84>)
 800721e:	481a      	ldr	r0, [pc, #104]	; (8007288 <tcp_kill_state+0x88>)
 8007220:	f007 fbb0 	bl	800e984 <iprintf>

  inactivity = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007228:	2300      	movs	r3, #0
 800722a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800722c:	4b17      	ldr	r3, [pc, #92]	; (800728c <tcp_kill_state+0x8c>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	e017      	b.n	8007264 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	7d1b      	ldrb	r3, [r3, #20]
 8007238:	79fa      	ldrb	r2, [r7, #7]
 800723a:	429a      	cmp	r2, r3
 800723c:	d10f      	bne.n	800725e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800723e:	4b14      	ldr	r3, [pc, #80]	; (8007290 <tcp_kill_state+0x90>)
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	429a      	cmp	r2, r3
 800724c:	d807      	bhi.n	800725e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800724e:	4b10      	ldr	r3, [pc, #64]	; (8007290 <tcp_kill_state+0x90>)
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	617b      	str	r3, [r7, #20]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e4      	bne.n	8007234 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d003      	beq.n	8007278 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8007270:	2100      	movs	r1, #0
 8007272:	6938      	ldr	r0, [r7, #16]
 8007274:	f7fe fff4 	bl	8006260 <tcp_abandon>
  }
}
 8007278:	bf00      	nop
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	08010998 	.word	0x08010998
 8007284:	08010f24 	.word	0x08010f24
 8007288:	080109dc 	.word	0x080109dc
 800728c:	200082bc 	.word	0x200082bc
 8007290:	200082b0 	.word	0x200082b0

08007294 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800729a:	2300      	movs	r3, #0
 800729c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800729e:	2300      	movs	r3, #0
 80072a0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80072a2:	4b12      	ldr	r3, [pc, #72]	; (80072ec <tcp_kill_timewait+0x58>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	e012      	b.n	80072d0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80072aa:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <tcp_kill_timewait+0x5c>)
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a1b      	ldr	r3, [r3, #32]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d807      	bhi.n	80072ca <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80072ba:	4b0d      	ldr	r3, [pc, #52]	; (80072f0 <tcp_kill_timewait+0x5c>)
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e9      	bne.n	80072aa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d002      	beq.n	80072e2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80072dc:	68b8      	ldr	r0, [r7, #8]
 80072de:	f7ff f87d 	bl	80063dc <tcp_abort>
  }
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	200082c0 	.word	0x200082c0
 80072f0:	200082b0 	.word	0x200082b0

080072f4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80072fa:	4b10      	ldr	r3, [pc, #64]	; (800733c <tcp_handle_closepend+0x48>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007300:	e014      	b.n	800732c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	8b5b      	ldrh	r3, [r3, #26]
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b00      	cmp	r3, #0
 8007312:	d009      	beq.n	8007328 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	8b5b      	ldrh	r3, [r3, #26]
 8007318:	f023 0308 	bic.w	r3, r3, #8
 800731c:	b29a      	uxth	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7fe ff06 	bl	8006134 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1e7      	bne.n	8007302 <tcp_handle_closepend+0xe>
  }
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	200082bc 	.word	0x200082bc

08007340 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800734a:	2001      	movs	r0, #1
 800734c:	f7fd fb46 	bl	80049dc <memp_malloc>
 8007350:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d126      	bne.n	80073a6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007358:	f7ff ffcc 	bl	80072f4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800735c:	f7ff ff9a 	bl	8007294 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007360:	2001      	movs	r0, #1
 8007362:	f7fd fb3b 	bl	80049dc <memp_malloc>
 8007366:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d11b      	bne.n	80073a6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800736e:	2009      	movs	r0, #9
 8007370:	f7ff ff46 	bl	8007200 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007374:	2001      	movs	r0, #1
 8007376:	f7fd fb31 	bl	80049dc <memp_malloc>
 800737a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d111      	bne.n	80073a6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8007382:	2008      	movs	r0, #8
 8007384:	f7ff ff3c 	bl	8007200 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007388:	2001      	movs	r0, #1
 800738a:	f7fd fb27 	bl	80049dc <memp_malloc>
 800738e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d107      	bne.n	80073a6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007396:	79fb      	ldrb	r3, [r7, #7]
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff fee3 	bl	8007164 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800739e:	2001      	movs	r0, #1
 80073a0:	f7fd fb1c 	bl	80049dc <memp_malloc>
 80073a4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d03f      	beq.n	800742c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80073ac:	229c      	movs	r2, #156	; 0x9c
 80073ae:	2100      	movs	r1, #0
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f007 fadf 	bl	800e974 <memset>
    pcb->prio = prio;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	79fa      	ldrb	r2, [r7, #7]
 80073ba:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80073c2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80073cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	22ff      	movs	r2, #255	; 0xff
 80073da:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f44f 7206 	mov.w	r2, #536	; 0x218
 80073e2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2206      	movs	r2, #6
 80073e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2206      	movs	r2, #6
 80073f0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073f8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007402:	4b0d      	ldr	r3, [pc, #52]	; (8007438 <tcp_alloc+0xf8>)
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800740a:	4b0c      	ldr	r3, [pc, #48]	; (800743c <tcp_alloc+0xfc>)
 800740c:	781a      	ldrb	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007418:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4a08      	ldr	r2, [pc, #32]	; (8007440 <tcp_alloc+0x100>)
 8007420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4a07      	ldr	r2, [pc, #28]	; (8007444 <tcp_alloc+0x104>)
 8007428:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800742c:	68fb      	ldr	r3, [r7, #12]
}
 800742e:	4618      	mov	r0, r3
 8007430:	3710      	adds	r7, #16
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	200082b0 	.word	0x200082b0
 800743c:	200082c6 	.word	0x200082c6
 8007440:	080070f9 	.word	0x080070f9
 8007444:	006ddd00 	.word	0x006ddd00

08007448 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800744c:	2040      	movs	r0, #64	; 0x40
 800744e:	f7ff ff77 	bl	8007340 <tcp_alloc>
 8007452:	4603      	mov	r3, r0
}
 8007454:	4618      	mov	r0, r3
 8007456:	bd80      	pop	{r7, pc}

08007458 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	611a      	str	r2, [r3, #16]
  }
}
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
	...

0800747c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00e      	beq.n	80074aa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	7d1b      	ldrb	r3, [r3, #20]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d106      	bne.n	80074a2 <tcp_recv+0x26>
 8007494:	4b07      	ldr	r3, [pc, #28]	; (80074b4 <tcp_recv+0x38>)
 8007496:	f240 72df 	movw	r2, #2015	; 0x7df
 800749a:	4907      	ldr	r1, [pc, #28]	; (80074b8 <tcp_recv+0x3c>)
 800749c:	4807      	ldr	r0, [pc, #28]	; (80074bc <tcp_recv+0x40>)
 800749e:	f007 fa71 	bl	800e984 <iprintf>
    pcb->recv = recv;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	08010998 	.word	0x08010998
 80074b8:	08010f34 	.word	0x08010f34
 80074bc:	080109dc 	.word	0x080109dc

080074c0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00e      	beq.n	80074ee <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	7d1b      	ldrb	r3, [r3, #20]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d106      	bne.n	80074e6 <tcp_sent+0x26>
 80074d8:	4b07      	ldr	r3, [pc, #28]	; (80074f8 <tcp_sent+0x38>)
 80074da:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80074de:	4907      	ldr	r1, [pc, #28]	; (80074fc <tcp_sent+0x3c>)
 80074e0:	4807      	ldr	r0, [pc, #28]	; (8007500 <tcp_sent+0x40>)
 80074e2:	f007 fa4f 	bl	800e984 <iprintf>
    pcb->sent = sent;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80074ee:	bf00      	nop
 80074f0:	3708      	adds	r7, #8
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	08010998 	.word	0x08010998
 80074fc:	08010f5c 	.word	0x08010f5c
 8007500:	080109dc 	.word	0x080109dc

08007504 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d107      	bne.n	8007528 <tcp_poll+0x24>
 8007518:	4b0e      	ldr	r3, [pc, #56]	; (8007554 <tcp_poll+0x50>)
 800751a:	f640 023d 	movw	r2, #2109	; 0x83d
 800751e:	490e      	ldr	r1, [pc, #56]	; (8007558 <tcp_poll+0x54>)
 8007520:	480e      	ldr	r0, [pc, #56]	; (800755c <tcp_poll+0x58>)
 8007522:	f007 fa2f 	bl	800e984 <iprintf>
 8007526:	e011      	b.n	800754c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	7d1b      	ldrb	r3, [r3, #20]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d106      	bne.n	800753e <tcp_poll+0x3a>
 8007530:	4b08      	ldr	r3, [pc, #32]	; (8007554 <tcp_poll+0x50>)
 8007532:	f640 023e 	movw	r2, #2110	; 0x83e
 8007536:	490a      	ldr	r1, [pc, #40]	; (8007560 <tcp_poll+0x5c>)
 8007538:	4808      	ldr	r0, [pc, #32]	; (800755c <tcp_poll+0x58>)
 800753a:	f007 fa23 	bl	800e984 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	79fa      	ldrb	r2, [r7, #7]
 800754a:	775a      	strb	r2, [r3, #29]
}
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	08010998 	.word	0x08010998
 8007558:	08010fac 	.word	0x08010fac
 800755c:	080109dc 	.word	0x080109dc
 8007560:	08010fc4 	.word	0x08010fc4

08007564 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d107      	bne.n	8007582 <tcp_pcb_purge+0x1e>
 8007572:	4b21      	ldr	r3, [pc, #132]	; (80075f8 <tcp_pcb_purge+0x94>)
 8007574:	f640 0251 	movw	r2, #2129	; 0x851
 8007578:	4920      	ldr	r1, [pc, #128]	; (80075fc <tcp_pcb_purge+0x98>)
 800757a:	4821      	ldr	r0, [pc, #132]	; (8007600 <tcp_pcb_purge+0x9c>)
 800757c:	f007 fa02 	bl	800e984 <iprintf>
 8007580:	e037      	b.n	80075f2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	7d1b      	ldrb	r3, [r3, #20]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d033      	beq.n	80075f2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800758e:	2b0a      	cmp	r3, #10
 8007590:	d02f      	beq.n	80075f2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8007596:	2b01      	cmp	r3, #1
 8007598:	d02b      	beq.n	80075f2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d007      	beq.n	80075b2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fe f8fe 	bl	80057a8 <pbuf_free>
      pcb->refused_data = NULL;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 f986 	bl	80078cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075c6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7ff fd39 	bl	8007044 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fd34 	bl	8007044 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	08010998 	.word	0x08010998
 80075fc:	08010fe4 	.word	0x08010fe4
 8007600:	080109dc 	.word	0x080109dc

08007604 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d106      	bne.n	8007622 <tcp_pcb_remove+0x1e>
 8007614:	4b3e      	ldr	r3, [pc, #248]	; (8007710 <tcp_pcb_remove+0x10c>)
 8007616:	f640 0283 	movw	r2, #2179	; 0x883
 800761a:	493e      	ldr	r1, [pc, #248]	; (8007714 <tcp_pcb_remove+0x110>)
 800761c:	483e      	ldr	r0, [pc, #248]	; (8007718 <tcp_pcb_remove+0x114>)
 800761e:	f007 f9b1 	bl	800e984 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d106      	bne.n	8007636 <tcp_pcb_remove+0x32>
 8007628:	4b39      	ldr	r3, [pc, #228]	; (8007710 <tcp_pcb_remove+0x10c>)
 800762a:	f640 0284 	movw	r2, #2180	; 0x884
 800762e:	493b      	ldr	r1, [pc, #236]	; (800771c <tcp_pcb_remove+0x118>)
 8007630:	4839      	ldr	r0, [pc, #228]	; (8007718 <tcp_pcb_remove+0x114>)
 8007632:	f007 f9a7 	bl	800e984 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	429a      	cmp	r2, r3
 800763e:	d105      	bne.n	800764c <tcp_pcb_remove+0x48>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	601a      	str	r2, [r3, #0]
 800764a:	e013      	b.n	8007674 <tcp_pcb_remove+0x70>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	60fb      	str	r3, [r7, #12]
 8007652:	e00c      	b.n	800766e <tcp_pcb_remove+0x6a>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	429a      	cmp	r2, r3
 800765c:	d104      	bne.n	8007668 <tcp_pcb_remove+0x64>
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	60da      	str	r2, [r3, #12]
 8007666:	e005      	b.n	8007674 <tcp_pcb_remove+0x70>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1ef      	bne.n	8007654 <tcp_pcb_remove+0x50>
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2200      	movs	r2, #0
 8007678:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800767a:	6838      	ldr	r0, [r7, #0]
 800767c:	f7ff ff72 	bl	8007564 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	7d1b      	ldrb	r3, [r3, #20]
 8007684:	2b0a      	cmp	r3, #10
 8007686:	d013      	beq.n	80076b0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800768c:	2b01      	cmp	r3, #1
 800768e:	d00f      	beq.n	80076b0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	8b5b      	ldrh	r3, [r3, #26]
 8007694:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8007698:	2b00      	cmp	r3, #0
 800769a:	d009      	beq.n	80076b0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	8b5b      	ldrh	r3, [r3, #26]
 80076a0:	f043 0302 	orr.w	r3, r3, #2
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80076aa:	6838      	ldr	r0, [r7, #0]
 80076ac:	f003 fbc6 	bl	800ae3c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	7d1b      	ldrb	r3, [r3, #20]
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d020      	beq.n	80076fa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d006      	beq.n	80076ce <tcp_pcb_remove+0xca>
 80076c0:	4b13      	ldr	r3, [pc, #76]	; (8007710 <tcp_pcb_remove+0x10c>)
 80076c2:	f640 0293 	movw	r2, #2195	; 0x893
 80076c6:	4916      	ldr	r1, [pc, #88]	; (8007720 <tcp_pcb_remove+0x11c>)
 80076c8:	4813      	ldr	r0, [pc, #76]	; (8007718 <tcp_pcb_remove+0x114>)
 80076ca:	f007 f95b 	bl	800e984 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d006      	beq.n	80076e4 <tcp_pcb_remove+0xe0>
 80076d6:	4b0e      	ldr	r3, [pc, #56]	; (8007710 <tcp_pcb_remove+0x10c>)
 80076d8:	f640 0294 	movw	r2, #2196	; 0x894
 80076dc:	4911      	ldr	r1, [pc, #68]	; (8007724 <tcp_pcb_remove+0x120>)
 80076de:	480e      	ldr	r0, [pc, #56]	; (8007718 <tcp_pcb_remove+0x114>)
 80076e0:	f007 f950 	bl	800e984 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d006      	beq.n	80076fa <tcp_pcb_remove+0xf6>
 80076ec:	4b08      	ldr	r3, [pc, #32]	; (8007710 <tcp_pcb_remove+0x10c>)
 80076ee:	f640 0296 	movw	r2, #2198	; 0x896
 80076f2:	490d      	ldr	r1, [pc, #52]	; (8007728 <tcp_pcb_remove+0x124>)
 80076f4:	4808      	ldr	r0, [pc, #32]	; (8007718 <tcp_pcb_remove+0x114>)
 80076f6:	f007 f945 	bl	800e984 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2200      	movs	r2, #0
 80076fe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	2200      	movs	r2, #0
 8007704:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007706:	bf00      	nop
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	08010998 	.word	0x08010998
 8007714:	08011000 	.word	0x08011000
 8007718:	080109dc 	.word	0x080109dc
 800771c:	0801101c 	.word	0x0801101c
 8007720:	0801103c 	.word	0x0801103c
 8007724:	08011054 	.word	0x08011054
 8007728:	08011070 	.word	0x08011070

0800772c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d106      	bne.n	8007748 <tcp_next_iss+0x1c>
 800773a:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <tcp_next_iss+0x38>)
 800773c:	f640 02af 	movw	r2, #2223	; 0x8af
 8007740:	4909      	ldr	r1, [pc, #36]	; (8007768 <tcp_next_iss+0x3c>)
 8007742:	480a      	ldr	r0, [pc, #40]	; (800776c <tcp_next_iss+0x40>)
 8007744:	f007 f91e 	bl	800e984 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007748:	4b09      	ldr	r3, [pc, #36]	; (8007770 <tcp_next_iss+0x44>)
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	4b09      	ldr	r3, [pc, #36]	; (8007774 <tcp_next_iss+0x48>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4413      	add	r3, r2
 8007752:	4a07      	ldr	r2, [pc, #28]	; (8007770 <tcp_next_iss+0x44>)
 8007754:	6013      	str	r3, [r2, #0]
  return iss;
 8007756:	4b06      	ldr	r3, [pc, #24]	; (8007770 <tcp_next_iss+0x44>)
 8007758:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	08010998 	.word	0x08010998
 8007768:	08011088 	.word	0x08011088
 800776c:	080109dc 	.word	0x080109dc
 8007770:	20000024 	.word	0x20000024
 8007774:	200082b0 	.word	0x200082b0

08007778 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d106      	bne.n	800779a <tcp_eff_send_mss_netif+0x22>
 800778c:	4b14      	ldr	r3, [pc, #80]	; (80077e0 <tcp_eff_send_mss_netif+0x68>)
 800778e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8007792:	4914      	ldr	r1, [pc, #80]	; (80077e4 <tcp_eff_send_mss_netif+0x6c>)
 8007794:	4814      	ldr	r0, [pc, #80]	; (80077e8 <tcp_eff_send_mss_netif+0x70>)
 8007796:	f007 f8f5 	bl	800e984 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80077a0:	89fb      	ldrh	r3, [r7, #14]
 80077a2:	e019      	b.n	80077d8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80077a8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80077aa:	8afb      	ldrh	r3, [r7, #22]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d012      	beq.n	80077d6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80077b0:	2328      	movs	r3, #40	; 0x28
 80077b2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80077b4:	8afa      	ldrh	r2, [r7, #22]
 80077b6:	8abb      	ldrh	r3, [r7, #20]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d904      	bls.n	80077c6 <tcp_eff_send_mss_netif+0x4e>
 80077bc:	8afa      	ldrh	r2, [r7, #22]
 80077be:	8abb      	ldrh	r3, [r7, #20]
 80077c0:	1ad3      	subs	r3, r2, r3
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	e000      	b.n	80077c8 <tcp_eff_send_mss_netif+0x50>
 80077c6:	2300      	movs	r3, #0
 80077c8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80077ca:	8a7a      	ldrh	r2, [r7, #18]
 80077cc:	89fb      	ldrh	r3, [r7, #14]
 80077ce:	4293      	cmp	r3, r2
 80077d0:	bf28      	it	cs
 80077d2:	4613      	movcs	r3, r2
 80077d4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80077d6:	89fb      	ldrh	r3, [r7, #14]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	08010998 	.word	0x08010998
 80077e4:	080110a4 	.word	0x080110a4
 80077e8:	080109dc 	.word	0x080109dc

080077ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d119      	bne.n	8007834 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007800:	4b10      	ldr	r3, [pc, #64]	; (8007844 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007802:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007806:	4910      	ldr	r1, [pc, #64]	; (8007848 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007808:	4810      	ldr	r0, [pc, #64]	; (800784c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800780a:	f007 f8bb 	bl	800e984 <iprintf>

  while (pcb != NULL) {
 800780e:	e011      	b.n	8007834 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d108      	bne.n	800782e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f7fe fdda 	bl	80063dc <tcp_abort>
      pcb = next;
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	e002      	b.n	8007834 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1ea      	bne.n	8007810 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800783a:	bf00      	nop
 800783c:	bf00      	nop
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	08010998 	.word	0x08010998
 8007848:	080110cc 	.word	0x080110cc
 800784c:	080109dc 	.word	0x080109dc

08007850 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d02a      	beq.n	80078b6 <tcp_netif_ip_addr_changed+0x66>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d026      	beq.n	80078b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007868:	4b15      	ldr	r3, [pc, #84]	; (80078c0 <tcp_netif_ip_addr_changed+0x70>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7ff ffbc 	bl	80077ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007874:	4b13      	ldr	r3, [pc, #76]	; (80078c4 <tcp_netif_ip_addr_changed+0x74>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7ff ffb6 	bl	80077ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d017      	beq.n	80078b6 <tcp_netif_ip_addr_changed+0x66>
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d013      	beq.n	80078b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800788e:	4b0e      	ldr	r3, [pc, #56]	; (80078c8 <tcp_netif_ip_addr_changed+0x78>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	e00c      	b.n	80078b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d103      	bne.n	80078aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	681a      	ldr	r2, [r3, #0]
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	60fb      	str	r3, [r7, #12]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1ef      	bne.n	8007896 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80078b6:	bf00      	nop
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	200082bc 	.word	0x200082bc
 80078c4:	200082b4 	.word	0x200082b4
 80078c8:	200082b8 	.word	0x200082b8

080078cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d007      	beq.n	80078ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7ff fbaf 	bl	8007044 <tcp_segs_free>
    pcb->ooseq = NULL;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80078f4:	b590      	push	{r4, r7, lr}
 80078f6:	b08d      	sub	sp, #52	; 0x34
 80078f8:	af04      	add	r7, sp, #16
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d105      	bne.n	8007910 <tcp_input+0x1c>
 8007904:	4b9b      	ldr	r3, [pc, #620]	; (8007b74 <tcp_input+0x280>)
 8007906:	2283      	movs	r2, #131	; 0x83
 8007908:	499b      	ldr	r1, [pc, #620]	; (8007b78 <tcp_input+0x284>)
 800790a:	489c      	ldr	r0, [pc, #624]	; (8007b7c <tcp_input+0x288>)
 800790c:	f007 f83a 	bl	800e984 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	4a9a      	ldr	r2, [pc, #616]	; (8007b80 <tcp_input+0x28c>)
 8007916:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	895b      	ldrh	r3, [r3, #10]
 800791c:	2b13      	cmp	r3, #19
 800791e:	f240 83d1 	bls.w	80080c4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007922:	4b98      	ldr	r3, [pc, #608]	; (8007b84 <tcp_input+0x290>)
 8007924:	695b      	ldr	r3, [r3, #20]
 8007926:	4a97      	ldr	r2, [pc, #604]	; (8007b84 <tcp_input+0x290>)
 8007928:	6812      	ldr	r2, [r2, #0]
 800792a:	4611      	mov	r1, r2
 800792c:	4618      	mov	r0, r3
 800792e:	f006 f86f 	bl	800da10 <ip4_addr_isbroadcast_u32>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	f040 83c7 	bne.w	80080c8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800793a:	4b92      	ldr	r3, [pc, #584]	; (8007b84 <tcp_input+0x290>)
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007942:	2be0      	cmp	r3, #224	; 0xe0
 8007944:	f000 83c0 	beq.w	80080c8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007948:	4b8d      	ldr	r3, [pc, #564]	; (8007b80 <tcp_input+0x28c>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	899b      	ldrh	r3, [r3, #12]
 800794e:	b29b      	uxth	r3, r3
 8007950:	4618      	mov	r0, r3
 8007952:	f7fc fbcb 	bl	80040ec <lwip_htons>
 8007956:	4603      	mov	r3, r0
 8007958:	0b1b      	lsrs	r3, r3, #12
 800795a:	b29b      	uxth	r3, r3
 800795c:	b2db      	uxtb	r3, r3
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8007962:	7cbb      	ldrb	r3, [r7, #18]
 8007964:	2b13      	cmp	r3, #19
 8007966:	f240 83b1 	bls.w	80080cc <tcp_input+0x7d8>
 800796a:	7cbb      	ldrb	r3, [r7, #18]
 800796c:	b29a      	uxth	r2, r3
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	891b      	ldrh	r3, [r3, #8]
 8007972:	429a      	cmp	r2, r3
 8007974:	f200 83aa 	bhi.w	80080cc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8007978:	7cbb      	ldrb	r3, [r7, #18]
 800797a:	b29b      	uxth	r3, r3
 800797c:	3b14      	subs	r3, #20
 800797e:	b29a      	uxth	r2, r3
 8007980:	4b81      	ldr	r3, [pc, #516]	; (8007b88 <tcp_input+0x294>)
 8007982:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8007984:	4b81      	ldr	r3, [pc, #516]	; (8007b8c <tcp_input+0x298>)
 8007986:	2200      	movs	r2, #0
 8007988:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	895a      	ldrh	r2, [r3, #10]
 800798e:	7cbb      	ldrb	r3, [r7, #18]
 8007990:	b29b      	uxth	r3, r3
 8007992:	429a      	cmp	r2, r3
 8007994:	d309      	bcc.n	80079aa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8007996:	4b7c      	ldr	r3, [pc, #496]	; (8007b88 <tcp_input+0x294>)
 8007998:	881a      	ldrh	r2, [r3, #0]
 800799a:	4b7d      	ldr	r3, [pc, #500]	; (8007b90 <tcp_input+0x29c>)
 800799c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800799e:	7cbb      	ldrb	r3, [r7, #18]
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7fd fe7a 	bl	800569c <pbuf_remove_header>
 80079a8:	e04e      	b.n	8007a48 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d105      	bne.n	80079be <tcp_input+0xca>
 80079b2:	4b70      	ldr	r3, [pc, #448]	; (8007b74 <tcp_input+0x280>)
 80079b4:	22c2      	movs	r2, #194	; 0xc2
 80079b6:	4977      	ldr	r1, [pc, #476]	; (8007b94 <tcp_input+0x2a0>)
 80079b8:	4870      	ldr	r0, [pc, #448]	; (8007b7c <tcp_input+0x288>)
 80079ba:	f006 ffe3 	bl	800e984 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80079be:	2114      	movs	r1, #20
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7fd fe6b 	bl	800569c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	895a      	ldrh	r2, [r3, #10]
 80079ca:	4b71      	ldr	r3, [pc, #452]	; (8007b90 <tcp_input+0x29c>)
 80079cc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80079ce:	4b6e      	ldr	r3, [pc, #440]	; (8007b88 <tcp_input+0x294>)
 80079d0:	881a      	ldrh	r2, [r3, #0]
 80079d2:	4b6f      	ldr	r3, [pc, #444]	; (8007b90 <tcp_input+0x29c>)
 80079d4:	881b      	ldrh	r3, [r3, #0]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80079da:	4b6d      	ldr	r3, [pc, #436]	; (8007b90 <tcp_input+0x29c>)
 80079dc:	881b      	ldrh	r3, [r3, #0]
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7fd fe5b 	bl	800569c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	895b      	ldrh	r3, [r3, #10]
 80079ec:	8a3a      	ldrh	r2, [r7, #16]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	f200 836e 	bhi.w	80080d0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	4a64      	ldr	r2, [pc, #400]	; (8007b8c <tcp_input+0x298>)
 80079fc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	8a3a      	ldrh	r2, [r7, #16]
 8007a04:	4611      	mov	r1, r2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fd fe48 	bl	800569c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	891a      	ldrh	r2, [r3, #8]
 8007a10:	8a3b      	ldrh	r3, [r7, #16]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	895b      	ldrh	r3, [r3, #10]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <tcp_input+0x13a>
 8007a22:	4b54      	ldr	r3, [pc, #336]	; (8007b74 <tcp_input+0x280>)
 8007a24:	22df      	movs	r2, #223	; 0xdf
 8007a26:	495c      	ldr	r1, [pc, #368]	; (8007b98 <tcp_input+0x2a4>)
 8007a28:	4854      	ldr	r0, [pc, #336]	; (8007b7c <tcp_input+0x288>)
 8007a2a:	f006 ffab 	bl	800e984 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	891a      	ldrh	r2, [r3, #8]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	891b      	ldrh	r3, [r3, #8]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d005      	beq.n	8007a48 <tcp_input+0x154>
 8007a3c:	4b4d      	ldr	r3, [pc, #308]	; (8007b74 <tcp_input+0x280>)
 8007a3e:	22e0      	movs	r2, #224	; 0xe0
 8007a40:	4956      	ldr	r1, [pc, #344]	; (8007b9c <tcp_input+0x2a8>)
 8007a42:	484e      	ldr	r0, [pc, #312]	; (8007b7c <tcp_input+0x288>)
 8007a44:	f006 ff9e 	bl	800e984 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007a48:	4b4d      	ldr	r3, [pc, #308]	; (8007b80 <tcp_input+0x28c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	4a4b      	ldr	r2, [pc, #300]	; (8007b80 <tcp_input+0x28c>)
 8007a52:	6814      	ldr	r4, [r2, #0]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fc fb49 	bl	80040ec <lwip_htons>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8007a5e:	4b48      	ldr	r3, [pc, #288]	; (8007b80 <tcp_input+0x28c>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	885b      	ldrh	r3, [r3, #2]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	4a46      	ldr	r2, [pc, #280]	; (8007b80 <tcp_input+0x28c>)
 8007a68:	6814      	ldr	r4, [r2, #0]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fc fb3e 	bl	80040ec <lwip_htons>
 8007a70:	4603      	mov	r3, r0
 8007a72:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007a74:	4b42      	ldr	r3, [pc, #264]	; (8007b80 <tcp_input+0x28c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	4a41      	ldr	r2, [pc, #260]	; (8007b80 <tcp_input+0x28c>)
 8007a7c:	6814      	ldr	r4, [r2, #0]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fc fb49 	bl	8004116 <lwip_htonl>
 8007a84:	4603      	mov	r3, r0
 8007a86:	6063      	str	r3, [r4, #4]
 8007a88:	6863      	ldr	r3, [r4, #4]
 8007a8a:	4a45      	ldr	r2, [pc, #276]	; (8007ba0 <tcp_input+0x2ac>)
 8007a8c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8007a8e:	4b3c      	ldr	r3, [pc, #240]	; (8007b80 <tcp_input+0x28c>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	4a3a      	ldr	r2, [pc, #232]	; (8007b80 <tcp_input+0x28c>)
 8007a96:	6814      	ldr	r4, [r2, #0]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fc fb3c 	bl	8004116 <lwip_htonl>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	60a3      	str	r3, [r4, #8]
 8007aa2:	68a3      	ldr	r3, [r4, #8]
 8007aa4:	4a3f      	ldr	r2, [pc, #252]	; (8007ba4 <tcp_input+0x2b0>)
 8007aa6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8007aa8:	4b35      	ldr	r3, [pc, #212]	; (8007b80 <tcp_input+0x28c>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	89db      	ldrh	r3, [r3, #14]
 8007aae:	b29b      	uxth	r3, r3
 8007ab0:	4a33      	ldr	r2, [pc, #204]	; (8007b80 <tcp_input+0x28c>)
 8007ab2:	6814      	ldr	r4, [r2, #0]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fc fb19 	bl	80040ec <lwip_htons>
 8007aba:	4603      	mov	r3, r0
 8007abc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8007abe:	4b30      	ldr	r3, [pc, #192]	; (8007b80 <tcp_input+0x28c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	899b      	ldrh	r3, [r3, #12]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fc fb10 	bl	80040ec <lwip_htons>
 8007acc:	4603      	mov	r3, r0
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	4b34      	ldr	r3, [pc, #208]	; (8007ba8 <tcp_input+0x2b4>)
 8007ad8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	891a      	ldrh	r2, [r3, #8]
 8007ade:	4b33      	ldr	r3, [pc, #204]	; (8007bac <tcp_input+0x2b8>)
 8007ae0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007ae2:	4b31      	ldr	r3, [pc, #196]	; (8007ba8 <tcp_input+0x2b4>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00c      	beq.n	8007b08 <tcp_input+0x214>
    tcplen++;
 8007aee:	4b2f      	ldr	r3, [pc, #188]	; (8007bac <tcp_input+0x2b8>)
 8007af0:	881b      	ldrh	r3, [r3, #0]
 8007af2:	3301      	adds	r3, #1
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	4b2d      	ldr	r3, [pc, #180]	; (8007bac <tcp_input+0x2b8>)
 8007af8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	891a      	ldrh	r2, [r3, #8]
 8007afe:	4b2b      	ldr	r3, [pc, #172]	; (8007bac <tcp_input+0x2b8>)
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	f200 82e6 	bhi.w	80080d4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b0c:	4b28      	ldr	r3, [pc, #160]	; (8007bb0 <tcp_input+0x2bc>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	61fb      	str	r3, [r7, #28]
 8007b12:	e09d      	b.n	8007c50 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	7d1b      	ldrb	r3, [r3, #20]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d105      	bne.n	8007b28 <tcp_input+0x234>
 8007b1c:	4b15      	ldr	r3, [pc, #84]	; (8007b74 <tcp_input+0x280>)
 8007b1e:	22fb      	movs	r2, #251	; 0xfb
 8007b20:	4924      	ldr	r1, [pc, #144]	; (8007bb4 <tcp_input+0x2c0>)
 8007b22:	4816      	ldr	r0, [pc, #88]	; (8007b7c <tcp_input+0x288>)
 8007b24:	f006 ff2e 	bl	800e984 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	7d1b      	ldrb	r3, [r3, #20]
 8007b2c:	2b0a      	cmp	r3, #10
 8007b2e:	d105      	bne.n	8007b3c <tcp_input+0x248>
 8007b30:	4b10      	ldr	r3, [pc, #64]	; (8007b74 <tcp_input+0x280>)
 8007b32:	22fc      	movs	r2, #252	; 0xfc
 8007b34:	4920      	ldr	r1, [pc, #128]	; (8007bb8 <tcp_input+0x2c4>)
 8007b36:	4811      	ldr	r0, [pc, #68]	; (8007b7c <tcp_input+0x288>)
 8007b38:	f006 ff24 	bl	800e984 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	7d1b      	ldrb	r3, [r3, #20]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d105      	bne.n	8007b50 <tcp_input+0x25c>
 8007b44:	4b0b      	ldr	r3, [pc, #44]	; (8007b74 <tcp_input+0x280>)
 8007b46:	22fd      	movs	r2, #253	; 0xfd
 8007b48:	491c      	ldr	r1, [pc, #112]	; (8007bbc <tcp_input+0x2c8>)
 8007b4a:	480c      	ldr	r0, [pc, #48]	; (8007b7c <tcp_input+0x288>)
 8007b4c:	f006 ff1a 	bl	800e984 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	7a1b      	ldrb	r3, [r3, #8]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d033      	beq.n	8007bc0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	7a1a      	ldrb	r2, [r3, #8]
 8007b5c:	4b09      	ldr	r3, [pc, #36]	; (8007b84 <tcp_input+0x290>)
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007b64:	3301      	adds	r3, #1
 8007b66:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d029      	beq.n	8007bc0 <tcp_input+0x2cc>
      prev = pcb;
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	61bb      	str	r3, [r7, #24]
      continue;
 8007b70:	e06b      	b.n	8007c4a <tcp_input+0x356>
 8007b72:	bf00      	nop
 8007b74:	08011100 	.word	0x08011100
 8007b78:	08011134 	.word	0x08011134
 8007b7c:	0801114c 	.word	0x0801114c
 8007b80:	200082d8 	.word	0x200082d8
 8007b84:	20004d40 	.word	0x20004d40
 8007b88:	200082dc 	.word	0x200082dc
 8007b8c:	200082e0 	.word	0x200082e0
 8007b90:	200082de 	.word	0x200082de
 8007b94:	08011174 	.word	0x08011174
 8007b98:	08011184 	.word	0x08011184
 8007b9c:	08011190 	.word	0x08011190
 8007ba0:	200082e8 	.word	0x200082e8
 8007ba4:	200082ec 	.word	0x200082ec
 8007ba8:	200082f4 	.word	0x200082f4
 8007bac:	200082f2 	.word	0x200082f2
 8007bb0:	200082bc 	.word	0x200082bc
 8007bb4:	080111b0 	.word	0x080111b0
 8007bb8:	080111d8 	.word	0x080111d8
 8007bbc:	08011204 	.word	0x08011204
    }

    if (pcb->remote_port == tcphdr->src &&
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	8b1a      	ldrh	r2, [r3, #24]
 8007bc4:	4b72      	ldr	r3, [pc, #456]	; (8007d90 <tcp_input+0x49c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d13a      	bne.n	8007c46 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	8ada      	ldrh	r2, [r3, #22]
 8007bd4:	4b6e      	ldr	r3, [pc, #440]	; (8007d90 <tcp_input+0x49c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	885b      	ldrh	r3, [r3, #2]
 8007bda:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d132      	bne.n	8007c46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	685a      	ldr	r2, [r3, #4]
 8007be4:	4b6b      	ldr	r3, [pc, #428]	; (8007d94 <tcp_input+0x4a0>)
 8007be6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d12c      	bne.n	8007c46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	4b68      	ldr	r3, [pc, #416]	; (8007d94 <tcp_input+0x4a0>)
 8007bf2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d126      	bne.n	8007c46 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	69fa      	ldr	r2, [r7, #28]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d106      	bne.n	8007c10 <tcp_input+0x31c>
 8007c02:	4b65      	ldr	r3, [pc, #404]	; (8007d98 <tcp_input+0x4a4>)
 8007c04:	f240 120d 	movw	r2, #269	; 0x10d
 8007c08:	4964      	ldr	r1, [pc, #400]	; (8007d9c <tcp_input+0x4a8>)
 8007c0a:	4865      	ldr	r0, [pc, #404]	; (8007da0 <tcp_input+0x4ac>)
 8007c0c:	f006 feba 	bl	800e984 <iprintf>
      if (prev != NULL) {
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d00a      	beq.n	8007c2c <tcp_input+0x338>
        prev->next = pcb->next;
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	68da      	ldr	r2, [r3, #12]
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007c1e:	4b61      	ldr	r3, [pc, #388]	; (8007da4 <tcp_input+0x4b0>)
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007c26:	4a5f      	ldr	r2, [pc, #380]	; (8007da4 <tcp_input+0x4b0>)
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	69fa      	ldr	r2, [r7, #28]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d111      	bne.n	8007c5a <tcp_input+0x366>
 8007c36:	4b58      	ldr	r3, [pc, #352]	; (8007d98 <tcp_input+0x4a4>)
 8007c38:	f240 1215 	movw	r2, #277	; 0x115
 8007c3c:	495a      	ldr	r1, [pc, #360]	; (8007da8 <tcp_input+0x4b4>)
 8007c3e:	4858      	ldr	r0, [pc, #352]	; (8007da0 <tcp_input+0x4ac>)
 8007c40:	f006 fea0 	bl	800e984 <iprintf>
      break;
 8007c44:	e009      	b.n	8007c5a <tcp_input+0x366>
    }
    prev = pcb;
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	61fb      	str	r3, [r7, #28]
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f47f af5e 	bne.w	8007b14 <tcp_input+0x220>
 8007c58:	e000      	b.n	8007c5c <tcp_input+0x368>
      break;
 8007c5a:	bf00      	nop
  }

  if (pcb == NULL) {
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f040 80aa 	bne.w	8007db8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007c64:	4b51      	ldr	r3, [pc, #324]	; (8007dac <tcp_input+0x4b8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	61fb      	str	r3, [r7, #28]
 8007c6a:	e03f      	b.n	8007cec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	7d1b      	ldrb	r3, [r3, #20]
 8007c70:	2b0a      	cmp	r3, #10
 8007c72:	d006      	beq.n	8007c82 <tcp_input+0x38e>
 8007c74:	4b48      	ldr	r3, [pc, #288]	; (8007d98 <tcp_input+0x4a4>)
 8007c76:	f240 121f 	movw	r2, #287	; 0x11f
 8007c7a:	494d      	ldr	r1, [pc, #308]	; (8007db0 <tcp_input+0x4bc>)
 8007c7c:	4848      	ldr	r0, [pc, #288]	; (8007da0 <tcp_input+0x4ac>)
 8007c7e:	f006 fe81 	bl	800e984 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c82:	69fb      	ldr	r3, [r7, #28]
 8007c84:	7a1b      	ldrb	r3, [r3, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d009      	beq.n	8007c9e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	7a1a      	ldrb	r2, [r3, #8]
 8007c8e:	4b41      	ldr	r3, [pc, #260]	; (8007d94 <tcp_input+0x4a0>)
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c96:	3301      	adds	r3, #1
 8007c98:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d122      	bne.n	8007ce4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	8b1a      	ldrh	r2, [r3, #24]
 8007ca2:	4b3b      	ldr	r3, [pc, #236]	; (8007d90 <tcp_input+0x49c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	881b      	ldrh	r3, [r3, #0]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d11b      	bne.n	8007ce6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	8ada      	ldrh	r2, [r3, #22]
 8007cb2:	4b37      	ldr	r3, [pc, #220]	; (8007d90 <tcp_input+0x49c>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	885b      	ldrh	r3, [r3, #2]
 8007cb8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d113      	bne.n	8007ce6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	685a      	ldr	r2, [r3, #4]
 8007cc2:	4b34      	ldr	r3, [pc, #208]	; (8007d94 <tcp_input+0x4a0>)
 8007cc4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d10d      	bne.n	8007ce6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	4b31      	ldr	r3, [pc, #196]	; (8007d94 <tcp_input+0x4a0>)
 8007cd0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d107      	bne.n	8007ce6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007cd6:	69f8      	ldr	r0, [r7, #28]
 8007cd8:	f000 fb56 	bl	8008388 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f7fd fd63 	bl	80057a8 <pbuf_free>
        return;
 8007ce2:	e1fd      	b.n	80080e0 <tcp_input+0x7ec>
        continue;
 8007ce4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	61fb      	str	r3, [r7, #28]
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1bc      	bne.n	8007c6c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007cf6:	4b2f      	ldr	r3, [pc, #188]	; (8007db4 <tcp_input+0x4c0>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	e02a      	b.n	8007d54 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	7a1b      	ldrb	r3, [r3, #8]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00c      	beq.n	8007d20 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	7a1a      	ldrb	r2, [r3, #8]
 8007d0a:	4b22      	ldr	r3, [pc, #136]	; (8007d94 <tcp_input+0x4a0>)
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d12:	3301      	adds	r3, #1
 8007d14:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d002      	beq.n	8007d20 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	61bb      	str	r3, [r7, #24]
        continue;
 8007d1e:	e016      	b.n	8007d4e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	8ada      	ldrh	r2, [r3, #22]
 8007d24:	4b1a      	ldr	r3, [pc, #104]	; (8007d90 <tcp_input+0x49c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	885b      	ldrh	r3, [r3, #2]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d10c      	bne.n	8007d4a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	4b17      	ldr	r3, [pc, #92]	; (8007d94 <tcp_input+0x4a0>)
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d00f      	beq.n	8007d5c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00d      	beq.n	8007d5e <tcp_input+0x46a>
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d009      	beq.n	8007d5e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1d1      	bne.n	8007cfe <tcp_input+0x40a>
 8007d5a:	e000      	b.n	8007d5e <tcp_input+0x46a>
            break;
 8007d5c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d029      	beq.n	8007db8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	68da      	ldr	r2, [r3, #12]
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007d72:	4b10      	ldr	r3, [pc, #64]	; (8007db4 <tcp_input+0x4c0>)
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007d7a:	4a0e      	ldr	r2, [pc, #56]	; (8007db4 <tcp_input+0x4c0>)
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007d80:	6978      	ldr	r0, [r7, #20]
 8007d82:	f000 fa03 	bl	800818c <tcp_listen_input>
      }
      pbuf_free(p);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7fd fd0e 	bl	80057a8 <pbuf_free>
      return;
 8007d8c:	e1a8      	b.n	80080e0 <tcp_input+0x7ec>
 8007d8e:	bf00      	nop
 8007d90:	200082d8 	.word	0x200082d8
 8007d94:	20004d40 	.word	0x20004d40
 8007d98:	08011100 	.word	0x08011100
 8007d9c:	0801122c 	.word	0x0801122c
 8007da0:	0801114c 	.word	0x0801114c
 8007da4:	200082bc 	.word	0x200082bc
 8007da8:	08011258 	.word	0x08011258
 8007dac:	200082c0 	.word	0x200082c0
 8007db0:	08011284 	.word	0x08011284
 8007db4:	200082b8 	.word	0x200082b8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 8158 	beq.w	8008070 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007dc0:	4b95      	ldr	r3, [pc, #596]	; (8008018 <tcp_input+0x724>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	891a      	ldrh	r2, [r3, #8]
 8007dca:	4b93      	ldr	r3, [pc, #588]	; (8008018 <tcp_input+0x724>)
 8007dcc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007dce:	4a92      	ldr	r2, [pc, #584]	; (8008018 <tcp_input+0x724>)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007dd4:	4b91      	ldr	r3, [pc, #580]	; (800801c <tcp_input+0x728>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a8f      	ldr	r2, [pc, #572]	; (8008018 <tcp_input+0x724>)
 8007dda:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007ddc:	4b90      	ldr	r3, [pc, #576]	; (8008020 <tcp_input+0x72c>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007de2:	4b90      	ldr	r3, [pc, #576]	; (8008024 <tcp_input+0x730>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007de8:	4b8f      	ldr	r3, [pc, #572]	; (8008028 <tcp_input+0x734>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007dee:	4b8f      	ldr	r3, [pc, #572]	; (800802c <tcp_input+0x738>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	f003 0308 	and.w	r3, r3, #8
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d006      	beq.n	8007e08 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	7b5b      	ldrb	r3, [r3, #13]
 8007dfe:	f043 0301 	orr.w	r3, r3, #1
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d017      	beq.n	8007e40 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007e10:	69f8      	ldr	r0, [r7, #28]
 8007e12:	f7ff f89b 	bl	8006f4c <tcp_process_refused_data>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f113 0f0d 	cmn.w	r3, #13
 8007e1c:	d007      	beq.n	8007e2e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007e1e:	69fb      	ldr	r3, [r7, #28]
 8007e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00c      	beq.n	8007e40 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007e26:	4b82      	ldr	r3, [pc, #520]	; (8008030 <tcp_input+0x73c>)
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d008      	beq.n	8007e40 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007e2e:	69fb      	ldr	r3, [r7, #28]
 8007e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f040 80e3 	bne.w	8007ffe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007e38:	69f8      	ldr	r0, [r7, #28]
 8007e3a:	f003 fe05 	bl	800ba48 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007e3e:	e0de      	b.n	8007ffe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8007e40:	4a7c      	ldr	r2, [pc, #496]	; (8008034 <tcp_input+0x740>)
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007e46:	69f8      	ldr	r0, [r7, #28]
 8007e48:	f000 fb18 	bl	800847c <tcp_process>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007e50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e54:	f113 0f0d 	cmn.w	r3, #13
 8007e58:	f000 80d3 	beq.w	8008002 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8007e5c:	4b71      	ldr	r3, [pc, #452]	; (8008024 <tcp_input+0x730>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	f003 0308 	and.w	r3, r3, #8
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d015      	beq.n	8007e94 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d008      	beq.n	8007e84 <tcp_input+0x590>
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e78:	69fa      	ldr	r2, [r7, #28]
 8007e7a:	6912      	ldr	r2, [r2, #16]
 8007e7c:	f06f 010d 	mvn.w	r1, #13
 8007e80:	4610      	mov	r0, r2
 8007e82:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007e84:	69f9      	ldr	r1, [r7, #28]
 8007e86:	486c      	ldr	r0, [pc, #432]	; (8008038 <tcp_input+0x744>)
 8007e88:	f7ff fbbc 	bl	8007604 <tcp_pcb_remove>
        tcp_free(pcb);
 8007e8c:	69f8      	ldr	r0, [r7, #28]
 8007e8e:	f7fd ffbd 	bl	8005e0c <tcp_free>
 8007e92:	e0da      	b.n	800804a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8007e94:	2300      	movs	r3, #0
 8007e96:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007e98:	4b63      	ldr	r3, [pc, #396]	; (8008028 <tcp_input+0x734>)
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d01d      	beq.n	8007edc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007ea0:	4b61      	ldr	r3, [pc, #388]	; (8008028 <tcp_input+0x734>)
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00a      	beq.n	8007ec6 <tcp_input+0x5d2>
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eb6:	69fa      	ldr	r2, [r7, #28]
 8007eb8:	6910      	ldr	r0, [r2, #16]
 8007eba:	89fa      	ldrh	r2, [r7, #14]
 8007ebc:	69f9      	ldr	r1, [r7, #28]
 8007ebe:	4798      	blx	r3
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	74fb      	strb	r3, [r7, #19]
 8007ec4:	e001      	b.n	8007eca <tcp_input+0x5d6>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007eca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007ece:	f113 0f0d 	cmn.w	r3, #13
 8007ed2:	f000 8098 	beq.w	8008006 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007ed6:	4b54      	ldr	r3, [pc, #336]	; (8008028 <tcp_input+0x734>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007edc:	69f8      	ldr	r0, [r7, #28]
 8007ede:	f000 f915 	bl	800810c <tcp_input_delayed_close>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f040 8090 	bne.w	800800a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007eea:	4b4d      	ldr	r3, [pc, #308]	; (8008020 <tcp_input+0x72c>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d041      	beq.n	8007f76 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d006      	beq.n	8007f08 <tcp_input+0x614>
 8007efa:	4b50      	ldr	r3, [pc, #320]	; (800803c <tcp_input+0x748>)
 8007efc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007f00:	494f      	ldr	r1, [pc, #316]	; (8008040 <tcp_input+0x74c>)
 8007f02:	4850      	ldr	r0, [pc, #320]	; (8008044 <tcp_input+0x750>)
 8007f04:	f006 fd3e 	bl	800e984 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007f08:	69fb      	ldr	r3, [r7, #28]
 8007f0a:	8b5b      	ldrh	r3, [r3, #26]
 8007f0c:	f003 0310 	and.w	r3, r3, #16
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d008      	beq.n	8007f26 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007f14:	4b42      	ldr	r3, [pc, #264]	; (8008020 <tcp_input+0x72c>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f7fd fc45 	bl	80057a8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007f1e:	69f8      	ldr	r0, [r7, #28]
 8007f20:	f7fe fa5c 	bl	80063dc <tcp_abort>
            goto aborted;
 8007f24:	e091      	b.n	800804a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00c      	beq.n	8007f4a <tcp_input+0x656>
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	6918      	ldr	r0, [r3, #16]
 8007f3a:	4b39      	ldr	r3, [pc, #228]	; (8008020 <tcp_input+0x72c>)
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	69f9      	ldr	r1, [r7, #28]
 8007f42:	47a0      	blx	r4
 8007f44:	4603      	mov	r3, r0
 8007f46:	74fb      	strb	r3, [r7, #19]
 8007f48:	e008      	b.n	8007f5c <tcp_input+0x668>
 8007f4a:	4b35      	ldr	r3, [pc, #212]	; (8008020 <tcp_input+0x72c>)
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	2300      	movs	r3, #0
 8007f50:	69f9      	ldr	r1, [r7, #28]
 8007f52:	2000      	movs	r0, #0
 8007f54:	f7ff f8d0 	bl	80070f8 <tcp_recv_null>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007f5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f60:	f113 0f0d 	cmn.w	r3, #13
 8007f64:	d053      	beq.n	800800e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007f66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d003      	beq.n	8007f76 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007f6e:	4b2c      	ldr	r3, [pc, #176]	; (8008020 <tcp_input+0x72c>)
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007f76:	4b2b      	ldr	r3, [pc, #172]	; (8008024 <tcp_input+0x730>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d030      	beq.n	8007fe4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d009      	beq.n	8007f9e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f8e:	7b5a      	ldrb	r2, [r3, #13]
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f94:	f042 0220 	orr.w	r2, r2, #32
 8007f98:	b2d2      	uxtb	r2, r2
 8007f9a:	735a      	strb	r2, [r3, #13]
 8007f9c:	e022      	b.n	8007fe4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007fa6:	d005      	beq.n	8007fb4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fac:	3301      	adds	r3, #1
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <tcp_input+0x6e2>
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	6918      	ldr	r0, [r3, #16]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	2200      	movs	r2, #0
 8007fcc:	69f9      	ldr	r1, [r7, #28]
 8007fce:	47a0      	blx	r4
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	74fb      	strb	r3, [r7, #19]
 8007fd4:	e001      	b.n	8007fda <tcp_input+0x6e6>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007fda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007fde:	f113 0f0d 	cmn.w	r3, #13
 8007fe2:	d016      	beq.n	8008012 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007fe4:	4b13      	ldr	r3, [pc, #76]	; (8008034 <tcp_input+0x740>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007fea:	69f8      	ldr	r0, [r7, #28]
 8007fec:	f000 f88e 	bl	800810c <tcp_input_delayed_close>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d128      	bne.n	8008048 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007ff6:	69f8      	ldr	r0, [r7, #28]
 8007ff8:	f002 ff20 	bl	800ae3c <tcp_output>
 8007ffc:	e025      	b.n	800804a <tcp_input+0x756>
        goto aborted;
 8007ffe:	bf00      	nop
 8008000:	e023      	b.n	800804a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8008002:	bf00      	nop
 8008004:	e021      	b.n	800804a <tcp_input+0x756>
              goto aborted;
 8008006:	bf00      	nop
 8008008:	e01f      	b.n	800804a <tcp_input+0x756>
          goto aborted;
 800800a:	bf00      	nop
 800800c:	e01d      	b.n	800804a <tcp_input+0x756>
            goto aborted;
 800800e:	bf00      	nop
 8008010:	e01b      	b.n	800804a <tcp_input+0x756>
              goto aborted;
 8008012:	bf00      	nop
 8008014:	e019      	b.n	800804a <tcp_input+0x756>
 8008016:	bf00      	nop
 8008018:	200082c8 	.word	0x200082c8
 800801c:	200082d8 	.word	0x200082d8
 8008020:	200082f8 	.word	0x200082f8
 8008024:	200082f5 	.word	0x200082f5
 8008028:	200082f0 	.word	0x200082f0
 800802c:	200082f4 	.word	0x200082f4
 8008030:	200082f2 	.word	0x200082f2
 8008034:	200082fc 	.word	0x200082fc
 8008038:	200082bc 	.word	0x200082bc
 800803c:	08011100 	.word	0x08011100
 8008040:	080112b4 	.word	0x080112b4
 8008044:	0801114c 	.word	0x0801114c
          goto aborted;
 8008048:	bf00      	nop
    tcp_input_pcb = NULL;
 800804a:	4b27      	ldr	r3, [pc, #156]	; (80080e8 <tcp_input+0x7f4>)
 800804c:	2200      	movs	r2, #0
 800804e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8008050:	4b26      	ldr	r3, [pc, #152]	; (80080ec <tcp_input+0x7f8>)
 8008052:	2200      	movs	r2, #0
 8008054:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8008056:	4b26      	ldr	r3, [pc, #152]	; (80080f0 <tcp_input+0x7fc>)
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d03f      	beq.n	80080de <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800805e:	4b24      	ldr	r3, [pc, #144]	; (80080f0 <tcp_input+0x7fc>)
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	4618      	mov	r0, r3
 8008064:	f7fd fba0 	bl	80057a8 <pbuf_free>
      inseg.p = NULL;
 8008068:	4b21      	ldr	r3, [pc, #132]	; (80080f0 <tcp_input+0x7fc>)
 800806a:	2200      	movs	r2, #0
 800806c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800806e:	e036      	b.n	80080de <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008070:	4b20      	ldr	r3, [pc, #128]	; (80080f4 <tcp_input+0x800>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	899b      	ldrh	r3, [r3, #12]
 8008076:	b29b      	uxth	r3, r3
 8008078:	4618      	mov	r0, r3
 800807a:	f7fc f837 	bl	80040ec <lwip_htons>
 800807e:	4603      	mov	r3, r0
 8008080:	b2db      	uxtb	r3, r3
 8008082:	f003 0304 	and.w	r3, r3, #4
 8008086:	2b00      	cmp	r3, #0
 8008088:	d118      	bne.n	80080bc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800808a:	4b1b      	ldr	r3, [pc, #108]	; (80080f8 <tcp_input+0x804>)
 800808c:	6819      	ldr	r1, [r3, #0]
 800808e:	4b1b      	ldr	r3, [pc, #108]	; (80080fc <tcp_input+0x808>)
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	461a      	mov	r2, r3
 8008094:	4b1a      	ldr	r3, [pc, #104]	; (8008100 <tcp_input+0x80c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800809a:	4b16      	ldr	r3, [pc, #88]	; (80080f4 <tcp_input+0x800>)
 800809c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800809e:	885b      	ldrh	r3, [r3, #2]
 80080a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80080a2:	4a14      	ldr	r2, [pc, #80]	; (80080f4 <tcp_input+0x800>)
 80080a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80080a6:	8812      	ldrh	r2, [r2, #0]
 80080a8:	b292      	uxth	r2, r2
 80080aa:	9202      	str	r2, [sp, #8]
 80080ac:	9301      	str	r3, [sp, #4]
 80080ae:	4b15      	ldr	r3, [pc, #84]	; (8008104 <tcp_input+0x810>)
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	4b15      	ldr	r3, [pc, #84]	; (8008108 <tcp_input+0x814>)
 80080b4:	4602      	mov	r2, r0
 80080b6:	2000      	movs	r0, #0
 80080b8:	f003 fc74 	bl	800b9a4 <tcp_rst>
    pbuf_free(p);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f7fd fb73 	bl	80057a8 <pbuf_free>
  return;
 80080c2:	e00c      	b.n	80080de <tcp_input+0x7ea>
    goto dropped;
 80080c4:	bf00      	nop
 80080c6:	e006      	b.n	80080d6 <tcp_input+0x7e2>
    goto dropped;
 80080c8:	bf00      	nop
 80080ca:	e004      	b.n	80080d6 <tcp_input+0x7e2>
    goto dropped;
 80080cc:	bf00      	nop
 80080ce:	e002      	b.n	80080d6 <tcp_input+0x7e2>
      goto dropped;
 80080d0:	bf00      	nop
 80080d2:	e000      	b.n	80080d6 <tcp_input+0x7e2>
      goto dropped;
 80080d4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7fd fb66 	bl	80057a8 <pbuf_free>
 80080dc:	e000      	b.n	80080e0 <tcp_input+0x7ec>
  return;
 80080de:	bf00      	nop
}
 80080e0:	3724      	adds	r7, #36	; 0x24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd90      	pop	{r4, r7, pc}
 80080e6:	bf00      	nop
 80080e8:	200082fc 	.word	0x200082fc
 80080ec:	200082f8 	.word	0x200082f8
 80080f0:	200082c8 	.word	0x200082c8
 80080f4:	200082d8 	.word	0x200082d8
 80080f8:	200082ec 	.word	0x200082ec
 80080fc:	200082f2 	.word	0x200082f2
 8008100:	200082e8 	.word	0x200082e8
 8008104:	20004d50 	.word	0x20004d50
 8008108:	20004d54 	.word	0x20004d54

0800810c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <tcp_input_delayed_close+0x1c>
 800811a:	4b17      	ldr	r3, [pc, #92]	; (8008178 <tcp_input_delayed_close+0x6c>)
 800811c:	f240 225a 	movw	r2, #602	; 0x25a
 8008120:	4916      	ldr	r1, [pc, #88]	; (800817c <tcp_input_delayed_close+0x70>)
 8008122:	4817      	ldr	r0, [pc, #92]	; (8008180 <tcp_input_delayed_close+0x74>)
 8008124:	f006 fc2e 	bl	800e984 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8008128:	4b16      	ldr	r3, [pc, #88]	; (8008184 <tcp_input_delayed_close+0x78>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	2b00      	cmp	r3, #0
 8008132:	d01c      	beq.n	800816e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	8b5b      	ldrh	r3, [r3, #26]
 8008138:	f003 0310 	and.w	r3, r3, #16
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10d      	bne.n	800815c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008146:	2b00      	cmp	r3, #0
 8008148:	d008      	beq.n	800815c <tcp_input_delayed_close+0x50>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	6912      	ldr	r2, [r2, #16]
 8008154:	f06f 010e 	mvn.w	r1, #14
 8008158:	4610      	mov	r0, r2
 800815a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800815c:	6879      	ldr	r1, [r7, #4]
 800815e:	480a      	ldr	r0, [pc, #40]	; (8008188 <tcp_input_delayed_close+0x7c>)
 8008160:	f7ff fa50 	bl	8007604 <tcp_pcb_remove>
    tcp_free(pcb);
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f7fd fe51 	bl	8005e0c <tcp_free>
    return 1;
 800816a:	2301      	movs	r3, #1
 800816c:	e000      	b.n	8008170 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	08011100 	.word	0x08011100
 800817c:	080112d0 	.word	0x080112d0
 8008180:	0801114c 	.word	0x0801114c
 8008184:	200082f5 	.word	0x200082f5
 8008188:	200082bc 	.word	0x200082bc

0800818c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800818c:	b590      	push	{r4, r7, lr}
 800818e:	b08b      	sub	sp, #44	; 0x2c
 8008190:	af04      	add	r7, sp, #16
 8008192:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8008194:	4b6f      	ldr	r3, [pc, #444]	; (8008354 <tcp_listen_input+0x1c8>)
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	2b00      	cmp	r3, #0
 800819e:	f040 80d2 	bne.w	8008346 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d106      	bne.n	80081b6 <tcp_listen_input+0x2a>
 80081a8:	4b6b      	ldr	r3, [pc, #428]	; (8008358 <tcp_listen_input+0x1cc>)
 80081aa:	f240 2281 	movw	r2, #641	; 0x281
 80081ae:	496b      	ldr	r1, [pc, #428]	; (800835c <tcp_listen_input+0x1d0>)
 80081b0:	486b      	ldr	r0, [pc, #428]	; (8008360 <tcp_listen_input+0x1d4>)
 80081b2:	f006 fbe7 	bl	800e984 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80081b6:	4b67      	ldr	r3, [pc, #412]	; (8008354 <tcp_listen_input+0x1c8>)
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	f003 0310 	and.w	r3, r3, #16
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d019      	beq.n	80081f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081c2:	4b68      	ldr	r3, [pc, #416]	; (8008364 <tcp_listen_input+0x1d8>)
 80081c4:	6819      	ldr	r1, [r3, #0]
 80081c6:	4b68      	ldr	r3, [pc, #416]	; (8008368 <tcp_listen_input+0x1dc>)
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	4b67      	ldr	r3, [pc, #412]	; (800836c <tcp_listen_input+0x1e0>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081d2:	4b67      	ldr	r3, [pc, #412]	; (8008370 <tcp_listen_input+0x1e4>)
 80081d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081d6:	885b      	ldrh	r3, [r3, #2]
 80081d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80081da:	4a65      	ldr	r2, [pc, #404]	; (8008370 <tcp_listen_input+0x1e4>)
 80081dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80081de:	8812      	ldrh	r2, [r2, #0]
 80081e0:	b292      	uxth	r2, r2
 80081e2:	9202      	str	r2, [sp, #8]
 80081e4:	9301      	str	r3, [sp, #4]
 80081e6:	4b63      	ldr	r3, [pc, #396]	; (8008374 <tcp_listen_input+0x1e8>)
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	4b63      	ldr	r3, [pc, #396]	; (8008378 <tcp_listen_input+0x1ec>)
 80081ec:	4602      	mov	r2, r0
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f003 fbd8 	bl	800b9a4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80081f4:	e0a9      	b.n	800834a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80081f6:	4b57      	ldr	r3, [pc, #348]	; (8008354 <tcp_listen_input+0x1c8>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 80a3 	beq.w	800834a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	7d5b      	ldrb	r3, [r3, #21]
 8008208:	4618      	mov	r0, r3
 800820a:	f7ff f899 	bl	8007340 <tcp_alloc>
 800820e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d111      	bne.n	800823a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <tcp_listen_input+0xa8>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	6910      	ldr	r0, [r2, #16]
 8008226:	f04f 32ff 	mov.w	r2, #4294967295
 800822a:	2100      	movs	r1, #0
 800822c:	4798      	blx	r3
 800822e:	4603      	mov	r3, r0
 8008230:	73bb      	strb	r3, [r7, #14]
      return;
 8008232:	e08b      	b.n	800834c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008234:	23f0      	movs	r3, #240	; 0xf0
 8008236:	73bb      	strb	r3, [r7, #14]
      return;
 8008238:	e088      	b.n	800834c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800823a:	4b50      	ldr	r3, [pc, #320]	; (800837c <tcp_listen_input+0x1f0>)
 800823c:	695a      	ldr	r2, [r3, #20]
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008242:	4b4e      	ldr	r3, [pc, #312]	; (800837c <tcp_listen_input+0x1f0>)
 8008244:	691a      	ldr	r2, [r3, #16]
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	8ada      	ldrh	r2, [r3, #22]
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8008252:	4b47      	ldr	r3, [pc, #284]	; (8008370 <tcp_listen_input+0x1e4>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	b29a      	uxth	r2, r3
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	2203      	movs	r2, #3
 8008262:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8008264:	4b41      	ldr	r3, [pc, #260]	; (800836c <tcp_listen_input+0x1e0>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	1c5a      	adds	r2, r3, #1
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008276:	6978      	ldr	r0, [r7, #20]
 8008278:	f7ff fa58 	bl	800772c <tcp_next_iss>
 800827c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	693a      	ldr	r2, [r7, #16]
 8008288:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	693a      	ldr	r2, [r7, #16]
 8008294:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008296:	4b35      	ldr	r3, [pc, #212]	; (800836c <tcp_listen_input+0x1e0>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	1e5a      	subs	r2, r3, #1
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	691a      	ldr	r2, [r3, #16]
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	7a5b      	ldrb	r3, [r3, #9]
 80082b2:	f003 030c 	and.w	r3, r3, #12
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	7a1a      	ldrb	r2, [r3, #8]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80082c4:	4b2e      	ldr	r3, [pc, #184]	; (8008380 <tcp_listen_input+0x1f4>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	60da      	str	r2, [r3, #12]
 80082cc:	4a2c      	ldr	r2, [pc, #176]	; (8008380 <tcp_listen_input+0x1f4>)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	6013      	str	r3, [r2, #0]
 80082d2:	f003 fd29 	bl	800bd28 <tcp_timer_needed>
 80082d6:	4b2b      	ldr	r3, [pc, #172]	; (8008384 <tcp_listen_input+0x1f8>)
 80082d8:	2201      	movs	r2, #1
 80082da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80082dc:	6978      	ldr	r0, [r7, #20]
 80082de:	f001 fd8f 	bl	8009e00 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80082e2:	4b23      	ldr	r3, [pc, #140]	; (8008370 <tcp_listen_input+0x1e4>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	89db      	ldrh	r3, [r3, #14]
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	3304      	adds	r3, #4
 8008304:	4618      	mov	r0, r3
 8008306:	f005 f8ed 	bl	800d4e4 <ip4_route>
 800830a:	4601      	mov	r1, r0
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	3304      	adds	r3, #4
 8008310:	461a      	mov	r2, r3
 8008312:	4620      	mov	r0, r4
 8008314:	f7ff fa30 	bl	8007778 <tcp_eff_send_mss_netif>
 8008318:	4603      	mov	r3, r0
 800831a:	461a      	mov	r2, r3
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008320:	2112      	movs	r1, #18
 8008322:	6978      	ldr	r0, [r7, #20]
 8008324:	f002 fc9c 	bl	800ac60 <tcp_enqueue_flags>
 8008328:	4603      	mov	r3, r0
 800832a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800832c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d004      	beq.n	800833e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8008334:	2100      	movs	r1, #0
 8008336:	6978      	ldr	r0, [r7, #20]
 8008338:	f7fd ff92 	bl	8006260 <tcp_abandon>
      return;
 800833c:	e006      	b.n	800834c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800833e:	6978      	ldr	r0, [r7, #20]
 8008340:	f002 fd7c 	bl	800ae3c <tcp_output>
  return;
 8008344:	e001      	b.n	800834a <tcp_listen_input+0x1be>
    return;
 8008346:	bf00      	nop
 8008348:	e000      	b.n	800834c <tcp_listen_input+0x1c0>
  return;
 800834a:	bf00      	nop
}
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	bd90      	pop	{r4, r7, pc}
 8008352:	bf00      	nop
 8008354:	200082f4 	.word	0x200082f4
 8008358:	08011100 	.word	0x08011100
 800835c:	080112f8 	.word	0x080112f8
 8008360:	0801114c 	.word	0x0801114c
 8008364:	200082ec 	.word	0x200082ec
 8008368:	200082f2 	.word	0x200082f2
 800836c:	200082e8 	.word	0x200082e8
 8008370:	200082d8 	.word	0x200082d8
 8008374:	20004d50 	.word	0x20004d50
 8008378:	20004d54 	.word	0x20004d54
 800837c:	20004d40 	.word	0x20004d40
 8008380:	200082bc 	.word	0x200082bc
 8008384:	200082c4 	.word	0x200082c4

08008388 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af04      	add	r7, sp, #16
 800838e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8008390:	4b2f      	ldr	r3, [pc, #188]	; (8008450 <tcp_timewait_input+0xc8>)
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	f003 0304 	and.w	r3, r3, #4
 8008398:	2b00      	cmp	r3, #0
 800839a:	d153      	bne.n	8008444 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d106      	bne.n	80083b0 <tcp_timewait_input+0x28>
 80083a2:	4b2c      	ldr	r3, [pc, #176]	; (8008454 <tcp_timewait_input+0xcc>)
 80083a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80083a8:	492b      	ldr	r1, [pc, #172]	; (8008458 <tcp_timewait_input+0xd0>)
 80083aa:	482c      	ldr	r0, [pc, #176]	; (800845c <tcp_timewait_input+0xd4>)
 80083ac:	f006 faea 	bl	800e984 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80083b0:	4b27      	ldr	r3, [pc, #156]	; (8008450 <tcp_timewait_input+0xc8>)
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	f003 0302 	and.w	r3, r3, #2
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d02a      	beq.n	8008412 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80083bc:	4b28      	ldr	r3, [pc, #160]	; (8008460 <tcp_timewait_input+0xd8>)
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	db2d      	blt.n	8008426 <tcp_timewait_input+0x9e>
 80083ca:	4b25      	ldr	r3, [pc, #148]	; (8008460 <tcp_timewait_input+0xd8>)
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	6879      	ldr	r1, [r7, #4]
 80083d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80083d6:	440b      	add	r3, r1
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	dc23      	bgt.n	8008426 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083de:	4b21      	ldr	r3, [pc, #132]	; (8008464 <tcp_timewait_input+0xdc>)
 80083e0:	6819      	ldr	r1, [r3, #0]
 80083e2:	4b21      	ldr	r3, [pc, #132]	; (8008468 <tcp_timewait_input+0xe0>)
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	4b1d      	ldr	r3, [pc, #116]	; (8008460 <tcp_timewait_input+0xd8>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083ee:	4b1f      	ldr	r3, [pc, #124]	; (800846c <tcp_timewait_input+0xe4>)
 80083f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083f2:	885b      	ldrh	r3, [r3, #2]
 80083f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80083f6:	4a1d      	ldr	r2, [pc, #116]	; (800846c <tcp_timewait_input+0xe4>)
 80083f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80083fa:	8812      	ldrh	r2, [r2, #0]
 80083fc:	b292      	uxth	r2, r2
 80083fe:	9202      	str	r2, [sp, #8]
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	4b1b      	ldr	r3, [pc, #108]	; (8008470 <tcp_timewait_input+0xe8>)
 8008404:	9300      	str	r3, [sp, #0]
 8008406:	4b1b      	ldr	r3, [pc, #108]	; (8008474 <tcp_timewait_input+0xec>)
 8008408:	4602      	mov	r2, r0
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f003 faca 	bl	800b9a4 <tcp_rst>
      return;
 8008410:	e01b      	b.n	800844a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8008412:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <tcp_timewait_input+0xc8>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	f003 0301 	and.w	r3, r3, #1
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800841e:	4b16      	ldr	r3, [pc, #88]	; (8008478 <tcp_timewait_input+0xf0>)
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8008426:	4b10      	ldr	r3, [pc, #64]	; (8008468 <tcp_timewait_input+0xe0>)
 8008428:	881b      	ldrh	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d00c      	beq.n	8008448 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	8b5b      	ldrh	r3, [r3, #26]
 8008432:	f043 0302 	orr.w	r3, r3, #2
 8008436:	b29a      	uxth	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f002 fcfd 	bl	800ae3c <tcp_output>
  }
  return;
 8008442:	e001      	b.n	8008448 <tcp_timewait_input+0xc0>
    return;
 8008444:	bf00      	nop
 8008446:	e000      	b.n	800844a <tcp_timewait_input+0xc2>
  return;
 8008448:	bf00      	nop
}
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	200082f4 	.word	0x200082f4
 8008454:	08011100 	.word	0x08011100
 8008458:	08011318 	.word	0x08011318
 800845c:	0801114c 	.word	0x0801114c
 8008460:	200082e8 	.word	0x200082e8
 8008464:	200082ec 	.word	0x200082ec
 8008468:	200082f2 	.word	0x200082f2
 800846c:	200082d8 	.word	0x200082d8
 8008470:	20004d50 	.word	0x20004d50
 8008474:	20004d54 	.word	0x20004d54
 8008478:	200082b0 	.word	0x200082b0

0800847c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800847c:	b590      	push	{r4, r7, lr}
 800847e:	b08d      	sub	sp, #52	; 0x34
 8008480:	af04      	add	r7, sp, #16
 8008482:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8008488:	2300      	movs	r3, #0
 800848a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d106      	bne.n	80084a0 <tcp_process+0x24>
 8008492:	4b9d      	ldr	r3, [pc, #628]	; (8008708 <tcp_process+0x28c>)
 8008494:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008498:	499c      	ldr	r1, [pc, #624]	; (800870c <tcp_process+0x290>)
 800849a:	489d      	ldr	r0, [pc, #628]	; (8008710 <tcp_process+0x294>)
 800849c:	f006 fa72 	bl	800e984 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80084a0:	4b9c      	ldr	r3, [pc, #624]	; (8008714 <tcp_process+0x298>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d04e      	beq.n	800854a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	7d1b      	ldrb	r3, [r3, #20]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d108      	bne.n	80084c6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084b8:	4b97      	ldr	r3, [pc, #604]	; (8008718 <tcp_process+0x29c>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d123      	bne.n	8008508 <tcp_process+0x8c>
        acceptable = 1;
 80084c0:	2301      	movs	r3, #1
 80084c2:	76fb      	strb	r3, [r7, #27]
 80084c4:	e020      	b.n	8008508 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084ca:	4b94      	ldr	r3, [pc, #592]	; (800871c <tcp_process+0x2a0>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d102      	bne.n	80084d8 <tcp_process+0x5c>
        acceptable = 1;
 80084d2:	2301      	movs	r3, #1
 80084d4:	76fb      	strb	r3, [r7, #27]
 80084d6:	e017      	b.n	8008508 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80084d8:	4b90      	ldr	r3, [pc, #576]	; (800871c <tcp_process+0x2a0>)
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	db10      	blt.n	8008508 <tcp_process+0x8c>
 80084e6:	4b8d      	ldr	r3, [pc, #564]	; (800871c <tcp_process+0x2a0>)
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	6879      	ldr	r1, [r7, #4]
 80084f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80084f2:	440b      	add	r3, r1
 80084f4:	1ad3      	subs	r3, r2, r3
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	dc06      	bgt.n	8008508 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	8b5b      	ldrh	r3, [r3, #26]
 80084fe:	f043 0302 	orr.w	r3, r3, #2
 8008502:	b29a      	uxth	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008508:	7efb      	ldrb	r3, [r7, #27]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d01b      	beq.n	8008546 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	7d1b      	ldrb	r3, [r3, #20]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d106      	bne.n	8008524 <tcp_process+0xa8>
 8008516:	4b7c      	ldr	r3, [pc, #496]	; (8008708 <tcp_process+0x28c>)
 8008518:	f44f 724e 	mov.w	r2, #824	; 0x338
 800851c:	4980      	ldr	r1, [pc, #512]	; (8008720 <tcp_process+0x2a4>)
 800851e:	487c      	ldr	r0, [pc, #496]	; (8008710 <tcp_process+0x294>)
 8008520:	f006 fa30 	bl	800e984 <iprintf>
      recv_flags |= TF_RESET;
 8008524:	4b7f      	ldr	r3, [pc, #508]	; (8008724 <tcp_process+0x2a8>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	f043 0308 	orr.w	r3, r3, #8
 800852c:	b2da      	uxtb	r2, r3
 800852e:	4b7d      	ldr	r3, [pc, #500]	; (8008724 <tcp_process+0x2a8>)
 8008530:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	8b5b      	ldrh	r3, [r3, #26]
 8008536:	f023 0301 	bic.w	r3, r3, #1
 800853a:	b29a      	uxth	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8008540:	f06f 030d 	mvn.w	r3, #13
 8008544:	e37a      	b.n	8008c3c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	e378      	b.n	8008c3c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800854a:	4b72      	ldr	r3, [pc, #456]	; (8008714 <tcp_process+0x298>)
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	f003 0302 	and.w	r3, r3, #2
 8008552:	2b00      	cmp	r3, #0
 8008554:	d010      	beq.n	8008578 <tcp_process+0xfc>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	7d1b      	ldrb	r3, [r3, #20]
 800855a:	2b02      	cmp	r3, #2
 800855c:	d00c      	beq.n	8008578 <tcp_process+0xfc>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	7d1b      	ldrb	r3, [r3, #20]
 8008562:	2b03      	cmp	r3, #3
 8008564:	d008      	beq.n	8008578 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	8b5b      	ldrh	r3, [r3, #26]
 800856a:	f043 0302 	orr.w	r3, r3, #2
 800856e:	b29a      	uxth	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	e361      	b.n	8008c3c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	8b5b      	ldrh	r3, [r3, #26]
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	2b00      	cmp	r3, #0
 8008582:	d103      	bne.n	800858c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8008584:	4b68      	ldr	r3, [pc, #416]	; (8008728 <tcp_process+0x2ac>)
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	f001 fc2f 	bl	8009e00 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	7d1b      	ldrb	r3, [r3, #20]
 80085a6:	3b02      	subs	r3, #2
 80085a8:	2b07      	cmp	r3, #7
 80085aa:	f200 8337 	bhi.w	8008c1c <tcp_process+0x7a0>
 80085ae:	a201      	add	r2, pc, #4	; (adr r2, 80085b4 <tcp_process+0x138>)
 80085b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b4:	080085d5 	.word	0x080085d5
 80085b8:	08008805 	.word	0x08008805
 80085bc:	0800897d 	.word	0x0800897d
 80085c0:	080089a7 	.word	0x080089a7
 80085c4:	08008acb 	.word	0x08008acb
 80085c8:	0800897d 	.word	0x0800897d
 80085cc:	08008b57 	.word	0x08008b57
 80085d0:	08008be7 	.word	0x08008be7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80085d4:	4b4f      	ldr	r3, [pc, #316]	; (8008714 <tcp_process+0x298>)
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	f003 0310 	and.w	r3, r3, #16
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 80e4 	beq.w	80087aa <tcp_process+0x32e>
 80085e2:	4b4c      	ldr	r3, [pc, #304]	; (8008714 <tcp_process+0x298>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	f003 0302 	and.w	r3, r3, #2
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 80dd 	beq.w	80087aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	4b48      	ldr	r3, [pc, #288]	; (8008718 <tcp_process+0x29c>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	429a      	cmp	r2, r3
 80085fc:	f040 80d5 	bne.w	80087aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8008600:	4b46      	ldr	r3, [pc, #280]	; (800871c <tcp_process+0x2a0>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	1c5a      	adds	r2, r3, #1
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8008612:	4b41      	ldr	r3, [pc, #260]	; (8008718 <tcp_process+0x29c>)
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800861a:	4b44      	ldr	r3, [pc, #272]	; (800872c <tcp_process+0x2b0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	89db      	ldrh	r3, [r3, #14]
 8008620:	b29a      	uxth	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008634:	4b39      	ldr	r3, [pc, #228]	; (800871c <tcp_process+0x2a0>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	1e5a      	subs	r2, r3, #1
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2204      	movs	r2, #4
 8008642:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	3304      	adds	r3, #4
 800864c:	4618      	mov	r0, r3
 800864e:	f004 ff49 	bl	800d4e4 <ip4_route>
 8008652:	4601      	mov	r1, r0
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	3304      	adds	r3, #4
 8008658:	461a      	mov	r2, r3
 800865a:	4620      	mov	r0, r4
 800865c:	f7ff f88c 	bl	8007778 <tcp_eff_send_mss_netif>
 8008660:	4603      	mov	r3, r0
 8008662:	461a      	mov	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800866c:	009a      	lsls	r2, r3, #2
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008672:	005b      	lsls	r3, r3, #1
 8008674:	f241 111c 	movw	r1, #4380	; 0x111c
 8008678:	428b      	cmp	r3, r1
 800867a:	bf38      	it	cc
 800867c:	460b      	movcc	r3, r1
 800867e:	429a      	cmp	r2, r3
 8008680:	d204      	bcs.n	800868c <tcp_process+0x210>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	b29b      	uxth	r3, r3
 800868a:	e00d      	b.n	80086a8 <tcp_process+0x22c>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008690:	005b      	lsls	r3, r3, #1
 8008692:	f241 121c 	movw	r2, #4380	; 0x111c
 8008696:	4293      	cmp	r3, r2
 8008698:	d904      	bls.n	80086a4 <tcp_process+0x228>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	b29b      	uxth	r3, r3
 80086a2:	e001      	b.n	80086a8 <tcp_process+0x22c>
 80086a4:	f241 131c 	movw	r3, #4380	; 0x111c
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d106      	bne.n	80086c6 <tcp_process+0x24a>
 80086b8:	4b13      	ldr	r3, [pc, #76]	; (8008708 <tcp_process+0x28c>)
 80086ba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80086be:	491c      	ldr	r1, [pc, #112]	; (8008730 <tcp_process+0x2b4>)
 80086c0:	4813      	ldr	r0, [pc, #76]	; (8008710 <tcp_process+0x294>)
 80086c2:	f006 f95f 	bl	800e984 <iprintf>
        --pcb->snd_queuelen;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80086cc:	3b01      	subs	r3, #1
 80086ce:	b29a      	uxth	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d12a      	bne.n	8008738 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d106      	bne.n	80086fc <tcp_process+0x280>
 80086ee:	4b06      	ldr	r3, [pc, #24]	; (8008708 <tcp_process+0x28c>)
 80086f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80086f4:	490f      	ldr	r1, [pc, #60]	; (8008734 <tcp_process+0x2b8>)
 80086f6:	4806      	ldr	r0, [pc, #24]	; (8008710 <tcp_process+0x294>)
 80086f8:	f006 f944 	bl	800e984 <iprintf>
          pcb->unsent = rseg->next;
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	66da      	str	r2, [r3, #108]	; 0x6c
 8008704:	e01c      	b.n	8008740 <tcp_process+0x2c4>
 8008706:	bf00      	nop
 8008708:	08011100 	.word	0x08011100
 800870c:	08011338 	.word	0x08011338
 8008710:	0801114c 	.word	0x0801114c
 8008714:	200082f4 	.word	0x200082f4
 8008718:	200082ec 	.word	0x200082ec
 800871c:	200082e8 	.word	0x200082e8
 8008720:	08011354 	.word	0x08011354
 8008724:	200082f5 	.word	0x200082f5
 8008728:	200082b0 	.word	0x200082b0
 800872c:	200082d8 	.word	0x200082d8
 8008730:	08011374 	.word	0x08011374
 8008734:	0801138c 	.word	0x0801138c
        } else {
          pcb->unacked = rseg->next;
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8008740:	69f8      	ldr	r0, [r7, #28]
 8008742:	f7fe fc94 	bl	800706e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800874a:	2b00      	cmp	r3, #0
 800874c:	d104      	bne.n	8008758 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008754:	861a      	strh	r2, [r3, #48]	; 0x30
 8008756:	e006      	b.n	8008766 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00a      	beq.n	8008786 <tcp_process+0x30a>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	6910      	ldr	r0, [r2, #16]
 800877a:	2200      	movs	r2, #0
 800877c:	6879      	ldr	r1, [r7, #4]
 800877e:	4798      	blx	r3
 8008780:	4603      	mov	r3, r0
 8008782:	76bb      	strb	r3, [r7, #26]
 8008784:	e001      	b.n	800878a <tcp_process+0x30e>
 8008786:	2300      	movs	r3, #0
 8008788:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800878a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800878e:	f113 0f0d 	cmn.w	r3, #13
 8008792:	d102      	bne.n	800879a <tcp_process+0x31e>
          return ERR_ABRT;
 8008794:	f06f 030c 	mvn.w	r3, #12
 8008798:	e250      	b.n	8008c3c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	8b5b      	ldrh	r3, [r3, #26]
 800879e:	f043 0302 	orr.w	r3, r3, #2
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80087a8:	e23a      	b.n	8008c20 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80087aa:	4b98      	ldr	r3, [pc, #608]	; (8008a0c <tcp_process+0x590>)
 80087ac:	781b      	ldrb	r3, [r3, #0]
 80087ae:	f003 0310 	and.w	r3, r3, #16
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f000 8234 	beq.w	8008c20 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087b8:	4b95      	ldr	r3, [pc, #596]	; (8008a10 <tcp_process+0x594>)
 80087ba:	6819      	ldr	r1, [r3, #0]
 80087bc:	4b95      	ldr	r3, [pc, #596]	; (8008a14 <tcp_process+0x598>)
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	4b95      	ldr	r3, [pc, #596]	; (8008a18 <tcp_process+0x59c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087c8:	4b94      	ldr	r3, [pc, #592]	; (8008a1c <tcp_process+0x5a0>)
 80087ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087cc:	885b      	ldrh	r3, [r3, #2]
 80087ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80087d0:	4a92      	ldr	r2, [pc, #584]	; (8008a1c <tcp_process+0x5a0>)
 80087d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80087d4:	8812      	ldrh	r2, [r2, #0]
 80087d6:	b292      	uxth	r2, r2
 80087d8:	9202      	str	r2, [sp, #8]
 80087da:	9301      	str	r3, [sp, #4]
 80087dc:	4b90      	ldr	r3, [pc, #576]	; (8008a20 <tcp_process+0x5a4>)
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	4b90      	ldr	r3, [pc, #576]	; (8008a24 <tcp_process+0x5a8>)
 80087e2:	4602      	mov	r2, r0
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f003 f8dd 	bl	800b9a4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087f0:	2b05      	cmp	r3, #5
 80087f2:	f200 8215 	bhi.w	8008c20 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f002 fea7 	bl	800b550 <tcp_rexmit_rto>
      break;
 8008802:	e20d      	b.n	8008c20 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008804:	4b81      	ldr	r3, [pc, #516]	; (8008a0c <tcp_process+0x590>)
 8008806:	781b      	ldrb	r3, [r3, #0]
 8008808:	f003 0310 	and.w	r3, r3, #16
 800880c:	2b00      	cmp	r3, #0
 800880e:	f000 80a1 	beq.w	8008954 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008812:	4b7f      	ldr	r3, [pc, #508]	; (8008a10 <tcp_process+0x594>)
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	3b01      	subs	r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	db7e      	blt.n	8008920 <tcp_process+0x4a4>
 8008822:	4b7b      	ldr	r3, [pc, #492]	; (8008a10 <tcp_process+0x594>)
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	2b00      	cmp	r3, #0
 800882e:	dc77      	bgt.n	8008920 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2204      	movs	r2, #4
 8008834:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800883a:	2b00      	cmp	r3, #0
 800883c:	d102      	bne.n	8008844 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800883e:	23fa      	movs	r3, #250	; 0xfa
 8008840:	76bb      	strb	r3, [r7, #26]
 8008842:	e01d      	b.n	8008880 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d106      	bne.n	800885c <tcp_process+0x3e0>
 800884e:	4b76      	ldr	r3, [pc, #472]	; (8008a28 <tcp_process+0x5ac>)
 8008850:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008854:	4975      	ldr	r1, [pc, #468]	; (8008a2c <tcp_process+0x5b0>)
 8008856:	4876      	ldr	r0, [pc, #472]	; (8008a30 <tcp_process+0x5b4>)
 8008858:	f006 f894 	bl	800e984 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00a      	beq.n	800887c <tcp_process+0x400>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	6910      	ldr	r0, [r2, #16]
 8008870:	2200      	movs	r2, #0
 8008872:	6879      	ldr	r1, [r7, #4]
 8008874:	4798      	blx	r3
 8008876:	4603      	mov	r3, r0
 8008878:	76bb      	strb	r3, [r7, #26]
 800887a:	e001      	b.n	8008880 <tcp_process+0x404>
 800887c:	23f0      	movs	r3, #240	; 0xf0
 800887e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8008880:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00a      	beq.n	800889e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8008888:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800888c:	f113 0f0d 	cmn.w	r3, #13
 8008890:	d002      	beq.n	8008898 <tcp_process+0x41c>
              tcp_abort(pcb);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f7fd fda2 	bl	80063dc <tcp_abort>
            }
            return ERR_ABRT;
 8008898:	f06f 030c 	mvn.w	r3, #12
 800889c:	e1ce      	b.n	8008c3c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fae0 	bl	8008e64 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80088a4:	4b63      	ldr	r3, [pc, #396]	; (8008a34 <tcp_process+0x5b8>)
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d005      	beq.n	80088b8 <tcp_process+0x43c>
            recv_acked--;
 80088ac:	4b61      	ldr	r3, [pc, #388]	; (8008a34 <tcp_process+0x5b8>)
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	4b5f      	ldr	r3, [pc, #380]	; (8008a34 <tcp_process+0x5b8>)
 80088b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088bc:	009a      	lsls	r2, r3, #2
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	f241 111c 	movw	r1, #4380	; 0x111c
 80088c8:	428b      	cmp	r3, r1
 80088ca:	bf38      	it	cc
 80088cc:	460b      	movcc	r3, r1
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d204      	bcs.n	80088dc <tcp_process+0x460>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	b29b      	uxth	r3, r3
 80088da:	e00d      	b.n	80088f8 <tcp_process+0x47c>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d904      	bls.n	80088f4 <tcp_process+0x478>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80088ee:	005b      	lsls	r3, r3, #1
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	e001      	b.n	80088f8 <tcp_process+0x47c>
 80088f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80088fe:	4b4e      	ldr	r3, [pc, #312]	; (8008a38 <tcp_process+0x5bc>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	f003 0320 	and.w	r3, r3, #32
 8008906:	2b00      	cmp	r3, #0
 8008908:	d037      	beq.n	800897a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	8b5b      	ldrh	r3, [r3, #26]
 800890e:	f043 0302 	orr.w	r3, r3, #2
 8008912:	b29a      	uxth	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2207      	movs	r2, #7
 800891c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800891e:	e02c      	b.n	800897a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008920:	4b3b      	ldr	r3, [pc, #236]	; (8008a10 <tcp_process+0x594>)
 8008922:	6819      	ldr	r1, [r3, #0]
 8008924:	4b3b      	ldr	r3, [pc, #236]	; (8008a14 <tcp_process+0x598>)
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	461a      	mov	r2, r3
 800892a:	4b3b      	ldr	r3, [pc, #236]	; (8008a18 <tcp_process+0x59c>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008930:	4b3a      	ldr	r3, [pc, #232]	; (8008a1c <tcp_process+0x5a0>)
 8008932:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008934:	885b      	ldrh	r3, [r3, #2]
 8008936:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008938:	4a38      	ldr	r2, [pc, #224]	; (8008a1c <tcp_process+0x5a0>)
 800893a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800893c:	8812      	ldrh	r2, [r2, #0]
 800893e:	b292      	uxth	r2, r2
 8008940:	9202      	str	r2, [sp, #8]
 8008942:	9301      	str	r3, [sp, #4]
 8008944:	4b36      	ldr	r3, [pc, #216]	; (8008a20 <tcp_process+0x5a4>)
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	4b36      	ldr	r3, [pc, #216]	; (8008a24 <tcp_process+0x5a8>)
 800894a:	4602      	mov	r2, r0
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f003 f829 	bl	800b9a4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8008952:	e167      	b.n	8008c24 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008954:	4b2d      	ldr	r3, [pc, #180]	; (8008a0c <tcp_process+0x590>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 8161 	beq.w	8008c24 <tcp_process+0x7a8>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008966:	1e5a      	subs	r2, r3, #1
 8008968:	4b2b      	ldr	r3, [pc, #172]	; (8008a18 <tcp_process+0x59c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	429a      	cmp	r2, r3
 800896e:	f040 8159 	bne.w	8008c24 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f002 fe0e 	bl	800b594 <tcp_rexmit>
      break;
 8008978:	e154      	b.n	8008c24 <tcp_process+0x7a8>
 800897a:	e153      	b.n	8008c24 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fa71 	bl	8008e64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8008982:	4b2d      	ldr	r3, [pc, #180]	; (8008a38 <tcp_process+0x5bc>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	f003 0320 	and.w	r3, r3, #32
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 814c 	beq.w	8008c28 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	8b5b      	ldrh	r3, [r3, #26]
 8008994:	f043 0302 	orr.w	r3, r3, #2
 8008998:	b29a      	uxth	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2207      	movs	r2, #7
 80089a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80089a4:	e140      	b.n	8008c28 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fa5c 	bl	8008e64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80089ac:	4b22      	ldr	r3, [pc, #136]	; (8008a38 <tcp_process+0x5bc>)
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	f003 0320 	and.w	r3, r3, #32
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d071      	beq.n	8008a9c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80089b8:	4b14      	ldr	r3, [pc, #80]	; (8008a0c <tcp_process+0x590>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	f003 0310 	and.w	r3, r3, #16
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d060      	beq.n	8008a86 <tcp_process+0x60a>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089c8:	4b11      	ldr	r3, [pc, #68]	; (8008a10 <tcp_process+0x594>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d15a      	bne.n	8008a86 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d156      	bne.n	8008a86 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	8b5b      	ldrh	r3, [r3, #26]
 80089dc:	f043 0302 	orr.w	r3, r3, #2
 80089e0:	b29a      	uxth	r2, r3
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7fe fdbc 	bl	8007564 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80089ec:	4b13      	ldr	r3, [pc, #76]	; (8008a3c <tcp_process+0x5c0>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d105      	bne.n	8008a02 <tcp_process+0x586>
 80089f6:	4b11      	ldr	r3, [pc, #68]	; (8008a3c <tcp_process+0x5c0>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	4a0f      	ldr	r2, [pc, #60]	; (8008a3c <tcp_process+0x5c0>)
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	e02e      	b.n	8008a60 <tcp_process+0x5e4>
 8008a02:	4b0e      	ldr	r3, [pc, #56]	; (8008a3c <tcp_process+0x5c0>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	617b      	str	r3, [r7, #20]
 8008a08:	e027      	b.n	8008a5a <tcp_process+0x5de>
 8008a0a:	bf00      	nop
 8008a0c:	200082f4 	.word	0x200082f4
 8008a10:	200082ec 	.word	0x200082ec
 8008a14:	200082f2 	.word	0x200082f2
 8008a18:	200082e8 	.word	0x200082e8
 8008a1c:	200082d8 	.word	0x200082d8
 8008a20:	20004d50 	.word	0x20004d50
 8008a24:	20004d54 	.word	0x20004d54
 8008a28:	08011100 	.word	0x08011100
 8008a2c:	080113a0 	.word	0x080113a0
 8008a30:	0801114c 	.word	0x0801114c
 8008a34:	200082f0 	.word	0x200082f0
 8008a38:	200082f5 	.word	0x200082f5
 8008a3c:	200082bc 	.word	0x200082bc
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d104      	bne.n	8008a54 <tcp_process+0x5d8>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68da      	ldr	r2, [r3, #12]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	60da      	str	r2, [r3, #12]
 8008a52:	e005      	b.n	8008a60 <tcp_process+0x5e4>
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	68db      	ldr	r3, [r3, #12]
 8008a58:	617b      	str	r3, [r7, #20]
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1ef      	bne.n	8008a40 <tcp_process+0x5c4>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	60da      	str	r2, [r3, #12]
 8008a66:	4b77      	ldr	r3, [pc, #476]	; (8008c44 <tcp_process+0x7c8>)
 8008a68:	2201      	movs	r2, #1
 8008a6a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	220a      	movs	r2, #10
 8008a70:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8008a72:	4b75      	ldr	r3, [pc, #468]	; (8008c48 <tcp_process+0x7cc>)
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	60da      	str	r2, [r3, #12]
 8008a7a:	4a73      	ldr	r2, [pc, #460]	; (8008c48 <tcp_process+0x7cc>)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	f003 f952 	bl	800bd28 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8008a84:	e0d2      	b.n	8008c2c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	8b5b      	ldrh	r3, [r3, #26]
 8008a8a:	f043 0302 	orr.w	r3, r3, #2
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2208      	movs	r2, #8
 8008a98:	751a      	strb	r2, [r3, #20]
      break;
 8008a9a:	e0c7      	b.n	8008c2c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008a9c:	4b6b      	ldr	r3, [pc, #428]	; (8008c4c <tcp_process+0x7d0>)
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 80c1 	beq.w	8008c2c <tcp_process+0x7b0>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008aae:	4b68      	ldr	r3, [pc, #416]	; (8008c50 <tcp_process+0x7d4>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	f040 80ba 	bne.w	8008c2c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	f040 80b5 	bne.w	8008c2c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2206      	movs	r2, #6
 8008ac6:	751a      	strb	r2, [r3, #20]
      break;
 8008ac8:	e0b0      	b.n	8008c2c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f9ca 	bl	8008e64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8008ad0:	4b60      	ldr	r3, [pc, #384]	; (8008c54 <tcp_process+0x7d8>)
 8008ad2:	781b      	ldrb	r3, [r3, #0]
 8008ad4:	f003 0320 	and.w	r3, r3, #32
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 80a9 	beq.w	8008c30 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	8b5b      	ldrh	r3, [r3, #26]
 8008ae2:	f043 0302 	orr.w	r3, r3, #2
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f7fe fd39 	bl	8007564 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008af2:	4b59      	ldr	r3, [pc, #356]	; (8008c58 <tcp_process+0x7dc>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d105      	bne.n	8008b08 <tcp_process+0x68c>
 8008afc:	4b56      	ldr	r3, [pc, #344]	; (8008c58 <tcp_process+0x7dc>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	4a55      	ldr	r2, [pc, #340]	; (8008c58 <tcp_process+0x7dc>)
 8008b04:	6013      	str	r3, [r2, #0]
 8008b06:	e013      	b.n	8008b30 <tcp_process+0x6b4>
 8008b08:	4b53      	ldr	r3, [pc, #332]	; (8008c58 <tcp_process+0x7dc>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	613b      	str	r3, [r7, #16]
 8008b0e:	e00c      	b.n	8008b2a <tcp_process+0x6ae>
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d104      	bne.n	8008b24 <tcp_process+0x6a8>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68da      	ldr	r2, [r3, #12]
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	60da      	str	r2, [r3, #12]
 8008b22:	e005      	b.n	8008b30 <tcp_process+0x6b4>
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	613b      	str	r3, [r7, #16]
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1ef      	bne.n	8008b10 <tcp_process+0x694>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	60da      	str	r2, [r3, #12]
 8008b36:	4b43      	ldr	r3, [pc, #268]	; (8008c44 <tcp_process+0x7c8>)
 8008b38:	2201      	movs	r2, #1
 8008b3a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	220a      	movs	r2, #10
 8008b40:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008b42:	4b41      	ldr	r3, [pc, #260]	; (8008c48 <tcp_process+0x7cc>)
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	60da      	str	r2, [r3, #12]
 8008b4a:	4a3f      	ldr	r2, [pc, #252]	; (8008c48 <tcp_process+0x7cc>)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6013      	str	r3, [r2, #0]
 8008b50:	f003 f8ea 	bl	800bd28 <tcp_timer_needed>
      }
      break;
 8008b54:	e06c      	b.n	8008c30 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f984 	bl	8008e64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008b5c:	4b3b      	ldr	r3, [pc, #236]	; (8008c4c <tcp_process+0x7d0>)
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	f003 0310 	and.w	r3, r3, #16
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d065      	beq.n	8008c34 <tcp_process+0x7b8>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b6c:	4b38      	ldr	r3, [pc, #224]	; (8008c50 <tcp_process+0x7d4>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d15f      	bne.n	8008c34 <tcp_process+0x7b8>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d15b      	bne.n	8008c34 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7fe fcf1 	bl	8007564 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8008b82:	4b35      	ldr	r3, [pc, #212]	; (8008c58 <tcp_process+0x7dc>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d105      	bne.n	8008b98 <tcp_process+0x71c>
 8008b8c:	4b32      	ldr	r3, [pc, #200]	; (8008c58 <tcp_process+0x7dc>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	4a31      	ldr	r2, [pc, #196]	; (8008c58 <tcp_process+0x7dc>)
 8008b94:	6013      	str	r3, [r2, #0]
 8008b96:	e013      	b.n	8008bc0 <tcp_process+0x744>
 8008b98:	4b2f      	ldr	r3, [pc, #188]	; (8008c58 <tcp_process+0x7dc>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	e00c      	b.n	8008bba <tcp_process+0x73e>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d104      	bne.n	8008bb4 <tcp_process+0x738>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68da      	ldr	r2, [r3, #12]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	60da      	str	r2, [r3, #12]
 8008bb2:	e005      	b.n	8008bc0 <tcp_process+0x744>
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	60fb      	str	r3, [r7, #12]
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1ef      	bne.n	8008ba0 <tcp_process+0x724>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	60da      	str	r2, [r3, #12]
 8008bc6:	4b1f      	ldr	r3, [pc, #124]	; (8008c44 <tcp_process+0x7c8>)
 8008bc8:	2201      	movs	r2, #1
 8008bca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	220a      	movs	r2, #10
 8008bd0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008bd2:	4b1d      	ldr	r3, [pc, #116]	; (8008c48 <tcp_process+0x7cc>)
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	60da      	str	r2, [r3, #12]
 8008bda:	4a1b      	ldr	r2, [pc, #108]	; (8008c48 <tcp_process+0x7cc>)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6013      	str	r3, [r2, #0]
 8008be0:	f003 f8a2 	bl	800bd28 <tcp_timer_needed>
      }
      break;
 8008be4:	e026      	b.n	8008c34 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f93c 	bl	8008e64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008bec:	4b17      	ldr	r3, [pc, #92]	; (8008c4c <tcp_process+0x7d0>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	f003 0310 	and.w	r3, r3, #16
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d01f      	beq.n	8008c38 <tcp_process+0x7bc>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008bfc:	4b14      	ldr	r3, [pc, #80]	; (8008c50 <tcp_process+0x7d4>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d119      	bne.n	8008c38 <tcp_process+0x7bc>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d115      	bne.n	8008c38 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008c0c:	4b11      	ldr	r3, [pc, #68]	; (8008c54 <tcp_process+0x7d8>)
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	f043 0310 	orr.w	r3, r3, #16
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	4b0f      	ldr	r3, [pc, #60]	; (8008c54 <tcp_process+0x7d8>)
 8008c18:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008c1a:	e00d      	b.n	8008c38 <tcp_process+0x7bc>
    default:
      break;
 8008c1c:	bf00      	nop
 8008c1e:	e00c      	b.n	8008c3a <tcp_process+0x7be>
      break;
 8008c20:	bf00      	nop
 8008c22:	e00a      	b.n	8008c3a <tcp_process+0x7be>
      break;
 8008c24:	bf00      	nop
 8008c26:	e008      	b.n	8008c3a <tcp_process+0x7be>
      break;
 8008c28:	bf00      	nop
 8008c2a:	e006      	b.n	8008c3a <tcp_process+0x7be>
      break;
 8008c2c:	bf00      	nop
 8008c2e:	e004      	b.n	8008c3a <tcp_process+0x7be>
      break;
 8008c30:	bf00      	nop
 8008c32:	e002      	b.n	8008c3a <tcp_process+0x7be>
      break;
 8008c34:	bf00      	nop
 8008c36:	e000      	b.n	8008c3a <tcp_process+0x7be>
      break;
 8008c38:	bf00      	nop
  }
  return ERR_OK;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3724      	adds	r7, #36	; 0x24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd90      	pop	{r4, r7, pc}
 8008c44:	200082c4 	.word	0x200082c4
 8008c48:	200082c0 	.word	0x200082c0
 8008c4c:	200082f4 	.word	0x200082f4
 8008c50:	200082ec 	.word	0x200082ec
 8008c54:	200082f5 	.word	0x200082f5
 8008c58:	200082bc 	.word	0x200082bc

08008c5c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008c5c:	b590      	push	{r4, r7, lr}
 8008c5e:	b085      	sub	sp, #20
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d106      	bne.n	8008c7a <tcp_oos_insert_segment+0x1e>
 8008c6c:	4b3b      	ldr	r3, [pc, #236]	; (8008d5c <tcp_oos_insert_segment+0x100>)
 8008c6e:	f240 421f 	movw	r2, #1055	; 0x41f
 8008c72:	493b      	ldr	r1, [pc, #236]	; (8008d60 <tcp_oos_insert_segment+0x104>)
 8008c74:	483b      	ldr	r0, [pc, #236]	; (8008d64 <tcp_oos_insert_segment+0x108>)
 8008c76:	f005 fe85 	bl	800e984 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	899b      	ldrh	r3, [r3, #12]
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fb fa32 	bl	80040ec <lwip_htons>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d028      	beq.n	8008ce6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008c94:	6838      	ldr	r0, [r7, #0]
 8008c96:	f7fe f9d5 	bl	8007044 <tcp_segs_free>
    next = NULL;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	603b      	str	r3, [r7, #0]
 8008c9e:	e056      	b.n	8008d4e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	899b      	ldrh	r3, [r3, #12]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7fb fa1f 	bl	80040ec <lwip_htons>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	f003 0301 	and.w	r3, r3, #1
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d00d      	beq.n	8008cd6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	68db      	ldr	r3, [r3, #12]
 8008cbe:	899b      	ldrh	r3, [r3, #12]
 8008cc0:	b29c      	uxth	r4, r3
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	f7fb fa12 	bl	80040ec <lwip_htons>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	461a      	mov	r2, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	4322      	orrs	r2, r4
 8008cd2:	b292      	uxth	r2, r2
 8008cd4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f7fe f9c4 	bl	800706e <tcp_seg_free>
    while (next &&
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00e      	beq.n	8008d0a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	891b      	ldrh	r3, [r3, #8]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4b1d      	ldr	r3, [pc, #116]	; (8008d68 <tcp_oos_insert_segment+0x10c>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	441a      	add	r2, r3
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	8909      	ldrh	r1, [r1, #8]
 8008d02:	440b      	add	r3, r1
 8008d04:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	daca      	bge.n	8008ca0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d01e      	beq.n	8008d4e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	891b      	ldrh	r3, [r3, #8]
 8008d14:	461a      	mov	r2, r3
 8008d16:	4b14      	ldr	r3, [pc, #80]	; (8008d68 <tcp_oos_insert_segment+0x10c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	441a      	add	r2, r3
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	dd12      	ble.n	8008d4e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	4b0d      	ldr	r3, [pc, #52]	; (8008d68 <tcp_oos_insert_segment+0x10c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685a      	ldr	r2, [r3, #4]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	891b      	ldrh	r3, [r3, #8]
 8008d46:	4619      	mov	r1, r3
 8008d48:	4610      	mov	r0, r2
 8008d4a:	f7fc fba7 	bl	800549c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	601a      	str	r2, [r3, #0]
}
 8008d54:	bf00      	nop
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd90      	pop	{r4, r7, pc}
 8008d5c:	08011100 	.word	0x08011100
 8008d60:	080113c0 	.word	0x080113c0
 8008d64:	0801114c 	.word	0x0801114c
 8008d68:	200082e8 	.word	0x200082e8

08008d6c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008d6c:	b5b0      	push	{r4, r5, r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
 8008d78:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008d7a:	e03e      	b.n	8008dfa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fc fd94 	bl	80058b8 <pbuf_clen>
 8008d90:	4603      	mov	r3, r0
 8008d92:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008d9a:	8a7a      	ldrh	r2, [r7, #18]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d906      	bls.n	8008dae <tcp_free_acked_segments+0x42>
 8008da0:	4b2a      	ldr	r3, [pc, #168]	; (8008e4c <tcp_free_acked_segments+0xe0>)
 8008da2:	f240 4257 	movw	r2, #1111	; 0x457
 8008da6:	492a      	ldr	r1, [pc, #168]	; (8008e50 <tcp_free_acked_segments+0xe4>)
 8008da8:	482a      	ldr	r0, [pc, #168]	; (8008e54 <tcp_free_acked_segments+0xe8>)
 8008daa:	f005 fdeb 	bl	800e984 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008db4:	8a7b      	ldrh	r3, [r7, #18]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	891a      	ldrh	r2, [r3, #8]
 8008dc4:	4b24      	ldr	r3, [pc, #144]	; (8008e58 <tcp_free_acked_segments+0xec>)
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	4413      	add	r3, r2
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	4b22      	ldr	r3, [pc, #136]	; (8008e58 <tcp_free_acked_segments+0xec>)
 8008dce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008dd0:	6978      	ldr	r0, [r7, #20]
 8008dd2:	f7fe f94c 	bl	800706e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00c      	beq.n	8008dfa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d109      	bne.n	8008dfa <tcp_free_acked_segments+0x8e>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d106      	bne.n	8008dfa <tcp_free_acked_segments+0x8e>
 8008dec:	4b17      	ldr	r3, [pc, #92]	; (8008e4c <tcp_free_acked_segments+0xe0>)
 8008dee:	f240 4261 	movw	r2, #1121	; 0x461
 8008df2:	491a      	ldr	r1, [pc, #104]	; (8008e5c <tcp_free_acked_segments+0xf0>)
 8008df4:	4817      	ldr	r0, [pc, #92]	; (8008e54 <tcp_free_acked_segments+0xe8>)
 8008df6:	f005 fdc5 	bl	800e984 <iprintf>
  while (seg_list != NULL &&
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d020      	beq.n	8008e42 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fb f985 	bl	8004116 <lwip_htonl>
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	891b      	ldrh	r3, [r3, #8]
 8008e12:	461d      	mov	r5, r3
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	899b      	ldrh	r3, [r3, #12]
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fb f965 	bl	80040ec <lwip_htons>
 8008e22:	4603      	mov	r3, r0
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	f003 0303 	and.w	r3, r3, #3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d001      	beq.n	8008e32 <tcp_free_acked_segments+0xc6>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e000      	b.n	8008e34 <tcp_free_acked_segments+0xc8>
 8008e32:	2300      	movs	r3, #0
 8008e34:	442b      	add	r3, r5
 8008e36:	18e2      	adds	r2, r4, r3
 8008e38:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <tcp_free_acked_segments+0xf4>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	dd9c      	ble.n	8008d7c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008e42:	68bb      	ldr	r3, [r7, #8]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3718      	adds	r7, #24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8008e4c:	08011100 	.word	0x08011100
 8008e50:	080113e8 	.word	0x080113e8
 8008e54:	0801114c 	.word	0x0801114c
 8008e58:	200082f0 	.word	0x200082f0
 8008e5c:	08011410 	.word	0x08011410
 8008e60:	200082ec 	.word	0x200082ec

08008e64 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008e64:	b5b0      	push	{r4, r5, r7, lr}
 8008e66:	b094      	sub	sp, #80	; 0x50
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d106      	bne.n	8008e84 <tcp_receive+0x20>
 8008e76:	4b91      	ldr	r3, [pc, #580]	; (80090bc <tcp_receive+0x258>)
 8008e78:	f240 427b 	movw	r2, #1147	; 0x47b
 8008e7c:	4990      	ldr	r1, [pc, #576]	; (80090c0 <tcp_receive+0x25c>)
 8008e7e:	4891      	ldr	r0, [pc, #580]	; (80090c4 <tcp_receive+0x260>)
 8008e80:	f005 fd80 	bl	800e984 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	7d1b      	ldrb	r3, [r3, #20]
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d806      	bhi.n	8008e9a <tcp_receive+0x36>
 8008e8c:	4b8b      	ldr	r3, [pc, #556]	; (80090bc <tcp_receive+0x258>)
 8008e8e:	f240 427c 	movw	r2, #1148	; 0x47c
 8008e92:	498d      	ldr	r1, [pc, #564]	; (80090c8 <tcp_receive+0x264>)
 8008e94:	488b      	ldr	r0, [pc, #556]	; (80090c4 <tcp_receive+0x260>)
 8008e96:	f005 fd75 	bl	800e984 <iprintf>

  if (flags & TCP_ACK) {
 8008e9a:	4b8c      	ldr	r3, [pc, #560]	; (80090cc <tcp_receive+0x268>)
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	f003 0310 	and.w	r3, r3, #16
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f000 8264 	beq.w	8009370 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008eae:	461a      	mov	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eb4:	4413      	add	r3, r2
 8008eb6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ebc:	4b84      	ldr	r3, [pc, #528]	; (80090d0 <tcp_receive+0x26c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	db1b      	blt.n	8008efe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008eca:	4b81      	ldr	r3, [pc, #516]	; (80090d0 <tcp_receive+0x26c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d106      	bne.n	8008ee0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ed6:	4b7f      	ldr	r3, [pc, #508]	; (80090d4 <tcp_receive+0x270>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	1ad3      	subs	r3, r2, r3
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	db0e      	blt.n	8008efe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ee4:	4b7b      	ldr	r3, [pc, #492]	; (80090d4 <tcp_receive+0x270>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d125      	bne.n	8008f38 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008eec:	4b7a      	ldr	r3, [pc, #488]	; (80090d8 <tcp_receive+0x274>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	89db      	ldrh	r3, [r3, #14]
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d91c      	bls.n	8008f38 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008efe:	4b76      	ldr	r3, [pc, #472]	; (80090d8 <tcp_receive+0x274>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	89db      	ldrh	r3, [r3, #14]
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d205      	bcs.n	8008f28 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008f28:	4b69      	ldr	r3, [pc, #420]	; (80090d0 <tcp_receive+0x26c>)
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008f30:	4b68      	ldr	r3, [pc, #416]	; (80090d4 <tcp_receive+0x270>)
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008f38:	4b66      	ldr	r3, [pc, #408]	; (80090d4 <tcp_receive+0x270>)
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	dc58      	bgt.n	8008ff8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008f46:	4b65      	ldr	r3, [pc, #404]	; (80090dc <tcp_receive+0x278>)
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d14b      	bne.n	8008fe6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008f58:	4413      	add	r3, r2
 8008f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d142      	bne.n	8008fe6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	db3d      	blt.n	8008fe6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f6e:	4b59      	ldr	r3, [pc, #356]	; (80090d4 <tcp_receive+0x270>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d137      	bne.n	8008fe6 <tcp_receive+0x182>
              found_dupack = 1;
 8008f76:	2301      	movs	r3, #1
 8008f78:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f80:	2bff      	cmp	r3, #255	; 0xff
 8008f82:	d007      	beq.n	8008f94 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d91b      	bls.n	8008fd6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fa8:	4413      	add	r3, r2
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d30a      	bcc.n	8008fcc <tcp_receive+0x168>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fc0:	4413      	add	r3, r2
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008fca:	e004      	b.n	8008fd6 <tcp_receive+0x172>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d902      	bls.n	8008fe6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f002 fb43 	bl	800b66c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f040 8161 	bne.w	80092b0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008ff6:	e15b      	b.n	80092b0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008ff8:	4b36      	ldr	r3, [pc, #216]	; (80090d4 <tcp_receive+0x270>)
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	3b01      	subs	r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	f2c0 814e 	blt.w	80092a6 <tcp_receive+0x442>
 800900a:	4b32      	ldr	r3, [pc, #200]	; (80090d4 <tcp_receive+0x270>)
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009012:	1ad3      	subs	r3, r2, r3
 8009014:	2b00      	cmp	r3, #0
 8009016:	f300 8146 	bgt.w	80092a6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	8b5b      	ldrh	r3, [r3, #26]
 800901e:	f003 0304 	and.w	r3, r3, #4
 8009022:	2b00      	cmp	r3, #0
 8009024:	d010      	beq.n	8009048 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	8b5b      	ldrh	r3, [r3, #26]
 800902a:	f023 0304 	bic.w	r3, r3, #4
 800902e:	b29a      	uxth	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009056:	10db      	asrs	r3, r3, #3
 8009058:	b21b      	sxth	r3, r3
 800905a:	b29a      	uxth	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009062:	b29b      	uxth	r3, r3
 8009064:	4413      	add	r3, r2
 8009066:	b29b      	uxth	r3, r3
 8009068:	b21a      	sxth	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009070:	4b18      	ldr	r3, [pc, #96]	; (80090d4 <tcp_receive+0x270>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	b29a      	uxth	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800907a:	b29b      	uxth	r3, r3
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8009088:	4b12      	ldr	r3, [pc, #72]	; (80090d4 <tcp_receive+0x270>)
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	7d1b      	ldrb	r3, [r3, #20]
 8009094:	2b03      	cmp	r3, #3
 8009096:	f240 8097 	bls.w	80091c8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d245      	bcs.n	8009136 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	8b5b      	ldrh	r3, [r3, #26]
 80090ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d014      	beq.n	80090e0 <tcp_receive+0x27c>
 80090b6:	2301      	movs	r3, #1
 80090b8:	e013      	b.n	80090e2 <tcp_receive+0x27e>
 80090ba:	bf00      	nop
 80090bc:	08011100 	.word	0x08011100
 80090c0:	08011430 	.word	0x08011430
 80090c4:	0801114c 	.word	0x0801114c
 80090c8:	0801144c 	.word	0x0801144c
 80090cc:	200082f4 	.word	0x200082f4
 80090d0:	200082e8 	.word	0x200082e8
 80090d4:	200082ec 	.word	0x200082ec
 80090d8:	200082d8 	.word	0x200082d8
 80090dc:	200082f2 	.word	0x200082f2
 80090e0:	2302      	movs	r3, #2
 80090e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80090e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090f0:	fb12 f303 	smulbb	r3, r2, r3
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80090f8:	4293      	cmp	r3, r2
 80090fa:	bf28      	it	cs
 80090fc:	4613      	movcs	r3, r2
 80090fe:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009106:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009108:	4413      	add	r3, r2
 800910a:	b29a      	uxth	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009112:	429a      	cmp	r2, r3
 8009114:	d309      	bcc.n	800912a <tcp_receive+0x2c6>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800911c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800911e:	4413      	add	r3, r2
 8009120:	b29a      	uxth	r2, r3
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009128:	e04e      	b.n	80091c8 <tcp_receive+0x364>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009130:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8009134:	e048      	b.n	80091c8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800913c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800913e:	4413      	add	r3, r2
 8009140:	b29a      	uxth	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8009148:	429a      	cmp	r2, r3
 800914a:	d309      	bcc.n	8009160 <tcp_receive+0x2fc>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009152:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009154:	4413      	add	r3, r2
 8009156:	b29a      	uxth	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800915e:	e004      	b.n	800916a <tcp_receive+0x306>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009166:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009176:	429a      	cmp	r2, r3
 8009178:	d326      	bcc.n	80091c8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	b29a      	uxth	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800919a:	4413      	add	r3, r2
 800919c:	b29a      	uxth	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d30a      	bcc.n	80091be <tcp_receive+0x35a>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80091b2:	4413      	add	r3, r2
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80091bc:	e004      	b.n	80091c8 <tcp_receive+0x364>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80091c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091d0:	4a98      	ldr	r2, [pc, #608]	; (8009434 <tcp_receive+0x5d0>)
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f7ff fdca 	bl	8008d6c <tcp_free_acked_segments>
 80091d8:	4602      	mov	r2, r0
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e6:	4a94      	ldr	r2, [pc, #592]	; (8009438 <tcp_receive+0x5d4>)
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f7ff fdbf 	bl	8008d6c <tcp_free_acked_segments>
 80091ee:	4602      	mov	r2, r0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d104      	bne.n	8009206 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009202:	861a      	strh	r2, [r3, #48]	; 0x30
 8009204:	e002      	b.n	800920c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009216:	2b00      	cmp	r3, #0
 8009218:	d103      	bne.n	8009222 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009228:	4b84      	ldr	r3, [pc, #528]	; (800943c <tcp_receive+0x5d8>)
 800922a:	881b      	ldrh	r3, [r3, #0]
 800922c:	4413      	add	r3, r2
 800922e:	b29a      	uxth	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	8b5b      	ldrh	r3, [r3, #26]
 800923a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800923e:	2b00      	cmp	r3, #0
 8009240:	d035      	beq.n	80092ae <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009246:	2b00      	cmp	r3, #0
 8009248:	d118      	bne.n	800927c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00c      	beq.n	800926c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	4618      	mov	r0, r3
 8009260:	f7fa ff59 	bl	8004116 <lwip_htonl>
 8009264:	4603      	mov	r3, r0
 8009266:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8009268:	2b00      	cmp	r3, #0
 800926a:	dc20      	bgt.n	80092ae <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	8b5b      	ldrh	r3, [r3, #26]
 8009270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009274:	b29a      	uxth	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800927a:	e018      	b.n	80092ae <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	4618      	mov	r0, r3
 800928a:	f7fa ff44 	bl	8004116 <lwip_htonl>
 800928e:	4603      	mov	r3, r0
 8009290:	1ae3      	subs	r3, r4, r3
 8009292:	2b00      	cmp	r3, #0
 8009294:	dc0b      	bgt.n	80092ae <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	8b5b      	ldrh	r3, [r3, #26]
 800929a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800929e:	b29a      	uxth	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80092a4:	e003      	b.n	80092ae <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f002 fbce 	bl	800ba48 <tcp_send_empty_ack>
 80092ac:	e000      	b.n	80092b0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80092ae:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d05b      	beq.n	8009370 <tcp_receive+0x50c>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092bc:	4b60      	ldr	r3, [pc, #384]	; (8009440 <tcp_receive+0x5dc>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	da54      	bge.n	8009370 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80092c6:	4b5f      	ldr	r3, [pc, #380]	; (8009444 <tcp_receive+0x5e0>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80092da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80092e4:	10db      	asrs	r3, r3, #3
 80092e6:	b21b      	sxth	r3, r3
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80092fe:	4413      	add	r3, r2
 8009300:	b29b      	uxth	r3, r3
 8009302:	b21a      	sxth	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009308:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800930c:	2b00      	cmp	r3, #0
 800930e:	da05      	bge.n	800931c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8009310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009314:	425b      	negs	r3, r3
 8009316:	b29b      	uxth	r3, r3
 8009318:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800931c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009326:	109b      	asrs	r3, r3, #2
 8009328:	b21b      	sxth	r3, r3
 800932a:	b29b      	uxth	r3, r3
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	b29b      	uxth	r3, r3
 8009330:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800933a:	b29a      	uxth	r2, r3
 800933c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009340:	4413      	add	r3, r2
 8009342:	b29b      	uxth	r3, r3
 8009344:	b21a      	sxth	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009350:	10db      	asrs	r3, r3, #3
 8009352:	b21b      	sxth	r3, r3
 8009354:	b29a      	uxth	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800935c:	b29b      	uxth	r3, r3
 800935e:	4413      	add	r3, r2
 8009360:	b29b      	uxth	r3, r3
 8009362:	b21a      	sxth	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009370:	4b35      	ldr	r3, [pc, #212]	; (8009448 <tcp_receive+0x5e4>)
 8009372:	881b      	ldrh	r3, [r3, #0]
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 84e2 	beq.w	8009d3e <tcp_receive+0xeda>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	7d1b      	ldrb	r3, [r3, #20]
 800937e:	2b06      	cmp	r3, #6
 8009380:	f200 84dd 	bhi.w	8009d3e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009388:	4b30      	ldr	r3, [pc, #192]	; (800944c <tcp_receive+0x5e8>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	3b01      	subs	r3, #1
 8009390:	2b00      	cmp	r3, #0
 8009392:	f2c0 808f 	blt.w	80094b4 <tcp_receive+0x650>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800939a:	4b2b      	ldr	r3, [pc, #172]	; (8009448 <tcp_receive+0x5e4>)
 800939c:	881b      	ldrh	r3, [r3, #0]
 800939e:	4619      	mov	r1, r3
 80093a0:	4b2a      	ldr	r3, [pc, #168]	; (800944c <tcp_receive+0x5e8>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	440b      	add	r3, r1
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	3301      	adds	r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f300 8082 	bgt.w	80094b4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80093b0:	4b27      	ldr	r3, [pc, #156]	; (8009450 <tcp_receive+0x5ec>)
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093ba:	4b24      	ldr	r3, [pc, #144]	; (800944c <tcp_receive+0x5e8>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80093c2:	4b23      	ldr	r3, [pc, #140]	; (8009450 <tcp_receive+0x5ec>)
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d106      	bne.n	80093d8 <tcp_receive+0x574>
 80093ca:	4b22      	ldr	r3, [pc, #136]	; (8009454 <tcp_receive+0x5f0>)
 80093cc:	f240 5294 	movw	r2, #1428	; 0x594
 80093d0:	4921      	ldr	r1, [pc, #132]	; (8009458 <tcp_receive+0x5f4>)
 80093d2:	4822      	ldr	r0, [pc, #136]	; (800945c <tcp_receive+0x5f8>)
 80093d4:	f005 fad6 	bl	800e984 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80093de:	4293      	cmp	r3, r2
 80093e0:	d906      	bls.n	80093f0 <tcp_receive+0x58c>
 80093e2:	4b1c      	ldr	r3, [pc, #112]	; (8009454 <tcp_receive+0x5f0>)
 80093e4:	f240 5295 	movw	r2, #1429	; 0x595
 80093e8:	491d      	ldr	r1, [pc, #116]	; (8009460 <tcp_receive+0x5fc>)
 80093ea:	481c      	ldr	r0, [pc, #112]	; (800945c <tcp_receive+0x5f8>)
 80093ec:	f005 faca 	bl	800e984 <iprintf>
      off = (u16_t)off32;
 80093f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80093f6:	4b16      	ldr	r3, [pc, #88]	; (8009450 <tcp_receive+0x5ec>)
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	891b      	ldrh	r3, [r3, #8]
 80093fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009400:	429a      	cmp	r2, r3
 8009402:	d906      	bls.n	8009412 <tcp_receive+0x5ae>
 8009404:	4b13      	ldr	r3, [pc, #76]	; (8009454 <tcp_receive+0x5f0>)
 8009406:	f240 5297 	movw	r2, #1431	; 0x597
 800940a:	4916      	ldr	r1, [pc, #88]	; (8009464 <tcp_receive+0x600>)
 800940c:	4813      	ldr	r0, [pc, #76]	; (800945c <tcp_receive+0x5f8>)
 800940e:	f005 fab9 	bl	800e984 <iprintf>
      inseg.len -= off;
 8009412:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <tcp_receive+0x5ec>)
 8009414:	891a      	ldrh	r2, [r3, #8]
 8009416:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	b29a      	uxth	r2, r3
 800941e:	4b0c      	ldr	r3, [pc, #48]	; (8009450 <tcp_receive+0x5ec>)
 8009420:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009422:	4b0b      	ldr	r3, [pc, #44]	; (8009450 <tcp_receive+0x5ec>)
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	891a      	ldrh	r2, [r3, #8]
 8009428:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8009430:	e02a      	b.n	8009488 <tcp_receive+0x624>
 8009432:	bf00      	nop
 8009434:	08011468 	.word	0x08011468
 8009438:	08011470 	.word	0x08011470
 800943c:	200082f0 	.word	0x200082f0
 8009440:	200082ec 	.word	0x200082ec
 8009444:	200082b0 	.word	0x200082b0
 8009448:	200082f2 	.word	0x200082f2
 800944c:	200082e8 	.word	0x200082e8
 8009450:	200082c8 	.word	0x200082c8
 8009454:	08011100 	.word	0x08011100
 8009458:	08011478 	.word	0x08011478
 800945c:	0801114c 	.word	0x0801114c
 8009460:	08011488 	.word	0x08011488
 8009464:	08011498 	.word	0x08011498
        off -= p->len;
 8009468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800946a:	895b      	ldrh	r3, [r3, #10]
 800946c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009470:	1ad3      	subs	r3, r2, r3
 8009472:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8009476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009478:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800947a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800947c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800947e:	2200      	movs	r2, #0
 8009480:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8009482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8009488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800948a:	895b      	ldrh	r3, [r3, #10]
 800948c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8009490:	429a      	cmp	r2, r3
 8009492:	d8e9      	bhi.n	8009468 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8009494:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009498:	4619      	mov	r1, r3
 800949a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800949c:	f7fc f8fe 	bl	800569c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a4:	4a91      	ldr	r2, [pc, #580]	; (80096ec <tcp_receive+0x888>)
 80094a6:	6013      	str	r3, [r2, #0]
 80094a8:	4b91      	ldr	r3, [pc, #580]	; (80096f0 <tcp_receive+0x88c>)
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	4a8f      	ldr	r2, [pc, #572]	; (80096ec <tcp_receive+0x888>)
 80094ae:	6812      	ldr	r2, [r2, #0]
 80094b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80094b2:	e00d      	b.n	80094d0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80094b4:	4b8d      	ldr	r3, [pc, #564]	; (80096ec <tcp_receive+0x888>)
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	2b00      	cmp	r3, #0
 80094c0:	da06      	bge.n	80094d0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	8b5b      	ldrh	r3, [r3, #26]
 80094c6:	f043 0302 	orr.w	r3, r3, #2
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80094d0:	4b86      	ldr	r3, [pc, #536]	; (80096ec <tcp_receive+0x888>)
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f2c0 842a 	blt.w	8009d34 <tcp_receive+0xed0>
 80094e0:	4b82      	ldr	r3, [pc, #520]	; (80096ec <tcp_receive+0x888>)
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	6879      	ldr	r1, [r7, #4]
 80094ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094ec:	440b      	add	r3, r1
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	3301      	adds	r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f300 841e 	bgt.w	8009d34 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094fc:	4b7b      	ldr	r3, [pc, #492]	; (80096ec <tcp_receive+0x888>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	f040 829a 	bne.w	8009a3a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8009506:	4b7a      	ldr	r3, [pc, #488]	; (80096f0 <tcp_receive+0x88c>)
 8009508:	891c      	ldrh	r4, [r3, #8]
 800950a:	4b79      	ldr	r3, [pc, #484]	; (80096f0 <tcp_receive+0x88c>)
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	899b      	ldrh	r3, [r3, #12]
 8009510:	b29b      	uxth	r3, r3
 8009512:	4618      	mov	r0, r3
 8009514:	f7fa fdea 	bl	80040ec <lwip_htons>
 8009518:	4603      	mov	r3, r0
 800951a:	b2db      	uxtb	r3, r3
 800951c:	f003 0303 	and.w	r3, r3, #3
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <tcp_receive+0x6c4>
 8009524:	2301      	movs	r3, #1
 8009526:	e000      	b.n	800952a <tcp_receive+0x6c6>
 8009528:	2300      	movs	r3, #0
 800952a:	4423      	add	r3, r4
 800952c:	b29a      	uxth	r2, r3
 800952e:	4b71      	ldr	r3, [pc, #452]	; (80096f4 <tcp_receive+0x890>)
 8009530:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009536:	4b6f      	ldr	r3, [pc, #444]	; (80096f4 <tcp_receive+0x890>)
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	429a      	cmp	r2, r3
 800953c:	d275      	bcs.n	800962a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800953e:	4b6c      	ldr	r3, [pc, #432]	; (80096f0 <tcp_receive+0x88c>)
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	899b      	ldrh	r3, [r3, #12]
 8009544:	b29b      	uxth	r3, r3
 8009546:	4618      	mov	r0, r3
 8009548:	f7fa fdd0 	bl	80040ec <lwip_htons>
 800954c:	4603      	mov	r3, r0
 800954e:	b2db      	uxtb	r3, r3
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	2b00      	cmp	r3, #0
 8009556:	d01f      	beq.n	8009598 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009558:	4b65      	ldr	r3, [pc, #404]	; (80096f0 <tcp_receive+0x88c>)
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	899b      	ldrh	r3, [r3, #12]
 800955e:	b29b      	uxth	r3, r3
 8009560:	b21b      	sxth	r3, r3
 8009562:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009566:	b21c      	sxth	r4, r3
 8009568:	4b61      	ldr	r3, [pc, #388]	; (80096f0 <tcp_receive+0x88c>)
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	899b      	ldrh	r3, [r3, #12]
 800956e:	b29b      	uxth	r3, r3
 8009570:	4618      	mov	r0, r3
 8009572:	f7fa fdbb 	bl	80040ec <lwip_htons>
 8009576:	4603      	mov	r3, r0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	b29b      	uxth	r3, r3
 800957c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009580:	b29b      	uxth	r3, r3
 8009582:	4618      	mov	r0, r3
 8009584:	f7fa fdb2 	bl	80040ec <lwip_htons>
 8009588:	4603      	mov	r3, r0
 800958a:	b21b      	sxth	r3, r3
 800958c:	4323      	orrs	r3, r4
 800958e:	b21a      	sxth	r2, r3
 8009590:	4b57      	ldr	r3, [pc, #348]	; (80096f0 <tcp_receive+0x88c>)
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	b292      	uxth	r2, r2
 8009596:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800959c:	4b54      	ldr	r3, [pc, #336]	; (80096f0 <tcp_receive+0x88c>)
 800959e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80095a0:	4b53      	ldr	r3, [pc, #332]	; (80096f0 <tcp_receive+0x88c>)
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	899b      	ldrh	r3, [r3, #12]
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	4618      	mov	r0, r3
 80095aa:	f7fa fd9f 	bl	80040ec <lwip_htons>
 80095ae:	4603      	mov	r3, r0
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	f003 0302 	and.w	r3, r3, #2
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d005      	beq.n	80095c6 <tcp_receive+0x762>
            inseg.len -= 1;
 80095ba:	4b4d      	ldr	r3, [pc, #308]	; (80096f0 <tcp_receive+0x88c>)
 80095bc:	891b      	ldrh	r3, [r3, #8]
 80095be:	3b01      	subs	r3, #1
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	4b4b      	ldr	r3, [pc, #300]	; (80096f0 <tcp_receive+0x88c>)
 80095c4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80095c6:	4b4a      	ldr	r3, [pc, #296]	; (80096f0 <tcp_receive+0x88c>)
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	4a49      	ldr	r2, [pc, #292]	; (80096f0 <tcp_receive+0x88c>)
 80095cc:	8912      	ldrh	r2, [r2, #8]
 80095ce:	4611      	mov	r1, r2
 80095d0:	4618      	mov	r0, r3
 80095d2:	f7fb ff63 	bl	800549c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80095d6:	4b46      	ldr	r3, [pc, #280]	; (80096f0 <tcp_receive+0x88c>)
 80095d8:	891c      	ldrh	r4, [r3, #8]
 80095da:	4b45      	ldr	r3, [pc, #276]	; (80096f0 <tcp_receive+0x88c>)
 80095dc:	68db      	ldr	r3, [r3, #12]
 80095de:	899b      	ldrh	r3, [r3, #12]
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	4618      	mov	r0, r3
 80095e4:	f7fa fd82 	bl	80040ec <lwip_htons>
 80095e8:	4603      	mov	r3, r0
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	f003 0303 	and.w	r3, r3, #3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <tcp_receive+0x794>
 80095f4:	2301      	movs	r3, #1
 80095f6:	e000      	b.n	80095fa <tcp_receive+0x796>
 80095f8:	2300      	movs	r3, #0
 80095fa:	4423      	add	r3, r4
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	4b3d      	ldr	r3, [pc, #244]	; (80096f4 <tcp_receive+0x890>)
 8009600:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009602:	4b3c      	ldr	r3, [pc, #240]	; (80096f4 <tcp_receive+0x890>)
 8009604:	881b      	ldrh	r3, [r3, #0]
 8009606:	461a      	mov	r2, r3
 8009608:	4b38      	ldr	r3, [pc, #224]	; (80096ec <tcp_receive+0x888>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	441a      	add	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009612:	6879      	ldr	r1, [r7, #4]
 8009614:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009616:	440b      	add	r3, r1
 8009618:	429a      	cmp	r2, r3
 800961a:	d006      	beq.n	800962a <tcp_receive+0x7c6>
 800961c:	4b36      	ldr	r3, [pc, #216]	; (80096f8 <tcp_receive+0x894>)
 800961e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009622:	4936      	ldr	r1, [pc, #216]	; (80096fc <tcp_receive+0x898>)
 8009624:	4836      	ldr	r0, [pc, #216]	; (8009700 <tcp_receive+0x89c>)
 8009626:	f005 f9ad 	bl	800e984 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800962e:	2b00      	cmp	r3, #0
 8009630:	f000 80e7 	beq.w	8009802 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009634:	4b2e      	ldr	r3, [pc, #184]	; (80096f0 <tcp_receive+0x88c>)
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	899b      	ldrh	r3, [r3, #12]
 800963a:	b29b      	uxth	r3, r3
 800963c:	4618      	mov	r0, r3
 800963e:	f7fa fd55 	bl	80040ec <lwip_htons>
 8009642:	4603      	mov	r3, r0
 8009644:	b2db      	uxtb	r3, r3
 8009646:	f003 0301 	and.w	r3, r3, #1
 800964a:	2b00      	cmp	r3, #0
 800964c:	d010      	beq.n	8009670 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800964e:	e00a      	b.n	8009666 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009654:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f7fd fd04 	bl	800706e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1f0      	bne.n	8009650 <tcp_receive+0x7ec>
 800966e:	e0c8      	b.n	8009802 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009674:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8009676:	e052      	b.n	800971e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	899b      	ldrh	r3, [r3, #12]
 800967e:	b29b      	uxth	r3, r3
 8009680:	4618      	mov	r0, r3
 8009682:	f7fa fd33 	bl	80040ec <lwip_htons>
 8009686:	4603      	mov	r3, r0
 8009688:	b2db      	uxtb	r3, r3
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b00      	cmp	r3, #0
 8009690:	d03d      	beq.n	800970e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009692:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <tcp_receive+0x88c>)
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	899b      	ldrh	r3, [r3, #12]
 8009698:	b29b      	uxth	r3, r3
 800969a:	4618      	mov	r0, r3
 800969c:	f7fa fd26 	bl	80040ec <lwip_htons>
 80096a0:	4603      	mov	r3, r0
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d130      	bne.n	800970e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80096ac:	4b10      	ldr	r3, [pc, #64]	; (80096f0 <tcp_receive+0x88c>)
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	899b      	ldrh	r3, [r3, #12]
 80096b2:	b29c      	uxth	r4, r3
 80096b4:	2001      	movs	r0, #1
 80096b6:	f7fa fd19 	bl	80040ec <lwip_htons>
 80096ba:	4603      	mov	r3, r0
 80096bc:	461a      	mov	r2, r3
 80096be:	4b0c      	ldr	r3, [pc, #48]	; (80096f0 <tcp_receive+0x88c>)
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	4322      	orrs	r2, r4
 80096c4:	b292      	uxth	r2, r2
 80096c6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80096c8:	4b09      	ldr	r3, [pc, #36]	; (80096f0 <tcp_receive+0x88c>)
 80096ca:	891c      	ldrh	r4, [r3, #8]
 80096cc:	4b08      	ldr	r3, [pc, #32]	; (80096f0 <tcp_receive+0x88c>)
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	899b      	ldrh	r3, [r3, #12]
 80096d2:	b29b      	uxth	r3, r3
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fa fd09 	bl	80040ec <lwip_htons>
 80096da:	4603      	mov	r3, r0
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	f003 0303 	and.w	r3, r3, #3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00e      	beq.n	8009704 <tcp_receive+0x8a0>
 80096e6:	2301      	movs	r3, #1
 80096e8:	e00d      	b.n	8009706 <tcp_receive+0x8a2>
 80096ea:	bf00      	nop
 80096ec:	200082e8 	.word	0x200082e8
 80096f0:	200082c8 	.word	0x200082c8
 80096f4:	200082f2 	.word	0x200082f2
 80096f8:	08011100 	.word	0x08011100
 80096fc:	080114a8 	.word	0x080114a8
 8009700:	0801114c 	.word	0x0801114c
 8009704:	2300      	movs	r3, #0
 8009706:	4423      	add	r3, r4
 8009708:	b29a      	uxth	r2, r3
 800970a:	4b98      	ldr	r3, [pc, #608]	; (800996c <tcp_receive+0xb08>)
 800970c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800970e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009710:	613b      	str	r3, [r7, #16]
              next = next->next;
 8009712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009718:	6938      	ldr	r0, [r7, #16]
 800971a:	f7fd fca8 	bl	800706e <tcp_seg_free>
            while (next &&
 800971e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009720:	2b00      	cmp	r3, #0
 8009722:	d00e      	beq.n	8009742 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009724:	4b91      	ldr	r3, [pc, #580]	; (800996c <tcp_receive+0xb08>)
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	461a      	mov	r2, r3
 800972a:	4b91      	ldr	r3, [pc, #580]	; (8009970 <tcp_receive+0xb0c>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	441a      	add	r2, r3
 8009730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009738:	8909      	ldrh	r1, [r1, #8]
 800973a:	440b      	add	r3, r1
 800973c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800973e:	2b00      	cmp	r3, #0
 8009740:	da9a      	bge.n	8009678 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8009742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009744:	2b00      	cmp	r3, #0
 8009746:	d059      	beq.n	80097fc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8009748:	4b88      	ldr	r3, [pc, #544]	; (800996c <tcp_receive+0xb08>)
 800974a:	881b      	ldrh	r3, [r3, #0]
 800974c:	461a      	mov	r2, r3
 800974e:	4b88      	ldr	r3, [pc, #544]	; (8009970 <tcp_receive+0xb0c>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	441a      	add	r2, r3
 8009754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	685b      	ldr	r3, [r3, #4]
 800975a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800975c:	2b00      	cmp	r3, #0
 800975e:	dd4d      	ble.n	80097fc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009762:	68db      	ldr	r3, [r3, #12]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	b29a      	uxth	r2, r3
 8009768:	4b81      	ldr	r3, [pc, #516]	; (8009970 <tcp_receive+0xb0c>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	b29b      	uxth	r3, r3
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	b29a      	uxth	r2, r3
 8009772:	4b80      	ldr	r3, [pc, #512]	; (8009974 <tcp_receive+0xb10>)
 8009774:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009776:	4b7f      	ldr	r3, [pc, #508]	; (8009974 <tcp_receive+0xb10>)
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	899b      	ldrh	r3, [r3, #12]
 800977c:	b29b      	uxth	r3, r3
 800977e:	4618      	mov	r0, r3
 8009780:	f7fa fcb4 	bl	80040ec <lwip_htons>
 8009784:	4603      	mov	r3, r0
 8009786:	b2db      	uxtb	r3, r3
 8009788:	f003 0302 	and.w	r3, r3, #2
 800978c:	2b00      	cmp	r3, #0
 800978e:	d005      	beq.n	800979c <tcp_receive+0x938>
                inseg.len -= 1;
 8009790:	4b78      	ldr	r3, [pc, #480]	; (8009974 <tcp_receive+0xb10>)
 8009792:	891b      	ldrh	r3, [r3, #8]
 8009794:	3b01      	subs	r3, #1
 8009796:	b29a      	uxth	r2, r3
 8009798:	4b76      	ldr	r3, [pc, #472]	; (8009974 <tcp_receive+0xb10>)
 800979a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800979c:	4b75      	ldr	r3, [pc, #468]	; (8009974 <tcp_receive+0xb10>)
 800979e:	685b      	ldr	r3, [r3, #4]
 80097a0:	4a74      	ldr	r2, [pc, #464]	; (8009974 <tcp_receive+0xb10>)
 80097a2:	8912      	ldrh	r2, [r2, #8]
 80097a4:	4611      	mov	r1, r2
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7fb fe78 	bl	800549c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80097ac:	4b71      	ldr	r3, [pc, #452]	; (8009974 <tcp_receive+0xb10>)
 80097ae:	891c      	ldrh	r4, [r3, #8]
 80097b0:	4b70      	ldr	r3, [pc, #448]	; (8009974 <tcp_receive+0xb10>)
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	899b      	ldrh	r3, [r3, #12]
 80097b6:	b29b      	uxth	r3, r3
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7fa fc97 	bl	80040ec <lwip_htons>
 80097be:	4603      	mov	r3, r0
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f003 0303 	and.w	r3, r3, #3
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <tcp_receive+0x96a>
 80097ca:	2301      	movs	r3, #1
 80097cc:	e000      	b.n	80097d0 <tcp_receive+0x96c>
 80097ce:	2300      	movs	r3, #0
 80097d0:	4423      	add	r3, r4
 80097d2:	b29a      	uxth	r2, r3
 80097d4:	4b65      	ldr	r3, [pc, #404]	; (800996c <tcp_receive+0xb08>)
 80097d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80097d8:	4b64      	ldr	r3, [pc, #400]	; (800996c <tcp_receive+0xb08>)
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	461a      	mov	r2, r3
 80097de:	4b64      	ldr	r3, [pc, #400]	; (8009970 <tcp_receive+0xb0c>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	441a      	add	r2, r3
 80097e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e6:	68db      	ldr	r3, [r3, #12]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	429a      	cmp	r2, r3
 80097ec:	d006      	beq.n	80097fc <tcp_receive+0x998>
 80097ee:	4b62      	ldr	r3, [pc, #392]	; (8009978 <tcp_receive+0xb14>)
 80097f0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80097f4:	4961      	ldr	r1, [pc, #388]	; (800997c <tcp_receive+0xb18>)
 80097f6:	4862      	ldr	r0, [pc, #392]	; (8009980 <tcp_receive+0xb1c>)
 80097f8:	f005 f8c4 	bl	800e984 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009800:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8009802:	4b5a      	ldr	r3, [pc, #360]	; (800996c <tcp_receive+0xb08>)
 8009804:	881b      	ldrh	r3, [r3, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	4b59      	ldr	r3, [pc, #356]	; (8009970 <tcp_receive+0xb0c>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	441a      	add	r2, r3
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009816:	4b55      	ldr	r3, [pc, #340]	; (800996c <tcp_receive+0xb08>)
 8009818:	881b      	ldrh	r3, [r3, #0]
 800981a:	429a      	cmp	r2, r3
 800981c:	d206      	bcs.n	800982c <tcp_receive+0x9c8>
 800981e:	4b56      	ldr	r3, [pc, #344]	; (8009978 <tcp_receive+0xb14>)
 8009820:	f240 6207 	movw	r2, #1543	; 0x607
 8009824:	4957      	ldr	r1, [pc, #348]	; (8009984 <tcp_receive+0xb20>)
 8009826:	4856      	ldr	r0, [pc, #344]	; (8009980 <tcp_receive+0xb1c>)
 8009828:	f005 f8ac 	bl	800e984 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009830:	4b4e      	ldr	r3, [pc, #312]	; (800996c <tcp_receive+0xb08>)
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	1ad3      	subs	r3, r2, r3
 8009836:	b29a      	uxth	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7fc fdd9 	bl	80063f4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8009842:	4b4c      	ldr	r3, [pc, #304]	; (8009974 <tcp_receive+0xb10>)
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	891b      	ldrh	r3, [r3, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d006      	beq.n	800985a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800984c:	4b49      	ldr	r3, [pc, #292]	; (8009974 <tcp_receive+0xb10>)
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	4a4d      	ldr	r2, [pc, #308]	; (8009988 <tcp_receive+0xb24>)
 8009852:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8009854:	4b47      	ldr	r3, [pc, #284]	; (8009974 <tcp_receive+0xb10>)
 8009856:	2200      	movs	r2, #0
 8009858:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800985a:	4b46      	ldr	r3, [pc, #280]	; (8009974 <tcp_receive+0xb10>)
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	899b      	ldrh	r3, [r3, #12]
 8009860:	b29b      	uxth	r3, r3
 8009862:	4618      	mov	r0, r3
 8009864:	f7fa fc42 	bl	80040ec <lwip_htons>
 8009868:	4603      	mov	r3, r0
 800986a:	b2db      	uxtb	r3, r3
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 80b8 	beq.w	80099e6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8009876:	4b45      	ldr	r3, [pc, #276]	; (800998c <tcp_receive+0xb28>)
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	f043 0320 	orr.w	r3, r3, #32
 800987e:	b2da      	uxtb	r2, r3
 8009880:	4b42      	ldr	r3, [pc, #264]	; (800998c <tcp_receive+0xb28>)
 8009882:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8009884:	e0af      	b.n	80099e6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800988a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	4a36      	ldr	r2, [pc, #216]	; (8009970 <tcp_receive+0xb0c>)
 8009896:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	891b      	ldrh	r3, [r3, #8]
 800989c:	461c      	mov	r4, r3
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	68db      	ldr	r3, [r3, #12]
 80098a2:	899b      	ldrh	r3, [r3, #12]
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fa fc20 	bl	80040ec <lwip_htons>
 80098ac:	4603      	mov	r3, r0
 80098ae:	b2db      	uxtb	r3, r3
 80098b0:	f003 0303 	and.w	r3, r3, #3
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <tcp_receive+0xa58>
 80098b8:	2301      	movs	r3, #1
 80098ba:	e000      	b.n	80098be <tcp_receive+0xa5a>
 80098bc:	2300      	movs	r3, #0
 80098be:	191a      	adds	r2, r3, r4
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c4:	441a      	add	r2, r3
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ce:	461c      	mov	r4, r3
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	891b      	ldrh	r3, [r3, #8]
 80098d4:	461d      	mov	r5, r3
 80098d6:	68bb      	ldr	r3, [r7, #8]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	899b      	ldrh	r3, [r3, #12]
 80098dc:	b29b      	uxth	r3, r3
 80098de:	4618      	mov	r0, r3
 80098e0:	f7fa fc04 	bl	80040ec <lwip_htons>
 80098e4:	4603      	mov	r3, r0
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	f003 0303 	and.w	r3, r3, #3
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d001      	beq.n	80098f4 <tcp_receive+0xa90>
 80098f0:	2301      	movs	r3, #1
 80098f2:	e000      	b.n	80098f6 <tcp_receive+0xa92>
 80098f4:	2300      	movs	r3, #0
 80098f6:	442b      	add	r3, r5
 80098f8:	429c      	cmp	r4, r3
 80098fa:	d206      	bcs.n	800990a <tcp_receive+0xaa6>
 80098fc:	4b1e      	ldr	r3, [pc, #120]	; (8009978 <tcp_receive+0xb14>)
 80098fe:	f240 622b 	movw	r2, #1579	; 0x62b
 8009902:	4923      	ldr	r1, [pc, #140]	; (8009990 <tcp_receive+0xb2c>)
 8009904:	481e      	ldr	r0, [pc, #120]	; (8009980 <tcp_receive+0xb1c>)
 8009906:	f005 f83d 	bl	800e984 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	891b      	ldrh	r3, [r3, #8]
 800990e:	461c      	mov	r4, r3
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	899b      	ldrh	r3, [r3, #12]
 8009916:	b29b      	uxth	r3, r3
 8009918:	4618      	mov	r0, r3
 800991a:	f7fa fbe7 	bl	80040ec <lwip_htons>
 800991e:	4603      	mov	r3, r0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	f003 0303 	and.w	r3, r3, #3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d001      	beq.n	800992e <tcp_receive+0xaca>
 800992a:	2301      	movs	r3, #1
 800992c:	e000      	b.n	8009930 <tcp_receive+0xacc>
 800992e:	2300      	movs	r3, #0
 8009930:	1919      	adds	r1, r3, r4
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009936:	b28b      	uxth	r3, r1
 8009938:	1ad3      	subs	r3, r2, r3
 800993a:	b29a      	uxth	r2, r3
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7fc fd57 	bl	80063f4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	891b      	ldrh	r3, [r3, #8]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d028      	beq.n	80099a2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009950:	4b0d      	ldr	r3, [pc, #52]	; (8009988 <tcp_receive+0xb24>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d01d      	beq.n	8009994 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8009958:	4b0b      	ldr	r3, [pc, #44]	; (8009988 <tcp_receive+0xb24>)
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	4619      	mov	r1, r3
 8009962:	4610      	mov	r0, r2
 8009964:	f7fb ffe2 	bl	800592c <pbuf_cat>
 8009968:	e018      	b.n	800999c <tcp_receive+0xb38>
 800996a:	bf00      	nop
 800996c:	200082f2 	.word	0x200082f2
 8009970:	200082e8 	.word	0x200082e8
 8009974:	200082c8 	.word	0x200082c8
 8009978:	08011100 	.word	0x08011100
 800997c:	080114e0 	.word	0x080114e0
 8009980:	0801114c 	.word	0x0801114c
 8009984:	0801151c 	.word	0x0801151c
 8009988:	200082f8 	.word	0x200082f8
 800998c:	200082f5 	.word	0x200082f5
 8009990:	0801153c 	.word	0x0801153c
            } else {
              recv_data = cseg->p;
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	4a70      	ldr	r2, [pc, #448]	; (8009b5c <tcp_receive+0xcf8>)
 800999a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	2200      	movs	r2, #0
 80099a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	899b      	ldrh	r3, [r3, #12]
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7fa fb9e 	bl	80040ec <lwip_htons>
 80099b0:	4603      	mov	r3, r0
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	f003 0301 	and.w	r3, r3, #1
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00d      	beq.n	80099d8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80099bc:	4b68      	ldr	r3, [pc, #416]	; (8009b60 <tcp_receive+0xcfc>)
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	f043 0320 	orr.w	r3, r3, #32
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	4b66      	ldr	r3, [pc, #408]	; (8009b60 <tcp_receive+0xcfc>)
 80099c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	7d1b      	ldrb	r3, [r3, #20]
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d102      	bne.n	80099d8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2207      	movs	r2, #7
 80099d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80099e0:	68b8      	ldr	r0, [r7, #8]
 80099e2:	f7fd fb44 	bl	800706e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d008      	beq.n	8009a00 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	685a      	ldr	r2, [r3, #4]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80099fa:	429a      	cmp	r2, r3
 80099fc:	f43f af43 	beq.w	8009886 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	8b5b      	ldrh	r3, [r3, #26]
 8009a04:	f003 0301 	and.w	r3, r3, #1
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00e      	beq.n	8009a2a <tcp_receive+0xbc6>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	8b5b      	ldrh	r3, [r3, #26]
 8009a10:	f023 0301 	bic.w	r3, r3, #1
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	835a      	strh	r2, [r3, #26]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	8b5b      	ldrh	r3, [r3, #26]
 8009a1e:	f043 0302 	orr.w	r3, r3, #2
 8009a22:	b29a      	uxth	r2, r3
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009a28:	e188      	b.n	8009d3c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	8b5b      	ldrh	r3, [r3, #26]
 8009a2e:	f043 0301 	orr.w	r3, r3, #1
 8009a32:	b29a      	uxth	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009a38:	e180      	b.n	8009d3c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d106      	bne.n	8009a50 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009a42:	4848      	ldr	r0, [pc, #288]	; (8009b64 <tcp_receive+0xd00>)
 8009a44:	f7fd fb2c 	bl	80070a0 <tcp_seg_copy>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	675a      	str	r2, [r3, #116]	; 0x74
 8009a4e:	e16d      	b.n	8009d2c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009a50:	2300      	movs	r3, #0
 8009a52:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a5a:	e157      	b.n	8009d0c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8009a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	4b41      	ldr	r3, [pc, #260]	; (8009b68 <tcp_receive+0xd04>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d11d      	bne.n	8009aa6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009a6a:	4b3e      	ldr	r3, [pc, #248]	; (8009b64 <tcp_receive+0xd00>)
 8009a6c:	891a      	ldrh	r2, [r3, #8]
 8009a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a70:	891b      	ldrh	r3, [r3, #8]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	f240 814f 	bls.w	8009d16 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009a78:	483a      	ldr	r0, [pc, #232]	; (8009b64 <tcp_receive+0xd00>)
 8009a7a:	f7fd fb11 	bl	80070a0 <tcp_seg_copy>
 8009a7e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f000 8149 	beq.w	8009d1a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8009a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d003      	beq.n	8009a96 <tcp_receive+0xc32>
                    prev->next = cseg;
 8009a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	601a      	str	r2, [r3, #0]
 8009a94:	e002      	b.n	8009a9c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8009a9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a9e:	6978      	ldr	r0, [r7, #20]
 8009aa0:	f7ff f8dc 	bl	8008c5c <tcp_oos_insert_segment>
                }
                break;
 8009aa4:	e139      	b.n	8009d1a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8009aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d117      	bne.n	8009adc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009aac:	4b2e      	ldr	r3, [pc, #184]	; (8009b68 <tcp_receive+0xd04>)
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab2:	68db      	ldr	r3, [r3, #12]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	da57      	bge.n	8009b6c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009abc:	4829      	ldr	r0, [pc, #164]	; (8009b64 <tcp_receive+0xd00>)
 8009abe:	f7fd faef 	bl	80070a0 <tcp_seg_copy>
 8009ac2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8009ac4:	69bb      	ldr	r3, [r7, #24]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	f000 8129 	beq.w	8009d1e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	69ba      	ldr	r2, [r7, #24]
 8009ad0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009ad2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009ad4:	69b8      	ldr	r0, [r7, #24]
 8009ad6:	f7ff f8c1 	bl	8008c5c <tcp_oos_insert_segment>
                  }
                  break;
 8009ada:	e120      	b.n	8009d1e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009adc:	4b22      	ldr	r3, [pc, #136]	; (8009b68 <tcp_receive+0xd04>)
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	3b01      	subs	r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	db3e      	blt.n	8009b6c <tcp_receive+0xd08>
 8009aee:	4b1e      	ldr	r3, [pc, #120]	; (8009b68 <tcp_receive+0xd04>)
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	3301      	adds	r3, #1
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	dc35      	bgt.n	8009b6c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009b00:	4818      	ldr	r0, [pc, #96]	; (8009b64 <tcp_receive+0xd00>)
 8009b02:	f7fd facd 	bl	80070a0 <tcp_seg_copy>
 8009b06:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	f000 8109 	beq.w	8009d22 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b18:	8912      	ldrh	r2, [r2, #8]
 8009b1a:	441a      	add	r2, r3
 8009b1c:	4b12      	ldr	r3, [pc, #72]	; (8009b68 <tcp_receive+0xd04>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	dd12      	ble.n	8009b4c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009b26:	4b10      	ldr	r3, [pc, #64]	; (8009b68 <tcp_receive+0xd04>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	b29b      	uxth	r3, r3
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	b29a      	uxth	r2, r3
 8009b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b42:	891b      	ldrh	r3, [r3, #8]
 8009b44:	4619      	mov	r1, r3
 8009b46:	4610      	mov	r0, r2
 8009b48:	f7fb fca8 	bl	800549c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4e:	69fa      	ldr	r2, [r7, #28]
 8009b50:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009b52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b54:	69f8      	ldr	r0, [r7, #28]
 8009b56:	f7ff f881 	bl	8008c5c <tcp_oos_insert_segment>
                  }
                  break;
 8009b5a:	e0e2      	b.n	8009d22 <tcp_receive+0xebe>
 8009b5c:	200082f8 	.word	0x200082f8
 8009b60:	200082f5 	.word	0x200082f5
 8009b64:	200082c8 	.word	0x200082c8
 8009b68:	200082e8 	.word	0x200082e8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f040 80c6 	bne.w	8009d06 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009b7a:	4b80      	ldr	r3, [pc, #512]	; (8009d7c <tcp_receive+0xf18>)
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f340 80bd 	ble.w	8009d06 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	899b      	ldrh	r3, [r3, #12]
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7fa faa9 	bl	80040ec <lwip_htons>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f040 80bf 	bne.w	8009d26 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8009ba8:	4875      	ldr	r0, [pc, #468]	; (8009d80 <tcp_receive+0xf1c>)
 8009baa:	f7fd fa79 	bl	80070a0 <tcp_seg_copy>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8009bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 80b6 	beq.w	8009d2a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bc6:	8912      	ldrh	r2, [r2, #8]
 8009bc8:	441a      	add	r2, r3
 8009bca:	4b6c      	ldr	r3, [pc, #432]	; (8009d7c <tcp_receive+0xf18>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	dd12      	ble.n	8009bfa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009bd4:	4b69      	ldr	r3, [pc, #420]	; (8009d7c <tcp_receive+0xf18>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	b29a      	uxth	r2, r3
 8009be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bec:	685a      	ldr	r2, [r3, #4]
 8009bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf0:	891b      	ldrh	r3, [r3, #8]
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	f7fb fc51 	bl	800549c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009bfa:	4b62      	ldr	r3, [pc, #392]	; (8009d84 <tcp_receive+0xf20>)
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	4b5e      	ldr	r3, [pc, #376]	; (8009d7c <tcp_receive+0xf18>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	441a      	add	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c0a:	6879      	ldr	r1, [r7, #4]
 8009c0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009c0e:	440b      	add	r3, r1
 8009c10:	1ad3      	subs	r3, r2, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f340 8089 	ble.w	8009d2a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	899b      	ldrh	r3, [r3, #12]
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7fa fa62 	bl	80040ec <lwip_htons>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	f003 0301 	and.w	r3, r3, #1
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d022      	beq.n	8009c7a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	899b      	ldrh	r3, [r3, #12]
 8009c3c:	b29b      	uxth	r3, r3
 8009c3e:	b21b      	sxth	r3, r3
 8009c40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009c44:	b21c      	sxth	r4, r3
 8009c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	899b      	ldrh	r3, [r3, #12]
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fa fa4b 	bl	80040ec <lwip_htons>
 8009c56:	4603      	mov	r3, r0
 8009c58:	b2db      	uxtb	r3, r3
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	4618      	mov	r0, r3
 8009c64:	f7fa fa42 	bl	80040ec <lwip_htons>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	b21b      	sxth	r3, r3
 8009c6c:	4323      	orrs	r3, r4
 8009c6e:	b21a      	sxth	r2, r3
 8009c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	b292      	uxth	r2, r2
 8009c78:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	b29a      	uxth	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c84:	4413      	add	r3, r2
 8009c86:	b299      	uxth	r1, r3
 8009c88:	4b3c      	ldr	r3, [pc, #240]	; (8009d7c <tcp_receive+0xf18>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	1a8a      	subs	r2, r1, r2
 8009c94:	b292      	uxth	r2, r2
 8009c96:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685a      	ldr	r2, [r3, #4]
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	891b      	ldrh	r3, [r3, #8]
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	4610      	mov	r0, r2
 8009ca8:	f7fb fbf8 	bl	800549c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	891c      	ldrh	r4, [r3, #8]
 8009cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	899b      	ldrh	r3, [r3, #12]
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fa fa15 	bl	80040ec <lwip_htons>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	f003 0303 	and.w	r3, r3, #3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d001      	beq.n	8009cd2 <tcp_receive+0xe6e>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e000      	b.n	8009cd4 <tcp_receive+0xe70>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	4423      	add	r3, r4
 8009cd6:	b29a      	uxth	r2, r3
 8009cd8:	4b2a      	ldr	r3, [pc, #168]	; (8009d84 <tcp_receive+0xf20>)
 8009cda:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009cdc:	4b29      	ldr	r3, [pc, #164]	; (8009d84 <tcp_receive+0xf20>)
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	4b26      	ldr	r3, [pc, #152]	; (8009d7c <tcp_receive+0xf18>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	441a      	add	r2, r3
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cec:	6879      	ldr	r1, [r7, #4]
 8009cee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009cf0:	440b      	add	r3, r1
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d019      	beq.n	8009d2a <tcp_receive+0xec6>
 8009cf6:	4b24      	ldr	r3, [pc, #144]	; (8009d88 <tcp_receive+0xf24>)
 8009cf8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009cfc:	4923      	ldr	r1, [pc, #140]	; (8009d8c <tcp_receive+0xf28>)
 8009cfe:	4824      	ldr	r0, [pc, #144]	; (8009d90 <tcp_receive+0xf2c>)
 8009d00:	f004 fe40 	bl	800e984 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009d04:	e011      	b.n	8009d2a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f47f aea4 	bne.w	8009a5c <tcp_receive+0xbf8>
 8009d14:	e00a      	b.n	8009d2c <tcp_receive+0xec8>
                break;
 8009d16:	bf00      	nop
 8009d18:	e008      	b.n	8009d2c <tcp_receive+0xec8>
                break;
 8009d1a:	bf00      	nop
 8009d1c:	e006      	b.n	8009d2c <tcp_receive+0xec8>
                  break;
 8009d1e:	bf00      	nop
 8009d20:	e004      	b.n	8009d2c <tcp_receive+0xec8>
                  break;
 8009d22:	bf00      	nop
 8009d24:	e002      	b.n	8009d2c <tcp_receive+0xec8>
                  break;
 8009d26:	bf00      	nop
 8009d28:	e000      	b.n	8009d2c <tcp_receive+0xec8>
                break;
 8009d2a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f001 fe8b 	bl	800ba48 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009d32:	e003      	b.n	8009d3c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f001 fe87 	bl	800ba48 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009d3a:	e01a      	b.n	8009d72 <tcp_receive+0xf0e>
 8009d3c:	e019      	b.n	8009d72 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009d3e:	4b0f      	ldr	r3, [pc, #60]	; (8009d7c <tcp_receive+0xf18>)
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	db0a      	blt.n	8009d62 <tcp_receive+0xefe>
 8009d4c:	4b0b      	ldr	r3, [pc, #44]	; (8009d7c <tcp_receive+0xf18>)
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	6879      	ldr	r1, [r7, #4]
 8009d56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009d58:	440b      	add	r3, r1
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	dd07      	ble.n	8009d72 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	8b5b      	ldrh	r3, [r3, #26]
 8009d66:	f043 0302 	orr.w	r3, r3, #2
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009d70:	e7ff      	b.n	8009d72 <tcp_receive+0xf0e>
 8009d72:	bf00      	nop
 8009d74:	3750      	adds	r7, #80	; 0x50
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bdb0      	pop	{r4, r5, r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	200082e8 	.word	0x200082e8
 8009d80:	200082c8 	.word	0x200082c8
 8009d84:	200082f2 	.word	0x200082f2
 8009d88:	08011100 	.word	0x08011100
 8009d8c:	080114a8 	.word	0x080114a8
 8009d90:	0801114c 	.word	0x0801114c

08009d94 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009d9a:	4b15      	ldr	r3, [pc, #84]	; (8009df0 <tcp_get_next_optbyte+0x5c>)
 8009d9c:	881b      	ldrh	r3, [r3, #0]
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	b291      	uxth	r1, r2
 8009da2:	4a13      	ldr	r2, [pc, #76]	; (8009df0 <tcp_get_next_optbyte+0x5c>)
 8009da4:	8011      	strh	r1, [r2, #0]
 8009da6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009da8:	4b12      	ldr	r3, [pc, #72]	; (8009df4 <tcp_get_next_optbyte+0x60>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d004      	beq.n	8009dba <tcp_get_next_optbyte+0x26>
 8009db0:	4b11      	ldr	r3, [pc, #68]	; (8009df8 <tcp_get_next_optbyte+0x64>)
 8009db2:	881b      	ldrh	r3, [r3, #0]
 8009db4:	88fa      	ldrh	r2, [r7, #6]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d208      	bcs.n	8009dcc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009dba:	4b10      	ldr	r3, [pc, #64]	; (8009dfc <tcp_get_next_optbyte+0x68>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3314      	adds	r3, #20
 8009dc0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009dc2:	88fb      	ldrh	r3, [r7, #6]
 8009dc4:	683a      	ldr	r2, [r7, #0]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	e00b      	b.n	8009de4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009dcc:	88fb      	ldrh	r3, [r7, #6]
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <tcp_get_next_optbyte+0x64>)
 8009dd2:	881b      	ldrh	r3, [r3, #0]
 8009dd4:	b2db      	uxtb	r3, r3
 8009dd6:	1ad3      	subs	r3, r2, r3
 8009dd8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009dda:	4b06      	ldr	r3, [pc, #24]	; (8009df4 <tcp_get_next_optbyte+0x60>)
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	797b      	ldrb	r3, [r7, #5]
 8009de0:	4413      	add	r3, r2
 8009de2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	200082e4 	.word	0x200082e4
 8009df4:	200082e0 	.word	0x200082e0
 8009df8:	200082de 	.word	0x200082de
 8009dfc:	200082d8 	.word	0x200082d8

08009e00 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d106      	bne.n	8009e1c <tcp_parseopt+0x1c>
 8009e0e:	4b32      	ldr	r3, [pc, #200]	; (8009ed8 <tcp_parseopt+0xd8>)
 8009e10:	f240 727d 	movw	r2, #1917	; 0x77d
 8009e14:	4931      	ldr	r1, [pc, #196]	; (8009edc <tcp_parseopt+0xdc>)
 8009e16:	4832      	ldr	r0, [pc, #200]	; (8009ee0 <tcp_parseopt+0xe0>)
 8009e18:	f004 fdb4 	bl	800e984 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009e1c:	4b31      	ldr	r3, [pc, #196]	; (8009ee4 <tcp_parseopt+0xe4>)
 8009e1e:	881b      	ldrh	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d055      	beq.n	8009ed0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009e24:	4b30      	ldr	r3, [pc, #192]	; (8009ee8 <tcp_parseopt+0xe8>)
 8009e26:	2200      	movs	r2, #0
 8009e28:	801a      	strh	r2, [r3, #0]
 8009e2a:	e045      	b.n	8009eb8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8009e2c:	f7ff ffb2 	bl	8009d94 <tcp_get_next_optbyte>
 8009e30:	4603      	mov	r3, r0
 8009e32:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	d006      	beq.n	8009e48 <tcp_parseopt+0x48>
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	dc2b      	bgt.n	8009e96 <tcp_parseopt+0x96>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d041      	beq.n	8009ec6 <tcp_parseopt+0xc6>
 8009e42:	2b01      	cmp	r3, #1
 8009e44:	d127      	bne.n	8009e96 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8009e46:	e037      	b.n	8009eb8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009e48:	f7ff ffa4 	bl	8009d94 <tcp_get_next_optbyte>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	d13b      	bne.n	8009eca <tcp_parseopt+0xca>
 8009e52:	4b25      	ldr	r3, [pc, #148]	; (8009ee8 <tcp_parseopt+0xe8>)
 8009e54:	881b      	ldrh	r3, [r3, #0]
 8009e56:	3301      	adds	r3, #1
 8009e58:	4a22      	ldr	r2, [pc, #136]	; (8009ee4 <tcp_parseopt+0xe4>)
 8009e5a:	8812      	ldrh	r2, [r2, #0]
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	da34      	bge.n	8009eca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009e60:	f7ff ff98 	bl	8009d94 <tcp_get_next_optbyte>
 8009e64:	4603      	mov	r3, r0
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	021b      	lsls	r3, r3, #8
 8009e6a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009e6c:	f7ff ff92 	bl	8009d94 <tcp_get_next_optbyte>
 8009e70:	4603      	mov	r3, r0
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	89bb      	ldrh	r3, [r7, #12]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009e7a:	89bb      	ldrh	r3, [r7, #12]
 8009e7c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009e80:	d804      	bhi.n	8009e8c <tcp_parseopt+0x8c>
 8009e82:	89bb      	ldrh	r3, [r7, #12]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <tcp_parseopt+0x8c>
 8009e88:	89ba      	ldrh	r2, [r7, #12]
 8009e8a:	e001      	b.n	8009e90 <tcp_parseopt+0x90>
 8009e8c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009e94:	e010      	b.n	8009eb8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009e96:	f7ff ff7d 	bl	8009d94 <tcp_get_next_optbyte>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009e9e:	7afb      	ldrb	r3, [r7, #11]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d914      	bls.n	8009ece <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009ea4:	7afb      	ldrb	r3, [r7, #11]
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	4b0f      	ldr	r3, [pc, #60]	; (8009ee8 <tcp_parseopt+0xe8>)
 8009eaa:	881b      	ldrh	r3, [r3, #0]
 8009eac:	4413      	add	r3, r2
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	3b02      	subs	r3, #2
 8009eb2:	b29a      	uxth	r2, r3
 8009eb4:	4b0c      	ldr	r3, [pc, #48]	; (8009ee8 <tcp_parseopt+0xe8>)
 8009eb6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009eb8:	4b0b      	ldr	r3, [pc, #44]	; (8009ee8 <tcp_parseopt+0xe8>)
 8009eba:	881a      	ldrh	r2, [r3, #0]
 8009ebc:	4b09      	ldr	r3, [pc, #36]	; (8009ee4 <tcp_parseopt+0xe4>)
 8009ebe:	881b      	ldrh	r3, [r3, #0]
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d3b3      	bcc.n	8009e2c <tcp_parseopt+0x2c>
 8009ec4:	e004      	b.n	8009ed0 <tcp_parseopt+0xd0>
          return;
 8009ec6:	bf00      	nop
 8009ec8:	e002      	b.n	8009ed0 <tcp_parseopt+0xd0>
            return;
 8009eca:	bf00      	nop
 8009ecc:	e000      	b.n	8009ed0 <tcp_parseopt+0xd0>
            return;
 8009ece:	bf00      	nop
      }
    }
  }
}
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	08011100 	.word	0x08011100
 8009edc:	08011564 	.word	0x08011564
 8009ee0:	0801114c 	.word	0x0801114c
 8009ee4:	200082dc 	.word	0x200082dc
 8009ee8:	200082e4 	.word	0x200082e4

08009eec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009eec:	b480      	push	{r7}
 8009eee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009ef0:	4b05      	ldr	r3, [pc, #20]	; (8009f08 <tcp_trigger_input_pcb_close+0x1c>)
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	f043 0310 	orr.w	r3, r3, #16
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	4b03      	ldr	r3, [pc, #12]	; (8009f08 <tcp_trigger_input_pcb_close+0x1c>)
 8009efc:	701a      	strb	r2, [r3, #0]
}
 8009efe:	bf00      	nop
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	200082f5 	.word	0x200082f5

08009f0c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00a      	beq.n	8009f34 <tcp_route+0x28>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	7a1b      	ldrb	r3, [r3, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d006      	beq.n	8009f34 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	7a1b      	ldrb	r3, [r3, #8]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fb f8dc 	bl	80050e8 <netif_get_by_index>
 8009f30:	4603      	mov	r3, r0
 8009f32:	e003      	b.n	8009f3c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f003 fad5 	bl	800d4e4 <ip4_route>
 8009f3a:	4603      	mov	r3, r0
  }
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009f44:	b590      	push	{r4, r7, lr}
 8009f46:	b087      	sub	sp, #28
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	4613      	mov	r3, r2
 8009f52:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d105      	bne.n	8009f66 <tcp_create_segment+0x22>
 8009f5a:	4b44      	ldr	r3, [pc, #272]	; (800a06c <tcp_create_segment+0x128>)
 8009f5c:	22a3      	movs	r2, #163	; 0xa3
 8009f5e:	4944      	ldr	r1, [pc, #272]	; (800a070 <tcp_create_segment+0x12c>)
 8009f60:	4844      	ldr	r0, [pc, #272]	; (800a074 <tcp_create_segment+0x130>)
 8009f62:	f004 fd0f 	bl	800e984 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d105      	bne.n	8009f78 <tcp_create_segment+0x34>
 8009f6c:	4b3f      	ldr	r3, [pc, #252]	; (800a06c <tcp_create_segment+0x128>)
 8009f6e:	22a4      	movs	r2, #164	; 0xa4
 8009f70:	4941      	ldr	r1, [pc, #260]	; (800a078 <tcp_create_segment+0x134>)
 8009f72:	4840      	ldr	r0, [pc, #256]	; (800a074 <tcp_create_segment+0x130>)
 8009f74:	f004 fd06 	bl	800e984 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009f78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	f003 0304 	and.w	r3, r3, #4
 8009f84:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009f86:	2003      	movs	r0, #3
 8009f88:	f7fa fd28 	bl	80049dc <memp_malloc>
 8009f8c:	6138      	str	r0, [r7, #16]
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d104      	bne.n	8009f9e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009f94:	68b8      	ldr	r0, [r7, #8]
 8009f96:	f7fb fc07 	bl	80057a8 <pbuf_free>
    return NULL;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	e061      	b.n	800a062 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009fa4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	891a      	ldrh	r2, [r3, #8]
 8009fb6:	7dfb      	ldrb	r3, [r7, #23]
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d205      	bcs.n	8009fca <tcp_create_segment+0x86>
 8009fbe:	4b2b      	ldr	r3, [pc, #172]	; (800a06c <tcp_create_segment+0x128>)
 8009fc0:	22b0      	movs	r2, #176	; 0xb0
 8009fc2:	492e      	ldr	r1, [pc, #184]	; (800a07c <tcp_create_segment+0x138>)
 8009fc4:	482b      	ldr	r0, [pc, #172]	; (800a074 <tcp_create_segment+0x130>)
 8009fc6:	f004 fcdd 	bl	800e984 <iprintf>
  seg->len = p->tot_len - optlen;
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	891a      	ldrh	r2, [r3, #8]
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	1ad3      	subs	r3, r2, r3
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009fda:	2114      	movs	r1, #20
 8009fdc:	68b8      	ldr	r0, [r7, #8]
 8009fde:	f7fb fb4d 	bl	800567c <pbuf_add_header>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d004      	beq.n	8009ff2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009fe8:	6938      	ldr	r0, [r7, #16]
 8009fea:	f7fd f840 	bl	800706e <tcp_seg_free>
    return NULL;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	e037      	b.n	800a062 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	685a      	ldr	r2, [r3, #4]
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	8ada      	ldrh	r2, [r3, #22]
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	68dc      	ldr	r4, [r3, #12]
 800a004:	4610      	mov	r0, r2
 800a006:	f7fa f871 	bl	80040ec <lwip_htons>
 800a00a:	4603      	mov	r3, r0
 800a00c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	8b1a      	ldrh	r2, [r3, #24]
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	68dc      	ldr	r4, [r3, #12]
 800a016:	4610      	mov	r0, r2
 800a018:	f7fa f868 	bl	80040ec <lwip_htons>
 800a01c:	4603      	mov	r3, r0
 800a01e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	68dc      	ldr	r4, [r3, #12]
 800a024:	6838      	ldr	r0, [r7, #0]
 800a026:	f7fa f876 	bl	8004116 <lwip_htonl>
 800a02a:	4603      	mov	r3, r0
 800a02c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	089b      	lsrs	r3, r3, #2
 800a032:	b2db      	uxtb	r3, r3
 800a034:	b29b      	uxth	r3, r3
 800a036:	3305      	adds	r3, #5
 800a038:	b29b      	uxth	r3, r3
 800a03a:	031b      	lsls	r3, r3, #12
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	79fb      	ldrb	r3, [r7, #7]
 800a040:	b29b      	uxth	r3, r3
 800a042:	4313      	orrs	r3, r2
 800a044:	b29a      	uxth	r2, r3
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	68dc      	ldr	r4, [r3, #12]
 800a04a:	4610      	mov	r0, r2
 800a04c:	f7fa f84e 	bl	80040ec <lwip_htons>
 800a050:	4603      	mov	r3, r0
 800a052:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	2200      	movs	r2, #0
 800a05a:	749a      	strb	r2, [r3, #18]
 800a05c:	2200      	movs	r2, #0
 800a05e:	74da      	strb	r2, [r3, #19]
  return seg;
 800a060:	693b      	ldr	r3, [r7, #16]
}
 800a062:	4618      	mov	r0, r3
 800a064:	371c      	adds	r7, #28
 800a066:	46bd      	mov	sp, r7
 800a068:	bd90      	pop	{r4, r7, pc}
 800a06a:	bf00      	nop
 800a06c:	08011580 	.word	0x08011580
 800a070:	080115b4 	.word	0x080115b4
 800a074:	080115d4 	.word	0x080115d4
 800a078:	080115fc 	.word	0x080115fc
 800a07c:	08011620 	.word	0x08011620

0800a080 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	607b      	str	r3, [r7, #4]
 800a088:	4603      	mov	r3, r0
 800a08a:	73fb      	strb	r3, [r7, #15]
 800a08c:	460b      	mov	r3, r1
 800a08e:	81bb      	strh	r3, [r7, #12]
 800a090:	4613      	mov	r3, r2
 800a092:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800a094:	89bb      	ldrh	r3, [r7, #12]
 800a096:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d105      	bne.n	800a0aa <tcp_pbuf_prealloc+0x2a>
 800a09e:	4b30      	ldr	r3, [pc, #192]	; (800a160 <tcp_pbuf_prealloc+0xe0>)
 800a0a0:	22e8      	movs	r2, #232	; 0xe8
 800a0a2:	4930      	ldr	r1, [pc, #192]	; (800a164 <tcp_pbuf_prealloc+0xe4>)
 800a0a4:	4830      	ldr	r0, [pc, #192]	; (800a168 <tcp_pbuf_prealloc+0xe8>)
 800a0a6:	f004 fc6d 	bl	800e984 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d105      	bne.n	800a0bc <tcp_pbuf_prealloc+0x3c>
 800a0b0:	4b2b      	ldr	r3, [pc, #172]	; (800a160 <tcp_pbuf_prealloc+0xe0>)
 800a0b2:	22e9      	movs	r2, #233	; 0xe9
 800a0b4:	492d      	ldr	r1, [pc, #180]	; (800a16c <tcp_pbuf_prealloc+0xec>)
 800a0b6:	482c      	ldr	r0, [pc, #176]	; (800a168 <tcp_pbuf_prealloc+0xe8>)
 800a0b8:	f004 fc64 	bl	800e984 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800a0bc:	89ba      	ldrh	r2, [r7, #12]
 800a0be:	897b      	ldrh	r3, [r7, #10]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d221      	bcs.n	800a108 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a0c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a0c8:	f003 0302 	and.w	r3, r3, #2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d111      	bne.n	800a0f4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800a0d0:	6a3b      	ldr	r3, [r7, #32]
 800a0d2:	8b5b      	ldrh	r3, [r3, #26]
 800a0d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d115      	bne.n	800a108 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800a0dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d007      	beq.n	800a0f4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800a0e4:	6a3b      	ldr	r3, [r7, #32]
 800a0e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d103      	bne.n	800a0f4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800a0ec:	6a3b      	ldr	r3, [r7, #32]
 800a0ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d009      	beq.n	800a108 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800a0f4:	89bb      	ldrh	r3, [r7, #12]
 800a0f6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800a0fa:	f023 0203 	bic.w	r2, r3, #3
 800a0fe:	897b      	ldrh	r3, [r7, #10]
 800a100:	4293      	cmp	r3, r2
 800a102:	bf28      	it	cs
 800a104:	4613      	movcs	r3, r2
 800a106:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800a108:	8af9      	ldrh	r1, [r7, #22]
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
 800a10c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a110:	4618      	mov	r0, r3
 800a112:	f7fb f865 	bl	80051e0 <pbuf_alloc>
 800a116:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800a11e:	2300      	movs	r3, #0
 800a120:	e019      	b.n	800a156 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d006      	beq.n	800a138 <tcp_pbuf_prealloc+0xb8>
 800a12a:	4b0d      	ldr	r3, [pc, #52]	; (800a160 <tcp_pbuf_prealloc+0xe0>)
 800a12c:	f240 120b 	movw	r2, #267	; 0x10b
 800a130:	490f      	ldr	r1, [pc, #60]	; (800a170 <tcp_pbuf_prealloc+0xf0>)
 800a132:	480d      	ldr	r0, [pc, #52]	; (800a168 <tcp_pbuf_prealloc+0xe8>)
 800a134:	f004 fc26 	bl	800e984 <iprintf>
  *oversize = p->len - length;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	895a      	ldrh	r2, [r3, #10]
 800a13c:	89bb      	ldrh	r3, [r7, #12]
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	b29a      	uxth	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	89ba      	ldrh	r2, [r7, #12]
 800a14a:	811a      	strh	r2, [r3, #8]
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	891a      	ldrh	r2, [r3, #8]
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	815a      	strh	r2, [r3, #10]
  return p;
 800a154:	693b      	ldr	r3, [r7, #16]
}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	08011580 	.word	0x08011580
 800a164:	08011638 	.word	0x08011638
 800a168:	080115d4 	.word	0x080115d4
 800a16c:	0801165c 	.word	0x0801165c
 800a170:	0801167c 	.word	0x0801167c

0800a174 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	460b      	mov	r3, r1
 800a17e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d106      	bne.n	800a194 <tcp_write_checks+0x20>
 800a186:	4b33      	ldr	r3, [pc, #204]	; (800a254 <tcp_write_checks+0xe0>)
 800a188:	f240 1233 	movw	r2, #307	; 0x133
 800a18c:	4932      	ldr	r1, [pc, #200]	; (800a258 <tcp_write_checks+0xe4>)
 800a18e:	4833      	ldr	r0, [pc, #204]	; (800a25c <tcp_write_checks+0xe8>)
 800a190:	f004 fbf8 	bl	800e984 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	7d1b      	ldrb	r3, [r3, #20]
 800a198:	2b04      	cmp	r3, #4
 800a19a:	d00e      	beq.n	800a1ba <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800a1a0:	2b07      	cmp	r3, #7
 800a1a2:	d00a      	beq.n	800a1ba <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d006      	beq.n	800a1ba <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800a1b0:	2b03      	cmp	r3, #3
 800a1b2:	d002      	beq.n	800a1ba <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800a1b4:	f06f 030a 	mvn.w	r3, #10
 800a1b8:	e048      	b.n	800a24c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800a1ba:	887b      	ldrh	r3, [r7, #2]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <tcp_write_checks+0x50>
    return ERR_OK;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	e043      	b.n	800a24c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a1ca:	887a      	ldrh	r2, [r7, #2]
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d909      	bls.n	800a1e4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	8b5b      	ldrh	r3, [r3, #26]
 800a1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a1de:	f04f 33ff 	mov.w	r3, #4294967295
 800a1e2:	e033      	b.n	800a24c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a1ea:	2b08      	cmp	r3, #8
 800a1ec:	d909      	bls.n	800a202 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	8b5b      	ldrh	r3, [r3, #26]
 800a1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f6:	b29a      	uxth	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a1fc:	f04f 33ff 	mov.w	r3, #4294967295
 800a200:	e024      	b.n	800a24c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00f      	beq.n	800a22c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a210:	2b00      	cmp	r3, #0
 800a212:	d11a      	bne.n	800a24a <tcp_write_checks+0xd6>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d116      	bne.n	800a24a <tcp_write_checks+0xd6>
 800a21c:	4b0d      	ldr	r3, [pc, #52]	; (800a254 <tcp_write_checks+0xe0>)
 800a21e:	f240 1255 	movw	r2, #341	; 0x155
 800a222:	490f      	ldr	r1, [pc, #60]	; (800a260 <tcp_write_checks+0xec>)
 800a224:	480d      	ldr	r0, [pc, #52]	; (800a25c <tcp_write_checks+0xe8>)
 800a226:	f004 fbad 	bl	800e984 <iprintf>
 800a22a:	e00e      	b.n	800a24a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a230:	2b00      	cmp	r3, #0
 800a232:	d103      	bne.n	800a23c <tcp_write_checks+0xc8>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d006      	beq.n	800a24a <tcp_write_checks+0xd6>
 800a23c:	4b05      	ldr	r3, [pc, #20]	; (800a254 <tcp_write_checks+0xe0>)
 800a23e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800a242:	4908      	ldr	r1, [pc, #32]	; (800a264 <tcp_write_checks+0xf0>)
 800a244:	4805      	ldr	r0, [pc, #20]	; (800a25c <tcp_write_checks+0xe8>)
 800a246:	f004 fb9d 	bl	800e984 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	08011580 	.word	0x08011580
 800a258:	08011690 	.word	0x08011690
 800a25c:	080115d4 	.word	0x080115d4
 800a260:	080116b0 	.word	0x080116b0
 800a264:	080116ec 	.word	0x080116ec

0800a268 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a268:	b590      	push	{r4, r7, lr}
 800a26a:	b09b      	sub	sp, #108	; 0x6c
 800a26c:	af04      	add	r7, sp, #16
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	4611      	mov	r1, r2
 800a274:	461a      	mov	r2, r3
 800a276:	460b      	mov	r3, r1
 800a278:	80fb      	strh	r3, [r7, #6]
 800a27a:	4613      	mov	r3, r2
 800a27c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800a27e:	2300      	movs	r3, #0
 800a280:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a282:	2300      	movs	r3, #0
 800a284:	653b      	str	r3, [r7, #80]	; 0x50
 800a286:	2300      	movs	r3, #0
 800a288:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a28a:	2300      	movs	r3, #0
 800a28c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a28e:	2300      	movs	r3, #0
 800a290:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800a292:	2300      	movs	r3, #0
 800a294:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d109      	bne.n	800a2c4 <tcp_write+0x5c>
 800a2b0:	4ba4      	ldr	r3, [pc, #656]	; (800a544 <tcp_write+0x2dc>)
 800a2b2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800a2b6:	49a4      	ldr	r1, [pc, #656]	; (800a548 <tcp_write+0x2e0>)
 800a2b8:	48a4      	ldr	r0, [pc, #656]	; (800a54c <tcp_write+0x2e4>)
 800a2ba:	f004 fb63 	bl	800e984 <iprintf>
 800a2be:	f06f 030f 	mvn.w	r3, #15
 800a2c2:	e32a      	b.n	800a91a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2ca:	085b      	lsrs	r3, r3, #1
 800a2cc:	b29a      	uxth	r2, r3
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	bf28      	it	cs
 800a2d6:	4613      	movcs	r3, r2
 800a2d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800a2da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d102      	bne.n	800a2e6 <tcp_write+0x7e>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a2e4:	e000      	b.n	800a2e8 <tcp_write+0x80>
 800a2e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d109      	bne.n	800a304 <tcp_write+0x9c>
 800a2f0:	4b94      	ldr	r3, [pc, #592]	; (800a544 <tcp_write+0x2dc>)
 800a2f2:	f240 12ad 	movw	r2, #429	; 0x1ad
 800a2f6:	4996      	ldr	r1, [pc, #600]	; (800a550 <tcp_write+0x2e8>)
 800a2f8:	4894      	ldr	r0, [pc, #592]	; (800a54c <tcp_write+0x2e4>)
 800a2fa:	f004 fb43 	bl	800e984 <iprintf>
 800a2fe:	f06f 030f 	mvn.w	r3, #15
 800a302:	e30a      	b.n	800a91a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800a304:	88fb      	ldrh	r3, [r7, #6]
 800a306:	4619      	mov	r1, r3
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f7ff ff33 	bl	800a174 <tcp_write_checks>
 800a30e:	4603      	mov	r3, r0
 800a310:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800a314:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d002      	beq.n	800a322 <tcp_write+0xba>
    return err;
 800a31c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a320:	e2fb      	b.n	800a91a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a328:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a32c:	2300      	movs	r3, #0
 800a32e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a336:	2b00      	cmp	r3, #0
 800a338:	f000 80f6 	beq.w	800a528 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a340:	653b      	str	r3, [r7, #80]	; 0x50
 800a342:	e002      	b.n	800a34a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800a344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a34a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1f8      	bne.n	800a344 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a354:	7a9b      	ldrb	r3, [r3, #10]
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	b29b      	uxth	r3, r3
 800a35a:	f003 0304 	and.w	r3, r3, #4
 800a35e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a360:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a364:	891b      	ldrh	r3, [r3, #8]
 800a366:	4619      	mov	r1, r3
 800a368:	8c3b      	ldrh	r3, [r7, #32]
 800a36a:	440b      	add	r3, r1
 800a36c:	429a      	cmp	r2, r3
 800a36e:	da06      	bge.n	800a37e <tcp_write+0x116>
 800a370:	4b74      	ldr	r3, [pc, #464]	; (800a544 <tcp_write+0x2dc>)
 800a372:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a376:	4977      	ldr	r1, [pc, #476]	; (800a554 <tcp_write+0x2ec>)
 800a378:	4874      	ldr	r0, [pc, #464]	; (800a54c <tcp_write+0x2e4>)
 800a37a:	f004 fb03 	bl	800e984 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a37e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a380:	891a      	ldrh	r2, [r3, #8]
 800a382:	8c3b      	ldrh	r3, [r7, #32]
 800a384:	4413      	add	r3, r2
 800a386:	b29b      	uxth	r3, r3
 800a388:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a38a:	1ad3      	subs	r3, r2, r3
 800a38c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a394:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800a396:	8a7b      	ldrh	r3, [r7, #18]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d026      	beq.n	800a3ea <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a39c:	8a7b      	ldrh	r3, [r7, #18]
 800a39e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d206      	bcs.n	800a3b2 <tcp_write+0x14a>
 800a3a4:	4b67      	ldr	r3, [pc, #412]	; (800a544 <tcp_write+0x2dc>)
 800a3a6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800a3aa:	496b      	ldr	r1, [pc, #428]	; (800a558 <tcp_write+0x2f0>)
 800a3ac:	4867      	ldr	r0, [pc, #412]	; (800a54c <tcp_write+0x2e4>)
 800a3ae:	f004 fae9 	bl	800e984 <iprintf>
      seg = last_unsent;
 800a3b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3b4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a3b6:	8a7b      	ldrh	r3, [r7, #18]
 800a3b8:	88fa      	ldrh	r2, [r7, #6]
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	bf28      	it	cs
 800a3be:	4613      	movcs	r3, r2
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	bf28      	it	cs
 800a3c8:	4613      	movcs	r3, r2
 800a3ca:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800a3cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a3d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a3d2:	4413      	add	r3, r2
 800a3d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800a3d8:	8a7a      	ldrh	r2, [r7, #18]
 800a3da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800a3e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a3e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a3ea:	8a7b      	ldrh	r3, [r7, #18]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00b      	beq.n	800a408 <tcp_write+0x1a0>
 800a3f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a3f4:	88fb      	ldrh	r3, [r7, #6]
 800a3f6:	429a      	cmp	r2, r3
 800a3f8:	d006      	beq.n	800a408 <tcp_write+0x1a0>
 800a3fa:	4b52      	ldr	r3, [pc, #328]	; (800a544 <tcp_write+0x2dc>)
 800a3fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a400:	4956      	ldr	r1, [pc, #344]	; (800a55c <tcp_write+0x2f4>)
 800a402:	4852      	ldr	r0, [pc, #328]	; (800a54c <tcp_write+0x2e4>)
 800a404:	f004 fabe 	bl	800e984 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a408:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a40c:	88fb      	ldrh	r3, [r7, #6]
 800a40e:	429a      	cmp	r2, r3
 800a410:	f080 8167 	bcs.w	800a6e2 <tcp_write+0x47a>
 800a414:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a416:	2b00      	cmp	r3, #0
 800a418:	f000 8163 	beq.w	800a6e2 <tcp_write+0x47a>
 800a41c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a41e:	891b      	ldrh	r3, [r3, #8]
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 815e 	beq.w	800a6e2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a426:	88fa      	ldrh	r2, [r7, #6]
 800a428:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a42c:	1ad2      	subs	r2, r2, r3
 800a42e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a430:	4293      	cmp	r3, r2
 800a432:	bfa8      	it	ge
 800a434:	4613      	movge	r3, r2
 800a436:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800a438:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a43a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a43c:	797b      	ldrb	r3, [r7, #5]
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	2b00      	cmp	r3, #0
 800a444:	d027      	beq.n	800a496 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a446:	f107 0012 	add.w	r0, r7, #18
 800a44a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a44c:	8bf9      	ldrh	r1, [r7, #30]
 800a44e:	2301      	movs	r3, #1
 800a450:	9302      	str	r3, [sp, #8]
 800a452:	797b      	ldrb	r3, [r7, #5]
 800a454:	9301      	str	r3, [sp, #4]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	4603      	mov	r3, r0
 800a45c:	2000      	movs	r0, #0
 800a45e:	f7ff fe0f 	bl	800a080 <tcp_pbuf_prealloc>
 800a462:	6578      	str	r0, [r7, #84]	; 0x54
 800a464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a466:	2b00      	cmp	r3, #0
 800a468:	f000 8225 	beq.w	800a8b6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a46c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a46e:	6858      	ldr	r0, [r3, #4]
 800a470:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a474:	68ba      	ldr	r2, [r7, #8]
 800a476:	4413      	add	r3, r2
 800a478:	8bfa      	ldrh	r2, [r7, #30]
 800a47a:	4619      	mov	r1, r3
 800a47c:	f004 fa52 	bl	800e924 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800a480:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a482:	f7fb fa19 	bl	80058b8 <pbuf_clen>
 800a486:	4603      	mov	r3, r0
 800a488:	461a      	mov	r2, r3
 800a48a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a48e:	4413      	add	r3, r2
 800a490:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a494:	e041      	b.n	800a51a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	637b      	str	r3, [r7, #52]	; 0x34
 800a49c:	e002      	b.n	800a4a4 <tcp_write+0x23c>
 800a49e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	637b      	str	r3, [r7, #52]	; 0x34
 800a4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1f8      	bne.n	800a49e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ae:	7b1b      	ldrb	r3, [r3, #12]
 800a4b0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d115      	bne.n	800a4e4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a4b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4be:	8952      	ldrh	r2, [r2, #10]
 800a4c0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d10d      	bne.n	800a4e4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a4c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d006      	beq.n	800a4de <tcp_write+0x276>
 800a4d0:	4b1c      	ldr	r3, [pc, #112]	; (800a544 <tcp_write+0x2dc>)
 800a4d2:	f240 2231 	movw	r2, #561	; 0x231
 800a4d6:	4922      	ldr	r1, [pc, #136]	; (800a560 <tcp_write+0x2f8>)
 800a4d8:	481c      	ldr	r0, [pc, #112]	; (800a54c <tcp_write+0x2e4>)
 800a4da:	f004 fa53 	bl	800e984 <iprintf>
          extendlen = seglen;
 800a4de:	8bfb      	ldrh	r3, [r7, #30]
 800a4e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a4e2:	e01a      	b.n	800a51a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a4e4:	8bfb      	ldrh	r3, [r7, #30]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	4619      	mov	r1, r3
 800a4ea:	2000      	movs	r0, #0
 800a4ec:	f7fa fe78 	bl	80051e0 <pbuf_alloc>
 800a4f0:	6578      	str	r0, [r7, #84]	; 0x54
 800a4f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 81e0 	beq.w	800a8ba <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800a4fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	441a      	add	r2, r3
 800a502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a504:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a506:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a508:	f7fb f9d6 	bl	80058b8 <pbuf_clen>
 800a50c:	4603      	mov	r3, r0
 800a50e:	461a      	mov	r2, r3
 800a510:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a514:	4413      	add	r3, r2
 800a516:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a51a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a51e:	8bfb      	ldrh	r3, [r7, #30]
 800a520:	4413      	add	r3, r2
 800a522:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a526:	e0dc      	b.n	800a6e2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 80d7 	beq.w	800a6e2 <tcp_write+0x47a>
 800a534:	4b03      	ldr	r3, [pc, #12]	; (800a544 <tcp_write+0x2dc>)
 800a536:	f240 224a 	movw	r2, #586	; 0x24a
 800a53a:	490a      	ldr	r1, [pc, #40]	; (800a564 <tcp_write+0x2fc>)
 800a53c:	4803      	ldr	r0, [pc, #12]	; (800a54c <tcp_write+0x2e4>)
 800a53e:	f004 fa21 	bl	800e984 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a542:	e0ce      	b.n	800a6e2 <tcp_write+0x47a>
 800a544:	08011580 	.word	0x08011580
 800a548:	08011720 	.word	0x08011720
 800a54c:	080115d4 	.word	0x080115d4
 800a550:	08011738 	.word	0x08011738
 800a554:	0801176c 	.word	0x0801176c
 800a558:	08011784 	.word	0x08011784
 800a55c:	080117a4 	.word	0x080117a4
 800a560:	080117c4 	.word	0x080117c4
 800a564:	080117f0 	.word	0x080117f0
    struct pbuf *p;
    u16_t left = len - pos;
 800a568:	88fa      	ldrh	r2, [r7, #6]
 800a56a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a56e:	1ad3      	subs	r3, r2, r3
 800a570:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a572:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a576:	b29b      	uxth	r3, r3
 800a578:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a57e:	8b7a      	ldrh	r2, [r7, #26]
 800a580:	8bbb      	ldrh	r3, [r7, #28]
 800a582:	4293      	cmp	r3, r2
 800a584:	bf28      	it	cs
 800a586:	4613      	movcs	r3, r2
 800a588:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a58a:	797b      	ldrb	r3, [r7, #5]
 800a58c:	f003 0301 	and.w	r3, r3, #1
 800a590:	2b00      	cmp	r3, #0
 800a592:	d036      	beq.n	800a602 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a594:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a598:	b29a      	uxth	r2, r3
 800a59a:	8b3b      	ldrh	r3, [r7, #24]
 800a59c:	4413      	add	r3, r2
 800a59e:	b299      	uxth	r1, r3
 800a5a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	bf0c      	ite	eq
 800a5a6:	2301      	moveq	r3, #1
 800a5a8:	2300      	movne	r3, #0
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	f107 0012 	add.w	r0, r7, #18
 800a5b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a5b2:	9302      	str	r3, [sp, #8]
 800a5b4:	797b      	ldrb	r3, [r7, #5]
 800a5b6:	9301      	str	r3, [sp, #4]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	9300      	str	r3, [sp, #0]
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2036      	movs	r0, #54	; 0x36
 800a5c0:	f7ff fd5e 	bl	800a080 <tcp_pbuf_prealloc>
 800a5c4:	6338      	str	r0, [r7, #48]	; 0x30
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	f000 8178 	beq.w	800a8be <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	895b      	ldrh	r3, [r3, #10]
 800a5d2:	8b3a      	ldrh	r2, [r7, #24]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d906      	bls.n	800a5e6 <tcp_write+0x37e>
 800a5d8:	4b8c      	ldr	r3, [pc, #560]	; (800a80c <tcp_write+0x5a4>)
 800a5da:	f240 2266 	movw	r2, #614	; 0x266
 800a5de:	498c      	ldr	r1, [pc, #560]	; (800a810 <tcp_write+0x5a8>)
 800a5e0:	488c      	ldr	r0, [pc, #560]	; (800a814 <tcp_write+0x5ac>)
 800a5e2:	f004 f9cf 	bl	800e984 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	685a      	ldr	r2, [r3, #4]
 800a5ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a5ee:	18d0      	adds	r0, r2, r3
 800a5f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a5f4:	68ba      	ldr	r2, [r7, #8]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	8b3a      	ldrh	r2, [r7, #24]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	f004 f992 	bl	800e924 <memcpy>
 800a600:	e02f      	b.n	800a662 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a602:	8a7b      	ldrh	r3, [r7, #18]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d006      	beq.n	800a616 <tcp_write+0x3ae>
 800a608:	4b80      	ldr	r3, [pc, #512]	; (800a80c <tcp_write+0x5a4>)
 800a60a:	f240 2271 	movw	r2, #625	; 0x271
 800a60e:	4982      	ldr	r1, [pc, #520]	; (800a818 <tcp_write+0x5b0>)
 800a610:	4880      	ldr	r0, [pc, #512]	; (800a814 <tcp_write+0x5ac>)
 800a612:	f004 f9b7 	bl	800e984 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a616:	8b3b      	ldrh	r3, [r7, #24]
 800a618:	2201      	movs	r2, #1
 800a61a:	4619      	mov	r1, r3
 800a61c:	2036      	movs	r0, #54	; 0x36
 800a61e:	f7fa fddf 	bl	80051e0 <pbuf_alloc>
 800a622:	6178      	str	r0, [r7, #20]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 814b 	beq.w	800a8c2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800a62c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	441a      	add	r2, r3
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a638:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a642:	4619      	mov	r1, r3
 800a644:	2036      	movs	r0, #54	; 0x36
 800a646:	f7fa fdcb 	bl	80051e0 <pbuf_alloc>
 800a64a:	6338      	str	r0, [r7, #48]	; 0x30
 800a64c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d103      	bne.n	800a65a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a652:	6978      	ldr	r0, [r7, #20]
 800a654:	f7fb f8a8 	bl	80057a8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a658:	e136      	b.n	800a8c8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a65a:	6979      	ldr	r1, [r7, #20]
 800a65c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a65e:	f7fb f965 	bl	800592c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a664:	f7fb f928 	bl	80058b8 <pbuf_clen>
 800a668:	4603      	mov	r3, r0
 800a66a:	461a      	mov	r2, r3
 800a66c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a670:	4413      	add	r3, r2
 800a672:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a676:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a67a:	2b09      	cmp	r3, #9
 800a67c:	d903      	bls.n	800a686 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a67e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a680:	f7fb f892 	bl	80057a8 <pbuf_free>
      goto memerr;
 800a684:	e120      	b.n	800a8c8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a68a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a68e:	441a      	add	r2, r3
 800a690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	4613      	mov	r3, r2
 800a698:	2200      	movs	r2, #0
 800a69a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f7ff fc51 	bl	8009f44 <tcp_create_segment>
 800a6a2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a6a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	f000 810d 	beq.w	800a8c6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d102      	bne.n	800a6b8 <tcp_write+0x450>
      queue = seg;
 800a6b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b4:	647b      	str	r3, [r7, #68]	; 0x44
 800a6b6:	e00c      	b.n	800a6d2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a6b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d106      	bne.n	800a6cc <tcp_write+0x464>
 800a6be:	4b53      	ldr	r3, [pc, #332]	; (800a80c <tcp_write+0x5a4>)
 800a6c0:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a6c4:	4955      	ldr	r1, [pc, #340]	; (800a81c <tcp_write+0x5b4>)
 800a6c6:	4853      	ldr	r0, [pc, #332]	; (800a814 <tcp_write+0x5ac>)
 800a6c8:	f004 f95c 	bl	800e984 <iprintf>
      prev_seg->next = seg;
 800a6cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6d0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6d4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a6d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a6da:	8b3b      	ldrh	r3, [r7, #24]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800a6e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a6e6:	88fb      	ldrh	r3, [r7, #6]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	f4ff af3d 	bcc.w	800a568 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a6ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d02c      	beq.n	800a74e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a6f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6fa:	e01e      	b.n	800a73a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800a6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6fe:	891a      	ldrh	r2, [r3, #8]
 800a700:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a702:	4413      	add	r3, r2
 800a704:	b29a      	uxth	r2, r3
 800a706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a708:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d110      	bne.n	800a734 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a718:	8952      	ldrh	r2, [r2, #10]
 800a71a:	4413      	add	r3, r2
 800a71c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a71e:	68b9      	ldr	r1, [r7, #8]
 800a720:	4618      	mov	r0, r3
 800a722:	f004 f8ff 	bl	800e924 <memcpy>
        p->len += oversize_used;
 800a726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a728:	895a      	ldrh	r2, [r3, #10]
 800a72a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a72c:	4413      	add	r3, r2
 800a72e:	b29a      	uxth	r2, r3
 800a730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a732:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1dd      	bne.n	800a6fc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800a740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a742:	891a      	ldrh	r2, [r3, #8]
 800a744:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a746:	4413      	add	r3, r2
 800a748:	b29a      	uxth	r2, r3
 800a74a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a74c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a74e:	8a7a      	ldrh	r2, [r7, #18]
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d018      	beq.n	800a78e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a75c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d106      	bne.n	800a770 <tcp_write+0x508>
 800a762:	4b2a      	ldr	r3, [pc, #168]	; (800a80c <tcp_write+0x5a4>)
 800a764:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800a768:	492d      	ldr	r1, [pc, #180]	; (800a820 <tcp_write+0x5b8>)
 800a76a:	482a      	ldr	r0, [pc, #168]	; (800a814 <tcp_write+0x5ac>)
 800a76c:	f004 f90a 	bl	800e984 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a776:	4618      	mov	r0, r3
 800a778:	f7fb f8d8 	bl	800592c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a77c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a77e:	891a      	ldrh	r2, [r3, #8]
 800a780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a782:	891b      	ldrh	r3, [r3, #8]
 800a784:	4413      	add	r3, r2
 800a786:	b29a      	uxth	r2, r3
 800a788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a78a:	811a      	strh	r2, [r3, #8]
 800a78c:	e037      	b.n	800a7fe <tcp_write+0x596>
  } else if (extendlen > 0) {
 800a78e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a790:	2b00      	cmp	r3, #0
 800a792:	d034      	beq.n	800a7fe <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a796:	2b00      	cmp	r3, #0
 800a798:	d003      	beq.n	800a7a2 <tcp_write+0x53a>
 800a79a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d106      	bne.n	800a7b0 <tcp_write+0x548>
 800a7a2:	4b1a      	ldr	r3, [pc, #104]	; (800a80c <tcp_write+0x5a4>)
 800a7a4:	f240 22e6 	movw	r2, #742	; 0x2e6
 800a7a8:	491e      	ldr	r1, [pc, #120]	; (800a824 <tcp_write+0x5bc>)
 800a7aa:	481a      	ldr	r0, [pc, #104]	; (800a814 <tcp_write+0x5ac>)
 800a7ac:	f004 f8ea 	bl	800e984 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a7b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7b6:	e009      	b.n	800a7cc <tcp_write+0x564>
      p->tot_len += extendlen;
 800a7b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ba:	891a      	ldrh	r2, [r3, #8]
 800a7bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a7be:	4413      	add	r3, r2
 800a7c0:	b29a      	uxth	r2, r3
 800a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d1f1      	bne.n	800a7b8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800a7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d6:	891a      	ldrh	r2, [r3, #8]
 800a7d8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a7da:	4413      	add	r3, r2
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	895a      	ldrh	r2, [r3, #10]
 800a7e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a7e8:	4413      	add	r3, r2
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a7f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7f2:	891a      	ldrh	r2, [r3, #8]
 800a7f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a7f6:	4413      	add	r3, r2
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7fc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a7fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a800:	2b00      	cmp	r3, #0
 800a802:	d111      	bne.n	800a828 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a808:	66da      	str	r2, [r3, #108]	; 0x6c
 800a80a:	e010      	b.n	800a82e <tcp_write+0x5c6>
 800a80c:	08011580 	.word	0x08011580
 800a810:	08011820 	.word	0x08011820
 800a814:	080115d4 	.word	0x080115d4
 800a818:	08011860 	.word	0x08011860
 800a81c:	08011870 	.word	0x08011870
 800a820:	08011884 	.word	0x08011884
 800a824:	080118bc 	.word	0x080118bc
  } else {
    last_unsent->next = queue;
 800a828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a82a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a82c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a832:	88fb      	ldrh	r3, [r7, #6]
 800a834:	441a      	add	r2, r3
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a840:	88fb      	ldrh	r3, [r7, #6]
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	b29a      	uxth	r2, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a852:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d00e      	beq.n	800a87e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10a      	bne.n	800a87e <tcp_write+0x616>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <tcp_write+0x616>
 800a870:	4b2c      	ldr	r3, [pc, #176]	; (800a924 <tcp_write+0x6bc>)
 800a872:	f240 3212 	movw	r2, #786	; 0x312
 800a876:	492c      	ldr	r1, [pc, #176]	; (800a928 <tcp_write+0x6c0>)
 800a878:	482c      	ldr	r0, [pc, #176]	; (800a92c <tcp_write+0x6c4>)
 800a87a:	f004 f883 	bl	800e984 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800a87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a880:	2b00      	cmp	r3, #0
 800a882:	d016      	beq.n	800a8b2 <tcp_write+0x64a>
 800a884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d012      	beq.n	800a8b2 <tcp_write+0x64a>
 800a88c:	797b      	ldrb	r3, [r7, #5]
 800a88e:	f003 0302 	and.w	r3, r3, #2
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10d      	bne.n	800a8b2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a898:	68db      	ldr	r3, [r3, #12]
 800a89a:	899b      	ldrh	r3, [r3, #12]
 800a89c:	b29c      	uxth	r4, r3
 800a89e:	2008      	movs	r0, #8
 800a8a0:	f7f9 fc24 	bl	80040ec <lwip_htons>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	4322      	orrs	r2, r4
 800a8ae:	b292      	uxth	r2, r2
 800a8b0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	e031      	b.n	800a91a <tcp_write+0x6b2>
          goto memerr;
 800a8b6:	bf00      	nop
 800a8b8:	e006      	b.n	800a8c8 <tcp_write+0x660>
            goto memerr;
 800a8ba:	bf00      	nop
 800a8bc:	e004      	b.n	800a8c8 <tcp_write+0x660>
        goto memerr;
 800a8be:	bf00      	nop
 800a8c0:	e002      	b.n	800a8c8 <tcp_write+0x660>
        goto memerr;
 800a8c2:	bf00      	nop
 800a8c4:	e000      	b.n	800a8c8 <tcp_write+0x660>
      goto memerr;
 800a8c6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	8b5b      	ldrh	r3, [r3, #26]
 800a8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a8d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800a8dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a8de:	f7fa ff63 	bl	80057a8 <pbuf_free>
  }
  if (queue != NULL) {
 800a8e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <tcp_write+0x686>
    tcp_segs_free(queue);
 800a8e8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a8ea:	f7fc fbab 	bl	8007044 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00e      	beq.n	800a916 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10a      	bne.n	800a916 <tcp_write+0x6ae>
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a904:	2b00      	cmp	r3, #0
 800a906:	d106      	bne.n	800a916 <tcp_write+0x6ae>
 800a908:	4b06      	ldr	r3, [pc, #24]	; (800a924 <tcp_write+0x6bc>)
 800a90a:	f240 3227 	movw	r2, #807	; 0x327
 800a90e:	4906      	ldr	r1, [pc, #24]	; (800a928 <tcp_write+0x6c0>)
 800a910:	4806      	ldr	r0, [pc, #24]	; (800a92c <tcp_write+0x6c4>)
 800a912:	f004 f837 	bl	800e984 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	375c      	adds	r7, #92	; 0x5c
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd90      	pop	{r4, r7, pc}
 800a922:	bf00      	nop
 800a924:	08011580 	.word	0x08011580
 800a928:	080118f4 	.word	0x080118f4
 800a92c:	080115d4 	.word	0x080115d4

0800a930 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a930:	b590      	push	{r4, r7, lr}
 800a932:	b08b      	sub	sp, #44	; 0x2c
 800a934:	af02      	add	r7, sp, #8
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	460b      	mov	r3, r1
 800a93a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a93c:	2300      	movs	r3, #0
 800a93e:	61fb      	str	r3, [r7, #28]
 800a940:	2300      	movs	r3, #0
 800a942:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a944:	2300      	movs	r3, #0
 800a946:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d106      	bne.n	800a95c <tcp_split_unsent_seg+0x2c>
 800a94e:	4b95      	ldr	r3, [pc, #596]	; (800aba4 <tcp_split_unsent_seg+0x274>)
 800a950:	f240 324b 	movw	r2, #843	; 0x34b
 800a954:	4994      	ldr	r1, [pc, #592]	; (800aba8 <tcp_split_unsent_seg+0x278>)
 800a956:	4895      	ldr	r0, [pc, #596]	; (800abac <tcp_split_unsent_seg+0x27c>)
 800a958:	f004 f814 	bl	800e984 <iprintf>

  useg = pcb->unsent;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a960:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d102      	bne.n	800a96e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a968:	f04f 33ff 	mov.w	r3, #4294967295
 800a96c:	e116      	b.n	800ab9c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a96e:	887b      	ldrh	r3, [r7, #2]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d109      	bne.n	800a988 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a974:	4b8b      	ldr	r3, [pc, #556]	; (800aba4 <tcp_split_unsent_seg+0x274>)
 800a976:	f240 3253 	movw	r2, #851	; 0x353
 800a97a:	498d      	ldr	r1, [pc, #564]	; (800abb0 <tcp_split_unsent_seg+0x280>)
 800a97c:	488b      	ldr	r0, [pc, #556]	; (800abac <tcp_split_unsent_seg+0x27c>)
 800a97e:	f004 f801 	bl	800e984 <iprintf>
    return ERR_VAL;
 800a982:	f06f 0305 	mvn.w	r3, #5
 800a986:	e109      	b.n	800ab9c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	891b      	ldrh	r3, [r3, #8]
 800a98c:	887a      	ldrh	r2, [r7, #2]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d301      	bcc.n	800a996 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a992:	2300      	movs	r3, #0
 800a994:	e102      	b.n	800ab9c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a99a:	887a      	ldrh	r2, [r7, #2]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d906      	bls.n	800a9ae <tcp_split_unsent_seg+0x7e>
 800a9a0:	4b80      	ldr	r3, [pc, #512]	; (800aba4 <tcp_split_unsent_seg+0x274>)
 800a9a2:	f240 325b 	movw	r2, #859	; 0x35b
 800a9a6:	4983      	ldr	r1, [pc, #524]	; (800abb4 <tcp_split_unsent_seg+0x284>)
 800a9a8:	4880      	ldr	r0, [pc, #512]	; (800abac <tcp_split_unsent_seg+0x27c>)
 800a9aa:	f003 ffeb 	bl	800e984 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	891b      	ldrh	r3, [r3, #8]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d106      	bne.n	800a9c4 <tcp_split_unsent_seg+0x94>
 800a9b6:	4b7b      	ldr	r3, [pc, #492]	; (800aba4 <tcp_split_unsent_seg+0x274>)
 800a9b8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a9bc:	497e      	ldr	r1, [pc, #504]	; (800abb8 <tcp_split_unsent_seg+0x288>)
 800a9be:	487b      	ldr	r0, [pc, #492]	; (800abac <tcp_split_unsent_seg+0x27c>)
 800a9c0:	f003 ffe0 	bl	800e984 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	7a9b      	ldrb	r3, [r3, #10]
 800a9c8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	009b      	lsls	r3, r3, #2
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	f003 0304 	and.w	r3, r3, #4
 800a9d4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	891a      	ldrh	r2, [r3, #8]
 800a9da:	887b      	ldrh	r3, [r7, #2]
 800a9dc:	1ad3      	subs	r3, r2, r3
 800a9de:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	89bb      	ldrh	r3, [r7, #12]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	b29b      	uxth	r3, r3
 800a9ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	2036      	movs	r0, #54	; 0x36
 800a9f2:	f7fa fbf5 	bl	80051e0 <pbuf_alloc>
 800a9f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f000 80b7 	beq.w	800ab6e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	891a      	ldrh	r2, [r3, #8]
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	891b      	ldrh	r3, [r3, #8]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	b29a      	uxth	r2, r3
 800aa0e:	887b      	ldrh	r3, [r7, #2]
 800aa10:	4413      	add	r3, r2
 800aa12:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	6858      	ldr	r0, [r3, #4]
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	685a      	ldr	r2, [r3, #4]
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	18d1      	adds	r1, r2, r3
 800aa20:	897b      	ldrh	r3, [r7, #10]
 800aa22:	89ba      	ldrh	r2, [r7, #12]
 800aa24:	f7fb f8aa 	bl	8005b7c <pbuf_copy_partial>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	89bb      	ldrh	r3, [r7, #12]
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	f040 809f 	bne.w	800ab72 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	899b      	ldrh	r3, [r3, #12]
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f7f9 fb55 	bl	80040ec <lwip_htons>
 800aa42:	4603      	mov	r3, r0
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa4a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800aa50:	7efb      	ldrb	r3, [r7, #27]
 800aa52:	f003 0308 	and.w	r3, r3, #8
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d007      	beq.n	800aa6a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800aa5a:	7efb      	ldrb	r3, [r7, #27]
 800aa5c:	f023 0308 	bic.w	r3, r3, #8
 800aa60:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800aa62:	7ebb      	ldrb	r3, [r7, #26]
 800aa64:	f043 0308 	orr.w	r3, r3, #8
 800aa68:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800aa6a:	7efb      	ldrb	r3, [r7, #27]
 800aa6c:	f003 0301 	and.w	r3, r3, #1
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d007      	beq.n	800aa84 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800aa74:	7efb      	ldrb	r3, [r7, #27]
 800aa76:	f023 0301 	bic.w	r3, r3, #1
 800aa7a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800aa7c:	7ebb      	ldrb	r3, [r7, #26]
 800aa7e:	f043 0301 	orr.w	r3, r3, #1
 800aa82:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	68db      	ldr	r3, [r3, #12]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7f9 fb43 	bl	8004116 <lwip_htonl>
 800aa90:	4602      	mov	r2, r0
 800aa92:	887b      	ldrh	r3, [r7, #2]
 800aa94:	18d1      	adds	r1, r2, r3
 800aa96:	7eba      	ldrb	r2, [r7, #26]
 800aa98:	7bfb      	ldrb	r3, [r7, #15]
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	460b      	mov	r3, r1
 800aa9e:	6939      	ldr	r1, [r7, #16]
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f7ff fa4f 	bl	8009f44 <tcp_create_segment>
 800aaa6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d063      	beq.n	800ab76 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f7fa ff00 	bl	80058b8 <pbuf_clen>
 800aab8:	4603      	mov	r3, r0
 800aaba:	461a      	mov	r2, r3
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800aac2:	1a9b      	subs	r3, r3, r2
 800aac4:	b29a      	uxth	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	6858      	ldr	r0, [r3, #4]
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	891a      	ldrh	r2, [r3, #8]
 800aad6:	89bb      	ldrh	r3, [r7, #12]
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	b29b      	uxth	r3, r3
 800aadc:	4619      	mov	r1, r3
 800aade:	f7fa fcdd 	bl	800549c <pbuf_realloc>
  useg->len -= remainder;
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	891a      	ldrh	r2, [r3, #8]
 800aae6:	89bb      	ldrh	r3, [r7, #12]
 800aae8:	1ad3      	subs	r3, r2, r3
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	899b      	ldrh	r3, [r3, #12]
 800aaf6:	b29c      	uxth	r4, r3
 800aaf8:	7efb      	ldrb	r3, [r7, #27]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	4618      	mov	r0, r3
 800aafe:	f7f9 faf5 	bl	80040ec <lwip_htons>
 800ab02:	4603      	mov	r3, r0
 800ab04:	461a      	mov	r2, r3
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	68db      	ldr	r3, [r3, #12]
 800ab0a:	4322      	orrs	r2, r4
 800ab0c:	b292      	uxth	r2, r2
 800ab0e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7fa fecf 	bl	80058b8 <pbuf_clen>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab24:	4413      	add	r3, r2
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fa fec0 	bl	80058b8 <pbuf_clen>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ab42:	4413      	add	r3, r2
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	681a      	ldr	r2, [r3, #0]
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	69fa      	ldr	r2, [r7, #28]
 800ab58:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d103      	bne.n	800ab6a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	e016      	b.n	800ab9c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ab6e:	bf00      	nop
 800ab70:	e002      	b.n	800ab78 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ab72:	bf00      	nop
 800ab74:	e000      	b.n	800ab78 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ab76:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d006      	beq.n	800ab8c <tcp_split_unsent_seg+0x25c>
 800ab7e:	4b09      	ldr	r3, [pc, #36]	; (800aba4 <tcp_split_unsent_seg+0x274>)
 800ab80:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ab84:	490d      	ldr	r1, [pc, #52]	; (800abbc <tcp_split_unsent_seg+0x28c>)
 800ab86:	4809      	ldr	r0, [pc, #36]	; (800abac <tcp_split_unsent_seg+0x27c>)
 800ab88:	f003 fefc 	bl	800e984 <iprintf>
  if (p != NULL) {
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d002      	beq.n	800ab98 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ab92:	6938      	ldr	r0, [r7, #16]
 800ab94:	f7fa fe08 	bl	80057a8 <pbuf_free>
  }

  return ERR_MEM;
 800ab98:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3724      	adds	r7, #36	; 0x24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd90      	pop	{r4, r7, pc}
 800aba4:	08011580 	.word	0x08011580
 800aba8:	08011914 	.word	0x08011914
 800abac:	080115d4 	.word	0x080115d4
 800abb0:	08011938 	.word	0x08011938
 800abb4:	0801195c 	.word	0x0801195c
 800abb8:	0801196c 	.word	0x0801196c
 800abbc:	0801197c 	.word	0x0801197c

0800abc0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800abc0:	b590      	push	{r4, r7, lr}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d106      	bne.n	800abdc <tcp_send_fin+0x1c>
 800abce:	4b21      	ldr	r3, [pc, #132]	; (800ac54 <tcp_send_fin+0x94>)
 800abd0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800abd4:	4920      	ldr	r1, [pc, #128]	; (800ac58 <tcp_send_fin+0x98>)
 800abd6:	4821      	ldr	r0, [pc, #132]	; (800ac5c <tcp_send_fin+0x9c>)
 800abd8:	f003 fed4 	bl	800e984 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d02e      	beq.n	800ac42 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abe8:	60fb      	str	r3, [r7, #12]
 800abea:	e002      	b.n	800abf2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1f8      	bne.n	800abec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	899b      	ldrh	r3, [r3, #12]
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7f9 fa72 	bl	80040ec <lwip_htons>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	b2db      	uxtb	r3, r3
 800ac0c:	f003 0307 	and.w	r3, r3, #7
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d116      	bne.n	800ac42 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	899b      	ldrh	r3, [r3, #12]
 800ac1a:	b29c      	uxth	r4, r3
 800ac1c:	2001      	movs	r0, #1
 800ac1e:	f7f9 fa65 	bl	80040ec <lwip_htons>
 800ac22:	4603      	mov	r3, r0
 800ac24:	461a      	mov	r2, r3
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	4322      	orrs	r2, r4
 800ac2c:	b292      	uxth	r2, r2
 800ac2e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	8b5b      	ldrh	r3, [r3, #26]
 800ac34:	f043 0320 	orr.w	r3, r3, #32
 800ac38:	b29a      	uxth	r2, r3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e004      	b.n	800ac4c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ac42:	2101      	movs	r1, #1
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 f80b 	bl	800ac60 <tcp_enqueue_flags>
 800ac4a:	4603      	mov	r3, r0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd90      	pop	{r4, r7, pc}
 800ac54:	08011580 	.word	0x08011580
 800ac58:	08011988 	.word	0x08011988
 800ac5c:	080115d4 	.word	0x080115d4

0800ac60 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b08a      	sub	sp, #40	; 0x28
 800ac64:	af02      	add	r7, sp, #8
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	460b      	mov	r3, r1
 800ac6a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800ac70:	2300      	movs	r3, #0
 800ac72:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ac74:	78fb      	ldrb	r3, [r7, #3]
 800ac76:	f003 0303 	and.w	r3, r3, #3
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d106      	bne.n	800ac8c <tcp_enqueue_flags+0x2c>
 800ac7e:	4b67      	ldr	r3, [pc, #412]	; (800ae1c <tcp_enqueue_flags+0x1bc>)
 800ac80:	f240 4211 	movw	r2, #1041	; 0x411
 800ac84:	4966      	ldr	r1, [pc, #408]	; (800ae20 <tcp_enqueue_flags+0x1c0>)
 800ac86:	4867      	ldr	r0, [pc, #412]	; (800ae24 <tcp_enqueue_flags+0x1c4>)
 800ac88:	f003 fe7c 	bl	800e984 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d106      	bne.n	800aca0 <tcp_enqueue_flags+0x40>
 800ac92:	4b62      	ldr	r3, [pc, #392]	; (800ae1c <tcp_enqueue_flags+0x1bc>)
 800ac94:	f240 4213 	movw	r2, #1043	; 0x413
 800ac98:	4963      	ldr	r1, [pc, #396]	; (800ae28 <tcp_enqueue_flags+0x1c8>)
 800ac9a:	4862      	ldr	r0, [pc, #392]	; (800ae24 <tcp_enqueue_flags+0x1c4>)
 800ac9c:	f003 fe72 	bl	800e984 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800aca0:	78fb      	ldrb	r3, [r7, #3]
 800aca2:	f003 0302 	and.w	r3, r3, #2
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800acaa:	2301      	movs	r3, #1
 800acac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800acae:	7ffb      	ldrb	r3, [r7, #31]
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	f003 0304 	and.w	r3, r3, #4
 800acb8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800acba:	7dfb      	ldrb	r3, [r7, #23]
 800acbc:	b29b      	uxth	r3, r3
 800acbe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800acc2:	4619      	mov	r1, r3
 800acc4:	2036      	movs	r0, #54	; 0x36
 800acc6:	f7fa fa8b 	bl	80051e0 <pbuf_alloc>
 800acca:	6138      	str	r0, [r7, #16]
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d109      	bne.n	800ace6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	8b5b      	ldrh	r3, [r3, #26]
 800acd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acda:	b29a      	uxth	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ace0:	f04f 33ff 	mov.w	r3, #4294967295
 800ace4:	e095      	b.n	800ae12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	895a      	ldrh	r2, [r3, #10]
 800acea:	7dfb      	ldrb	r3, [r7, #23]
 800acec:	b29b      	uxth	r3, r3
 800acee:	429a      	cmp	r2, r3
 800acf0:	d206      	bcs.n	800ad00 <tcp_enqueue_flags+0xa0>
 800acf2:	4b4a      	ldr	r3, [pc, #296]	; (800ae1c <tcp_enqueue_flags+0x1bc>)
 800acf4:	f240 4239 	movw	r2, #1081	; 0x439
 800acf8:	494c      	ldr	r1, [pc, #304]	; (800ae2c <tcp_enqueue_flags+0x1cc>)
 800acfa:	484a      	ldr	r0, [pc, #296]	; (800ae24 <tcp_enqueue_flags+0x1c4>)
 800acfc:	f003 fe42 	bl	800e984 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ad04:	78fa      	ldrb	r2, [r7, #3]
 800ad06:	7ffb      	ldrb	r3, [r7, #31]
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	6939      	ldr	r1, [r7, #16]
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f7ff f918 	bl	8009f44 <tcp_create_segment>
 800ad14:	60f8      	str	r0, [r7, #12]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d109      	bne.n	800ad30 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	8b5b      	ldrh	r3, [r3, #26]
 800ad20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ad2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ad2e:	e070      	b.n	800ae12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	f003 0303 	and.w	r3, r3, #3
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d006      	beq.n	800ad4a <tcp_enqueue_flags+0xea>
 800ad3c:	4b37      	ldr	r3, [pc, #220]	; (800ae1c <tcp_enqueue_flags+0x1bc>)
 800ad3e:	f240 4242 	movw	r2, #1090	; 0x442
 800ad42:	493b      	ldr	r1, [pc, #236]	; (800ae30 <tcp_enqueue_flags+0x1d0>)
 800ad44:	4837      	ldr	r0, [pc, #220]	; (800ae24 <tcp_enqueue_flags+0x1c4>)
 800ad46:	f003 fe1d 	bl	800e984 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	891b      	ldrh	r3, [r3, #8]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d006      	beq.n	800ad60 <tcp_enqueue_flags+0x100>
 800ad52:	4b32      	ldr	r3, [pc, #200]	; (800ae1c <tcp_enqueue_flags+0x1bc>)
 800ad54:	f240 4243 	movw	r2, #1091	; 0x443
 800ad58:	4936      	ldr	r1, [pc, #216]	; (800ae34 <tcp_enqueue_flags+0x1d4>)
 800ad5a:	4832      	ldr	r0, [pc, #200]	; (800ae24 <tcp_enqueue_flags+0x1c4>)
 800ad5c:	f003 fe12 	bl	800e984 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d103      	bne.n	800ad70 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68fa      	ldr	r2, [r7, #12]
 800ad6c:	66da      	str	r2, [r3, #108]	; 0x6c
 800ad6e:	e00d      	b.n	800ad8c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad74:	61bb      	str	r3, [r7, #24]
 800ad76:	e002      	b.n	800ad7e <tcp_enqueue_flags+0x11e>
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	61bb      	str	r3, [r7, #24]
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1f8      	bne.n	800ad78 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800ad94:	78fb      	ldrb	r3, [r7, #3]
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d104      	bne.n	800ada8 <tcp_enqueue_flags+0x148>
 800ad9e:	78fb      	ldrb	r3, [r7, #3]
 800ada0:	f003 0301 	and.w	r3, r3, #1
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d004      	beq.n	800adb2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adac:	1c5a      	adds	r2, r3, #1
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800adb2:	78fb      	ldrb	r3, [r7, #3]
 800adb4:	f003 0301 	and.w	r3, r3, #1
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d006      	beq.n	800adca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	8b5b      	ldrh	r3, [r3, #26]
 800adc0:	f043 0320 	orr.w	r3, r3, #32
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	685b      	ldr	r3, [r3, #4]
 800adce:	4618      	mov	r0, r3
 800add0:	f7fa fd72 	bl	80058b8 <pbuf_clen>
 800add4:	4603      	mov	r3, r0
 800add6:	461a      	mov	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800adde:	4413      	add	r3, r2
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00e      	beq.n	800ae10 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10a      	bne.n	800ae10 <tcp_enqueue_flags+0x1b0>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d106      	bne.n	800ae10 <tcp_enqueue_flags+0x1b0>
 800ae02:	4b06      	ldr	r3, [pc, #24]	; (800ae1c <tcp_enqueue_flags+0x1bc>)
 800ae04:	f240 4265 	movw	r2, #1125	; 0x465
 800ae08:	490b      	ldr	r1, [pc, #44]	; (800ae38 <tcp_enqueue_flags+0x1d8>)
 800ae0a:	4806      	ldr	r0, [pc, #24]	; (800ae24 <tcp_enqueue_flags+0x1c4>)
 800ae0c:	f003 fdba 	bl	800e984 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3720      	adds	r7, #32
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	08011580 	.word	0x08011580
 800ae20:	080119a4 	.word	0x080119a4
 800ae24:	080115d4 	.word	0x080115d4
 800ae28:	080119fc 	.word	0x080119fc
 800ae2c:	08011a1c 	.word	0x08011a1c
 800ae30:	08011a58 	.word	0x08011a58
 800ae34:	08011a70 	.word	0x08011a70
 800ae38:	08011a9c 	.word	0x08011a9c

0800ae3c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ae3c:	b5b0      	push	{r4, r5, r7, lr}
 800ae3e:	b08a      	sub	sp, #40	; 0x28
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d106      	bne.n	800ae58 <tcp_output+0x1c>
 800ae4a:	4b8a      	ldr	r3, [pc, #552]	; (800b074 <tcp_output+0x238>)
 800ae4c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ae50:	4989      	ldr	r1, [pc, #548]	; (800b078 <tcp_output+0x23c>)
 800ae52:	488a      	ldr	r0, [pc, #552]	; (800b07c <tcp_output+0x240>)
 800ae54:	f003 fd96 	bl	800e984 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	7d1b      	ldrb	r3, [r3, #20]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d106      	bne.n	800ae6e <tcp_output+0x32>
 800ae60:	4b84      	ldr	r3, [pc, #528]	; (800b074 <tcp_output+0x238>)
 800ae62:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ae66:	4986      	ldr	r1, [pc, #536]	; (800b080 <tcp_output+0x244>)
 800ae68:	4884      	ldr	r0, [pc, #528]	; (800b07c <tcp_output+0x240>)
 800ae6a:	f003 fd8b 	bl	800e984 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800ae6e:	4b85      	ldr	r3, [pc, #532]	; (800b084 <tcp_output+0x248>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d101      	bne.n	800ae7c <tcp_output+0x40>
    return ERR_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	e1ce      	b.n	800b21a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	bf28      	it	cs
 800ae8c:	4613      	movcs	r3, r2
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae96:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10b      	bne.n	800aeb6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	8b5b      	ldrh	r3, [r3, #26]
 800aea2:	f003 0302 	and.w	r3, r3, #2
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	f000 81aa 	beq.w	800b200 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fdcb 	bl	800ba48 <tcp_send_empty_ack>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	e1b1      	b.n	800b21a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800aeb6:	6879      	ldr	r1, [r7, #4]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	3304      	adds	r3, #4
 800aebc:	461a      	mov	r2, r3
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f7ff f824 	bl	8009f0c <tcp_route>
 800aec4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d102      	bne.n	800aed2 <tcp_output+0x96>
    return ERR_RTE;
 800aecc:	f06f 0303 	mvn.w	r3, #3
 800aed0:	e1a3      	b.n	800b21a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d003      	beq.n	800aee0 <tcp_output+0xa4>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d111      	bne.n	800af04 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d002      	beq.n	800aeec <tcp_output+0xb0>
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	3304      	adds	r3, #4
 800aeea:	e000      	b.n	800aeee <tcp_output+0xb2>
 800aeec:	2300      	movs	r3, #0
 800aeee:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d102      	bne.n	800aefc <tcp_output+0xc0>
      return ERR_RTE;
 800aef6:	f06f 0303 	mvn.w	r3, #3
 800aefa:	e18e      	b.n	800b21a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	681a      	ldr	r2, [r3, #0]
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7f9 f903 	bl	8004116 <lwip_htonl>
 800af10:	4602      	mov	r2, r0
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af16:	1ad3      	subs	r3, r2, r3
 800af18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af1a:	8912      	ldrh	r2, [r2, #8]
 800af1c:	4413      	add	r3, r2
 800af1e:	69ba      	ldr	r2, [r7, #24]
 800af20:	429a      	cmp	r2, r3
 800af22:	d227      	bcs.n	800af74 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800af2a:	461a      	mov	r2, r3
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	4293      	cmp	r3, r2
 800af30:	d114      	bne.n	800af5c <tcp_output+0x120>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af36:	2b00      	cmp	r3, #0
 800af38:	d110      	bne.n	800af5c <tcp_output+0x120>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10b      	bne.n	800af5c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2201      	movs	r2, #1
 800af50:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	8b5b      	ldrh	r3, [r3, #26]
 800af60:	f003 0302 	and.w	r3, r3, #2
 800af64:	2b00      	cmp	r3, #0
 800af66:	f000 814d 	beq.w	800b204 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 fd6c 	bl	800ba48 <tcp_send_empty_ack>
 800af70:	4603      	mov	r3, r0
 800af72:	e152      	b.n	800b21a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af80:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800af82:	6a3b      	ldr	r3, [r7, #32]
 800af84:	2b00      	cmp	r3, #0
 800af86:	f000 811c 	beq.w	800b1c2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800af8a:	e002      	b.n	800af92 <tcp_output+0x156>
 800af8c:	6a3b      	ldr	r3, [r7, #32]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	623b      	str	r3, [r7, #32]
 800af92:	6a3b      	ldr	r3, [r7, #32]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1f8      	bne.n	800af8c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800af9a:	e112      	b.n	800b1c2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	899b      	ldrh	r3, [r3, #12]
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7f9 f8a1 	bl	80040ec <lwip_htons>
 800afaa:	4603      	mov	r3, r0
 800afac:	b2db      	uxtb	r3, r3
 800afae:	f003 0304 	and.w	r3, r3, #4
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d006      	beq.n	800afc4 <tcp_output+0x188>
 800afb6:	4b2f      	ldr	r3, [pc, #188]	; (800b074 <tcp_output+0x238>)
 800afb8:	f240 5236 	movw	r2, #1334	; 0x536
 800afbc:	4932      	ldr	r1, [pc, #200]	; (800b088 <tcp_output+0x24c>)
 800afbe:	482f      	ldr	r0, [pc, #188]	; (800b07c <tcp_output+0x240>)
 800afc0:	f003 fce0 	bl	800e984 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d01f      	beq.n	800b00c <tcp_output+0x1d0>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	8b5b      	ldrh	r3, [r3, #26]
 800afd0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d119      	bne.n	800b00c <tcp_output+0x1d0>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d00b      	beq.n	800aff8 <tcp_output+0x1bc>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d110      	bne.n	800b00c <tcp_output+0x1d0>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afee:	891a      	ldrh	r2, [r3, #8]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aff4:	429a      	cmp	r2, r3
 800aff6:	d209      	bcs.n	800b00c <tcp_output+0x1d0>
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800affe:	2b00      	cmp	r3, #0
 800b000:	d004      	beq.n	800b00c <tcp_output+0x1d0>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b008:	2b08      	cmp	r3, #8
 800b00a:	d901      	bls.n	800b010 <tcp_output+0x1d4>
 800b00c:	2301      	movs	r3, #1
 800b00e:	e000      	b.n	800b012 <tcp_output+0x1d6>
 800b010:	2300      	movs	r3, #0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d106      	bne.n	800b024 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	8b5b      	ldrh	r3, [r3, #26]
 800b01a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b01e:	2b00      	cmp	r3, #0
 800b020:	f000 80e4 	beq.w	800b1ec <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	7d1b      	ldrb	r3, [r3, #20]
 800b028:	2b02      	cmp	r3, #2
 800b02a:	d00d      	beq.n	800b048 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	899b      	ldrh	r3, [r3, #12]
 800b032:	b29c      	uxth	r4, r3
 800b034:	2010      	movs	r0, #16
 800b036:	f7f9 f859 	bl	80040ec <lwip_htons>
 800b03a:	4603      	mov	r3, r0
 800b03c:	461a      	mov	r2, r3
 800b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	4322      	orrs	r2, r4
 800b044:	b292      	uxth	r2, r2
 800b046:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b048:	697a      	ldr	r2, [r7, #20]
 800b04a:	6879      	ldr	r1, [r7, #4]
 800b04c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b04e:	f000 f909 	bl	800b264 <tcp_output_segment>
 800b052:	4603      	mov	r3, r0
 800b054:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d016      	beq.n	800b08c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	8b5b      	ldrh	r3, [r3, #26]
 800b062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b066:	b29a      	uxth	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	835a      	strh	r2, [r3, #26]
      return err;
 800b06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b070:	e0d3      	b.n	800b21a <tcp_output+0x3de>
 800b072:	bf00      	nop
 800b074:	08011580 	.word	0x08011580
 800b078:	08011ac4 	.word	0x08011ac4
 800b07c:	080115d4 	.word	0x080115d4
 800b080:	08011adc 	.word	0x08011adc
 800b084:	200082fc 	.word	0x200082fc
 800b088:	08011b04 	.word	0x08011b04
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	7d1b      	ldrb	r3, [r3, #20]
 800b098:	2b02      	cmp	r3, #2
 800b09a:	d006      	beq.n	800b0aa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	8b5b      	ldrh	r3, [r3, #26]
 800b0a0:	f023 0303 	bic.w	r3, r3, #3
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f7f9 f830 	bl	8004116 <lwip_htonl>
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ba:	891b      	ldrh	r3, [r3, #8]
 800b0bc:	461d      	mov	r5, r3
 800b0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0c0:	68db      	ldr	r3, [r3, #12]
 800b0c2:	899b      	ldrh	r3, [r3, #12]
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7f9 f810 	bl	80040ec <lwip_htons>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	b2db      	uxtb	r3, r3
 800b0d0:	f003 0303 	and.w	r3, r3, #3
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d001      	beq.n	800b0dc <tcp_output+0x2a0>
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e000      	b.n	800b0de <tcp_output+0x2a2>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	442b      	add	r3, r5
 800b0e0:	4423      	add	r3, r4
 800b0e2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	1ad3      	subs	r3, r2, r3
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	da02      	bge.n	800b0f6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	68ba      	ldr	r2, [r7, #8]
 800b0f4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	891b      	ldrh	r3, [r3, #8]
 800b0fa:	461c      	mov	r4, r3
 800b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fe:	68db      	ldr	r3, [r3, #12]
 800b100:	899b      	ldrh	r3, [r3, #12]
 800b102:	b29b      	uxth	r3, r3
 800b104:	4618      	mov	r0, r3
 800b106:	f7f8 fff1 	bl	80040ec <lwip_htons>
 800b10a:	4603      	mov	r3, r0
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	f003 0303 	and.w	r3, r3, #3
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <tcp_output+0x2de>
 800b116:	2301      	movs	r3, #1
 800b118:	e000      	b.n	800b11c <tcp_output+0x2e0>
 800b11a:	2300      	movs	r3, #0
 800b11c:	4423      	add	r3, r4
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d049      	beq.n	800b1b6 <tcp_output+0x37a>
      seg->next = NULL;
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	2200      	movs	r2, #0
 800b126:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d105      	bne.n	800b13c <tcp_output+0x300>
        pcb->unacked = seg;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b134:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b138:	623b      	str	r3, [r7, #32]
 800b13a:	e03f      	b.n	800b1bc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13e:	68db      	ldr	r3, [r3, #12]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	4618      	mov	r0, r3
 800b144:	f7f8 ffe7 	bl	8004116 <lwip_htonl>
 800b148:	4604      	mov	r4, r0
 800b14a:	6a3b      	ldr	r3, [r7, #32]
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	4618      	mov	r0, r3
 800b152:	f7f8 ffe0 	bl	8004116 <lwip_htonl>
 800b156:	4603      	mov	r3, r0
 800b158:	1ae3      	subs	r3, r4, r3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	da24      	bge.n	800b1a8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3370      	adds	r3, #112	; 0x70
 800b162:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b164:	e002      	b.n	800b16c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b166:	69fb      	ldr	r3, [r7, #28]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d011      	beq.n	800b198 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	4618      	mov	r0, r3
 800b17e:	f7f8 ffca 	bl	8004116 <lwip_htonl>
 800b182:	4604      	mov	r4, r0
 800b184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7f8 ffc3 	bl	8004116 <lwip_htonl>
 800b190:	4603      	mov	r3, r0
 800b192:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b194:	2b00      	cmp	r3, #0
 800b196:	dbe6      	blt.n	800b166 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b198:	69fb      	ldr	r3, [r7, #28]
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1a4:	601a      	str	r2, [r3, #0]
 800b1a6:	e009      	b.n	800b1bc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ac:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	623b      	str	r3, [r7, #32]
 800b1b4:	e002      	b.n	800b1bc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b1b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1b8:	f7fb ff59 	bl	800706e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1c0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d012      	beq.n	800b1ee <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7f8 ffa1 	bl	8004116 <lwip_htonl>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1de:	8912      	ldrh	r2, [r2, #8]
 800b1e0:	4413      	add	r3, r2
  while (seg != NULL &&
 800b1e2:	69ba      	ldr	r2, [r7, #24]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	f4bf aed9 	bcs.w	800af9c <tcp_output+0x160>
 800b1ea:	e000      	b.n	800b1ee <tcp_output+0x3b2>
      break;
 800b1ec:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d108      	bne.n	800b208 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b1fe:	e004      	b.n	800b20a <tcp_output+0x3ce>
    goto output_done;
 800b200:	bf00      	nop
 800b202:	e002      	b.n	800b20a <tcp_output+0x3ce>
    goto output_done;
 800b204:	bf00      	nop
 800b206:	e000      	b.n	800b20a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b208:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	8b5b      	ldrh	r3, [r3, #26]
 800b20e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b212:	b29a      	uxth	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3728      	adds	r7, #40	; 0x28
 800b21e:	46bd      	mov	sp, r7
 800b220:	bdb0      	pop	{r4, r5, r7, pc}
 800b222:	bf00      	nop

0800b224 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d106      	bne.n	800b240 <tcp_output_segment_busy+0x1c>
 800b232:	4b09      	ldr	r3, [pc, #36]	; (800b258 <tcp_output_segment_busy+0x34>)
 800b234:	f240 529a 	movw	r2, #1434	; 0x59a
 800b238:	4908      	ldr	r1, [pc, #32]	; (800b25c <tcp_output_segment_busy+0x38>)
 800b23a:	4809      	ldr	r0, [pc, #36]	; (800b260 <tcp_output_segment_busy+0x3c>)
 800b23c:	f003 fba2 	bl	800e984 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	7b9b      	ldrb	r3, [r3, #14]
 800b246:	2b01      	cmp	r3, #1
 800b248:	d001      	beq.n	800b24e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b24a:	2301      	movs	r3, #1
 800b24c:	e000      	b.n	800b250 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3708      	adds	r7, #8
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}
 800b258:	08011580 	.word	0x08011580
 800b25c:	08011b1c 	.word	0x08011b1c
 800b260:	080115d4 	.word	0x080115d4

0800b264 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b264:	b5b0      	push	{r4, r5, r7, lr}
 800b266:	b08c      	sub	sp, #48	; 0x30
 800b268:	af04      	add	r7, sp, #16
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d106      	bne.n	800b284 <tcp_output_segment+0x20>
 800b276:	4b63      	ldr	r3, [pc, #396]	; (800b404 <tcp_output_segment+0x1a0>)
 800b278:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b27c:	4962      	ldr	r1, [pc, #392]	; (800b408 <tcp_output_segment+0x1a4>)
 800b27e:	4863      	ldr	r0, [pc, #396]	; (800b40c <tcp_output_segment+0x1a8>)
 800b280:	f003 fb80 	bl	800e984 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d106      	bne.n	800b298 <tcp_output_segment+0x34>
 800b28a:	4b5e      	ldr	r3, [pc, #376]	; (800b404 <tcp_output_segment+0x1a0>)
 800b28c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b290:	495f      	ldr	r1, [pc, #380]	; (800b410 <tcp_output_segment+0x1ac>)
 800b292:	485e      	ldr	r0, [pc, #376]	; (800b40c <tcp_output_segment+0x1a8>)
 800b294:	f003 fb76 	bl	800e984 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d106      	bne.n	800b2ac <tcp_output_segment+0x48>
 800b29e:	4b59      	ldr	r3, [pc, #356]	; (800b404 <tcp_output_segment+0x1a0>)
 800b2a0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b2a4:	495b      	ldr	r1, [pc, #364]	; (800b414 <tcp_output_segment+0x1b0>)
 800b2a6:	4859      	ldr	r0, [pc, #356]	; (800b40c <tcp_output_segment+0x1a8>)
 800b2a8:	f003 fb6c 	bl	800e984 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b2ac:	68f8      	ldr	r0, [r7, #12]
 800b2ae:	f7ff ffb9 	bl	800b224 <tcp_output_segment_busy>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	e09f      	b.n	800b3fc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	68dc      	ldr	r4, [r3, #12]
 800b2c4:	4610      	mov	r0, r2
 800b2c6:	f7f8 ff26 	bl	8004116 <lwip_htonl>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	68dc      	ldr	r4, [r3, #12]
 800b2d6:	4610      	mov	r0, r2
 800b2d8:	f7f8 ff08 	bl	80040ec <lwip_htons>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b2e8:	441a      	add	r2, r3
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	3314      	adds	r3, #20
 800b2f4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	7a9b      	ldrb	r3, [r3, #10]
 800b2fa:	f003 0301 	and.w	r3, r3, #1
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d015      	beq.n	800b32e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	3304      	adds	r3, #4
 800b306:	461a      	mov	r2, r3
 800b308:	6879      	ldr	r1, [r7, #4]
 800b30a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b30e:	f7fc fa33 	bl	8007778 <tcp_eff_send_mss_netif>
 800b312:	4603      	mov	r3, r0
 800b314:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b316:	8b7b      	ldrh	r3, [r7, #26]
 800b318:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7f8 fefa 	bl	8004116 <lwip_htonl>
 800b322:	4602      	mov	r2, r0
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	3304      	adds	r3, #4
 800b32c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b334:	2b00      	cmp	r3, #0
 800b336:	da02      	bge.n	800b33e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	2200      	movs	r2, #0
 800b33c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b342:	2b00      	cmp	r3, #0
 800b344:	d10c      	bne.n	800b360 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b346:	4b34      	ldr	r3, [pc, #208]	; (800b418 <tcp_output_segment+0x1b4>)
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	4618      	mov	r0, r3
 800b356:	f7f8 fede 	bl	8004116 <lwip_htonl>
 800b35a:	4602      	mov	r2, r0
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	68da      	ldr	r2, [r3, #12]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	8959      	ldrh	r1, [r3, #10]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	8b3a      	ldrh	r2, [r7, #24]
 800b37a:	1a8a      	subs	r2, r1, r2
 800b37c:	b292      	uxth	r2, r2
 800b37e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	685b      	ldr	r3, [r3, #4]
 800b384:	8919      	ldrh	r1, [r3, #8]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	8b3a      	ldrh	r2, [r7, #24]
 800b38c:	1a8a      	subs	r2, r1, r2
 800b38e:	b292      	uxth	r2, r2
 800b390:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	68fa      	ldr	r2, [r7, #12]
 800b398:	68d2      	ldr	r2, [r2, #12]
 800b39a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	741a      	strb	r2, [r3, #16]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	f103 0214 	add.w	r2, r3, #20
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	7a9b      	ldrb	r3, [r3, #10]
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	f003 0304 	and.w	r3, r3, #4
 800b3ba:	4413      	add	r3, r2
 800b3bc:	69fa      	ldr	r2, [r7, #28]
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d006      	beq.n	800b3d0 <tcp_output_segment+0x16c>
 800b3c2:	4b10      	ldr	r3, [pc, #64]	; (800b404 <tcp_output_segment+0x1a0>)
 800b3c4:	f240 621c 	movw	r2, #1564	; 0x61c
 800b3c8:	4914      	ldr	r1, [pc, #80]	; (800b41c <tcp_output_segment+0x1b8>)
 800b3ca:	4810      	ldr	r0, [pc, #64]	; (800b40c <tcp_output_segment+0x1a8>)
 800b3cc:	f003 fada 	bl	800e984 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6858      	ldr	r0, [r3, #4]
 800b3d4:	68b9      	ldr	r1, [r7, #8]
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	1d1c      	adds	r4, r3, #4
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	7add      	ldrb	r5, [r3, #11]
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	7a9b      	ldrb	r3, [r3, #10]
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	9202      	str	r2, [sp, #8]
 800b3e6:	2206      	movs	r2, #6
 800b3e8:	9201      	str	r2, [sp, #4]
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	462b      	mov	r3, r5
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	f002 fa36 	bl	800d860 <ip4_output_if>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b3f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3720      	adds	r7, #32
 800b400:	46bd      	mov	sp, r7
 800b402:	bdb0      	pop	{r4, r5, r7, pc}
 800b404:	08011580 	.word	0x08011580
 800b408:	08011b44 	.word	0x08011b44
 800b40c:	080115d4 	.word	0x080115d4
 800b410:	08011b64 	.word	0x08011b64
 800b414:	08011b84 	.word	0x08011b84
 800b418:	200082b0 	.word	0x200082b0
 800b41c:	08011ba8 	.word	0x08011ba8

0800b420 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b420:	b5b0      	push	{r4, r5, r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d106      	bne.n	800b43c <tcp_rexmit_rto_prepare+0x1c>
 800b42e:	4b31      	ldr	r3, [pc, #196]	; (800b4f4 <tcp_rexmit_rto_prepare+0xd4>)
 800b430:	f240 6263 	movw	r2, #1635	; 0x663
 800b434:	4930      	ldr	r1, [pc, #192]	; (800b4f8 <tcp_rexmit_rto_prepare+0xd8>)
 800b436:	4831      	ldr	r0, [pc, #196]	; (800b4fc <tcp_rexmit_rto_prepare+0xdc>)
 800b438:	f003 faa4 	bl	800e984 <iprintf>

  if (pcb->unacked == NULL) {
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b440:	2b00      	cmp	r3, #0
 800b442:	d102      	bne.n	800b44a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b444:	f06f 0305 	mvn.w	r3, #5
 800b448:	e050      	b.n	800b4ec <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b44e:	60fb      	str	r3, [r7, #12]
 800b450:	e00b      	b.n	800b46a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f7ff fee6 	bl	800b224 <tcp_output_segment_busy>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d002      	beq.n	800b464 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b45e:	f06f 0305 	mvn.w	r3, #5
 800b462:	e043      	b.n	800b4ec <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	60fb      	str	r3, [r7, #12]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1ef      	bne.n	800b452 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	f7ff fed6 	bl	800b224 <tcp_output_segment_busy>
 800b478:	4603      	mov	r3, r0
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d002      	beq.n	800b484 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b47e:	f06f 0305 	mvn.w	r3, #5
 800b482:	e033      	b.n	800b4ec <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	8b5b      	ldrh	r3, [r3, #26]
 800b49e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7f8 fe31 	bl	8004116 <lwip_htonl>
 800b4b4:	4604      	mov	r4, r0
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	891b      	ldrh	r3, [r3, #8]
 800b4ba:	461d      	mov	r5, r3
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	899b      	ldrh	r3, [r3, #12]
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f7f8 fe11 	bl	80040ec <lwip_htons>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	b2db      	uxtb	r3, r3
 800b4ce:	f003 0303 	and.w	r3, r3, #3
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d001      	beq.n	800b4da <tcp_rexmit_rto_prepare+0xba>
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e000      	b.n	800b4dc <tcp_rexmit_rto_prepare+0xbc>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	442b      	add	r3, r5
 800b4de:	18e2      	adds	r2, r4, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b4ea:	2300      	movs	r3, #0
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bdb0      	pop	{r4, r5, r7, pc}
 800b4f4:	08011580 	.word	0x08011580
 800b4f8:	08011bbc 	.word	0x08011bbc
 800b4fc:	080115d4 	.word	0x080115d4

0800b500 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <tcp_rexmit_rto_commit+0x1c>
 800b50e:	4b0d      	ldr	r3, [pc, #52]	; (800b544 <tcp_rexmit_rto_commit+0x44>)
 800b510:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b514:	490c      	ldr	r1, [pc, #48]	; (800b548 <tcp_rexmit_rto_commit+0x48>)
 800b516:	480d      	ldr	r0, [pc, #52]	; (800b54c <tcp_rexmit_rto_commit+0x4c>)
 800b518:	f003 fa34 	bl	800e984 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b522:	2bff      	cmp	r3, #255	; 0xff
 800b524:	d007      	beq.n	800b536 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b52c:	3301      	adds	r3, #1
 800b52e:	b2da      	uxtb	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f7ff fc80 	bl	800ae3c <tcp_output>
}
 800b53c:	bf00      	nop
 800b53e:	3708      	adds	r7, #8
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	08011580 	.word	0x08011580
 800b548:	08011be0 	.word	0x08011be0
 800b54c:	080115d4 	.word	0x080115d4

0800b550 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <tcp_rexmit_rto+0x1c>
 800b55e:	4b0a      	ldr	r3, [pc, #40]	; (800b588 <tcp_rexmit_rto+0x38>)
 800b560:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b564:	4909      	ldr	r1, [pc, #36]	; (800b58c <tcp_rexmit_rto+0x3c>)
 800b566:	480a      	ldr	r0, [pc, #40]	; (800b590 <tcp_rexmit_rto+0x40>)
 800b568:	f003 fa0c 	bl	800e984 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b56c:	6878      	ldr	r0, [r7, #4]
 800b56e:	f7ff ff57 	bl	800b420 <tcp_rexmit_rto_prepare>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d102      	bne.n	800b57e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f7ff ffc1 	bl	800b500 <tcp_rexmit_rto_commit>
  }
}
 800b57e:	bf00      	nop
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	08011580 	.word	0x08011580
 800b58c:	08011c04 	.word	0x08011c04
 800b590:	080115d4 	.word	0x080115d4

0800b594 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b594:	b590      	push	{r4, r7, lr}
 800b596:	b085      	sub	sp, #20
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d106      	bne.n	800b5b0 <tcp_rexmit+0x1c>
 800b5a2:	4b2f      	ldr	r3, [pc, #188]	; (800b660 <tcp_rexmit+0xcc>)
 800b5a4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b5a8:	492e      	ldr	r1, [pc, #184]	; (800b664 <tcp_rexmit+0xd0>)
 800b5aa:	482f      	ldr	r0, [pc, #188]	; (800b668 <tcp_rexmit+0xd4>)
 800b5ac:	f003 f9ea 	bl	800e984 <iprintf>

  if (pcb->unacked == NULL) {
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d102      	bne.n	800b5be <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b5b8:	f06f 0305 	mvn.w	r3, #5
 800b5bc:	e04c      	b.n	800b658 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5c2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b5c4:	68b8      	ldr	r0, [r7, #8]
 800b5c6:	f7ff fe2d 	bl	800b224 <tcp_output_segment_busy>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b5d0:	f06f 0305 	mvn.w	r3, #5
 800b5d4:	e040      	b.n	800b658 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	336c      	adds	r3, #108	; 0x6c
 800b5e2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b5e4:	e002      	b.n	800b5ec <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d011      	beq.n	800b618 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f7f8 fd8a 	bl	8004116 <lwip_htonl>
 800b602:	4604      	mov	r4, r0
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7f8 fd83 	bl	8004116 <lwip_htonl>
 800b610:	4603      	mov	r3, r0
 800b612:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b614:	2b00      	cmp	r3, #0
 800b616:	dbe6      	blt.n	800b5e6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	68ba      	ldr	r2, [r7, #8]
 800b624:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d103      	bne.n	800b636 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b63c:	2bff      	cmp	r3, #255	; 0xff
 800b63e:	d007      	beq.n	800b650 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b646:	3301      	adds	r3, #1
 800b648:	b2da      	uxtb	r2, r3
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd90      	pop	{r4, r7, pc}
 800b660:	08011580 	.word	0x08011580
 800b664:	08011c20 	.word	0x08011c20
 800b668:	080115d4 	.word	0x080115d4

0800b66c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d106      	bne.n	800b688 <tcp_rexmit_fast+0x1c>
 800b67a:	4b2a      	ldr	r3, [pc, #168]	; (800b724 <tcp_rexmit_fast+0xb8>)
 800b67c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b680:	4929      	ldr	r1, [pc, #164]	; (800b728 <tcp_rexmit_fast+0xbc>)
 800b682:	482a      	ldr	r0, [pc, #168]	; (800b72c <tcp_rexmit_fast+0xc0>)
 800b684:	f003 f97e 	bl	800e984 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d044      	beq.n	800b71a <tcp_rexmit_fast+0xae>
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	8b5b      	ldrh	r3, [r3, #26]
 800b694:	f003 0304 	and.w	r3, r3, #4
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d13e      	bne.n	800b71a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7ff ff79 	bl	800b594 <tcp_rexmit>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d138      	bne.n	800b71a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	bf28      	it	cs
 800b6b8:	4613      	movcs	r3, r2
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	0fda      	lsrs	r2, r3, #31
 800b6be:	4413      	add	r3, r2
 800b6c0:	105b      	asrs	r3, r3, #1
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6d6:	005b      	lsls	r3, r3, #1
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d206      	bcs.n	800b6ea <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6e0:	005b      	lsls	r3, r3, #1
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	0049      	lsls	r1, r1, #1
 800b6f8:	440b      	add	r3, r1
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	4413      	add	r3, r2
 800b6fe:	b29a      	uxth	r2, r3
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	8b5b      	ldrh	r3, [r3, #26]
 800b70a:	f043 0304 	orr.w	r3, r3, #4
 800b70e:	b29a      	uxth	r2, r3
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b71a:	bf00      	nop
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	08011580 	.word	0x08011580
 800b728:	08011c38 	.word	0x08011c38
 800b72c:	080115d4 	.word	0x080115d4

0800b730 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	607b      	str	r3, [r7, #4]
 800b73a:	460b      	mov	r3, r1
 800b73c:	817b      	strh	r3, [r7, #10]
 800b73e:	4613      	mov	r3, r2
 800b740:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b742:	897a      	ldrh	r2, [r7, #10]
 800b744:	893b      	ldrh	r3, [r7, #8]
 800b746:	4413      	add	r3, r2
 800b748:	b29b      	uxth	r3, r3
 800b74a:	3314      	adds	r3, #20
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b752:	4619      	mov	r1, r3
 800b754:	2022      	movs	r0, #34	; 0x22
 800b756:	f7f9 fd43 	bl	80051e0 <pbuf_alloc>
 800b75a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d04d      	beq.n	800b7fe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b762:	897b      	ldrh	r3, [r7, #10]
 800b764:	3313      	adds	r3, #19
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	8952      	ldrh	r2, [r2, #10]
 800b76a:	4293      	cmp	r3, r2
 800b76c:	db06      	blt.n	800b77c <tcp_output_alloc_header_common+0x4c>
 800b76e:	4b26      	ldr	r3, [pc, #152]	; (800b808 <tcp_output_alloc_header_common+0xd8>)
 800b770:	f240 7223 	movw	r2, #1827	; 0x723
 800b774:	4925      	ldr	r1, [pc, #148]	; (800b80c <tcp_output_alloc_header_common+0xdc>)
 800b776:	4826      	ldr	r0, [pc, #152]	; (800b810 <tcp_output_alloc_header_common+0xe0>)
 800b778:	f003 f904 	bl	800e984 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b782:	8c3b      	ldrh	r3, [r7, #32]
 800b784:	4618      	mov	r0, r3
 800b786:	f7f8 fcb1 	bl	80040ec <lwip_htons>
 800b78a:	4603      	mov	r3, r0
 800b78c:	461a      	mov	r2, r3
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b794:	4618      	mov	r0, r3
 800b796:	f7f8 fca9 	bl	80040ec <lwip_htons>
 800b79a:	4603      	mov	r3, r0
 800b79c:	461a      	mov	r2, r3
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f7f8 fcb4 	bl	8004116 <lwip_htonl>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b7b4:	897b      	ldrh	r3, [r7, #10]
 800b7b6:	089b      	lsrs	r3, r3, #2
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	3305      	adds	r3, #5
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	031b      	lsls	r3, r3, #12
 800b7c0:	b29a      	uxth	r2, r3
 800b7c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7f8 fc8d 	bl	80040ec <lwip_htons>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b7da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7f8 fc85 	bl	80040ec <lwip_htons>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	741a      	strb	r2, [r3, #16]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	749a      	strb	r2, [r3, #18]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b7fe:	697b      	ldr	r3, [r7, #20]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3718      	adds	r7, #24
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	08011580 	.word	0x08011580
 800b80c:	08011c58 	.word	0x08011c58
 800b810:	080115d4 	.word	0x080115d4

0800b814 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b814:	b5b0      	push	{r4, r5, r7, lr}
 800b816:	b08a      	sub	sp, #40	; 0x28
 800b818:	af04      	add	r7, sp, #16
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	607b      	str	r3, [r7, #4]
 800b81e:	460b      	mov	r3, r1
 800b820:	817b      	strh	r3, [r7, #10]
 800b822:	4613      	mov	r3, r2
 800b824:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d106      	bne.n	800b83a <tcp_output_alloc_header+0x26>
 800b82c:	4b15      	ldr	r3, [pc, #84]	; (800b884 <tcp_output_alloc_header+0x70>)
 800b82e:	f240 7242 	movw	r2, #1858	; 0x742
 800b832:	4915      	ldr	r1, [pc, #84]	; (800b888 <tcp_output_alloc_header+0x74>)
 800b834:	4815      	ldr	r0, [pc, #84]	; (800b88c <tcp_output_alloc_header+0x78>)
 800b836:	f003 f8a5 	bl	800e984 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	8adb      	ldrh	r3, [r3, #22]
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	8b12      	ldrh	r2, [r2, #24]
 800b846:	68f9      	ldr	r1, [r7, #12]
 800b848:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b84a:	893d      	ldrh	r5, [r7, #8]
 800b84c:	897c      	ldrh	r4, [r7, #10]
 800b84e:	9103      	str	r1, [sp, #12]
 800b850:	2110      	movs	r1, #16
 800b852:	9102      	str	r1, [sp, #8]
 800b854:	9201      	str	r2, [sp, #4]
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	462a      	mov	r2, r5
 800b85c:	4621      	mov	r1, r4
 800b85e:	f7ff ff67 	bl	800b730 <tcp_output_alloc_header_common>
 800b862:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d006      	beq.n	800b878 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b872:	441a      	add	r2, r3
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b878:	697b      	ldr	r3, [r7, #20]
}
 800b87a:	4618      	mov	r0, r3
 800b87c:	3718      	adds	r7, #24
 800b87e:	46bd      	mov	sp, r7
 800b880:	bdb0      	pop	{r4, r5, r7, pc}
 800b882:	bf00      	nop
 800b884:	08011580 	.word	0x08011580
 800b888:	08011c88 	.word	0x08011c88
 800b88c:	080115d4 	.word	0x080115d4

0800b890 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b088      	sub	sp, #32
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	4611      	mov	r1, r2
 800b89c:	461a      	mov	r2, r3
 800b89e:	460b      	mov	r3, r1
 800b8a0:	71fb      	strb	r3, [r7, #7]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d106      	bne.n	800b8be <tcp_output_fill_options+0x2e>
 800b8b0:	4b13      	ldr	r3, [pc, #76]	; (800b900 <tcp_output_fill_options+0x70>)
 800b8b2:	f240 7256 	movw	r2, #1878	; 0x756
 800b8b6:	4913      	ldr	r1, [pc, #76]	; (800b904 <tcp_output_fill_options+0x74>)
 800b8b8:	4813      	ldr	r0, [pc, #76]	; (800b908 <tcp_output_fill_options+0x78>)
 800b8ba:	f003 f863 	bl	800e984 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	685b      	ldr	r3, [r3, #4]
 800b8c2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	3314      	adds	r3, #20
 800b8c8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	f103 0214 	add.w	r2, r3, #20
 800b8d0:	8bfb      	ldrh	r3, [r7, #30]
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	79fb      	ldrb	r3, [r7, #7]
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	f003 0304 	and.w	r3, r3, #4
 800b8de:	440b      	add	r3, r1
 800b8e0:	4413      	add	r3, r2
 800b8e2:	697a      	ldr	r2, [r7, #20]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d006      	beq.n	800b8f6 <tcp_output_fill_options+0x66>
 800b8e8:	4b05      	ldr	r3, [pc, #20]	; (800b900 <tcp_output_fill_options+0x70>)
 800b8ea:	f240 7275 	movw	r2, #1909	; 0x775
 800b8ee:	4907      	ldr	r1, [pc, #28]	; (800b90c <tcp_output_fill_options+0x7c>)
 800b8f0:	4805      	ldr	r0, [pc, #20]	; (800b908 <tcp_output_fill_options+0x78>)
 800b8f2:	f003 f847 	bl	800e984 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b8f6:	bf00      	nop
 800b8f8:	3720      	adds	r7, #32
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	08011580 	.word	0x08011580
 800b904:	08011cb0 	.word	0x08011cb0
 800b908:	080115d4 	.word	0x080115d4
 800b90c:	08011ba8 	.word	0x08011ba8

0800b910 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b08a      	sub	sp, #40	; 0x28
 800b914:	af04      	add	r7, sp, #16
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
 800b91c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d106      	bne.n	800b932 <tcp_output_control_segment+0x22>
 800b924:	4b1c      	ldr	r3, [pc, #112]	; (800b998 <tcp_output_control_segment+0x88>)
 800b926:	f240 7287 	movw	r2, #1927	; 0x787
 800b92a:	491c      	ldr	r1, [pc, #112]	; (800b99c <tcp_output_control_segment+0x8c>)
 800b92c:	481c      	ldr	r0, [pc, #112]	; (800b9a0 <tcp_output_control_segment+0x90>)
 800b92e:	f003 f829 	bl	800e984 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f7fe fae8 	bl	8009f0c <tcp_route>
 800b93c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d102      	bne.n	800b94a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b944:	23fc      	movs	r3, #252	; 0xfc
 800b946:	75fb      	strb	r3, [r7, #23]
 800b948:	e01c      	b.n	800b984 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d006      	beq.n	800b95e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	7adb      	ldrb	r3, [r3, #11]
 800b954:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	7a9b      	ldrb	r3, [r3, #10]
 800b95a:	757b      	strb	r3, [r7, #21]
 800b95c:	e003      	b.n	800b966 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b95e:	23ff      	movs	r3, #255	; 0xff
 800b960:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b962:	2300      	movs	r3, #0
 800b964:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b966:	7dba      	ldrb	r2, [r7, #22]
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	9302      	str	r3, [sp, #8]
 800b96c:	2306      	movs	r3, #6
 800b96e:	9301      	str	r3, [sp, #4]
 800b970:	7d7b      	ldrb	r3, [r7, #21]
 800b972:	9300      	str	r3, [sp, #0]
 800b974:	4613      	mov	r3, r2
 800b976:	683a      	ldr	r2, [r7, #0]
 800b978:	6879      	ldr	r1, [r7, #4]
 800b97a:	68b8      	ldr	r0, [r7, #8]
 800b97c:	f001 ff70 	bl	800d860 <ip4_output_if>
 800b980:	4603      	mov	r3, r0
 800b982:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b984:	68b8      	ldr	r0, [r7, #8]
 800b986:	f7f9 ff0f 	bl	80057a8 <pbuf_free>
  return err;
 800b98a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3718      	adds	r7, #24
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	08011580 	.word	0x08011580
 800b99c:	08011cd8 	.word	0x08011cd8
 800b9a0:	080115d4 	.word	0x080115d4

0800b9a4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b9a4:	b590      	push	{r4, r7, lr}
 800b9a6:	b08b      	sub	sp, #44	; 0x2c
 800b9a8:	af04      	add	r7, sp, #16
 800b9aa:	60f8      	str	r0, [r7, #12]
 800b9ac:	60b9      	str	r1, [r7, #8]
 800b9ae:	607a      	str	r2, [r7, #4]
 800b9b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d106      	bne.n	800b9c6 <tcp_rst+0x22>
 800b9b8:	4b1f      	ldr	r3, [pc, #124]	; (800ba38 <tcp_rst+0x94>)
 800b9ba:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b9be:	491f      	ldr	r1, [pc, #124]	; (800ba3c <tcp_rst+0x98>)
 800b9c0:	481f      	ldr	r0, [pc, #124]	; (800ba40 <tcp_rst+0x9c>)
 800b9c2:	f002 ffdf 	bl	800e984 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d106      	bne.n	800b9da <tcp_rst+0x36>
 800b9cc:	4b1a      	ldr	r3, [pc, #104]	; (800ba38 <tcp_rst+0x94>)
 800b9ce:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b9d2:	491c      	ldr	r1, [pc, #112]	; (800ba44 <tcp_rst+0xa0>)
 800b9d4:	481a      	ldr	r0, [pc, #104]	; (800ba40 <tcp_rst+0x9c>)
 800b9d6:	f002 ffd5 	bl	800e984 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b9da:	2300      	movs	r3, #0
 800b9dc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b9de:	f246 0308 	movw	r3, #24584	; 0x6008
 800b9e2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b9e4:	7dfb      	ldrb	r3, [r7, #23]
 800b9e6:	b29c      	uxth	r4, r3
 800b9e8:	68b8      	ldr	r0, [r7, #8]
 800b9ea:	f7f8 fb94 	bl	8004116 <lwip_htonl>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	8abb      	ldrh	r3, [r7, #20]
 800b9f2:	9303      	str	r3, [sp, #12]
 800b9f4:	2314      	movs	r3, #20
 800b9f6:	9302      	str	r3, [sp, #8]
 800b9f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b9fa:	9301      	str	r3, [sp, #4]
 800b9fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	4613      	mov	r3, r2
 800ba02:	2200      	movs	r2, #0
 800ba04:	4621      	mov	r1, r4
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7ff fe92 	bl	800b730 <tcp_output_alloc_header_common>
 800ba0c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d00c      	beq.n	800ba2e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ba14:	7dfb      	ldrb	r3, [r7, #23]
 800ba16:	2200      	movs	r2, #0
 800ba18:	6939      	ldr	r1, [r7, #16]
 800ba1a:	68f8      	ldr	r0, [r7, #12]
 800ba1c:	f7ff ff38 	bl	800b890 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ba20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	6939      	ldr	r1, [r7, #16]
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f7ff ff72 	bl	800b910 <tcp_output_control_segment>
 800ba2c:	e000      	b.n	800ba30 <tcp_rst+0x8c>
    return;
 800ba2e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ba30:	371c      	adds	r7, #28
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd90      	pop	{r4, r7, pc}
 800ba36:	bf00      	nop
 800ba38:	08011580 	.word	0x08011580
 800ba3c:	08011d04 	.word	0x08011d04
 800ba40:	080115d4 	.word	0x080115d4
 800ba44:	08011d20 	.word	0x08011d20

0800ba48 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ba48:	b590      	push	{r4, r7, lr}
 800ba4a:	b087      	sub	sp, #28
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ba50:	2300      	movs	r3, #0
 800ba52:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ba54:	2300      	movs	r3, #0
 800ba56:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d106      	bne.n	800ba6c <tcp_send_empty_ack+0x24>
 800ba5e:	4b28      	ldr	r3, [pc, #160]	; (800bb00 <tcp_send_empty_ack+0xb8>)
 800ba60:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800ba64:	4927      	ldr	r1, [pc, #156]	; (800bb04 <tcp_send_empty_ack+0xbc>)
 800ba66:	4828      	ldr	r0, [pc, #160]	; (800bb08 <tcp_send_empty_ack+0xc0>)
 800ba68:	f002 ff8c 	bl	800e984 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ba6c:	7dfb      	ldrb	r3, [r7, #23]
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	f003 0304 	and.w	r3, r3, #4
 800ba76:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ba78:	7d7b      	ldrb	r3, [r7, #21]
 800ba7a:	b29c      	uxth	r4, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba80:	4618      	mov	r0, r3
 800ba82:	f7f8 fb48 	bl	8004116 <lwip_htonl>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2200      	movs	r2, #0
 800ba8a:	4621      	mov	r1, r4
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f7ff fec1 	bl	800b814 <tcp_output_alloc_header>
 800ba92:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d109      	bne.n	800baae <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	8b5b      	ldrh	r3, [r3, #26]
 800ba9e:	f043 0303 	orr.w	r3, r3, #3
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800baa8:	f06f 0301 	mvn.w	r3, #1
 800baac:	e023      	b.n	800baf6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800baae:	7dbb      	ldrb	r3, [r7, #22]
 800bab0:	7dfa      	ldrb	r2, [r7, #23]
 800bab2:	6939      	ldr	r1, [r7, #16]
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff feeb 	bl	800b890 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	3304      	adds	r3, #4
 800bac0:	6939      	ldr	r1, [r7, #16]
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7ff ff24 	bl	800b910 <tcp_output_control_segment>
 800bac8:	4603      	mov	r3, r0
 800baca:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bacc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d007      	beq.n	800bae4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	8b5b      	ldrh	r3, [r3, #26]
 800bad8:	f043 0303 	orr.w	r3, r3, #3
 800badc:	b29a      	uxth	r2, r3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	835a      	strh	r2, [r3, #26]
 800bae2:	e006      	b.n	800baf2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	8b5b      	ldrh	r3, [r3, #26]
 800bae8:	f023 0303 	bic.w	r3, r3, #3
 800baec:	b29a      	uxth	r2, r3
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800baf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	371c      	adds	r7, #28
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd90      	pop	{r4, r7, pc}
 800bafe:	bf00      	nop
 800bb00:	08011580 	.word	0x08011580
 800bb04:	08011d3c 	.word	0x08011d3c
 800bb08:	080115d4 	.word	0x080115d4

0800bb0c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bb0c:	b590      	push	{r4, r7, lr}
 800bb0e:	b087      	sub	sp, #28
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bb14:	2300      	movs	r3, #0
 800bb16:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d106      	bne.n	800bb2c <tcp_keepalive+0x20>
 800bb1e:	4b18      	ldr	r3, [pc, #96]	; (800bb80 <tcp_keepalive+0x74>)
 800bb20:	f640 0224 	movw	r2, #2084	; 0x824
 800bb24:	4917      	ldr	r1, [pc, #92]	; (800bb84 <tcp_keepalive+0x78>)
 800bb26:	4818      	ldr	r0, [pc, #96]	; (800bb88 <tcp_keepalive+0x7c>)
 800bb28:	f002 ff2c 	bl	800e984 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bb2c:	7dfb      	ldrb	r3, [r7, #23]
 800bb2e:	b29c      	uxth	r4, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb34:	3b01      	subs	r3, #1
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7f8 faed 	bl	8004116 <lwip_htonl>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	2200      	movs	r2, #0
 800bb40:	4621      	mov	r1, r4
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f7ff fe66 	bl	800b814 <tcp_output_alloc_header>
 800bb48:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d102      	bne.n	800bb56 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800bb50:	f04f 33ff 	mov.w	r3, #4294967295
 800bb54:	e010      	b.n	800bb78 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	6939      	ldr	r1, [r7, #16]
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff fe97 	bl	800b890 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	3304      	adds	r3, #4
 800bb68:	6939      	ldr	r1, [r7, #16]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7ff fed0 	bl	800b910 <tcp_output_control_segment>
 800bb70:	4603      	mov	r3, r0
 800bb72:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bb74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	371c      	adds	r7, #28
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd90      	pop	{r4, r7, pc}
 800bb80:	08011580 	.word	0x08011580
 800bb84:	08011d5c 	.word	0x08011d5c
 800bb88:	080115d4 	.word	0x080115d4

0800bb8c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bb8c:	b590      	push	{r4, r7, lr}
 800bb8e:	b08b      	sub	sp, #44	; 0x2c
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800bb94:	2300      	movs	r3, #0
 800bb96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d106      	bne.n	800bbae <tcp_zero_window_probe+0x22>
 800bba0:	4b4c      	ldr	r3, [pc, #304]	; (800bcd4 <tcp_zero_window_probe+0x148>)
 800bba2:	f640 024f 	movw	r2, #2127	; 0x84f
 800bba6:	494c      	ldr	r1, [pc, #304]	; (800bcd8 <tcp_zero_window_probe+0x14c>)
 800bba8:	484c      	ldr	r0, [pc, #304]	; (800bcdc <tcp_zero_window_probe+0x150>)
 800bbaa:	f002 feeb 	bl	800e984 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbb2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800bbb4:	6a3b      	ldr	r3, [r7, #32]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	e086      	b.n	800bccc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bbc4:	2bff      	cmp	r3, #255	; 0xff
 800bbc6:	d007      	beq.n	800bbd8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800bbce:	3301      	adds	r3, #1
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bbd8:	6a3b      	ldr	r3, [r7, #32]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	899b      	ldrh	r3, [r3, #12]
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7f8 fa83 	bl	80040ec <lwip_htons>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	f003 0301 	and.w	r3, r3, #1
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d005      	beq.n	800bbfe <tcp_zero_window_probe+0x72>
 800bbf2:	6a3b      	ldr	r3, [r7, #32]
 800bbf4:	891b      	ldrh	r3, [r3, #8]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d101      	bne.n	800bbfe <tcp_zero_window_probe+0x72>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e000      	b.n	800bc00 <tcp_zero_window_probe+0x74>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800bc02:	7ffb      	ldrb	r3, [r7, #31]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	bf0c      	ite	eq
 800bc08:	2301      	moveq	r3, #1
 800bc0a:	2300      	movne	r3, #0
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bc10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc14:	b299      	uxth	r1, r3
 800bc16:	6a3b      	ldr	r3, [r7, #32]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	8bba      	ldrh	r2, [r7, #28]
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f7ff fdf8 	bl	800b814 <tcp_output_alloc_header>
 800bc24:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d102      	bne.n	800bc32 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800bc2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc30:	e04c      	b.n	800bccc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bc32:	69bb      	ldr	r3, [r7, #24]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800bc38:	7ffb      	ldrb	r3, [r7, #31]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d011      	beq.n	800bc62 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	899b      	ldrh	r3, [r3, #12]
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	b21b      	sxth	r3, r3
 800bc46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bc4a:	b21c      	sxth	r4, r3
 800bc4c:	2011      	movs	r0, #17
 800bc4e:	f7f8 fa4d 	bl	80040ec <lwip_htons>
 800bc52:	4603      	mov	r3, r0
 800bc54:	b21b      	sxth	r3, r3
 800bc56:	4323      	orrs	r3, r4
 800bc58:	b21b      	sxth	r3, r3
 800bc5a:	b29a      	uxth	r2, r3
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	819a      	strh	r2, [r3, #12]
 800bc60:	e010      	b.n	800bc84 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800bc62:	69bb      	ldr	r3, [r7, #24]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	3314      	adds	r3, #20
 800bc68:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bc6a:	6a3b      	ldr	r3, [r7, #32]
 800bc6c:	6858      	ldr	r0, [r3, #4]
 800bc6e:	6a3b      	ldr	r3, [r7, #32]
 800bc70:	685b      	ldr	r3, [r3, #4]
 800bc72:	891a      	ldrh	r2, [r3, #8]
 800bc74:	6a3b      	ldr	r3, [r7, #32]
 800bc76:	891b      	ldrh	r3, [r3, #8]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	2201      	movs	r2, #1
 800bc7e:	6939      	ldr	r1, [r7, #16]
 800bc80:	f7f9 ff7c 	bl	8005b7c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bc84:	6a3b      	ldr	r3, [r7, #32]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7f8 fa43 	bl	8004116 <lwip_htonl>
 800bc90:	4603      	mov	r3, r0
 800bc92:	3301      	adds	r3, #1
 800bc94:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	da02      	bge.n	800bca8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bcac:	2200      	movs	r2, #0
 800bcae:	69b9      	ldr	r1, [r7, #24]
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff fded 	bl	800b890 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	3304      	adds	r3, #4
 800bcbc:	69b9      	ldr	r1, [r7, #24]
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f7ff fe26 	bl	800b910 <tcp_output_control_segment>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bcc8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	372c      	adds	r7, #44	; 0x2c
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd90      	pop	{r4, r7, pc}
 800bcd4:	08011580 	.word	0x08011580
 800bcd8:	08011d78 	.word	0x08011d78
 800bcdc:	080115d4 	.word	0x080115d4

0800bce0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bce8:	f7fa f8c8 	bl	8005e7c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bcec:	4b0a      	ldr	r3, [pc, #40]	; (800bd18 <tcpip_tcp_timer+0x38>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d103      	bne.n	800bcfc <tcpip_tcp_timer+0x1c>
 800bcf4:	4b09      	ldr	r3, [pc, #36]	; (800bd1c <tcpip_tcp_timer+0x3c>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d005      	beq.n	800bd08 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	4908      	ldr	r1, [pc, #32]	; (800bd20 <tcpip_tcp_timer+0x40>)
 800bd00:	20fa      	movs	r0, #250	; 0xfa
 800bd02:	f000 f8f3 	bl	800beec <sys_timeout>
 800bd06:	e003      	b.n	800bd10 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bd08:	4b06      	ldr	r3, [pc, #24]	; (800bd24 <tcpip_tcp_timer+0x44>)
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	601a      	str	r2, [r3, #0]
  }
}
 800bd0e:	bf00      	nop
 800bd10:	bf00      	nop
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}
 800bd18:	200082bc 	.word	0x200082bc
 800bd1c:	200082c0 	.word	0x200082c0
 800bd20:	0800bce1 	.word	0x0800bce1
 800bd24:	20008308 	.word	0x20008308

0800bd28 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bd2c:	4b0a      	ldr	r3, [pc, #40]	; (800bd58 <tcp_timer_needed+0x30>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10f      	bne.n	800bd54 <tcp_timer_needed+0x2c>
 800bd34:	4b09      	ldr	r3, [pc, #36]	; (800bd5c <tcp_timer_needed+0x34>)
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d103      	bne.n	800bd44 <tcp_timer_needed+0x1c>
 800bd3c:	4b08      	ldr	r3, [pc, #32]	; (800bd60 <tcp_timer_needed+0x38>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d007      	beq.n	800bd54 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bd44:	4b04      	ldr	r3, [pc, #16]	; (800bd58 <tcp_timer_needed+0x30>)
 800bd46:	2201      	movs	r2, #1
 800bd48:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	4905      	ldr	r1, [pc, #20]	; (800bd64 <tcp_timer_needed+0x3c>)
 800bd4e:	20fa      	movs	r0, #250	; 0xfa
 800bd50:	f000 f8cc 	bl	800beec <sys_timeout>
  }
}
 800bd54:	bf00      	nop
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	20008308 	.word	0x20008308
 800bd5c:	200082bc 	.word	0x200082bc
 800bd60:	200082c0 	.word	0x200082c0
 800bd64:	0800bce1 	.word	0x0800bce1

0800bd68 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b086      	sub	sp, #24
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bd74:	2006      	movs	r0, #6
 800bd76:	f7f8 fe31 	bl	80049dc <memp_malloc>
 800bd7a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bd7c:	693b      	ldr	r3, [r7, #16]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d109      	bne.n	800bd96 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d151      	bne.n	800be2c <sys_timeout_abs+0xc4>
 800bd88:	4b2a      	ldr	r3, [pc, #168]	; (800be34 <sys_timeout_abs+0xcc>)
 800bd8a:	22be      	movs	r2, #190	; 0xbe
 800bd8c:	492a      	ldr	r1, [pc, #168]	; (800be38 <sys_timeout_abs+0xd0>)
 800bd8e:	482b      	ldr	r0, [pc, #172]	; (800be3c <sys_timeout_abs+0xd4>)
 800bd90:	f002 fdf8 	bl	800e984 <iprintf>
    return;
 800bd94:	e04a      	b.n	800be2c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	68ba      	ldr	r2, [r7, #8]
 800bda0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bdae:	4b24      	ldr	r3, [pc, #144]	; (800be40 <sys_timeout_abs+0xd8>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d103      	bne.n	800bdbe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bdb6:	4a22      	ldr	r2, [pc, #136]	; (800be40 <sys_timeout_abs+0xd8>)
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	6013      	str	r3, [r2, #0]
    return;
 800bdbc:	e037      	b.n	800be2e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	685a      	ldr	r2, [r3, #4]
 800bdc2:	4b1f      	ldr	r3, [pc, #124]	; (800be40 <sys_timeout_abs+0xd8>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	0fdb      	lsrs	r3, r3, #31
 800bdcc:	f003 0301 	and.w	r3, r3, #1
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d007      	beq.n	800bde6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bdd6:	4b1a      	ldr	r3, [pc, #104]	; (800be40 <sys_timeout_abs+0xd8>)
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bdde:	4a18      	ldr	r2, [pc, #96]	; (800be40 <sys_timeout_abs+0xd8>)
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	e023      	b.n	800be2e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bde6:	4b16      	ldr	r3, [pc, #88]	; (800be40 <sys_timeout_abs+0xd8>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	617b      	str	r3, [r7, #20]
 800bdec:	e01a      	b.n	800be24 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00b      	beq.n	800be0e <sys_timeout_abs+0xa6>
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	685a      	ldr	r2, [r3, #4]
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	1ad3      	subs	r3, r2, r3
 800be02:	0fdb      	lsrs	r3, r3, #31
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d007      	beq.n	800be1e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	681a      	ldr	r2, [r3, #0]
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	693a      	ldr	r2, [r7, #16]
 800be1a:	601a      	str	r2, [r3, #0]
        break;
 800be1c:	e007      	b.n	800be2e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	617b      	str	r3, [r7, #20]
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1e1      	bne.n	800bdee <sys_timeout_abs+0x86>
 800be2a:	e000      	b.n	800be2e <sys_timeout_abs+0xc6>
    return;
 800be2c:	bf00      	nop
      }
    }
  }
}
 800be2e:	3718      	adds	r7, #24
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	08011d9c 	.word	0x08011d9c
 800be38:	08011dd0 	.word	0x08011dd0
 800be3c:	08011e10 	.word	0x08011e10
 800be40:	20008300 	.word	0x20008300

0800be44 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b086      	sub	sp, #24
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	4798      	blx	r3

  now = sys_now();
 800be56:	f7f7 ff31 	bl	8003cbc <sys_now>
 800be5a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	681a      	ldr	r2, [r3, #0]
 800be60:	4b0f      	ldr	r3, [pc, #60]	; (800bea0 <lwip_cyclic_timer+0x5c>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4413      	add	r3, r2
 800be66:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800be68:	68fa      	ldr	r2, [r7, #12]
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	0fdb      	lsrs	r3, r3, #31
 800be70:	f003 0301 	and.w	r3, r3, #1
 800be74:	b2db      	uxtb	r3, r3
 800be76:	2b00      	cmp	r3, #0
 800be78:	d009      	beq.n	800be8e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	4413      	add	r3, r2
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	4907      	ldr	r1, [pc, #28]	; (800bea4 <lwip_cyclic_timer+0x60>)
 800be86:	4618      	mov	r0, r3
 800be88:	f7ff ff6e 	bl	800bd68 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800be8c:	e004      	b.n	800be98 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	4904      	ldr	r1, [pc, #16]	; (800bea4 <lwip_cyclic_timer+0x60>)
 800be92:	68f8      	ldr	r0, [r7, #12]
 800be94:	f7ff ff68 	bl	800bd68 <sys_timeout_abs>
}
 800be98:	bf00      	nop
 800be9a:	3718      	adds	r7, #24
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	20008304 	.word	0x20008304
 800bea4:	0800be45 	.word	0x0800be45

0800bea8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800beae:	2301      	movs	r3, #1
 800beb0:	607b      	str	r3, [r7, #4]
 800beb2:	e00e      	b.n	800bed2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800beb4:	4a0b      	ldr	r2, [pc, #44]	; (800bee4 <sys_timeouts_init+0x3c>)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	00db      	lsls	r3, r3, #3
 800bec0:	4a08      	ldr	r2, [pc, #32]	; (800bee4 <sys_timeouts_init+0x3c>)
 800bec2:	4413      	add	r3, r2
 800bec4:	461a      	mov	r2, r3
 800bec6:	4908      	ldr	r1, [pc, #32]	; (800bee8 <sys_timeouts_init+0x40>)
 800bec8:	f000 f810 	bl	800beec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	3301      	adds	r3, #1
 800bed0:	607b      	str	r3, [r7, #4]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d9ed      	bls.n	800beb4 <sys_timeouts_init+0xc>
  }
}
 800bed8:	bf00      	nop
 800beda:	bf00      	nop
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	08012980 	.word	0x08012980
 800bee8:	0800be45 	.word	0x0800be45

0800beec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800befe:	d306      	bcc.n	800bf0e <sys_timeout+0x22>
 800bf00:	4b0a      	ldr	r3, [pc, #40]	; (800bf2c <sys_timeout+0x40>)
 800bf02:	f240 1229 	movw	r2, #297	; 0x129
 800bf06:	490a      	ldr	r1, [pc, #40]	; (800bf30 <sys_timeout+0x44>)
 800bf08:	480a      	ldr	r0, [pc, #40]	; (800bf34 <sys_timeout+0x48>)
 800bf0a:	f002 fd3b 	bl	800e984 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bf0e:	f7f7 fed5 	bl	8003cbc <sys_now>
 800bf12:	4602      	mov	r2, r0
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	4413      	add	r3, r2
 800bf18:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	68b9      	ldr	r1, [r7, #8]
 800bf1e:	6978      	ldr	r0, [r7, #20]
 800bf20:	f7ff ff22 	bl	800bd68 <sys_timeout_abs>
#endif
}
 800bf24:	bf00      	nop
 800bf26:	3718      	adds	r7, #24
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	08011d9c 	.word	0x08011d9c
 800bf30:	08011e38 	.word	0x08011e38
 800bf34:	08011e10 	.word	0x08011e10

0800bf38 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bf3e:	f7f7 febd 	bl	8003cbc <sys_now>
 800bf42:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bf44:	4b1a      	ldr	r3, [pc, #104]	; (800bfb0 <sys_check_timeouts+0x78>)
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d001      	beq.n	800bf52 <sys_check_timeouts+0x1a>
 800bf4e:	f7f9 f8f1 	bl	8005134 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bf52:	4b18      	ldr	r3, [pc, #96]	; (800bfb4 <sys_check_timeouts+0x7c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d022      	beq.n	800bfa4 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	1ad3      	subs	r3, r2, r3
 800bf66:	0fdb      	lsrs	r3, r3, #31
 800bf68:	f003 0301 	and.w	r3, r3, #1
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d11a      	bne.n	800bfa8 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a0f      	ldr	r2, [pc, #60]	; (800bfb4 <sys_check_timeouts+0x7c>)
 800bf78:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	4a0b      	ldr	r2, [pc, #44]	; (800bfb8 <sys_check_timeouts+0x80>)
 800bf8c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	2006      	movs	r0, #6
 800bf92:	f7f8 fd93 	bl	8004abc <memp_free>
    if (handler != NULL) {
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d0d3      	beq.n	800bf44 <sys_check_timeouts+0xc>
      handler(arg);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6838      	ldr	r0, [r7, #0]
 800bfa0:	4798      	blx	r3
  do {
 800bfa2:	e7cf      	b.n	800bf44 <sys_check_timeouts+0xc>
      return;
 800bfa4:	bf00      	nop
 800bfa6:	e000      	b.n	800bfaa <sys_check_timeouts+0x72>
      return;
 800bfa8:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	200082ad 	.word	0x200082ad
 800bfb4:	20008300 	.word	0x20008300
 800bfb8:	20008304 	.word	0x20008304

0800bfbc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bfc0:	f002 fcf8 	bl	800e9b4 <rand>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800bfd2:	b29a      	uxth	r2, r3
 800bfd4:	4b01      	ldr	r3, [pc, #4]	; (800bfdc <udp_init+0x20>)
 800bfd6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800bfd8:	bf00      	nop
 800bfda:	bd80      	pop	{r7, pc}
 800bfdc:	20000028 	.word	0x20000028

0800bfe0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b084      	sub	sp, #16
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	4613      	mov	r3, r2
 800bfec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d105      	bne.n	800c000 <udp_input_local_match+0x20>
 800bff4:	4b27      	ldr	r3, [pc, #156]	; (800c094 <udp_input_local_match+0xb4>)
 800bff6:	2287      	movs	r2, #135	; 0x87
 800bff8:	4927      	ldr	r1, [pc, #156]	; (800c098 <udp_input_local_match+0xb8>)
 800bffa:	4828      	ldr	r0, [pc, #160]	; (800c09c <udp_input_local_match+0xbc>)
 800bffc:	f002 fcc2 	bl	800e984 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d105      	bne.n	800c012 <udp_input_local_match+0x32>
 800c006:	4b23      	ldr	r3, [pc, #140]	; (800c094 <udp_input_local_match+0xb4>)
 800c008:	2288      	movs	r2, #136	; 0x88
 800c00a:	4925      	ldr	r1, [pc, #148]	; (800c0a0 <udp_input_local_match+0xc0>)
 800c00c:	4823      	ldr	r0, [pc, #140]	; (800c09c <udp_input_local_match+0xbc>)
 800c00e:	f002 fcb9 	bl	800e984 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	7a1b      	ldrb	r3, [r3, #8]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00b      	beq.n	800c032 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	7a1a      	ldrb	r2, [r3, #8]
 800c01e:	4b21      	ldr	r3, [pc, #132]	; (800c0a4 <udp_input_local_match+0xc4>)
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c026:	3301      	adds	r3, #1
 800c028:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d001      	beq.n	800c032 <udp_input_local_match+0x52>
    return 0;
 800c02e:	2300      	movs	r3, #0
 800c030:	e02b      	b.n	800c08a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c032:	79fb      	ldrb	r3, [r7, #7]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d018      	beq.n	800c06a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d013      	beq.n	800c066 <udp_input_local_match+0x86>
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d00f      	beq.n	800c066 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c046:	4b17      	ldr	r3, [pc, #92]	; (800c0a4 <udp_input_local_match+0xc4>)
 800c048:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c04a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c04e:	d00a      	beq.n	800c066 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	4b13      	ldr	r3, [pc, #76]	; (800c0a4 <udp_input_local_match+0xc4>)
 800c056:	695b      	ldr	r3, [r3, #20]
 800c058:	405a      	eors	r2, r3
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	3308      	adds	r3, #8
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c062:	2b00      	cmp	r3, #0
 800c064:	d110      	bne.n	800c088 <udp_input_local_match+0xa8>
          return 1;
 800c066:	2301      	movs	r3, #1
 800c068:	e00f      	b.n	800c08a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d009      	beq.n	800c084 <udp_input_local_match+0xa4>
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <udp_input_local_match+0xa4>
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	4b09      	ldr	r3, [pc, #36]	; (800c0a4 <udp_input_local_match+0xc4>)
 800c07e:	695b      	ldr	r3, [r3, #20]
 800c080:	429a      	cmp	r2, r3
 800c082:	d101      	bne.n	800c088 <udp_input_local_match+0xa8>
        return 1;
 800c084:	2301      	movs	r3, #1
 800c086:	e000      	b.n	800c08a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	08011e84 	.word	0x08011e84
 800c098:	08011eb4 	.word	0x08011eb4
 800c09c:	08011ed8 	.word	0x08011ed8
 800c0a0:	08011f00 	.word	0x08011f00
 800c0a4:	20004d40 	.word	0x20004d40

0800c0a8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c0a8:	b590      	push	{r4, r7, lr}
 800c0aa:	b08d      	sub	sp, #52	; 0x34
 800c0ac:	af02      	add	r7, sp, #8
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d105      	bne.n	800c0c8 <udp_input+0x20>
 800c0bc:	4b7c      	ldr	r3, [pc, #496]	; (800c2b0 <udp_input+0x208>)
 800c0be:	22cf      	movs	r2, #207	; 0xcf
 800c0c0:	497c      	ldr	r1, [pc, #496]	; (800c2b4 <udp_input+0x20c>)
 800c0c2:	487d      	ldr	r0, [pc, #500]	; (800c2b8 <udp_input+0x210>)
 800c0c4:	f002 fc5e 	bl	800e984 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d105      	bne.n	800c0da <udp_input+0x32>
 800c0ce:	4b78      	ldr	r3, [pc, #480]	; (800c2b0 <udp_input+0x208>)
 800c0d0:	22d0      	movs	r2, #208	; 0xd0
 800c0d2:	497a      	ldr	r1, [pc, #488]	; (800c2bc <udp_input+0x214>)
 800c0d4:	4878      	ldr	r0, [pc, #480]	; (800c2b8 <udp_input+0x210>)
 800c0d6:	f002 fc55 	bl	800e984 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	895b      	ldrh	r3, [r3, #10]
 800c0de:	2b07      	cmp	r3, #7
 800c0e0:	d803      	bhi.n	800c0ea <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7f9 fb60 	bl	80057a8 <pbuf_free>
    goto end;
 800c0e8:	e0de      	b.n	800c2a8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	685b      	ldr	r3, [r3, #4]
 800c0ee:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c0f0:	4b73      	ldr	r3, [pc, #460]	; (800c2c0 <udp_input+0x218>)
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	4a72      	ldr	r2, [pc, #456]	; (800c2c0 <udp_input+0x218>)
 800c0f6:	6812      	ldr	r2, [r2, #0]
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f001 fc88 	bl	800da10 <ip4_addr_isbroadcast_u32>
 800c100:	4603      	mov	r3, r0
 800c102:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	881b      	ldrh	r3, [r3, #0]
 800c108:	b29b      	uxth	r3, r3
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7f7 ffee 	bl	80040ec <lwip_htons>
 800c110:	4603      	mov	r3, r0
 800c112:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	885b      	ldrh	r3, [r3, #2]
 800c118:	b29b      	uxth	r3, r3
 800c11a:	4618      	mov	r0, r3
 800c11c:	f7f7 ffe6 	bl	80040ec <lwip_htons>
 800c120:	4603      	mov	r3, r0
 800c122:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c124:	2300      	movs	r3, #0
 800c126:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c128:	2300      	movs	r3, #0
 800c12a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c12c:	2300      	movs	r3, #0
 800c12e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c130:	4b64      	ldr	r3, [pc, #400]	; (800c2c4 <udp_input+0x21c>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	627b      	str	r3, [r7, #36]	; 0x24
 800c136:	e054      	b.n	800c1e2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13a:	8a5b      	ldrh	r3, [r3, #18]
 800c13c:	89fa      	ldrh	r2, [r7, #14]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d14a      	bne.n	800c1d8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c142:	7cfb      	ldrb	r3, [r7, #19]
 800c144:	461a      	mov	r2, r3
 800c146:	6839      	ldr	r1, [r7, #0]
 800c148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c14a:	f7ff ff49 	bl	800bfe0 <udp_input_local_match>
 800c14e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c150:	2b00      	cmp	r3, #0
 800c152:	d041      	beq.n	800c1d8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c156:	7c1b      	ldrb	r3, [r3, #16]
 800c158:	f003 0304 	and.w	r3, r3, #4
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d11d      	bne.n	800c19c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d102      	bne.n	800c16c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c168:	61fb      	str	r3, [r7, #28]
 800c16a:	e017      	b.n	800c19c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c16c:	7cfb      	ldrb	r3, [r7, #19]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d014      	beq.n	800c19c <udp_input+0xf4>
 800c172:	4b53      	ldr	r3, [pc, #332]	; (800c2c0 <udp_input+0x218>)
 800c174:	695b      	ldr	r3, [r3, #20]
 800c176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17a:	d10f      	bne.n	800c19c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	3304      	adds	r3, #4
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	429a      	cmp	r2, r3
 800c188:	d008      	beq.n	800c19c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	3304      	adds	r3, #4
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	429a      	cmp	r2, r3
 800c196:	d101      	bne.n	800c19c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19e:	8a9b      	ldrh	r3, [r3, #20]
 800c1a0:	8a3a      	ldrh	r2, [r7, #16]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d118      	bne.n	800c1d8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d005      	beq.n	800c1ba <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b0:	685a      	ldr	r2, [r3, #4]
 800c1b2:	4b43      	ldr	r3, [pc, #268]	; (800c2c0 <udp_input+0x218>)
 800c1b4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d10e      	bne.n	800c1d8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c1ba:	6a3b      	ldr	r3, [r7, #32]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d014      	beq.n	800c1ea <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c2:	68da      	ldr	r2, [r3, #12]
 800c1c4:	6a3b      	ldr	r3, [r7, #32]
 800c1c6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c1c8:	4b3e      	ldr	r3, [pc, #248]	; (800c2c4 <udp_input+0x21c>)
 800c1ca:	681a      	ldr	r2, [r3, #0]
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ce:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c1d0:	4a3c      	ldr	r2, [pc, #240]	; (800c2c4 <udp_input+0x21c>)
 800c1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c1d6:	e008      	b.n	800c1ea <udp_input+0x142>
      }
    }

    prev = pcb;
 800c1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1da:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	627b      	str	r3, [r7, #36]	; 0x24
 800c1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1a7      	bne.n	800c138 <udp_input+0x90>
 800c1e8:	e000      	b.n	800c1ec <udp_input+0x144>
        break;
 800c1ea:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d101      	bne.n	800c1f6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d002      	beq.n	800c202 <udp_input+0x15a>
    for_us = 1;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	76fb      	strb	r3, [r7, #27]
 800c200:	e00a      	b.n	800c218 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	3304      	adds	r3, #4
 800c206:	681a      	ldr	r2, [r3, #0]
 800c208:	4b2d      	ldr	r3, [pc, #180]	; (800c2c0 <udp_input+0x218>)
 800c20a:	695b      	ldr	r3, [r3, #20]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	bf0c      	ite	eq
 800c210:	2301      	moveq	r3, #1
 800c212:	2300      	movne	r3, #0
 800c214:	b2db      	uxtb	r3, r3
 800c216:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c218:	7efb      	ldrb	r3, [r7, #27]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d041      	beq.n	800c2a2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c21e:	2108      	movs	r1, #8
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f7f9 fa3b 	bl	800569c <pbuf_remove_header>
 800c226:	4603      	mov	r3, r0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00a      	beq.n	800c242 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c22c:	4b20      	ldr	r3, [pc, #128]	; (800c2b0 <udp_input+0x208>)
 800c22e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c232:	4925      	ldr	r1, [pc, #148]	; (800c2c8 <udp_input+0x220>)
 800c234:	4820      	ldr	r0, [pc, #128]	; (800c2b8 <udp_input+0x210>)
 800c236:	f002 fba5 	bl	800e984 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f7f9 fab4 	bl	80057a8 <pbuf_free>
      goto end;
 800c240:	e032      	b.n	800c2a8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c244:	2b00      	cmp	r3, #0
 800c246:	d012      	beq.n	800c26e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00a      	beq.n	800c266 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c252:	699c      	ldr	r4, [r3, #24]
 800c254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c256:	69d8      	ldr	r0, [r3, #28]
 800c258:	8a3b      	ldrh	r3, [r7, #16]
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	4b1b      	ldr	r3, [pc, #108]	; (800c2cc <udp_input+0x224>)
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c262:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c264:	e021      	b.n	800c2aa <udp_input+0x202>
        pbuf_free(p);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f7f9 fa9e 	bl	80057a8 <pbuf_free>
        goto end;
 800c26c:	e01c      	b.n	800c2a8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c26e:	7cfb      	ldrb	r3, [r7, #19]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d112      	bne.n	800c29a <udp_input+0x1f2>
 800c274:	4b12      	ldr	r3, [pc, #72]	; (800c2c0 <udp_input+0x218>)
 800c276:	695b      	ldr	r3, [r3, #20]
 800c278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c27c:	2be0      	cmp	r3, #224	; 0xe0
 800c27e:	d00c      	beq.n	800c29a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c280:	4b0f      	ldr	r3, [pc, #60]	; (800c2c0 <udp_input+0x218>)
 800c282:	899b      	ldrh	r3, [r3, #12]
 800c284:	3308      	adds	r3, #8
 800c286:	b29b      	uxth	r3, r3
 800c288:	b21b      	sxth	r3, r3
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f7f9 fa78 	bl	8005782 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c292:	2103      	movs	r1, #3
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f001 f89b 	bl	800d3d0 <icmp_dest_unreach>
      pbuf_free(p);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f7f9 fa84 	bl	80057a8 <pbuf_free>
  return;
 800c2a0:	e003      	b.n	800c2aa <udp_input+0x202>
    pbuf_free(p);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7f9 fa80 	bl	80057a8 <pbuf_free>
  return;
 800c2a8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c2aa:	372c      	adds	r7, #44	; 0x2c
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd90      	pop	{r4, r7, pc}
 800c2b0:	08011e84 	.word	0x08011e84
 800c2b4:	08011f28 	.word	0x08011f28
 800c2b8:	08011ed8 	.word	0x08011ed8
 800c2bc:	08011f40 	.word	0x08011f40
 800c2c0:	20004d40 	.word	0x20004d40
 800c2c4:	2000830c 	.word	0x2000830c
 800c2c8:	08011f5c 	.word	0x08011f5c
 800c2cc:	20004d50 	.word	0x20004d50

0800c2d0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b085      	sub	sp, #20
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d01e      	beq.n	800c31e <udp_netif_ip_addr_changed+0x4e>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d01a      	beq.n	800c31e <udp_netif_ip_addr_changed+0x4e>
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d017      	beq.n	800c31e <udp_netif_ip_addr_changed+0x4e>
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d013      	beq.n	800c31e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c2f6:	4b0d      	ldr	r3, [pc, #52]	; (800c32c <udp_netif_ip_addr_changed+0x5c>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	e00c      	b.n	800c318 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	429a      	cmp	r2, r3
 800c308:	d103      	bne.n	800c312 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	60fb      	str	r3, [r7, #12]
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d1ef      	bne.n	800c2fe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c31e:	bf00      	nop
 800c320:	3714      	adds	r7, #20
 800c322:	46bd      	mov	sp, r7
 800c324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c328:	4770      	bx	lr
 800c32a:	bf00      	nop
 800c32c:	2000830c 	.word	0x2000830c

0800c330 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b082      	sub	sp, #8
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c338:	4915      	ldr	r1, [pc, #84]	; (800c390 <etharp_free_entry+0x60>)
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	4613      	mov	r3, r2
 800c33e:	005b      	lsls	r3, r3, #1
 800c340:	4413      	add	r3, r2
 800c342:	00db      	lsls	r3, r3, #3
 800c344:	440b      	add	r3, r1
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d013      	beq.n	800c374 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c34c:	4910      	ldr	r1, [pc, #64]	; (800c390 <etharp_free_entry+0x60>)
 800c34e:	687a      	ldr	r2, [r7, #4]
 800c350:	4613      	mov	r3, r2
 800c352:	005b      	lsls	r3, r3, #1
 800c354:	4413      	add	r3, r2
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	440b      	add	r3, r1
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7f9 fa23 	bl	80057a8 <pbuf_free>
    arp_table[i].q = NULL;
 800c362:	490b      	ldr	r1, [pc, #44]	; (800c390 <etharp_free_entry+0x60>)
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	4613      	mov	r3, r2
 800c368:	005b      	lsls	r3, r3, #1
 800c36a:	4413      	add	r3, r2
 800c36c:	00db      	lsls	r3, r3, #3
 800c36e:	440b      	add	r3, r1
 800c370:	2200      	movs	r2, #0
 800c372:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c374:	4906      	ldr	r1, [pc, #24]	; (800c390 <etharp_free_entry+0x60>)
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	4613      	mov	r3, r2
 800c37a:	005b      	lsls	r3, r3, #1
 800c37c:	4413      	add	r3, r2
 800c37e:	00db      	lsls	r3, r3, #3
 800c380:	440b      	add	r3, r1
 800c382:	3314      	adds	r3, #20
 800c384:	2200      	movs	r2, #0
 800c386:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	20008310 	.word	0x20008310

0800c394 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c39a:	2300      	movs	r3, #0
 800c39c:	607b      	str	r3, [r7, #4]
 800c39e:	e096      	b.n	800c4ce <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c3a0:	494f      	ldr	r1, [pc, #316]	; (800c4e0 <etharp_tmr+0x14c>)
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	005b      	lsls	r3, r3, #1
 800c3a8:	4413      	add	r3, r2
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	440b      	add	r3, r1
 800c3ae:	3314      	adds	r3, #20
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c3b4:	78fb      	ldrb	r3, [r7, #3]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 8086 	beq.w	800c4c8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c3bc:	4948      	ldr	r1, [pc, #288]	; (800c4e0 <etharp_tmr+0x14c>)
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	4613      	mov	r3, r2
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	4413      	add	r3, r2
 800c3c6:	00db      	lsls	r3, r3, #3
 800c3c8:	440b      	add	r3, r1
 800c3ca:	3312      	adds	r3, #18
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	b298      	uxth	r0, r3
 800c3d2:	4943      	ldr	r1, [pc, #268]	; (800c4e0 <etharp_tmr+0x14c>)
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	4613      	mov	r3, r2
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	4413      	add	r3, r2
 800c3dc:	00db      	lsls	r3, r3, #3
 800c3de:	440b      	add	r3, r1
 800c3e0:	3312      	adds	r3, #18
 800c3e2:	4602      	mov	r2, r0
 800c3e4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c3e6:	493e      	ldr	r1, [pc, #248]	; (800c4e0 <etharp_tmr+0x14c>)
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	005b      	lsls	r3, r3, #1
 800c3ee:	4413      	add	r3, r2
 800c3f0:	00db      	lsls	r3, r3, #3
 800c3f2:	440b      	add	r3, r1
 800c3f4:	3312      	adds	r3, #18
 800c3f6:	881b      	ldrh	r3, [r3, #0]
 800c3f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c3fc:	d215      	bcs.n	800c42a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c3fe:	4938      	ldr	r1, [pc, #224]	; (800c4e0 <etharp_tmr+0x14c>)
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	4613      	mov	r3, r2
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	4413      	add	r3, r2
 800c408:	00db      	lsls	r3, r3, #3
 800c40a:	440b      	add	r3, r1
 800c40c:	3314      	adds	r3, #20
 800c40e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c410:	2b01      	cmp	r3, #1
 800c412:	d10e      	bne.n	800c432 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c414:	4932      	ldr	r1, [pc, #200]	; (800c4e0 <etharp_tmr+0x14c>)
 800c416:	687a      	ldr	r2, [r7, #4]
 800c418:	4613      	mov	r3, r2
 800c41a:	005b      	lsls	r3, r3, #1
 800c41c:	4413      	add	r3, r2
 800c41e:	00db      	lsls	r3, r3, #3
 800c420:	440b      	add	r3, r1
 800c422:	3312      	adds	r3, #18
 800c424:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c426:	2b04      	cmp	r3, #4
 800c428:	d903      	bls.n	800c432 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f7ff ff80 	bl	800c330 <etharp_free_entry>
 800c430:	e04a      	b.n	800c4c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c432:	492b      	ldr	r1, [pc, #172]	; (800c4e0 <etharp_tmr+0x14c>)
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	4613      	mov	r3, r2
 800c438:	005b      	lsls	r3, r3, #1
 800c43a:	4413      	add	r3, r2
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	440b      	add	r3, r1
 800c440:	3314      	adds	r3, #20
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	2b03      	cmp	r3, #3
 800c446:	d10a      	bne.n	800c45e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c448:	4925      	ldr	r1, [pc, #148]	; (800c4e0 <etharp_tmr+0x14c>)
 800c44a:	687a      	ldr	r2, [r7, #4]
 800c44c:	4613      	mov	r3, r2
 800c44e:	005b      	lsls	r3, r3, #1
 800c450:	4413      	add	r3, r2
 800c452:	00db      	lsls	r3, r3, #3
 800c454:	440b      	add	r3, r1
 800c456:	3314      	adds	r3, #20
 800c458:	2204      	movs	r2, #4
 800c45a:	701a      	strb	r2, [r3, #0]
 800c45c:	e034      	b.n	800c4c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c45e:	4920      	ldr	r1, [pc, #128]	; (800c4e0 <etharp_tmr+0x14c>)
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	4613      	mov	r3, r2
 800c464:	005b      	lsls	r3, r3, #1
 800c466:	4413      	add	r3, r2
 800c468:	00db      	lsls	r3, r3, #3
 800c46a:	440b      	add	r3, r1
 800c46c:	3314      	adds	r3, #20
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	2b04      	cmp	r3, #4
 800c472:	d10a      	bne.n	800c48a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c474:	491a      	ldr	r1, [pc, #104]	; (800c4e0 <etharp_tmr+0x14c>)
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	4613      	mov	r3, r2
 800c47a:	005b      	lsls	r3, r3, #1
 800c47c:	4413      	add	r3, r2
 800c47e:	00db      	lsls	r3, r3, #3
 800c480:	440b      	add	r3, r1
 800c482:	3314      	adds	r3, #20
 800c484:	2202      	movs	r2, #2
 800c486:	701a      	strb	r2, [r3, #0]
 800c488:	e01e      	b.n	800c4c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c48a:	4915      	ldr	r1, [pc, #84]	; (800c4e0 <etharp_tmr+0x14c>)
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	4613      	mov	r3, r2
 800c490:	005b      	lsls	r3, r3, #1
 800c492:	4413      	add	r3, r2
 800c494:	00db      	lsls	r3, r3, #3
 800c496:	440b      	add	r3, r1
 800c498:	3314      	adds	r3, #20
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d113      	bne.n	800c4c8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c4a0:	490f      	ldr	r1, [pc, #60]	; (800c4e0 <etharp_tmr+0x14c>)
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	4613      	mov	r3, r2
 800c4a6:	005b      	lsls	r3, r3, #1
 800c4a8:	4413      	add	r3, r2
 800c4aa:	00db      	lsls	r3, r3, #3
 800c4ac:	440b      	add	r3, r1
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	6818      	ldr	r0, [r3, #0]
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	4613      	mov	r3, r2
 800c4b6:	005b      	lsls	r3, r3, #1
 800c4b8:	4413      	add	r3, r2
 800c4ba:	00db      	lsls	r3, r3, #3
 800c4bc:	4a08      	ldr	r2, [pc, #32]	; (800c4e0 <etharp_tmr+0x14c>)
 800c4be:	4413      	add	r3, r2
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	f000 fe6e 	bl	800d1a4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	607b      	str	r3, [r7, #4]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b09      	cmp	r3, #9
 800c4d2:	f77f af65 	ble.w	800c3a0 <etharp_tmr+0xc>
      }
    }
  }
}
 800c4d6:	bf00      	nop
 800c4d8:	bf00      	nop
 800c4da:	3708      	adds	r7, #8
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}
 800c4e0:	20008310 	.word	0x20008310

0800c4e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b08a      	sub	sp, #40	; 0x28
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60f8      	str	r0, [r7, #12]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	607a      	str	r2, [r7, #4]
 800c4f0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c4f2:	230a      	movs	r3, #10
 800c4f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c4f6:	230a      	movs	r3, #10
 800c4f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800c4fa:	230a      	movs	r3, #10
 800c4fc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800c4fe:	2300      	movs	r3, #0
 800c500:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800c502:	230a      	movs	r3, #10
 800c504:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	83bb      	strh	r3, [r7, #28]
 800c50a:	2300      	movs	r3, #0
 800c50c:	837b      	strh	r3, [r7, #26]
 800c50e:	2300      	movs	r3, #0
 800c510:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c512:	2300      	movs	r3, #0
 800c514:	843b      	strh	r3, [r7, #32]
 800c516:	e0ae      	b.n	800c676 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800c518:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c51c:	49a6      	ldr	r1, [pc, #664]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c51e:	4613      	mov	r3, r2
 800c520:	005b      	lsls	r3, r3, #1
 800c522:	4413      	add	r3, r2
 800c524:	00db      	lsls	r3, r3, #3
 800c526:	440b      	add	r3, r1
 800c528:	3314      	adds	r3, #20
 800c52a:	781b      	ldrb	r3, [r3, #0]
 800c52c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c52e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c532:	2b0a      	cmp	r3, #10
 800c534:	d105      	bne.n	800c542 <etharp_find_entry+0x5e>
 800c536:	7dfb      	ldrb	r3, [r7, #23]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d102      	bne.n	800c542 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800c53c:	8c3b      	ldrh	r3, [r7, #32]
 800c53e:	847b      	strh	r3, [r7, #34]	; 0x22
 800c540:	e095      	b.n	800c66e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c542:	7dfb      	ldrb	r3, [r7, #23]
 800c544:	2b00      	cmp	r3, #0
 800c546:	f000 8092 	beq.w	800c66e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c54a:	7dfb      	ldrb	r3, [r7, #23]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d009      	beq.n	800c564 <etharp_find_entry+0x80>
 800c550:	7dfb      	ldrb	r3, [r7, #23]
 800c552:	2b01      	cmp	r3, #1
 800c554:	d806      	bhi.n	800c564 <etharp_find_entry+0x80>
 800c556:	4b99      	ldr	r3, [pc, #612]	; (800c7bc <etharp_find_entry+0x2d8>)
 800c558:	f240 1223 	movw	r2, #291	; 0x123
 800c55c:	4998      	ldr	r1, [pc, #608]	; (800c7c0 <etharp_find_entry+0x2dc>)
 800c55e:	4899      	ldr	r0, [pc, #612]	; (800c7c4 <etharp_find_entry+0x2e0>)
 800c560:	f002 fa10 	bl	800e984 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d020      	beq.n	800c5ac <etharp_find_entry+0xc8>
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6819      	ldr	r1, [r3, #0]
 800c56e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c572:	4891      	ldr	r0, [pc, #580]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c574:	4613      	mov	r3, r2
 800c576:	005b      	lsls	r3, r3, #1
 800c578:	4413      	add	r3, r2
 800c57a:	00db      	lsls	r3, r3, #3
 800c57c:	4403      	add	r3, r0
 800c57e:	3304      	adds	r3, #4
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4299      	cmp	r1, r3
 800c584:	d112      	bne.n	800c5ac <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00c      	beq.n	800c5a6 <etharp_find_entry+0xc2>
 800c58c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c590:	4989      	ldr	r1, [pc, #548]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c592:	4613      	mov	r3, r2
 800c594:	005b      	lsls	r3, r3, #1
 800c596:	4413      	add	r3, r2
 800c598:	00db      	lsls	r3, r3, #3
 800c59a:	440b      	add	r3, r1
 800c59c:	3308      	adds	r3, #8
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d102      	bne.n	800c5ac <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c5a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c5aa:	e100      	b.n	800c7ae <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c5ac:	7dfb      	ldrb	r3, [r7, #23]
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d140      	bne.n	800c634 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c5b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5b6:	4980      	ldr	r1, [pc, #512]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	005b      	lsls	r3, r3, #1
 800c5bc:	4413      	add	r3, r2
 800c5be:	00db      	lsls	r3, r3, #3
 800c5c0:	440b      	add	r3, r1
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d01a      	beq.n	800c5fe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800c5c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5cc:	497a      	ldr	r1, [pc, #488]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	005b      	lsls	r3, r3, #1
 800c5d2:	4413      	add	r3, r2
 800c5d4:	00db      	lsls	r3, r3, #3
 800c5d6:	440b      	add	r3, r1
 800c5d8:	3312      	adds	r3, #18
 800c5da:	881b      	ldrh	r3, [r3, #0]
 800c5dc:	8bba      	ldrh	r2, [r7, #28]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d845      	bhi.n	800c66e <etharp_find_entry+0x18a>
            old_queue = i;
 800c5e2:	8c3b      	ldrh	r3, [r7, #32]
 800c5e4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800c5e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c5ea:	4973      	ldr	r1, [pc, #460]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	005b      	lsls	r3, r3, #1
 800c5f0:	4413      	add	r3, r2
 800c5f2:	00db      	lsls	r3, r3, #3
 800c5f4:	440b      	add	r3, r1
 800c5f6:	3312      	adds	r3, #18
 800c5f8:	881b      	ldrh	r3, [r3, #0]
 800c5fa:	83bb      	strh	r3, [r7, #28]
 800c5fc:	e037      	b.n	800c66e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c5fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c602:	496d      	ldr	r1, [pc, #436]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c604:	4613      	mov	r3, r2
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	4413      	add	r3, r2
 800c60a:	00db      	lsls	r3, r3, #3
 800c60c:	440b      	add	r3, r1
 800c60e:	3312      	adds	r3, #18
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	8b7a      	ldrh	r2, [r7, #26]
 800c614:	429a      	cmp	r2, r3
 800c616:	d82a      	bhi.n	800c66e <etharp_find_entry+0x18a>
            old_pending = i;
 800c618:	8c3b      	ldrh	r3, [r7, #32]
 800c61a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800c61c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c620:	4965      	ldr	r1, [pc, #404]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c622:	4613      	mov	r3, r2
 800c624:	005b      	lsls	r3, r3, #1
 800c626:	4413      	add	r3, r2
 800c628:	00db      	lsls	r3, r3, #3
 800c62a:	440b      	add	r3, r1
 800c62c:	3312      	adds	r3, #18
 800c62e:	881b      	ldrh	r3, [r3, #0]
 800c630:	837b      	strh	r3, [r7, #26]
 800c632:	e01c      	b.n	800c66e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c634:	7dfb      	ldrb	r3, [r7, #23]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d919      	bls.n	800c66e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c63a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c63e:	495e      	ldr	r1, [pc, #376]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c640:	4613      	mov	r3, r2
 800c642:	005b      	lsls	r3, r3, #1
 800c644:	4413      	add	r3, r2
 800c646:	00db      	lsls	r3, r3, #3
 800c648:	440b      	add	r3, r1
 800c64a:	3312      	adds	r3, #18
 800c64c:	881b      	ldrh	r3, [r3, #0]
 800c64e:	8b3a      	ldrh	r2, [r7, #24]
 800c650:	429a      	cmp	r2, r3
 800c652:	d80c      	bhi.n	800c66e <etharp_find_entry+0x18a>
            old_stable = i;
 800c654:	8c3b      	ldrh	r3, [r7, #32]
 800c656:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800c658:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c65c:	4956      	ldr	r1, [pc, #344]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c65e:	4613      	mov	r3, r2
 800c660:	005b      	lsls	r3, r3, #1
 800c662:	4413      	add	r3, r2
 800c664:	00db      	lsls	r3, r3, #3
 800c666:	440b      	add	r3, r1
 800c668:	3312      	adds	r3, #18
 800c66a:	881b      	ldrh	r3, [r3, #0]
 800c66c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c66e:	8c3b      	ldrh	r3, [r7, #32]
 800c670:	3301      	adds	r3, #1
 800c672:	b29b      	uxth	r3, r3
 800c674:	843b      	strh	r3, [r7, #32]
 800c676:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c67a:	2b09      	cmp	r3, #9
 800c67c:	f77f af4c 	ble.w	800c518 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c680:	7afb      	ldrb	r3, [r7, #11]
 800c682:	f003 0302 	and.w	r3, r3, #2
 800c686:	2b00      	cmp	r3, #0
 800c688:	d108      	bne.n	800c69c <etharp_find_entry+0x1b8>
 800c68a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c68e:	2b0a      	cmp	r3, #10
 800c690:	d107      	bne.n	800c6a2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c692:	7afb      	ldrb	r3, [r7, #11]
 800c694:	f003 0301 	and.w	r3, r3, #1
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d102      	bne.n	800c6a2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800c69c:	f04f 33ff 	mov.w	r3, #4294967295
 800c6a0:	e085      	b.n	800c7ae <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c6a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800c6a6:	2b09      	cmp	r3, #9
 800c6a8:	dc02      	bgt.n	800c6b0 <etharp_find_entry+0x1cc>
    i = empty;
 800c6aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c6ac:	843b      	strh	r3, [r7, #32]
 800c6ae:	e039      	b.n	800c724 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c6b0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800c6b4:	2b09      	cmp	r3, #9
 800c6b6:	dc14      	bgt.n	800c6e2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800c6b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c6ba:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c6bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c6c0:	493d      	ldr	r1, [pc, #244]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	005b      	lsls	r3, r3, #1
 800c6c6:	4413      	add	r3, r2
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	440b      	add	r3, r1
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d018      	beq.n	800c704 <etharp_find_entry+0x220>
 800c6d2:	4b3a      	ldr	r3, [pc, #232]	; (800c7bc <etharp_find_entry+0x2d8>)
 800c6d4:	f240 126d 	movw	r2, #365	; 0x16d
 800c6d8:	493b      	ldr	r1, [pc, #236]	; (800c7c8 <etharp_find_entry+0x2e4>)
 800c6da:	483a      	ldr	r0, [pc, #232]	; (800c7c4 <etharp_find_entry+0x2e0>)
 800c6dc:	f002 f952 	bl	800e984 <iprintf>
 800c6e0:	e010      	b.n	800c704 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c6e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800c6e6:	2b09      	cmp	r3, #9
 800c6e8:	dc02      	bgt.n	800c6f0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800c6ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c6ec:	843b      	strh	r3, [r7, #32]
 800c6ee:	e009      	b.n	800c704 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c6f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c6f4:	2b09      	cmp	r3, #9
 800c6f6:	dc02      	bgt.n	800c6fe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c6f8:	8bfb      	ldrh	r3, [r7, #30]
 800c6fa:	843b      	strh	r3, [r7, #32]
 800c6fc:	e002      	b.n	800c704 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800c6fe:	f04f 33ff 	mov.w	r3, #4294967295
 800c702:	e054      	b.n	800c7ae <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c704:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c708:	2b09      	cmp	r3, #9
 800c70a:	dd06      	ble.n	800c71a <etharp_find_entry+0x236>
 800c70c:	4b2b      	ldr	r3, [pc, #172]	; (800c7bc <etharp_find_entry+0x2d8>)
 800c70e:	f240 127f 	movw	r2, #383	; 0x17f
 800c712:	492e      	ldr	r1, [pc, #184]	; (800c7cc <etharp_find_entry+0x2e8>)
 800c714:	482b      	ldr	r0, [pc, #172]	; (800c7c4 <etharp_find_entry+0x2e0>)
 800c716:	f002 f935 	bl	800e984 <iprintf>
    etharp_free_entry(i);
 800c71a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c71e:	4618      	mov	r0, r3
 800c720:	f7ff fe06 	bl	800c330 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c724:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800c728:	2b09      	cmp	r3, #9
 800c72a:	dd06      	ble.n	800c73a <etharp_find_entry+0x256>
 800c72c:	4b23      	ldr	r3, [pc, #140]	; (800c7bc <etharp_find_entry+0x2d8>)
 800c72e:	f240 1283 	movw	r2, #387	; 0x183
 800c732:	4926      	ldr	r1, [pc, #152]	; (800c7cc <etharp_find_entry+0x2e8>)
 800c734:	4823      	ldr	r0, [pc, #140]	; (800c7c4 <etharp_find_entry+0x2e0>)
 800c736:	f002 f925 	bl	800e984 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c73a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c73e:	491e      	ldr	r1, [pc, #120]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c740:	4613      	mov	r3, r2
 800c742:	005b      	lsls	r3, r3, #1
 800c744:	4413      	add	r3, r2
 800c746:	00db      	lsls	r3, r3, #3
 800c748:	440b      	add	r3, r1
 800c74a:	3314      	adds	r3, #20
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d006      	beq.n	800c760 <etharp_find_entry+0x27c>
 800c752:	4b1a      	ldr	r3, [pc, #104]	; (800c7bc <etharp_find_entry+0x2d8>)
 800c754:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c758:	491d      	ldr	r1, [pc, #116]	; (800c7d0 <etharp_find_entry+0x2ec>)
 800c75a:	481a      	ldr	r0, [pc, #104]	; (800c7c4 <etharp_find_entry+0x2e0>)
 800c75c:	f002 f912 	bl	800e984 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00b      	beq.n	800c77e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c766:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	6819      	ldr	r1, [r3, #0]
 800c76e:	4812      	ldr	r0, [pc, #72]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c770:	4613      	mov	r3, r2
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	4413      	add	r3, r2
 800c776:	00db      	lsls	r3, r3, #3
 800c778:	4403      	add	r3, r0
 800c77a:	3304      	adds	r3, #4
 800c77c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c77e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c782:	490d      	ldr	r1, [pc, #52]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c784:	4613      	mov	r3, r2
 800c786:	005b      	lsls	r3, r3, #1
 800c788:	4413      	add	r3, r2
 800c78a:	00db      	lsls	r3, r3, #3
 800c78c:	440b      	add	r3, r1
 800c78e:	3312      	adds	r3, #18
 800c790:	2200      	movs	r2, #0
 800c792:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c794:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800c798:	4907      	ldr	r1, [pc, #28]	; (800c7b8 <etharp_find_entry+0x2d4>)
 800c79a:	4613      	mov	r3, r2
 800c79c:	005b      	lsls	r3, r3, #1
 800c79e:	4413      	add	r3, r2
 800c7a0:	00db      	lsls	r3, r3, #3
 800c7a2:	440b      	add	r3, r1
 800c7a4:	3308      	adds	r3, #8
 800c7a6:	687a      	ldr	r2, [r7, #4]
 800c7a8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800c7aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3728      	adds	r7, #40	; 0x28
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	20008310 	.word	0x20008310
 800c7bc:	080121e8 	.word	0x080121e8
 800c7c0:	08012220 	.word	0x08012220
 800c7c4:	08012260 	.word	0x08012260
 800c7c8:	08012288 	.word	0x08012288
 800c7cc:	080122a0 	.word	0x080122a0
 800c7d0:	080122b4 	.word	0x080122b4

0800c7d4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b088      	sub	sp, #32
 800c7d8:	af02      	add	r7, sp, #8
 800c7da:	60f8      	str	r0, [r7, #12]
 800c7dc:	60b9      	str	r1, [r7, #8]
 800c7de:	607a      	str	r2, [r7, #4]
 800c7e0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c7e8:	2b06      	cmp	r3, #6
 800c7ea:	d006      	beq.n	800c7fa <etharp_update_arp_entry+0x26>
 800c7ec:	4b48      	ldr	r3, [pc, #288]	; (800c910 <etharp_update_arp_entry+0x13c>)
 800c7ee:	f240 12a9 	movw	r2, #425	; 0x1a9
 800c7f2:	4948      	ldr	r1, [pc, #288]	; (800c914 <etharp_update_arp_entry+0x140>)
 800c7f4:	4848      	ldr	r0, [pc, #288]	; (800c918 <etharp_update_arp_entry+0x144>)
 800c7f6:	f002 f8c5 	bl	800e984 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d012      	beq.n	800c826 <etharp_update_arp_entry+0x52>
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d00e      	beq.n	800c826 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	68f9      	ldr	r1, [r7, #12]
 800c80e:	4618      	mov	r0, r3
 800c810:	f001 f8fe 	bl	800da10 <ip4_addr_isbroadcast_u32>
 800c814:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c816:	2b00      	cmp	r3, #0
 800c818:	d105      	bne.n	800c826 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c822:	2be0      	cmp	r3, #224	; 0xe0
 800c824:	d102      	bne.n	800c82c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c826:	f06f 030f 	mvn.w	r3, #15
 800c82a:	e06c      	b.n	800c906 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c82c:	78fb      	ldrb	r3, [r7, #3]
 800c82e:	68fa      	ldr	r2, [r7, #12]
 800c830:	4619      	mov	r1, r3
 800c832:	68b8      	ldr	r0, [r7, #8]
 800c834:	f7ff fe56 	bl	800c4e4 <etharp_find_entry>
 800c838:	4603      	mov	r3, r0
 800c83a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c83c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800c840:	2b00      	cmp	r3, #0
 800c842:	da02      	bge.n	800c84a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c844:	8afb      	ldrh	r3, [r7, #22]
 800c846:	b25b      	sxtb	r3, r3
 800c848:	e05d      	b.n	800c906 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c84a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c84e:	4933      	ldr	r1, [pc, #204]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c850:	4613      	mov	r3, r2
 800c852:	005b      	lsls	r3, r3, #1
 800c854:	4413      	add	r3, r2
 800c856:	00db      	lsls	r3, r3, #3
 800c858:	440b      	add	r3, r1
 800c85a:	3314      	adds	r3, #20
 800c85c:	2202      	movs	r2, #2
 800c85e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c860:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c864:	492d      	ldr	r1, [pc, #180]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c866:	4613      	mov	r3, r2
 800c868:	005b      	lsls	r3, r3, #1
 800c86a:	4413      	add	r3, r2
 800c86c:	00db      	lsls	r3, r3, #3
 800c86e:	440b      	add	r3, r1
 800c870:	3308      	adds	r3, #8
 800c872:	68fa      	ldr	r2, [r7, #12]
 800c874:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800c876:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c87a:	4613      	mov	r3, r2
 800c87c:	005b      	lsls	r3, r3, #1
 800c87e:	4413      	add	r3, r2
 800c880:	00db      	lsls	r3, r3, #3
 800c882:	3308      	adds	r3, #8
 800c884:	4a25      	ldr	r2, [pc, #148]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c886:	4413      	add	r3, r2
 800c888:	3304      	adds	r3, #4
 800c88a:	2206      	movs	r2, #6
 800c88c:	6879      	ldr	r1, [r7, #4]
 800c88e:	4618      	mov	r0, r3
 800c890:	f002 f848 	bl	800e924 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c894:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c898:	4920      	ldr	r1, [pc, #128]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c89a:	4613      	mov	r3, r2
 800c89c:	005b      	lsls	r3, r3, #1
 800c89e:	4413      	add	r3, r2
 800c8a0:	00db      	lsls	r3, r3, #3
 800c8a2:	440b      	add	r3, r1
 800c8a4:	3312      	adds	r3, #18
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c8aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8ae:	491b      	ldr	r1, [pc, #108]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c8b0:	4613      	mov	r3, r2
 800c8b2:	005b      	lsls	r3, r3, #1
 800c8b4:	4413      	add	r3, r2
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	440b      	add	r3, r1
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d021      	beq.n	800c904 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c8c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8c4:	4915      	ldr	r1, [pc, #84]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	4413      	add	r3, r2
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	440b      	add	r3, r1
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c8d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800c8d8:	4910      	ldr	r1, [pc, #64]	; (800c91c <etharp_update_arp_entry+0x148>)
 800c8da:	4613      	mov	r3, r2
 800c8dc:	005b      	lsls	r3, r3, #1
 800c8de:	4413      	add	r3, r2
 800c8e0:	00db      	lsls	r3, r3, #3
 800c8e2:	440b      	add	r3, r1
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c8ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c8f2:	9300      	str	r3, [sp, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6939      	ldr	r1, [r7, #16]
 800c8f8:	68f8      	ldr	r0, [r7, #12]
 800c8fa:	f001 ff97 	bl	800e82c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c8fe:	6938      	ldr	r0, [r7, #16]
 800c900:	f7f8 ff52 	bl	80057a8 <pbuf_free>
  }
  return ERR_OK;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3718      	adds	r7, #24
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	080121e8 	.word	0x080121e8
 800c914:	080122e0 	.word	0x080122e0
 800c918:	08012260 	.word	0x08012260
 800c91c:	20008310 	.word	0x20008310

0800c920 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c928:	2300      	movs	r3, #0
 800c92a:	60fb      	str	r3, [r7, #12]
 800c92c:	e01e      	b.n	800c96c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800c92e:	4913      	ldr	r1, [pc, #76]	; (800c97c <etharp_cleanup_netif+0x5c>)
 800c930:	68fa      	ldr	r2, [r7, #12]
 800c932:	4613      	mov	r3, r2
 800c934:	005b      	lsls	r3, r3, #1
 800c936:	4413      	add	r3, r2
 800c938:	00db      	lsls	r3, r3, #3
 800c93a:	440b      	add	r3, r1
 800c93c:	3314      	adds	r3, #20
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c942:	7afb      	ldrb	r3, [r7, #11]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d00e      	beq.n	800c966 <etharp_cleanup_netif+0x46>
 800c948:	490c      	ldr	r1, [pc, #48]	; (800c97c <etharp_cleanup_netif+0x5c>)
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	4613      	mov	r3, r2
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	4413      	add	r3, r2
 800c952:	00db      	lsls	r3, r3, #3
 800c954:	440b      	add	r3, r1
 800c956:	3308      	adds	r3, #8
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d102      	bne.n	800c966 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f7ff fce5 	bl	800c330 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3301      	adds	r3, #1
 800c96a:	60fb      	str	r3, [r7, #12]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2b09      	cmp	r3, #9
 800c970:	dddd      	ble.n	800c92e <etharp_cleanup_netif+0xe>
    }
  }
}
 800c972:	bf00      	nop
 800c974:	bf00      	nop
 800c976:	3710      	adds	r7, #16
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}
 800c97c:	20008310 	.word	0x20008310

0800c980 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c980:	b5b0      	push	{r4, r5, r7, lr}
 800c982:	b08a      	sub	sp, #40	; 0x28
 800c984:	af04      	add	r7, sp, #16
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d107      	bne.n	800c9a0 <etharp_input+0x20>
 800c990:	4b3d      	ldr	r3, [pc, #244]	; (800ca88 <etharp_input+0x108>)
 800c992:	f240 228a 	movw	r2, #650	; 0x28a
 800c996:	493d      	ldr	r1, [pc, #244]	; (800ca8c <etharp_input+0x10c>)
 800c998:	483d      	ldr	r0, [pc, #244]	; (800ca90 <etharp_input+0x110>)
 800c99a:	f001 fff3 	bl	800e984 <iprintf>
 800c99e:	e06f      	b.n	800ca80 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	881b      	ldrh	r3, [r3, #0]
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9b0:	d10c      	bne.n	800c9cc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c9b6:	2b06      	cmp	r3, #6
 800c9b8:	d108      	bne.n	800c9cc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c9be:	2b04      	cmp	r3, #4
 800c9c0:	d104      	bne.n	800c9cc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	885b      	ldrh	r3, [r3, #2]
 800c9c6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c9c8:	2b08      	cmp	r3, #8
 800c9ca:	d003      	beq.n	800c9d4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7f8 feeb 	bl	80057a8 <pbuf_free>
    return;
 800c9d2:	e055      	b.n	800ca80 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	330e      	adds	r3, #14
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	3318      	adds	r3, #24
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	3304      	adds	r3, #4
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d102      	bne.n	800c9f4 <etharp_input+0x74>
    for_us = 0;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	75fb      	strb	r3, [r7, #23]
 800c9f2:	e009      	b.n	800ca08 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c9f4:	68ba      	ldr	r2, [r7, #8]
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	3304      	adds	r3, #4
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	bf0c      	ite	eq
 800ca00:	2301      	moveq	r3, #1
 800ca02:	2300      	movne	r3, #0
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	f103 0208 	add.w	r2, r3, #8
 800ca0e:	7dfb      	ldrb	r3, [r7, #23]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d001      	beq.n	800ca18 <etharp_input+0x98>
 800ca14:	2301      	movs	r3, #1
 800ca16:	e000      	b.n	800ca1a <etharp_input+0x9a>
 800ca18:	2302      	movs	r3, #2
 800ca1a:	f107 010c 	add.w	r1, r7, #12
 800ca1e:	6838      	ldr	r0, [r7, #0]
 800ca20:	f7ff fed8 	bl	800c7d4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	88db      	ldrh	r3, [r3, #6]
 800ca28:	b29b      	uxth	r3, r3
 800ca2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca2e:	d003      	beq.n	800ca38 <etharp_input+0xb8>
 800ca30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca34:	d01e      	beq.n	800ca74 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ca36:	e020      	b.n	800ca7a <etharp_input+0xfa>
      if (for_us) {
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d01c      	beq.n	800ca78 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ca58:	2102      	movs	r1, #2
 800ca5a:	9103      	str	r1, [sp, #12]
 800ca5c:	f107 010c 	add.w	r1, r7, #12
 800ca60:	9102      	str	r1, [sp, #8]
 800ca62:	9201      	str	r2, [sp, #4]
 800ca64:	9300      	str	r3, [sp, #0]
 800ca66:	462b      	mov	r3, r5
 800ca68:	4622      	mov	r2, r4
 800ca6a:	4601      	mov	r1, r0
 800ca6c:	6838      	ldr	r0, [r7, #0]
 800ca6e:	f000 faeb 	bl	800d048 <etharp_raw>
      break;
 800ca72:	e001      	b.n	800ca78 <etharp_input+0xf8>
      break;
 800ca74:	bf00      	nop
 800ca76:	e000      	b.n	800ca7a <etharp_input+0xfa>
      break;
 800ca78:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7f8 fe94 	bl	80057a8 <pbuf_free>
}
 800ca80:	3718      	adds	r7, #24
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bdb0      	pop	{r4, r5, r7, pc}
 800ca86:	bf00      	nop
 800ca88:	080121e8 	.word	0x080121e8
 800ca8c:	08012338 	.word	0x08012338
 800ca90:	08012260 	.word	0x08012260

0800ca94 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b086      	sub	sp, #24
 800ca98:	af02      	add	r7, sp, #8
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800caa2:	79fa      	ldrb	r2, [r7, #7]
 800caa4:	4944      	ldr	r1, [pc, #272]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800caa6:	4613      	mov	r3, r2
 800caa8:	005b      	lsls	r3, r3, #1
 800caaa:	4413      	add	r3, r2
 800caac:	00db      	lsls	r3, r3, #3
 800caae:	440b      	add	r3, r1
 800cab0:	3314      	adds	r3, #20
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d806      	bhi.n	800cac6 <etharp_output_to_arp_index+0x32>
 800cab8:	4b40      	ldr	r3, [pc, #256]	; (800cbbc <etharp_output_to_arp_index+0x128>)
 800caba:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cabe:	4940      	ldr	r1, [pc, #256]	; (800cbc0 <etharp_output_to_arp_index+0x12c>)
 800cac0:	4840      	ldr	r0, [pc, #256]	; (800cbc4 <etharp_output_to_arp_index+0x130>)
 800cac2:	f001 ff5f 	bl	800e984 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cac6:	79fa      	ldrb	r2, [r7, #7]
 800cac8:	493b      	ldr	r1, [pc, #236]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800caca:	4613      	mov	r3, r2
 800cacc:	005b      	lsls	r3, r3, #1
 800cace:	4413      	add	r3, r2
 800cad0:	00db      	lsls	r3, r3, #3
 800cad2:	440b      	add	r3, r1
 800cad4:	3314      	adds	r3, #20
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	2b02      	cmp	r3, #2
 800cada:	d153      	bne.n	800cb84 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cadc:	79fa      	ldrb	r2, [r7, #7]
 800cade:	4936      	ldr	r1, [pc, #216]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cae0:	4613      	mov	r3, r2
 800cae2:	005b      	lsls	r3, r3, #1
 800cae4:	4413      	add	r3, r2
 800cae6:	00db      	lsls	r3, r3, #3
 800cae8:	440b      	add	r3, r1
 800caea:	3312      	adds	r3, #18
 800caec:	881b      	ldrh	r3, [r3, #0]
 800caee:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800caf2:	d919      	bls.n	800cb28 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800caf4:	79fa      	ldrb	r2, [r7, #7]
 800caf6:	4613      	mov	r3, r2
 800caf8:	005b      	lsls	r3, r3, #1
 800cafa:	4413      	add	r3, r2
 800cafc:	00db      	lsls	r3, r3, #3
 800cafe:	4a2e      	ldr	r2, [pc, #184]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb00:	4413      	add	r3, r2
 800cb02:	3304      	adds	r3, #4
 800cb04:	4619      	mov	r1, r3
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f000 fb4c 	bl	800d1a4 <etharp_request>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d138      	bne.n	800cb84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cb12:	79fa      	ldrb	r2, [r7, #7]
 800cb14:	4928      	ldr	r1, [pc, #160]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb16:	4613      	mov	r3, r2
 800cb18:	005b      	lsls	r3, r3, #1
 800cb1a:	4413      	add	r3, r2
 800cb1c:	00db      	lsls	r3, r3, #3
 800cb1e:	440b      	add	r3, r1
 800cb20:	3314      	adds	r3, #20
 800cb22:	2203      	movs	r2, #3
 800cb24:	701a      	strb	r2, [r3, #0]
 800cb26:	e02d      	b.n	800cb84 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cb28:	79fa      	ldrb	r2, [r7, #7]
 800cb2a:	4923      	ldr	r1, [pc, #140]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb2c:	4613      	mov	r3, r2
 800cb2e:	005b      	lsls	r3, r3, #1
 800cb30:	4413      	add	r3, r2
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	440b      	add	r3, r1
 800cb36:	3312      	adds	r3, #18
 800cb38:	881b      	ldrh	r3, [r3, #0]
 800cb3a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cb3e:	d321      	bcc.n	800cb84 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cb40:	79fa      	ldrb	r2, [r7, #7]
 800cb42:	4613      	mov	r3, r2
 800cb44:	005b      	lsls	r3, r3, #1
 800cb46:	4413      	add	r3, r2
 800cb48:	00db      	lsls	r3, r3, #3
 800cb4a:	4a1b      	ldr	r2, [pc, #108]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb4c:	4413      	add	r3, r2
 800cb4e:	1d19      	adds	r1, r3, #4
 800cb50:	79fa      	ldrb	r2, [r7, #7]
 800cb52:	4613      	mov	r3, r2
 800cb54:	005b      	lsls	r3, r3, #1
 800cb56:	4413      	add	r3, r2
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	4a16      	ldr	r2, [pc, #88]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb5e:	4413      	add	r3, r2
 800cb60:	3304      	adds	r3, #4
 800cb62:	461a      	mov	r2, r3
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f000 fafb 	bl	800d160 <etharp_request_dst>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d109      	bne.n	800cb84 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cb70:	79fa      	ldrb	r2, [r7, #7]
 800cb72:	4911      	ldr	r1, [pc, #68]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb74:	4613      	mov	r3, r2
 800cb76:	005b      	lsls	r3, r3, #1
 800cb78:	4413      	add	r3, r2
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	440b      	add	r3, r1
 800cb7e:	3314      	adds	r3, #20
 800cb80:	2203      	movs	r2, #3
 800cb82:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800cb8a:	79fa      	ldrb	r2, [r7, #7]
 800cb8c:	4613      	mov	r3, r2
 800cb8e:	005b      	lsls	r3, r3, #1
 800cb90:	4413      	add	r3, r2
 800cb92:	00db      	lsls	r3, r3, #3
 800cb94:	3308      	adds	r3, #8
 800cb96:	4a08      	ldr	r2, [pc, #32]	; (800cbb8 <etharp_output_to_arp_index+0x124>)
 800cb98:	4413      	add	r3, r2
 800cb9a:	3304      	adds	r3, #4
 800cb9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cba0:	9200      	str	r2, [sp, #0]
 800cba2:	460a      	mov	r2, r1
 800cba4:	68b9      	ldr	r1, [r7, #8]
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	f001 fe40 	bl	800e82c <ethernet_output>
 800cbac:	4603      	mov	r3, r0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}
 800cbb6:	bf00      	nop
 800cbb8:	20008310 	.word	0x20008310
 800cbbc:	080121e8 	.word	0x080121e8
 800cbc0:	08012358 	.word	0x08012358
 800cbc4:	08012260 	.word	0x08012260

0800cbc8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b08a      	sub	sp, #40	; 0x28
 800cbcc:	af02      	add	r7, sp, #8
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	60b9      	str	r1, [r7, #8]
 800cbd2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d106      	bne.n	800cbec <etharp_output+0x24>
 800cbde:	4b73      	ldr	r3, [pc, #460]	; (800cdac <etharp_output+0x1e4>)
 800cbe0:	f240 321e 	movw	r2, #798	; 0x31e
 800cbe4:	4972      	ldr	r1, [pc, #456]	; (800cdb0 <etharp_output+0x1e8>)
 800cbe6:	4873      	ldr	r0, [pc, #460]	; (800cdb4 <etharp_output+0x1ec>)
 800cbe8:	f001 fecc 	bl	800e984 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d106      	bne.n	800cc00 <etharp_output+0x38>
 800cbf2:	4b6e      	ldr	r3, [pc, #440]	; (800cdac <etharp_output+0x1e4>)
 800cbf4:	f240 321f 	movw	r2, #799	; 0x31f
 800cbf8:	496f      	ldr	r1, [pc, #444]	; (800cdb8 <etharp_output+0x1f0>)
 800cbfa:	486e      	ldr	r0, [pc, #440]	; (800cdb4 <etharp_output+0x1ec>)
 800cbfc:	f001 fec2 	bl	800e984 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d106      	bne.n	800cc14 <etharp_output+0x4c>
 800cc06:	4b69      	ldr	r3, [pc, #420]	; (800cdac <etharp_output+0x1e4>)
 800cc08:	f44f 7248 	mov.w	r2, #800	; 0x320
 800cc0c:	496b      	ldr	r1, [pc, #428]	; (800cdbc <etharp_output+0x1f4>)
 800cc0e:	4869      	ldr	r0, [pc, #420]	; (800cdb4 <etharp_output+0x1ec>)
 800cc10:	f001 feb8 	bl	800e984 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	68f9      	ldr	r1, [r7, #12]
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	f000 fef8 	bl	800da10 <ip4_addr_isbroadcast_u32>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d002      	beq.n	800cc2c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800cc26:	4b66      	ldr	r3, [pc, #408]	; (800cdc0 <etharp_output+0x1f8>)
 800cc28:	61fb      	str	r3, [r7, #28]
 800cc2a:	e0af      	b.n	800cd8c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc34:	2be0      	cmp	r3, #224	; 0xe0
 800cc36:	d118      	bne.n	800cc6a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800cc38:	2301      	movs	r3, #1
 800cc3a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800cc40:	235e      	movs	r3, #94	; 0x5e
 800cc42:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	3301      	adds	r3, #1
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc4e:	b2db      	uxtb	r3, r3
 800cc50:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	3302      	adds	r3, #2
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	3303      	adds	r3, #3
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800cc62:	f107 0310 	add.w	r3, r7, #16
 800cc66:	61fb      	str	r3, [r7, #28]
 800cc68:	e090      	b.n	800cd8c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	3304      	adds	r3, #4
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	405a      	eors	r2, r3
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	3308      	adds	r3, #8
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4013      	ands	r3, r2
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d012      	beq.n	800cca8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cc88:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d00b      	beq.n	800cca8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	330c      	adds	r3, #12
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d003      	beq.n	800cca2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	330c      	adds	r3, #12
 800cc9e:	61bb      	str	r3, [r7, #24]
 800cca0:	e002      	b.n	800cca8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800cca2:	f06f 0303 	mvn.w	r3, #3
 800cca6:	e07d      	b.n	800cda4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cca8:	4b46      	ldr	r3, [pc, #280]	; (800cdc4 <etharp_output+0x1fc>)
 800ccaa:	781b      	ldrb	r3, [r3, #0]
 800ccac:	4619      	mov	r1, r3
 800ccae:	4a46      	ldr	r2, [pc, #280]	; (800cdc8 <etharp_output+0x200>)
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	005b      	lsls	r3, r3, #1
 800ccb4:	440b      	add	r3, r1
 800ccb6:	00db      	lsls	r3, r3, #3
 800ccb8:	4413      	add	r3, r2
 800ccba:	3314      	adds	r3, #20
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	2b01      	cmp	r3, #1
 800ccc0:	d925      	bls.n	800cd0e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ccc2:	4b40      	ldr	r3, [pc, #256]	; (800cdc4 <etharp_output+0x1fc>)
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	4619      	mov	r1, r3
 800ccc8:	4a3f      	ldr	r2, [pc, #252]	; (800cdc8 <etharp_output+0x200>)
 800ccca:	460b      	mov	r3, r1
 800cccc:	005b      	lsls	r3, r3, #1
 800ccce:	440b      	add	r3, r1
 800ccd0:	00db      	lsls	r3, r3, #3
 800ccd2:	4413      	add	r3, r2
 800ccd4:	3308      	adds	r3, #8
 800ccd6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d117      	bne.n	800cd0e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	681a      	ldr	r2, [r3, #0]
 800cce2:	4b38      	ldr	r3, [pc, #224]	; (800cdc4 <etharp_output+0x1fc>)
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	4618      	mov	r0, r3
 800cce8:	4937      	ldr	r1, [pc, #220]	; (800cdc8 <etharp_output+0x200>)
 800ccea:	4603      	mov	r3, r0
 800ccec:	005b      	lsls	r3, r3, #1
 800ccee:	4403      	add	r3, r0
 800ccf0:	00db      	lsls	r3, r3, #3
 800ccf2:	440b      	add	r3, r1
 800ccf4:	3304      	adds	r3, #4
 800ccf6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d108      	bne.n	800cd0e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ccfc:	4b31      	ldr	r3, [pc, #196]	; (800cdc4 <etharp_output+0x1fc>)
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	461a      	mov	r2, r3
 800cd02:	68b9      	ldr	r1, [r7, #8]
 800cd04:	68f8      	ldr	r0, [r7, #12]
 800cd06:	f7ff fec5 	bl	800ca94 <etharp_output_to_arp_index>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	e04a      	b.n	800cda4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cd0e:	2300      	movs	r3, #0
 800cd10:	75fb      	strb	r3, [r7, #23]
 800cd12:	e031      	b.n	800cd78 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cd14:	7dfa      	ldrb	r2, [r7, #23]
 800cd16:	492c      	ldr	r1, [pc, #176]	; (800cdc8 <etharp_output+0x200>)
 800cd18:	4613      	mov	r3, r2
 800cd1a:	005b      	lsls	r3, r3, #1
 800cd1c:	4413      	add	r3, r2
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	440b      	add	r3, r1
 800cd22:	3314      	adds	r3, #20
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d923      	bls.n	800cd72 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800cd2a:	7dfa      	ldrb	r2, [r7, #23]
 800cd2c:	4926      	ldr	r1, [pc, #152]	; (800cdc8 <etharp_output+0x200>)
 800cd2e:	4613      	mov	r3, r2
 800cd30:	005b      	lsls	r3, r3, #1
 800cd32:	4413      	add	r3, r2
 800cd34:	00db      	lsls	r3, r3, #3
 800cd36:	440b      	add	r3, r1
 800cd38:	3308      	adds	r3, #8
 800cd3a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800cd3c:	68fa      	ldr	r2, [r7, #12]
 800cd3e:	429a      	cmp	r2, r3
 800cd40:	d117      	bne.n	800cd72 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	6819      	ldr	r1, [r3, #0]
 800cd46:	7dfa      	ldrb	r2, [r7, #23]
 800cd48:	481f      	ldr	r0, [pc, #124]	; (800cdc8 <etharp_output+0x200>)
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	005b      	lsls	r3, r3, #1
 800cd4e:	4413      	add	r3, r2
 800cd50:	00db      	lsls	r3, r3, #3
 800cd52:	4403      	add	r3, r0
 800cd54:	3304      	adds	r3, #4
 800cd56:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800cd58:	4299      	cmp	r1, r3
 800cd5a:	d10a      	bne.n	800cd72 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800cd5c:	4a19      	ldr	r2, [pc, #100]	; (800cdc4 <etharp_output+0x1fc>)
 800cd5e:	7dfb      	ldrb	r3, [r7, #23]
 800cd60:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	461a      	mov	r2, r3
 800cd66:	68b9      	ldr	r1, [r7, #8]
 800cd68:	68f8      	ldr	r0, [r7, #12]
 800cd6a:	f7ff fe93 	bl	800ca94 <etharp_output_to_arp_index>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	e018      	b.n	800cda4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800cd72:	7dfb      	ldrb	r3, [r7, #23]
 800cd74:	3301      	adds	r3, #1
 800cd76:	75fb      	strb	r3, [r7, #23]
 800cd78:	7dfb      	ldrb	r3, [r7, #23]
 800cd7a:	2b09      	cmp	r3, #9
 800cd7c:	d9ca      	bls.n	800cd14 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800cd7e:	68ba      	ldr	r2, [r7, #8]
 800cd80:	69b9      	ldr	r1, [r7, #24]
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f000 f822 	bl	800cdcc <etharp_query>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	e00b      	b.n	800cda4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cd92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	68b9      	ldr	r1, [r7, #8]
 800cd9c:	68f8      	ldr	r0, [r7, #12]
 800cd9e:	f001 fd45 	bl	800e82c <ethernet_output>
 800cda2:	4603      	mov	r3, r0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3720      	adds	r7, #32
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	080121e8 	.word	0x080121e8
 800cdb0:	08012338 	.word	0x08012338
 800cdb4:	08012260 	.word	0x08012260
 800cdb8:	08012388 	.word	0x08012388
 800cdbc:	08012328 	.word	0x08012328
 800cdc0:	0801299c 	.word	0x0801299c
 800cdc4:	20008400 	.word	0x20008400
 800cdc8:	20008310 	.word	0x20008310

0800cdcc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b08c      	sub	sp, #48	; 0x30
 800cdd0:	af02      	add	r7, sp, #8
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	3326      	adds	r3, #38	; 0x26
 800cddc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800cdde:	23ff      	movs	r3, #255	; 0xff
 800cde0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800cde4:	2300      	movs	r3, #0
 800cde6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	68f9      	ldr	r1, [r7, #12]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f000 fe0e 	bl	800da10 <ip4_addr_isbroadcast_u32>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d10c      	bne.n	800ce14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce02:	2be0      	cmp	r3, #224	; 0xe0
 800ce04:	d006      	beq.n	800ce14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d003      	beq.n	800ce14 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d102      	bne.n	800ce1a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ce14:	f06f 030f 	mvn.w	r3, #15
 800ce18:	e101      	b.n	800d01e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	2101      	movs	r1, #1
 800ce1e:	68b8      	ldr	r0, [r7, #8]
 800ce20:	f7ff fb60 	bl	800c4e4 <etharp_find_entry>
 800ce24:	4603      	mov	r3, r0
 800ce26:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800ce28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	da02      	bge.n	800ce36 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800ce30:	8a7b      	ldrh	r3, [r7, #18]
 800ce32:	b25b      	sxtb	r3, r3
 800ce34:	e0f3      	b.n	800d01e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ce36:	8a7b      	ldrh	r3, [r7, #18]
 800ce38:	2b7e      	cmp	r3, #126	; 0x7e
 800ce3a:	d906      	bls.n	800ce4a <etharp_query+0x7e>
 800ce3c:	4b7a      	ldr	r3, [pc, #488]	; (800d028 <etharp_query+0x25c>)
 800ce3e:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ce42:	497a      	ldr	r1, [pc, #488]	; (800d02c <etharp_query+0x260>)
 800ce44:	487a      	ldr	r0, [pc, #488]	; (800d030 <etharp_query+0x264>)
 800ce46:	f001 fd9d 	bl	800e984 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800ce4a:	8a7b      	ldrh	r3, [r7, #18]
 800ce4c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800ce4e:	7c7a      	ldrb	r2, [r7, #17]
 800ce50:	4978      	ldr	r1, [pc, #480]	; (800d034 <etharp_query+0x268>)
 800ce52:	4613      	mov	r3, r2
 800ce54:	005b      	lsls	r3, r3, #1
 800ce56:	4413      	add	r3, r2
 800ce58:	00db      	lsls	r3, r3, #3
 800ce5a:	440b      	add	r3, r1
 800ce5c:	3314      	adds	r3, #20
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d115      	bne.n	800ce90 <etharp_query+0xc4>
    is_new_entry = 1;
 800ce64:	2301      	movs	r3, #1
 800ce66:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800ce68:	7c7a      	ldrb	r2, [r7, #17]
 800ce6a:	4972      	ldr	r1, [pc, #456]	; (800d034 <etharp_query+0x268>)
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	005b      	lsls	r3, r3, #1
 800ce70:	4413      	add	r3, r2
 800ce72:	00db      	lsls	r3, r3, #3
 800ce74:	440b      	add	r3, r1
 800ce76:	3314      	adds	r3, #20
 800ce78:	2201      	movs	r2, #1
 800ce7a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800ce7c:	7c7a      	ldrb	r2, [r7, #17]
 800ce7e:	496d      	ldr	r1, [pc, #436]	; (800d034 <etharp_query+0x268>)
 800ce80:	4613      	mov	r3, r2
 800ce82:	005b      	lsls	r3, r3, #1
 800ce84:	4413      	add	r3, r2
 800ce86:	00db      	lsls	r3, r3, #3
 800ce88:	440b      	add	r3, r1
 800ce8a:	3308      	adds	r3, #8
 800ce8c:	68fa      	ldr	r2, [r7, #12]
 800ce8e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800ce90:	7c7a      	ldrb	r2, [r7, #17]
 800ce92:	4968      	ldr	r1, [pc, #416]	; (800d034 <etharp_query+0x268>)
 800ce94:	4613      	mov	r3, r2
 800ce96:	005b      	lsls	r3, r3, #1
 800ce98:	4413      	add	r3, r2
 800ce9a:	00db      	lsls	r3, r3, #3
 800ce9c:	440b      	add	r3, r1
 800ce9e:	3314      	adds	r3, #20
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d011      	beq.n	800ceca <etharp_query+0xfe>
 800cea6:	7c7a      	ldrb	r2, [r7, #17]
 800cea8:	4962      	ldr	r1, [pc, #392]	; (800d034 <etharp_query+0x268>)
 800ceaa:	4613      	mov	r3, r2
 800ceac:	005b      	lsls	r3, r3, #1
 800ceae:	4413      	add	r3, r2
 800ceb0:	00db      	lsls	r3, r3, #3
 800ceb2:	440b      	add	r3, r1
 800ceb4:	3314      	adds	r3, #20
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d806      	bhi.n	800ceca <etharp_query+0xfe>
 800cebc:	4b5a      	ldr	r3, [pc, #360]	; (800d028 <etharp_query+0x25c>)
 800cebe:	f240 32cd 	movw	r2, #973	; 0x3cd
 800cec2:	495d      	ldr	r1, [pc, #372]	; (800d038 <etharp_query+0x26c>)
 800cec4:	485a      	ldr	r0, [pc, #360]	; (800d030 <etharp_query+0x264>)
 800cec6:	f001 fd5d 	bl	800e984 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800ceca:	6a3b      	ldr	r3, [r7, #32]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d102      	bne.n	800ced6 <etharp_query+0x10a>
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10c      	bne.n	800cef0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800ced6:	68b9      	ldr	r1, [r7, #8]
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f000 f963 	bl	800d1a4 <etharp_request>
 800cede:	4603      	mov	r3, r0
 800cee0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d102      	bne.n	800cef0 <etharp_query+0x124>
      return result;
 800ceea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ceee:	e096      	b.n	800d01e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d106      	bne.n	800cf04 <etharp_query+0x138>
 800cef6:	4b4c      	ldr	r3, [pc, #304]	; (800d028 <etharp_query+0x25c>)
 800cef8:	f240 32e1 	movw	r2, #993	; 0x3e1
 800cefc:	494f      	ldr	r1, [pc, #316]	; (800d03c <etharp_query+0x270>)
 800cefe:	484c      	ldr	r0, [pc, #304]	; (800d030 <etharp_query+0x264>)
 800cf00:	f001 fd40 	bl	800e984 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cf04:	7c7a      	ldrb	r2, [r7, #17]
 800cf06:	494b      	ldr	r1, [pc, #300]	; (800d034 <etharp_query+0x268>)
 800cf08:	4613      	mov	r3, r2
 800cf0a:	005b      	lsls	r3, r3, #1
 800cf0c:	4413      	add	r3, r2
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	440b      	add	r3, r1
 800cf12:	3314      	adds	r3, #20
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d917      	bls.n	800cf4a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800cf1a:	4a49      	ldr	r2, [pc, #292]	; (800d040 <etharp_query+0x274>)
 800cf1c:	7c7b      	ldrb	r3, [r7, #17]
 800cf1e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cf20:	7c7a      	ldrb	r2, [r7, #17]
 800cf22:	4613      	mov	r3, r2
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	4413      	add	r3, r2
 800cf28:	00db      	lsls	r3, r3, #3
 800cf2a:	3308      	adds	r3, #8
 800cf2c:	4a41      	ldr	r2, [pc, #260]	; (800d034 <etharp_query+0x268>)
 800cf2e:	4413      	add	r3, r2
 800cf30:	3304      	adds	r3, #4
 800cf32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf36:	9200      	str	r2, [sp, #0]
 800cf38:	697a      	ldr	r2, [r7, #20]
 800cf3a:	6879      	ldr	r1, [r7, #4]
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f001 fc75 	bl	800e82c <ethernet_output>
 800cf42:	4603      	mov	r3, r0
 800cf44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf48:	e067      	b.n	800d01a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cf4a:	7c7a      	ldrb	r2, [r7, #17]
 800cf4c:	4939      	ldr	r1, [pc, #228]	; (800d034 <etharp_query+0x268>)
 800cf4e:	4613      	mov	r3, r2
 800cf50:	005b      	lsls	r3, r3, #1
 800cf52:	4413      	add	r3, r2
 800cf54:	00db      	lsls	r3, r3, #3
 800cf56:	440b      	add	r3, r1
 800cf58:	3314      	adds	r3, #20
 800cf5a:	781b      	ldrb	r3, [r3, #0]
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	d15c      	bne.n	800d01a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cf60:	2300      	movs	r3, #0
 800cf62:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cf68:	e01c      	b.n	800cfa4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	895a      	ldrh	r2, [r3, #10]
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	891b      	ldrh	r3, [r3, #8]
 800cf72:	429a      	cmp	r2, r3
 800cf74:	d10a      	bne.n	800cf8c <etharp_query+0x1c0>
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d006      	beq.n	800cf8c <etharp_query+0x1c0>
 800cf7e:	4b2a      	ldr	r3, [pc, #168]	; (800d028 <etharp_query+0x25c>)
 800cf80:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cf84:	492f      	ldr	r1, [pc, #188]	; (800d044 <etharp_query+0x278>)
 800cf86:	482a      	ldr	r0, [pc, #168]	; (800d030 <etharp_query+0x264>)
 800cf88:	f001 fcfc 	bl	800e984 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	7b1b      	ldrb	r3, [r3, #12]
 800cf90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d002      	beq.n	800cf9e <etharp_query+0x1d2>
        copy_needed = 1;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	61bb      	str	r3, [r7, #24]
        break;
 800cf9c:	e005      	b.n	800cfaa <etharp_query+0x1de>
      }
      p = p->next;
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cfa4:	69fb      	ldr	r3, [r7, #28]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d1df      	bne.n	800cf6a <etharp_query+0x19e>
    }
    if (copy_needed) {
 800cfaa:	69bb      	ldr	r3, [r7, #24]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d007      	beq.n	800cfc0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cfb6:	200e      	movs	r0, #14
 800cfb8:	f7f8 fee4 	bl	8005d84 <pbuf_clone>
 800cfbc:	61f8      	str	r0, [r7, #28]
 800cfbe:	e004      	b.n	800cfca <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cfc4:	69f8      	ldr	r0, [r7, #28]
 800cfc6:	f7f8 fc8f 	bl	80058e8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cfca:	69fb      	ldr	r3, [r7, #28]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d021      	beq.n	800d014 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cfd0:	7c7a      	ldrb	r2, [r7, #17]
 800cfd2:	4918      	ldr	r1, [pc, #96]	; (800d034 <etharp_query+0x268>)
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	005b      	lsls	r3, r3, #1
 800cfd8:	4413      	add	r3, r2
 800cfda:	00db      	lsls	r3, r3, #3
 800cfdc:	440b      	add	r3, r1
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d00a      	beq.n	800cffa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800cfe4:	7c7a      	ldrb	r2, [r7, #17]
 800cfe6:	4913      	ldr	r1, [pc, #76]	; (800d034 <etharp_query+0x268>)
 800cfe8:	4613      	mov	r3, r2
 800cfea:	005b      	lsls	r3, r3, #1
 800cfec:	4413      	add	r3, r2
 800cfee:	00db      	lsls	r3, r3, #3
 800cff0:	440b      	add	r3, r1
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7f8 fbd7 	bl	80057a8 <pbuf_free>
      }
      arp_table[i].q = p;
 800cffa:	7c7a      	ldrb	r2, [r7, #17]
 800cffc:	490d      	ldr	r1, [pc, #52]	; (800d034 <etharp_query+0x268>)
 800cffe:	4613      	mov	r3, r2
 800d000:	005b      	lsls	r3, r3, #1
 800d002:	4413      	add	r3, r2
 800d004:	00db      	lsls	r3, r3, #3
 800d006:	440b      	add	r3, r1
 800d008:	69fa      	ldr	r2, [r7, #28]
 800d00a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d00c:	2300      	movs	r3, #0
 800d00e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d012:	e002      	b.n	800d01a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d014:	23ff      	movs	r3, #255	; 0xff
 800d016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d01a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3728      	adds	r7, #40	; 0x28
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	080121e8 	.word	0x080121e8
 800d02c:	08012394 	.word	0x08012394
 800d030:	08012260 	.word	0x08012260
 800d034:	20008310 	.word	0x20008310
 800d038:	080123a4 	.word	0x080123a4
 800d03c:	08012388 	.word	0x08012388
 800d040:	20008400 	.word	0x20008400
 800d044:	080123cc 	.word	0x080123cc

0800d048 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b08a      	sub	sp, #40	; 0x28
 800d04c:	af02      	add	r7, sp, #8
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
 800d054:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d056:	2300      	movs	r3, #0
 800d058:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d106      	bne.n	800d06e <etharp_raw+0x26>
 800d060:	4b3a      	ldr	r3, [pc, #232]	; (800d14c <etharp_raw+0x104>)
 800d062:	f240 4257 	movw	r2, #1111	; 0x457
 800d066:	493a      	ldr	r1, [pc, #232]	; (800d150 <etharp_raw+0x108>)
 800d068:	483a      	ldr	r0, [pc, #232]	; (800d154 <etharp_raw+0x10c>)
 800d06a:	f001 fc8b 	bl	800e984 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d06e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d072:	211c      	movs	r1, #28
 800d074:	200e      	movs	r0, #14
 800d076:	f7f8 f8b3 	bl	80051e0 <pbuf_alloc>
 800d07a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d07c:	69bb      	ldr	r3, [r7, #24]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d102      	bne.n	800d088 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d082:	f04f 33ff 	mov.w	r3, #4294967295
 800d086:	e05d      	b.n	800d144 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d088:	69bb      	ldr	r3, [r7, #24]
 800d08a:	895b      	ldrh	r3, [r3, #10]
 800d08c:	2b1b      	cmp	r3, #27
 800d08e:	d806      	bhi.n	800d09e <etharp_raw+0x56>
 800d090:	4b2e      	ldr	r3, [pc, #184]	; (800d14c <etharp_raw+0x104>)
 800d092:	f240 4262 	movw	r2, #1122	; 0x462
 800d096:	4930      	ldr	r1, [pc, #192]	; (800d158 <etharp_raw+0x110>)
 800d098:	482e      	ldr	r0, [pc, #184]	; (800d154 <etharp_raw+0x10c>)
 800d09a:	f001 fc73 	bl	800e984 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d0a4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7f7 f820 	bl	80040ec <lwip_htons>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d0ba:	2b06      	cmp	r3, #6
 800d0bc:	d006      	beq.n	800d0cc <etharp_raw+0x84>
 800d0be:	4b23      	ldr	r3, [pc, #140]	; (800d14c <etharp_raw+0x104>)
 800d0c0:	f240 4269 	movw	r2, #1129	; 0x469
 800d0c4:	4925      	ldr	r1, [pc, #148]	; (800d15c <etharp_raw+0x114>)
 800d0c6:	4823      	ldr	r0, [pc, #140]	; (800d154 <etharp_raw+0x10c>)
 800d0c8:	f001 fc5c 	bl	800e984 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	3308      	adds	r3, #8
 800d0d0:	2206      	movs	r2, #6
 800d0d2:	6839      	ldr	r1, [r7, #0]
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f001 fc25 	bl	800e924 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	3312      	adds	r3, #18
 800d0de:	2206      	movs	r2, #6
 800d0e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f001 fc1e 	bl	800e924 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	330e      	adds	r3, #14
 800d0ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0ee:	6812      	ldr	r2, [r2, #0]
 800d0f0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	3318      	adds	r3, #24
 800d0f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0f8:	6812      	ldr	r2, [r2, #0]
 800d0fa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	2200      	movs	r2, #0
 800d100:	701a      	strb	r2, [r3, #0]
 800d102:	2200      	movs	r2, #0
 800d104:	f042 0201 	orr.w	r2, r2, #1
 800d108:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	2200      	movs	r2, #0
 800d10e:	f042 0208 	orr.w	r2, r2, #8
 800d112:	709a      	strb	r2, [r3, #2]
 800d114:	2200      	movs	r2, #0
 800d116:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	2206      	movs	r2, #6
 800d11c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	2204      	movs	r2, #4
 800d122:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d124:	f640 0306 	movw	r3, #2054	; 0x806
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	69b9      	ldr	r1, [r7, #24]
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f001 fb7b 	bl	800e82c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d136:	69b8      	ldr	r0, [r7, #24]
 800d138:	f7f8 fb36 	bl	80057a8 <pbuf_free>
  p = NULL;
 800d13c:	2300      	movs	r3, #0
 800d13e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d140:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3720      	adds	r7, #32
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	080121e8 	.word	0x080121e8
 800d150:	08012338 	.word	0x08012338
 800d154:	08012260 	.word	0x08012260
 800d158:	080123e8 	.word	0x080123e8
 800d15c:	0801241c 	.word	0x0801241c

0800d160 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b088      	sub	sp, #32
 800d164:	af04      	add	r7, sp, #16
 800d166:	60f8      	str	r0, [r7, #12]
 800d168:	60b9      	str	r1, [r7, #8]
 800d16a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d17c:	2201      	movs	r2, #1
 800d17e:	9203      	str	r2, [sp, #12]
 800d180:	68ba      	ldr	r2, [r7, #8]
 800d182:	9202      	str	r2, [sp, #8]
 800d184:	4a06      	ldr	r2, [pc, #24]	; (800d1a0 <etharp_request_dst+0x40>)
 800d186:	9201      	str	r2, [sp, #4]
 800d188:	9300      	str	r3, [sp, #0]
 800d18a:	4603      	mov	r3, r0
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	68f8      	ldr	r0, [r7, #12]
 800d190:	f7ff ff5a 	bl	800d048 <etharp_raw>
 800d194:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	080129a4 	.word	0x080129a4

0800d1a4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d1ae:	4a05      	ldr	r2, [pc, #20]	; (800d1c4 <etharp_request+0x20>)
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f7ff ffd4 	bl	800d160 <etharp_request_dst>
 800d1b8:	4603      	mov	r3, r0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	0801299c 	.word	0x0801299c

0800d1c8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b08e      	sub	sp, #56	; 0x38
 800d1cc:	af04      	add	r7, sp, #16
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d1d2:	4b79      	ldr	r3, [pc, #484]	; (800d3b8 <icmp_input+0x1f0>)
 800d1d4:	689b      	ldr	r3, [r3, #8]
 800d1d6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	f003 030f 	and.w	r3, r3, #15
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	b2db      	uxtb	r3, r3
 800d1e6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d1e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d1ea:	2b13      	cmp	r3, #19
 800d1ec:	f240 80cd 	bls.w	800d38a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	895b      	ldrh	r3, [r3, #10]
 800d1f4:	2b03      	cmp	r3, #3
 800d1f6:	f240 80ca 	bls.w	800d38e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	781b      	ldrb	r3, [r3, #0]
 800d200:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d204:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d208:	2b00      	cmp	r3, #0
 800d20a:	f000 80b7 	beq.w	800d37c <icmp_input+0x1b4>
 800d20e:	2b08      	cmp	r3, #8
 800d210:	f040 80b7 	bne.w	800d382 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d214:	4b69      	ldr	r3, [pc, #420]	; (800d3bc <icmp_input+0x1f4>)
 800d216:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d218:	4b67      	ldr	r3, [pc, #412]	; (800d3b8 <icmp_input+0x1f0>)
 800d21a:	695b      	ldr	r3, [r3, #20]
 800d21c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d220:	2be0      	cmp	r3, #224	; 0xe0
 800d222:	f000 80bb 	beq.w	800d39c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d226:	4b64      	ldr	r3, [pc, #400]	; (800d3b8 <icmp_input+0x1f0>)
 800d228:	695b      	ldr	r3, [r3, #20]
 800d22a:	4a63      	ldr	r2, [pc, #396]	; (800d3b8 <icmp_input+0x1f0>)
 800d22c:	6812      	ldr	r2, [r2, #0]
 800d22e:	4611      	mov	r1, r2
 800d230:	4618      	mov	r0, r3
 800d232:	f000 fbed 	bl	800da10 <ip4_addr_isbroadcast_u32>
 800d236:	4603      	mov	r3, r0
 800d238:	2b00      	cmp	r3, #0
 800d23a:	f040 80b1 	bne.w	800d3a0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	891b      	ldrh	r3, [r3, #8]
 800d242:	2b07      	cmp	r3, #7
 800d244:	f240 80a5 	bls.w	800d392 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d248:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d24a:	330e      	adds	r3, #14
 800d24c:	4619      	mov	r1, r3
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f7f8 fa14 	bl	800567c <pbuf_add_header>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d04b      	beq.n	800d2f2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	891a      	ldrh	r2, [r3, #8]
 800d25e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d260:	4413      	add	r3, r2
 800d262:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	891b      	ldrh	r3, [r3, #8]
 800d268:	8b7a      	ldrh	r2, [r7, #26]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	f0c0 809a 	bcc.w	800d3a4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d270:	8b7b      	ldrh	r3, [r7, #26]
 800d272:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d276:	4619      	mov	r1, r3
 800d278:	200e      	movs	r0, #14
 800d27a:	f7f7 ffb1 	bl	80051e0 <pbuf_alloc>
 800d27e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	2b00      	cmp	r3, #0
 800d284:	f000 8090 	beq.w	800d3a8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	895b      	ldrh	r3, [r3, #10]
 800d28c:	461a      	mov	r2, r3
 800d28e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d290:	3308      	adds	r3, #8
 800d292:	429a      	cmp	r2, r3
 800d294:	d203      	bcs.n	800d29e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d296:	6978      	ldr	r0, [r7, #20]
 800d298:	f7f8 fa86 	bl	80057a8 <pbuf_free>
          goto icmperr;
 800d29c:	e085      	b.n	800d3aa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d29e:	697b      	ldr	r3, [r7, #20]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d2a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f001 fb3c 	bl	800e924 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d2ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2ae:	4619      	mov	r1, r3
 800d2b0:	6978      	ldr	r0, [r7, #20]
 800d2b2:	f7f8 f9f3 	bl	800569c <pbuf_remove_header>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d009      	beq.n	800d2d0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d2bc:	4b40      	ldr	r3, [pc, #256]	; (800d3c0 <icmp_input+0x1f8>)
 800d2be:	22b6      	movs	r2, #182	; 0xb6
 800d2c0:	4940      	ldr	r1, [pc, #256]	; (800d3c4 <icmp_input+0x1fc>)
 800d2c2:	4841      	ldr	r0, [pc, #260]	; (800d3c8 <icmp_input+0x200>)
 800d2c4:	f001 fb5e 	bl	800e984 <iprintf>
          pbuf_free(r);
 800d2c8:	6978      	ldr	r0, [r7, #20]
 800d2ca:	f7f8 fa6d 	bl	80057a8 <pbuf_free>
          goto icmperr;
 800d2ce:	e06c      	b.n	800d3aa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d2d0:	6879      	ldr	r1, [r7, #4]
 800d2d2:	6978      	ldr	r0, [r7, #20]
 800d2d4:	f7f8 fb80 	bl	80059d8 <pbuf_copy>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d003      	beq.n	800d2e6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d2de:	6978      	ldr	r0, [r7, #20]
 800d2e0:	f7f8 fa62 	bl	80057a8 <pbuf_free>
          goto icmperr;
 800d2e4:	e061      	b.n	800d3aa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f7f8 fa5e 	bl	80057a8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	607b      	str	r3, [r7, #4]
 800d2f0:	e00f      	b.n	800d312 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d2f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2f4:	330e      	adds	r3, #14
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	6878      	ldr	r0, [r7, #4]
 800d2fa:	f7f8 f9cf 	bl	800569c <pbuf_remove_header>
 800d2fe:	4603      	mov	r3, r0
 800d300:	2b00      	cmp	r3, #0
 800d302:	d006      	beq.n	800d312 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d304:	4b2e      	ldr	r3, [pc, #184]	; (800d3c0 <icmp_input+0x1f8>)
 800d306:	22c7      	movs	r2, #199	; 0xc7
 800d308:	4930      	ldr	r1, [pc, #192]	; (800d3cc <icmp_input+0x204>)
 800d30a:	482f      	ldr	r0, [pc, #188]	; (800d3c8 <icmp_input+0x200>)
 800d30c:	f001 fb3a 	bl	800e984 <iprintf>
          goto icmperr;
 800d310:	e04b      	b.n	800d3aa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	685b      	ldr	r3, [r3, #4]
 800d316:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d318:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d31a:	4619      	mov	r1, r3
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f7f8 f9ad 	bl	800567c <pbuf_add_header>
 800d322:	4603      	mov	r3, r0
 800d324:	2b00      	cmp	r3, #0
 800d326:	d12b      	bne.n	800d380 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	681a      	ldr	r2, [r3, #0]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d336:	4b20      	ldr	r3, [pc, #128]	; (800d3b8 <icmp_input+0x1f0>)
 800d338:	691a      	ldr	r2, [r3, #16]
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	2200      	movs	r2, #0
 800d342:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	2200      	movs	r2, #0
 800d348:	709a      	strb	r2, [r3, #2]
 800d34a:	2200      	movs	r2, #0
 800d34c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	22ff      	movs	r2, #255	; 0xff
 800d352:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2200      	movs	r2, #0
 800d358:	729a      	strb	r2, [r3, #10]
 800d35a:	2200      	movs	r2, #0
 800d35c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	9302      	str	r3, [sp, #8]
 800d362:	2301      	movs	r3, #1
 800d364:	9301      	str	r3, [sp, #4]
 800d366:	2300      	movs	r3, #0
 800d368:	9300      	str	r3, [sp, #0]
 800d36a:	23ff      	movs	r3, #255	; 0xff
 800d36c:	2200      	movs	r2, #0
 800d36e:	69f9      	ldr	r1, [r7, #28]
 800d370:	6878      	ldr	r0, [r7, #4]
 800d372:	f000 fa75 	bl	800d860 <ip4_output_if>
 800d376:	4603      	mov	r3, r0
 800d378:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d37a:	e001      	b.n	800d380 <icmp_input+0x1b8>
      break;
 800d37c:	bf00      	nop
 800d37e:	e000      	b.n	800d382 <icmp_input+0x1ba>
      break;
 800d380:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f7f8 fa10 	bl	80057a8 <pbuf_free>
  return;
 800d388:	e013      	b.n	800d3b2 <icmp_input+0x1ea>
    goto lenerr;
 800d38a:	bf00      	nop
 800d38c:	e002      	b.n	800d394 <icmp_input+0x1cc>
    goto lenerr;
 800d38e:	bf00      	nop
 800d390:	e000      	b.n	800d394 <icmp_input+0x1cc>
        goto lenerr;
 800d392:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7f8 fa07 	bl	80057a8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d39a:	e00a      	b.n	800d3b2 <icmp_input+0x1ea>
        goto icmperr;
 800d39c:	bf00      	nop
 800d39e:	e004      	b.n	800d3aa <icmp_input+0x1e2>
        goto icmperr;
 800d3a0:	bf00      	nop
 800d3a2:	e002      	b.n	800d3aa <icmp_input+0x1e2>
          goto icmperr;
 800d3a4:	bf00      	nop
 800d3a6:	e000      	b.n	800d3aa <icmp_input+0x1e2>
          goto icmperr;
 800d3a8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f7f8 f9fc 	bl	80057a8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d3b0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d3b2:	3728      	adds	r7, #40	; 0x28
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	20004d40 	.word	0x20004d40
 800d3bc:	20004d54 	.word	0x20004d54
 800d3c0:	08012460 	.word	0x08012460
 800d3c4:	08012498 	.word	0x08012498
 800d3c8:	080124d0 	.word	0x080124d0
 800d3cc:	080124f8 	.word	0x080124f8

0800d3d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b082      	sub	sp, #8
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
 800d3d8:	460b      	mov	r3, r1
 800d3da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d3dc:	78fb      	ldrb	r3, [r7, #3]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	2103      	movs	r1, #3
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f814 	bl	800d410 <icmp_send_response>
}
 800d3e8:	bf00      	nop
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d3fc:	78fb      	ldrb	r3, [r7, #3]
 800d3fe:	461a      	mov	r2, r3
 800d400:	210b      	movs	r1, #11
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 f804 	bl	800d410 <icmp_send_response>
}
 800d408:	bf00      	nop
 800d40a:	3708      	adds	r7, #8
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b08c      	sub	sp, #48	; 0x30
 800d414:	af04      	add	r7, sp, #16
 800d416:	6078      	str	r0, [r7, #4]
 800d418:	460b      	mov	r3, r1
 800d41a:	70fb      	strb	r3, [r7, #3]
 800d41c:	4613      	mov	r3, r2
 800d41e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d420:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d424:	2124      	movs	r1, #36	; 0x24
 800d426:	2022      	movs	r0, #34	; 0x22
 800d428:	f7f7 feda 	bl	80051e0 <pbuf_alloc>
 800d42c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d04c      	beq.n	800d4ce <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d434:	69fb      	ldr	r3, [r7, #28]
 800d436:	895b      	ldrh	r3, [r3, #10]
 800d438:	2b23      	cmp	r3, #35	; 0x23
 800d43a:	d806      	bhi.n	800d44a <icmp_send_response+0x3a>
 800d43c:	4b26      	ldr	r3, [pc, #152]	; (800d4d8 <icmp_send_response+0xc8>)
 800d43e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800d442:	4926      	ldr	r1, [pc, #152]	; (800d4dc <icmp_send_response+0xcc>)
 800d444:	4826      	ldr	r0, [pc, #152]	; (800d4e0 <icmp_send_response+0xd0>)
 800d446:	f001 fa9d 	bl	800e984 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	685b      	ldr	r3, [r3, #4]
 800d454:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	78fa      	ldrb	r2, [r7, #3]
 800d45a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	78ba      	ldrb	r2, [r7, #2]
 800d460:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	2200      	movs	r2, #0
 800d466:	711a      	strb	r2, [r3, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	2200      	movs	r2, #0
 800d470:	719a      	strb	r2, [r3, #6]
 800d472:	2200      	movs	r2, #0
 800d474:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	f103 0008 	add.w	r0, r3, #8
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	685b      	ldr	r3, [r3, #4]
 800d482:	221c      	movs	r2, #28
 800d484:	4619      	mov	r1, r3
 800d486:	f001 fa4d 	bl	800e924 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d490:	f107 030c 	add.w	r3, r7, #12
 800d494:	4618      	mov	r0, r3
 800d496:	f000 f825 	bl	800d4e4 <ip4_route>
 800d49a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d011      	beq.n	800d4c6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	709a      	strb	r2, [r3, #2]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d4ac:	f107 020c 	add.w	r2, r7, #12
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	9302      	str	r3, [sp, #8]
 800d4b4:	2301      	movs	r3, #1
 800d4b6:	9301      	str	r3, [sp, #4]
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	9300      	str	r3, [sp, #0]
 800d4bc:	23ff      	movs	r3, #255	; 0xff
 800d4be:	2100      	movs	r1, #0
 800d4c0:	69f8      	ldr	r0, [r7, #28]
 800d4c2:	f000 f9cd 	bl	800d860 <ip4_output_if>
  }
  pbuf_free(q);
 800d4c6:	69f8      	ldr	r0, [r7, #28]
 800d4c8:	f7f8 f96e 	bl	80057a8 <pbuf_free>
 800d4cc:	e000      	b.n	800d4d0 <icmp_send_response+0xc0>
    return;
 800d4ce:	bf00      	nop
}
 800d4d0:	3720      	adds	r7, #32
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	08012460 	.word	0x08012460
 800d4dc:	0801252c 	.word	0x0801252c
 800d4e0:	080124d0 	.word	0x080124d0

0800d4e4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800d4ec:	4b33      	ldr	r3, [pc, #204]	; (800d5bc <ip4_route+0xd8>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	60fb      	str	r3, [r7, #12]
 800d4f2:	e036      	b.n	800d562 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4fa:	f003 0301 	and.w	r3, r3, #1
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	2b00      	cmp	r3, #0
 800d502:	d02b      	beq.n	800d55c <ip4_route+0x78>
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d50a:	089b      	lsrs	r3, r3, #2
 800d50c:	f003 0301 	and.w	r3, r3, #1
 800d510:	b2db      	uxtb	r3, r3
 800d512:	2b00      	cmp	r3, #0
 800d514:	d022      	beq.n	800d55c <ip4_route+0x78>
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	3304      	adds	r3, #4
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d01d      	beq.n	800d55c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	3304      	adds	r3, #4
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	405a      	eors	r2, r3
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	3308      	adds	r3, #8
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	4013      	ands	r3, r2
 800d534:	2b00      	cmp	r3, #0
 800d536:	d101      	bne.n	800d53c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	e038      	b.n	800d5ae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d542:	f003 0302 	and.w	r3, r3, #2
 800d546:	2b00      	cmp	r3, #0
 800d548:	d108      	bne.n	800d55c <ip4_route+0x78>
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681a      	ldr	r2, [r3, #0]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	330c      	adds	r3, #12
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	429a      	cmp	r2, r3
 800d556:	d101      	bne.n	800d55c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	e028      	b.n	800d5ae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d1c5      	bne.n	800d4f4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d568:	4b15      	ldr	r3, [pc, #84]	; (800d5c0 <ip4_route+0xdc>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d01a      	beq.n	800d5a6 <ip4_route+0xc2>
 800d570:	4b13      	ldr	r3, [pc, #76]	; (800d5c0 <ip4_route+0xdc>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d578:	f003 0301 	and.w	r3, r3, #1
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d012      	beq.n	800d5a6 <ip4_route+0xc2>
 800d580:	4b0f      	ldr	r3, [pc, #60]	; (800d5c0 <ip4_route+0xdc>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d588:	f003 0304 	and.w	r3, r3, #4
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d00a      	beq.n	800d5a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d590:	4b0b      	ldr	r3, [pc, #44]	; (800d5c0 <ip4_route+0xdc>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	3304      	adds	r3, #4
 800d596:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d004      	beq.n	800d5a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	2b7f      	cmp	r3, #127	; 0x7f
 800d5a4:	d101      	bne.n	800d5aa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	e001      	b.n	800d5ae <ip4_route+0xca>
  }

  return netif_default;
 800d5aa:	4b05      	ldr	r3, [pc, #20]	; (800d5c0 <ip4_route+0xdc>)
 800d5ac:	681b      	ldr	r3, [r3, #0]
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3714      	adds	r7, #20
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr
 800d5ba:	bf00      	nop
 800d5bc:	200082a4 	.word	0x200082a4
 800d5c0:	200082a8 	.word	0x200082a8

0800d5c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d5d2:	f003 0301 	and.w	r3, r3, #1
 800d5d6:	b2db      	uxtb	r3, r3
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d016      	beq.n	800d60a <ip4_input_accept+0x46>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	3304      	adds	r3, #4
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d011      	beq.n	800d60a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d5e6:	4b0b      	ldr	r3, [pc, #44]	; (800d614 <ip4_input_accept+0x50>)
 800d5e8:	695a      	ldr	r2, [r3, #20]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	3304      	adds	r3, #4
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d008      	beq.n	800d606 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d5f4:	4b07      	ldr	r3, [pc, #28]	; (800d614 <ip4_input_accept+0x50>)
 800d5f6:	695b      	ldr	r3, [r3, #20]
 800d5f8:	6879      	ldr	r1, [r7, #4]
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f000 fa08 	bl	800da10 <ip4_addr_isbroadcast_u32>
 800d600:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d602:	2b00      	cmp	r3, #0
 800d604:	d001      	beq.n	800d60a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800d606:	2301      	movs	r3, #1
 800d608:	e000      	b.n	800d60c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	20004d40 	.word	0x20004d40

0800d618 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b086      	sub	sp, #24
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
 800d620:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	685b      	ldr	r3, [r3, #4]
 800d626:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	781b      	ldrb	r3, [r3, #0]
 800d62c:	091b      	lsrs	r3, r3, #4
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	2b04      	cmp	r3, #4
 800d632:	d004      	beq.n	800d63e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f7f8 f8b7 	bl	80057a8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d63a:	2300      	movs	r3, #0
 800d63c:	e107      	b.n	800d84e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	f003 030f 	and.w	r3, r3, #15
 800d646:	b2db      	uxtb	r3, r3
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	885b      	ldrh	r3, [r3, #2]
 800d652:	b29b      	uxth	r3, r3
 800d654:	4618      	mov	r0, r3
 800d656:	f7f6 fd49 	bl	80040ec <lwip_htons>
 800d65a:	4603      	mov	r3, r0
 800d65c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	891b      	ldrh	r3, [r3, #8]
 800d662:	89ba      	ldrh	r2, [r7, #12]
 800d664:	429a      	cmp	r2, r3
 800d666:	d204      	bcs.n	800d672 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800d668:	89bb      	ldrh	r3, [r7, #12]
 800d66a:	4619      	mov	r1, r3
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f7f7 ff15 	bl	800549c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	895b      	ldrh	r3, [r3, #10]
 800d676:	89fa      	ldrh	r2, [r7, #14]
 800d678:	429a      	cmp	r2, r3
 800d67a:	d807      	bhi.n	800d68c <ip4_input+0x74>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	891b      	ldrh	r3, [r3, #8]
 800d680:	89ba      	ldrh	r2, [r7, #12]
 800d682:	429a      	cmp	r2, r3
 800d684:	d802      	bhi.n	800d68c <ip4_input+0x74>
 800d686:	89fb      	ldrh	r3, [r7, #14]
 800d688:	2b13      	cmp	r3, #19
 800d68a:	d804      	bhi.n	800d696 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7f8 f88b 	bl	80057a8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d692:	2300      	movs	r3, #0
 800d694:	e0db      	b.n	800d84e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	691b      	ldr	r3, [r3, #16]
 800d69a:	4a6f      	ldr	r2, [pc, #444]	; (800d858 <ip4_input+0x240>)
 800d69c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	4a6d      	ldr	r2, [pc, #436]	; (800d858 <ip4_input+0x240>)
 800d6a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d6a6:	4b6c      	ldr	r3, [pc, #432]	; (800d858 <ip4_input+0x240>)
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6ae:	2be0      	cmp	r3, #224	; 0xe0
 800d6b0:	d112      	bne.n	800d6d8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d6b8:	f003 0301 	and.w	r3, r3, #1
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d007      	beq.n	800d6d2 <ip4_input+0xba>
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	3304      	adds	r3, #4
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d002      	beq.n	800d6d2 <ip4_input+0xba>
      netif = inp;
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	613b      	str	r3, [r7, #16]
 800d6d0:	e02a      	b.n	800d728 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	613b      	str	r3, [r7, #16]
 800d6d6:	e027      	b.n	800d728 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800d6d8:	6838      	ldr	r0, [r7, #0]
 800d6da:	f7ff ff73 	bl	800d5c4 <ip4_input_accept>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <ip4_input+0xd2>
      netif = inp;
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	613b      	str	r3, [r7, #16]
 800d6e8:	e01e      	b.n	800d728 <ip4_input+0x110>
    } else {
      netif = NULL;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d6ee:	4b5a      	ldr	r3, [pc, #360]	; (800d858 <ip4_input+0x240>)
 800d6f0:	695b      	ldr	r3, [r3, #20]
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	2b7f      	cmp	r3, #127	; 0x7f
 800d6f6:	d017      	beq.n	800d728 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800d6f8:	4b58      	ldr	r3, [pc, #352]	; (800d85c <ip4_input+0x244>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	613b      	str	r3, [r7, #16]
 800d6fe:	e00e      	b.n	800d71e <ip4_input+0x106>
          if (netif == inp) {
 800d700:	693a      	ldr	r2, [r7, #16]
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	429a      	cmp	r2, r3
 800d706:	d006      	beq.n	800d716 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800d708:	6938      	ldr	r0, [r7, #16]
 800d70a:	f7ff ff5b 	bl	800d5c4 <ip4_input_accept>
 800d70e:	4603      	mov	r3, r0
 800d710:	2b00      	cmp	r3, #0
 800d712:	d108      	bne.n	800d726 <ip4_input+0x10e>
 800d714:	e000      	b.n	800d718 <ip4_input+0x100>
            continue;
 800d716:	bf00      	nop
        NETIF_FOREACH(netif) {
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	613b      	str	r3, [r7, #16]
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d1ed      	bne.n	800d700 <ip4_input+0xe8>
 800d724:	e000      	b.n	800d728 <ip4_input+0x110>
            break;
 800d726:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d728:	4b4b      	ldr	r3, [pc, #300]	; (800d858 <ip4_input+0x240>)
 800d72a:	691b      	ldr	r3, [r3, #16]
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	4618      	mov	r0, r3
 800d730:	f000 f96e 	bl	800da10 <ip4_addr_isbroadcast_u32>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d105      	bne.n	800d746 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d73a:	4b47      	ldr	r3, [pc, #284]	; (800d858 <ip4_input+0x240>)
 800d73c:	691b      	ldr	r3, [r3, #16]
 800d73e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d742:	2be0      	cmp	r3, #224	; 0xe0
 800d744:	d104      	bne.n	800d750 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f7f8 f82e 	bl	80057a8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d74c:	2300      	movs	r3, #0
 800d74e:	e07e      	b.n	800d84e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d104      	bne.n	800d760 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f7f8 f826 	bl	80057a8 <pbuf_free>
    return ERR_OK;
 800d75c:	2300      	movs	r3, #0
 800d75e:	e076      	b.n	800d84e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	88db      	ldrh	r3, [r3, #6]
 800d764:	b29b      	uxth	r3, r3
 800d766:	461a      	mov	r2, r3
 800d768:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d76c:	4013      	ands	r3, r2
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00b      	beq.n	800d78a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f000 fc92 	bl	800e09c <ip4_reass>
 800d778:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d101      	bne.n	800d784 <ip4_input+0x16c>
      return ERR_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	e064      	b.n	800d84e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	685b      	ldr	r3, [r3, #4]
 800d788:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d78a:	4a33      	ldr	r2, [pc, #204]	; (800d858 <ip4_input+0x240>)
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d790:	4a31      	ldr	r2, [pc, #196]	; (800d858 <ip4_input+0x240>)
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d796:	4a30      	ldr	r2, [pc, #192]	; (800d858 <ip4_input+0x240>)
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	f003 030f 	and.w	r3, r3, #15
 800d7a4:	b2db      	uxtb	r3, r3
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	4b2a      	ldr	r3, [pc, #168]	; (800d858 <ip4_input+0x240>)
 800d7ae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d7b0:	89fb      	ldrh	r3, [r7, #14]
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7f7 ff71 	bl	800569c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	7a5b      	ldrb	r3, [r3, #9]
 800d7be:	2b11      	cmp	r3, #17
 800d7c0:	d006      	beq.n	800d7d0 <ip4_input+0x1b8>
 800d7c2:	2b11      	cmp	r3, #17
 800d7c4:	dc13      	bgt.n	800d7ee <ip4_input+0x1d6>
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d00c      	beq.n	800d7e4 <ip4_input+0x1cc>
 800d7ca:	2b06      	cmp	r3, #6
 800d7cc:	d005      	beq.n	800d7da <ip4_input+0x1c2>
 800d7ce:	e00e      	b.n	800d7ee <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800d7d0:	6839      	ldr	r1, [r7, #0]
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7fe fc68 	bl	800c0a8 <udp_input>
        break;
 800d7d8:	e026      	b.n	800d828 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800d7da:	6839      	ldr	r1, [r7, #0]
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f7fa f889 	bl	80078f4 <tcp_input>
        break;
 800d7e2:	e021      	b.n	800d828 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800d7e4:	6839      	ldr	r1, [r7, #0]
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f7ff fcee 	bl	800d1c8 <icmp_input>
        break;
 800d7ec:	e01c      	b.n	800d828 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d7ee:	4b1a      	ldr	r3, [pc, #104]	; (800d858 <ip4_input+0x240>)
 800d7f0:	695b      	ldr	r3, [r3, #20]
 800d7f2:	6939      	ldr	r1, [r7, #16]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f000 f90b 	bl	800da10 <ip4_addr_isbroadcast_u32>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d10f      	bne.n	800d820 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d800:	4b15      	ldr	r3, [pc, #84]	; (800d858 <ip4_input+0x240>)
 800d802:	695b      	ldr	r3, [r3, #20]
 800d804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d808:	2be0      	cmp	r3, #224	; 0xe0
 800d80a:	d009      	beq.n	800d820 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d80c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d810:	4619      	mov	r1, r3
 800d812:	6878      	ldr	r0, [r7, #4]
 800d814:	f7f7 ffb5 	bl	8005782 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d818:	2102      	movs	r1, #2
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f7ff fdd8 	bl	800d3d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f7f7 ffc1 	bl	80057a8 <pbuf_free>
        break;
 800d826:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d828:	4b0b      	ldr	r3, [pc, #44]	; (800d858 <ip4_input+0x240>)
 800d82a:	2200      	movs	r2, #0
 800d82c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d82e:	4b0a      	ldr	r3, [pc, #40]	; (800d858 <ip4_input+0x240>)
 800d830:	2200      	movs	r2, #0
 800d832:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d834:	4b08      	ldr	r3, [pc, #32]	; (800d858 <ip4_input+0x240>)
 800d836:	2200      	movs	r2, #0
 800d838:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d83a:	4b07      	ldr	r3, [pc, #28]	; (800d858 <ip4_input+0x240>)
 800d83c:	2200      	movs	r2, #0
 800d83e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d840:	4b05      	ldr	r3, [pc, #20]	; (800d858 <ip4_input+0x240>)
 800d842:	2200      	movs	r2, #0
 800d844:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d846:	4b04      	ldr	r3, [pc, #16]	; (800d858 <ip4_input+0x240>)
 800d848:	2200      	movs	r2, #0
 800d84a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d84c:	2300      	movs	r3, #0
}
 800d84e:	4618      	mov	r0, r3
 800d850:	3718      	adds	r7, #24
 800d852:	46bd      	mov	sp, r7
 800d854:	bd80      	pop	{r7, pc}
 800d856:	bf00      	nop
 800d858:	20004d40 	.word	0x20004d40
 800d85c:	200082a4 	.word	0x200082a4

0800d860 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b08a      	sub	sp, #40	; 0x28
 800d864:	af04      	add	r7, sp, #16
 800d866:	60f8      	str	r0, [r7, #12]
 800d868:	60b9      	str	r1, [r7, #8]
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d009      	beq.n	800d88c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d003      	beq.n	800d886 <ip4_output_if+0x26>
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d102      	bne.n	800d88c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d888:	3304      	adds	r3, #4
 800d88a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d88c:	78fa      	ldrb	r2, [r7, #3]
 800d88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d890:	9302      	str	r3, [sp, #8]
 800d892:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d896:	9301      	str	r3, [sp, #4]
 800d898:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d89c:	9300      	str	r3, [sp, #0]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	6979      	ldr	r1, [r7, #20]
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	f000 f805 	bl	800d8b4 <ip4_output_if_src>
 800d8aa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3718      	adds	r7, #24
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b088      	sub	sp, #32
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
 800d8c0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	7b9b      	ldrb	r3, [r3, #14]
 800d8c6:	2b01      	cmp	r3, #1
 800d8c8:	d006      	beq.n	800d8d8 <ip4_output_if_src+0x24>
 800d8ca:	4b4b      	ldr	r3, [pc, #300]	; (800d9f8 <ip4_output_if_src+0x144>)
 800d8cc:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d8d0:	494a      	ldr	r1, [pc, #296]	; (800d9fc <ip4_output_if_src+0x148>)
 800d8d2:	484b      	ldr	r0, [pc, #300]	; (800da00 <ip4_output_if_src+0x14c>)
 800d8d4:	f001 f856 	bl	800e984 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d060      	beq.n	800d9a0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d8de:	2314      	movs	r3, #20
 800d8e0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d8e2:	2114      	movs	r1, #20
 800d8e4:	68f8      	ldr	r0, [r7, #12]
 800d8e6:	f7f7 fec9 	bl	800567c <pbuf_add_header>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d002      	beq.n	800d8f6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d8f0:	f06f 0301 	mvn.w	r3, #1
 800d8f4:	e07c      	b.n	800d9f0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	685b      	ldr	r3, [r3, #4]
 800d8fa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	895b      	ldrh	r3, [r3, #10]
 800d900:	2b13      	cmp	r3, #19
 800d902:	d806      	bhi.n	800d912 <ip4_output_if_src+0x5e>
 800d904:	4b3c      	ldr	r3, [pc, #240]	; (800d9f8 <ip4_output_if_src+0x144>)
 800d906:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d90a:	493e      	ldr	r1, [pc, #248]	; (800da04 <ip4_output_if_src+0x150>)
 800d90c:	483c      	ldr	r0, [pc, #240]	; (800da00 <ip4_output_if_src+0x14c>)
 800d90e:	f001 f839 	bl	800e984 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	78fa      	ldrb	r2, [r7, #3]
 800d916:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d91e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	69fb      	ldr	r3, [r7, #28]
 800d926:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d928:	8b7b      	ldrh	r3, [r7, #26]
 800d92a:	089b      	lsrs	r3, r3, #2
 800d92c:	b29b      	uxth	r3, r3
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d934:	b2da      	uxtb	r2, r3
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d940:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	891b      	ldrh	r3, [r3, #8]
 800d946:	4618      	mov	r0, r3
 800d948:	f7f6 fbd0 	bl	80040ec <lwip_htons>
 800d94c:	4603      	mov	r3, r0
 800d94e:	461a      	mov	r2, r3
 800d950:	69fb      	ldr	r3, [r7, #28]
 800d952:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	2200      	movs	r2, #0
 800d958:	719a      	strb	r2, [r3, #6]
 800d95a:	2200      	movs	r2, #0
 800d95c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d95e:	4b2a      	ldr	r3, [pc, #168]	; (800da08 <ip4_output_if_src+0x154>)
 800d960:	881b      	ldrh	r3, [r3, #0]
 800d962:	4618      	mov	r0, r3
 800d964:	f7f6 fbc2 	bl	80040ec <lwip_htons>
 800d968:	4603      	mov	r3, r0
 800d96a:	461a      	mov	r2, r3
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d970:	4b25      	ldr	r3, [pc, #148]	; (800da08 <ip4_output_if_src+0x154>)
 800d972:	881b      	ldrh	r3, [r3, #0]
 800d974:	3301      	adds	r3, #1
 800d976:	b29a      	uxth	r2, r3
 800d978:	4b23      	ldr	r3, [pc, #140]	; (800da08 <ip4_output_if_src+0x154>)
 800d97a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d104      	bne.n	800d98c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d982:	4b22      	ldr	r3, [pc, #136]	; (800da0c <ip4_output_if_src+0x158>)
 800d984:	681a      	ldr	r2, [r3, #0]
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	60da      	str	r2, [r3, #12]
 800d98a:	e003      	b.n	800d994 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	681a      	ldr	r2, [r3, #0]
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	2200      	movs	r2, #0
 800d998:	729a      	strb	r2, [r3, #10]
 800d99a:	2200      	movs	r2, #0
 800d99c:	72da      	strb	r2, [r3, #11]
 800d99e:	e00f      	b.n	800d9c0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	895b      	ldrh	r3, [r3, #10]
 800d9a4:	2b13      	cmp	r3, #19
 800d9a6:	d802      	bhi.n	800d9ae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d9a8:	f06f 0301 	mvn.w	r3, #1
 800d9ac:	e020      	b.n	800d9f0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	691b      	ldr	r3, [r3, #16]
 800d9b8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d9ba:	f107 0314 	add.w	r3, r7, #20
 800d9be:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00c      	beq.n	800d9e2 <ip4_output_if_src+0x12e>
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	891a      	ldrh	r2, [r3, #8]
 800d9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d906      	bls.n	800d9e2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800d9d4:	687a      	ldr	r2, [r7, #4]
 800d9d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f000 fd53 	bl	800e484 <ip4_frag>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	e006      	b.n	800d9f0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e4:	695b      	ldr	r3, [r3, #20]
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	68f9      	ldr	r1, [r7, #12]
 800d9ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9ec:	4798      	blx	r3
 800d9ee:	4603      	mov	r3, r0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3720      	adds	r7, #32
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}
 800d9f8:	08012558 	.word	0x08012558
 800d9fc:	0801258c 	.word	0x0801258c
 800da00:	08012598 	.word	0x08012598
 800da04:	080125c0 	.word	0x080125c0
 800da08:	20008402 	.word	0x20008402
 800da0c:	08012998 	.word	0x08012998

0800da10 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	6078      	str	r0, [r7, #4]
 800da18:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da24:	d002      	beq.n	800da2c <ip4_addr_isbroadcast_u32+0x1c>
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d101      	bne.n	800da30 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800da2c:	2301      	movs	r3, #1
 800da2e:	e02a      	b.n	800da86 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800da36:	f003 0302 	and.w	r3, r3, #2
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d101      	bne.n	800da42 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800da3e:	2300      	movs	r3, #0
 800da40:	e021      	b.n	800da86 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	3304      	adds	r3, #4
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	687a      	ldr	r2, [r7, #4]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d101      	bne.n	800da52 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	e019      	b.n	800da86 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	3304      	adds	r3, #4
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	405a      	eors	r2, r3
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	3308      	adds	r3, #8
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4013      	ands	r3, r2
 800da64:	2b00      	cmp	r3, #0
 800da66:	d10d      	bne.n	800da84 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	3308      	adds	r3, #8
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	43da      	mvns	r2, r3
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	3308      	adds	r3, #8
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800da7c:	429a      	cmp	r2, r3
 800da7e:	d101      	bne.n	800da84 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800da80:	2301      	movs	r3, #1
 800da82:	e000      	b.n	800da86 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800da84:	2300      	movs	r3, #0
  }
}
 800da86:	4618      	mov	r0, r3
 800da88:	3714      	adds	r7, #20
 800da8a:	46bd      	mov	sp, r7
 800da8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da90:	4770      	bx	lr
	...

0800da94 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800da9a:	2300      	movs	r3, #0
 800da9c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800da9e:	4b12      	ldr	r3, [pc, #72]	; (800dae8 <ip_reass_tmr+0x54>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800daa4:	e018      	b.n	800dad8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	7fdb      	ldrb	r3, [r3, #31]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d00b      	beq.n	800dac6 <ip_reass_tmr+0x32>
      r->timer--;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	7fdb      	ldrb	r3, [r3, #31]
 800dab2:	3b01      	subs	r3, #1
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	60fb      	str	r3, [r7, #12]
 800dac4:	e008      	b.n	800dad8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800dad0:	68b9      	ldr	r1, [r7, #8]
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 f80a 	bl	800daec <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1e3      	bne.n	800daa6 <ip_reass_tmr+0x12>
    }
  }
}
 800dade:	bf00      	nop
 800dae0:	bf00      	nop
 800dae2:	3710      	adds	r7, #16
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	20008404 	.word	0x20008404

0800daec <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b088      	sub	sp, #32
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800daf6:	2300      	movs	r3, #0
 800daf8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800dafa:	683a      	ldr	r2, [r7, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	429a      	cmp	r2, r3
 800db00:	d105      	bne.n	800db0e <ip_reass_free_complete_datagram+0x22>
 800db02:	4b45      	ldr	r3, [pc, #276]	; (800dc18 <ip_reass_free_complete_datagram+0x12c>)
 800db04:	22ab      	movs	r2, #171	; 0xab
 800db06:	4945      	ldr	r1, [pc, #276]	; (800dc1c <ip_reass_free_complete_datagram+0x130>)
 800db08:	4845      	ldr	r0, [pc, #276]	; (800dc20 <ip_reass_free_complete_datagram+0x134>)
 800db0a:	f000 ff3b 	bl	800e984 <iprintf>
  if (prev != NULL) {
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d00a      	beq.n	800db2a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d005      	beq.n	800db2a <ip_reass_free_complete_datagram+0x3e>
 800db1e:	4b3e      	ldr	r3, [pc, #248]	; (800dc18 <ip_reass_free_complete_datagram+0x12c>)
 800db20:	22ad      	movs	r2, #173	; 0xad
 800db22:	4940      	ldr	r1, [pc, #256]	; (800dc24 <ip_reass_free_complete_datagram+0x138>)
 800db24:	483e      	ldr	r0, [pc, #248]	; (800dc20 <ip_reass_free_complete_datagram+0x134>)
 800db26:	f000 ff2d 	bl	800e984 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	685b      	ldr	r3, [r3, #4]
 800db30:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	889b      	ldrh	r3, [r3, #4]
 800db36:	b29b      	uxth	r3, r3
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d12a      	bne.n	800db92 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800db42:	697b      	ldr	r3, [r7, #20]
 800db44:	681a      	ldr	r2, [r3, #0]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800db4a:	69bb      	ldr	r3, [r7, #24]
 800db4c:	6858      	ldr	r0, [r3, #4]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	3308      	adds	r3, #8
 800db52:	2214      	movs	r2, #20
 800db54:	4619      	mov	r1, r3
 800db56:	f000 fee5 	bl	800e924 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800db5a:	2101      	movs	r1, #1
 800db5c:	69b8      	ldr	r0, [r7, #24]
 800db5e:	f7ff fc47 	bl	800d3f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800db62:	69b8      	ldr	r0, [r7, #24]
 800db64:	f7f7 fea8 	bl	80058b8 <pbuf_clen>
 800db68:	4603      	mov	r3, r0
 800db6a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800db6c:	8bfa      	ldrh	r2, [r7, #30]
 800db6e:	8a7b      	ldrh	r3, [r7, #18]
 800db70:	4413      	add	r3, r2
 800db72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800db76:	db05      	blt.n	800db84 <ip_reass_free_complete_datagram+0x98>
 800db78:	4b27      	ldr	r3, [pc, #156]	; (800dc18 <ip_reass_free_complete_datagram+0x12c>)
 800db7a:	22bc      	movs	r2, #188	; 0xbc
 800db7c:	492a      	ldr	r1, [pc, #168]	; (800dc28 <ip_reass_free_complete_datagram+0x13c>)
 800db7e:	4828      	ldr	r0, [pc, #160]	; (800dc20 <ip_reass_free_complete_datagram+0x134>)
 800db80:	f000 ff00 	bl	800e984 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800db84:	8bfa      	ldrh	r2, [r7, #30]
 800db86:	8a7b      	ldrh	r3, [r7, #18]
 800db88:	4413      	add	r3, r2
 800db8a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800db8c:	69b8      	ldr	r0, [r7, #24]
 800db8e:	f7f7 fe0b 	bl	80057a8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800db98:	e01f      	b.n	800dbda <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800db9a:	69bb      	ldr	r3, [r7, #24]
 800db9c:	685b      	ldr	r3, [r3, #4]
 800db9e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800dba0:	69bb      	ldr	r3, [r7, #24]
 800dba2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	f7f7 fe84 	bl	80058b8 <pbuf_clen>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dbb4:	8bfa      	ldrh	r2, [r7, #30]
 800dbb6:	8a7b      	ldrh	r3, [r7, #18]
 800dbb8:	4413      	add	r3, r2
 800dbba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbbe:	db05      	blt.n	800dbcc <ip_reass_free_complete_datagram+0xe0>
 800dbc0:	4b15      	ldr	r3, [pc, #84]	; (800dc18 <ip_reass_free_complete_datagram+0x12c>)
 800dbc2:	22cc      	movs	r2, #204	; 0xcc
 800dbc4:	4918      	ldr	r1, [pc, #96]	; (800dc28 <ip_reass_free_complete_datagram+0x13c>)
 800dbc6:	4816      	ldr	r0, [pc, #88]	; (800dc20 <ip_reass_free_complete_datagram+0x134>)
 800dbc8:	f000 fedc 	bl	800e984 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800dbcc:	8bfa      	ldrh	r2, [r7, #30]
 800dbce:	8a7b      	ldrh	r3, [r7, #18]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f7f7 fde7 	bl	80057a8 <pbuf_free>
  while (p != NULL) {
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d1dc      	bne.n	800db9a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800dbe0:	6839      	ldr	r1, [r7, #0]
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f000 f8c2 	bl	800dd6c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800dbe8:	4b10      	ldr	r3, [pc, #64]	; (800dc2c <ip_reass_free_complete_datagram+0x140>)
 800dbea:	881b      	ldrh	r3, [r3, #0]
 800dbec:	8bfa      	ldrh	r2, [r7, #30]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d905      	bls.n	800dbfe <ip_reass_free_complete_datagram+0x112>
 800dbf2:	4b09      	ldr	r3, [pc, #36]	; (800dc18 <ip_reass_free_complete_datagram+0x12c>)
 800dbf4:	22d2      	movs	r2, #210	; 0xd2
 800dbf6:	490e      	ldr	r1, [pc, #56]	; (800dc30 <ip_reass_free_complete_datagram+0x144>)
 800dbf8:	4809      	ldr	r0, [pc, #36]	; (800dc20 <ip_reass_free_complete_datagram+0x134>)
 800dbfa:	f000 fec3 	bl	800e984 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800dbfe:	4b0b      	ldr	r3, [pc, #44]	; (800dc2c <ip_reass_free_complete_datagram+0x140>)
 800dc00:	881a      	ldrh	r2, [r3, #0]
 800dc02:	8bfb      	ldrh	r3, [r7, #30]
 800dc04:	1ad3      	subs	r3, r2, r3
 800dc06:	b29a      	uxth	r2, r3
 800dc08:	4b08      	ldr	r3, [pc, #32]	; (800dc2c <ip_reass_free_complete_datagram+0x140>)
 800dc0a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800dc0c:	8bfb      	ldrh	r3, [r7, #30]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3720      	adds	r7, #32
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	080125f0 	.word	0x080125f0
 800dc1c:	0801262c 	.word	0x0801262c
 800dc20:	08012638 	.word	0x08012638
 800dc24:	08012660 	.word	0x08012660
 800dc28:	08012674 	.word	0x08012674
 800dc2c:	20008408 	.word	0x20008408
 800dc30:	08012694 	.word	0x08012694

0800dc34 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b08a      	sub	sp, #40	; 0x28
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800dc42:	2300      	movs	r3, #0
 800dc44:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800dc46:	2300      	movs	r3, #0
 800dc48:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800dc52:	4b28      	ldr	r3, [pc, #160]	; (800dcf4 <ip_reass_remove_oldest_datagram+0xc0>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dc58:	e030      	b.n	800dcbc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800dc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5c:	695a      	ldr	r2, [r3, #20]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d10c      	bne.n	800dc80 <ip_reass_remove_oldest_datagram+0x4c>
 800dc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc68:	699a      	ldr	r2, [r3, #24]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	691b      	ldr	r3, [r3, #16]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d106      	bne.n	800dc80 <ip_reass_remove_oldest_datagram+0x4c>
 800dc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc74:	899a      	ldrh	r2, [r3, #12]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	889b      	ldrh	r3, [r3, #4]
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d014      	beq.n	800dcaa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800dc80:	693b      	ldr	r3, [r7, #16]
 800dc82:	3301      	adds	r3, #1
 800dc84:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800dc86:	6a3b      	ldr	r3, [r7, #32]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d104      	bne.n	800dc96 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	61bb      	str	r3, [r7, #24]
 800dc94:	e009      	b.n	800dcaa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800dc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc98:	7fda      	ldrb	r2, [r3, #31]
 800dc9a:	6a3b      	ldr	r3, [r7, #32]
 800dc9c:	7fdb      	ldrb	r3, [r3, #31]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d803      	bhi.n	800dcaa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800dca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800dcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d001      	beq.n	800dcb6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800dcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800dcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800dcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d1cb      	bne.n	800dc5a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800dcc2:	6a3b      	ldr	r3, [r7, #32]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d008      	beq.n	800dcda <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800dcc8:	69b9      	ldr	r1, [r7, #24]
 800dcca:	6a38      	ldr	r0, [r7, #32]
 800dccc:	f7ff ff0e 	bl	800daec <ip_reass_free_complete_datagram>
 800dcd0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800dcd2:	697a      	ldr	r2, [r7, #20]
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	4413      	add	r3, r2
 800dcd8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800dcda:	697a      	ldr	r2, [r7, #20]
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	da02      	bge.n	800dce8 <ip_reass_remove_oldest_datagram+0xb4>
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	dcac      	bgt.n	800dc42 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800dce8:	697b      	ldr	r3, [r7, #20]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3728      	adds	r7, #40	; 0x28
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	20008404 	.word	0x20008404

0800dcf8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dd02:	2004      	movs	r0, #4
 800dd04:	f7f6 fe6a 	bl	80049dc <memp_malloc>
 800dd08:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d110      	bne.n	800dd32 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800dd10:	6839      	ldr	r1, [r7, #0]
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f7ff ff8e 	bl	800dc34 <ip_reass_remove_oldest_datagram>
 800dd18:	4602      	mov	r2, r0
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	dc03      	bgt.n	800dd28 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800dd20:	2004      	movs	r0, #4
 800dd22:	f7f6 fe5b 	bl	80049dc <memp_malloc>
 800dd26:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d101      	bne.n	800dd32 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800dd2e:	2300      	movs	r3, #0
 800dd30:	e016      	b.n	800dd60 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800dd32:	2220      	movs	r2, #32
 800dd34:	2100      	movs	r1, #0
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	f000 fe1c 	bl	800e974 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	220f      	movs	r2, #15
 800dd40:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800dd42:	4b09      	ldr	r3, [pc, #36]	; (800dd68 <ip_reass_enqueue_new_datagram+0x70>)
 800dd44:	681a      	ldr	r2, [r3, #0]
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800dd4a:	4a07      	ldr	r2, [pc, #28]	; (800dd68 <ip_reass_enqueue_new_datagram+0x70>)
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	3308      	adds	r3, #8
 800dd54:	2214      	movs	r2, #20
 800dd56:	6879      	ldr	r1, [r7, #4]
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f000 fde3 	bl	800e924 <memcpy>
  return ipr;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
}
 800dd60:	4618      	mov	r0, r3
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}
 800dd68:	20008404 	.word	0x20008404

0800dd6c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800dd76:	4b10      	ldr	r3, [pc, #64]	; (800ddb8 <ip_reass_dequeue_datagram+0x4c>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	687a      	ldr	r2, [r7, #4]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d104      	bne.n	800dd8a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4a0c      	ldr	r2, [pc, #48]	; (800ddb8 <ip_reass_dequeue_datagram+0x4c>)
 800dd86:	6013      	str	r3, [r2, #0]
 800dd88:	e00d      	b.n	800dda6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d106      	bne.n	800dd9e <ip_reass_dequeue_datagram+0x32>
 800dd90:	4b0a      	ldr	r3, [pc, #40]	; (800ddbc <ip_reass_dequeue_datagram+0x50>)
 800dd92:	f240 1245 	movw	r2, #325	; 0x145
 800dd96:	490a      	ldr	r1, [pc, #40]	; (800ddc0 <ip_reass_dequeue_datagram+0x54>)
 800dd98:	480a      	ldr	r0, [pc, #40]	; (800ddc4 <ip_reass_dequeue_datagram+0x58>)
 800dd9a:	f000 fdf3 	bl	800e984 <iprintf>
    prev->next = ipr->next;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681a      	ldr	r2, [r3, #0]
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800dda6:	6879      	ldr	r1, [r7, #4]
 800dda8:	2004      	movs	r0, #4
 800ddaa:	f7f6 fe87 	bl	8004abc <memp_free>
}
 800ddae:	bf00      	nop
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}
 800ddb6:	bf00      	nop
 800ddb8:	20008404 	.word	0x20008404
 800ddbc:	080125f0 	.word	0x080125f0
 800ddc0:	080126b8 	.word	0x080126b8
 800ddc4:	08012638 	.word	0x08012638

0800ddc8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b08c      	sub	sp, #48	; 0x30
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800ddd8:	2301      	movs	r3, #1
 800ddda:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	885b      	ldrh	r3, [r3, #2]
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7f6 f97f 	bl	80040ec <lwip_htons>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	781b      	ldrb	r3, [r3, #0]
 800ddf6:	f003 030f 	and.w	r3, r3, #15
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	009b      	lsls	r3, r3, #2
 800ddfe:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800de00:	7e7b      	ldrb	r3, [r7, #25]
 800de02:	b29b      	uxth	r3, r3
 800de04:	8b7a      	ldrh	r2, [r7, #26]
 800de06:	429a      	cmp	r2, r3
 800de08:	d202      	bcs.n	800de10 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de0a:	f04f 33ff 	mov.w	r3, #4294967295
 800de0e:	e135      	b.n	800e07c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800de10:	7e7b      	ldrb	r3, [r7, #25]
 800de12:	b29b      	uxth	r3, r3
 800de14:	8b7a      	ldrh	r2, [r7, #26]
 800de16:	1ad3      	subs	r3, r2, r3
 800de18:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800de1a:	69fb      	ldr	r3, [r7, #28]
 800de1c:	88db      	ldrh	r3, [r3, #6]
 800de1e:	b29b      	uxth	r3, r3
 800de20:	4618      	mov	r0, r3
 800de22:	f7f6 f963 	bl	80040ec <lwip_htons>
 800de26:	4603      	mov	r3, r0
 800de28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	00db      	lsls	r3, r3, #3
 800de30:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800de38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3a:	2200      	movs	r2, #0
 800de3c:	701a      	strb	r2, [r3, #0]
 800de3e:	2200      	movs	r2, #0
 800de40:	705a      	strb	r2, [r3, #1]
 800de42:	2200      	movs	r2, #0
 800de44:	709a      	strb	r2, [r3, #2]
 800de46:	2200      	movs	r2, #0
 800de48:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800de4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de4c:	8afa      	ldrh	r2, [r7, #22]
 800de4e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800de50:	8afa      	ldrh	r2, [r7, #22]
 800de52:	8b7b      	ldrh	r3, [r7, #26]
 800de54:	4413      	add	r3, r2
 800de56:	b29a      	uxth	r2, r3
 800de58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800de5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5e:	88db      	ldrh	r3, [r3, #6]
 800de60:	b29b      	uxth	r3, r3
 800de62:	8afa      	ldrh	r2, [r7, #22]
 800de64:	429a      	cmp	r2, r3
 800de66:	d902      	bls.n	800de6e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800de68:	f04f 33ff 	mov.w	r3, #4294967295
 800de6c:	e106      	b.n	800e07c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	627b      	str	r3, [r7, #36]	; 0x24
 800de74:	e068      	b.n	800df48 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800de76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800de7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7e:	889b      	ldrh	r3, [r3, #4]
 800de80:	b29a      	uxth	r2, r3
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	889b      	ldrh	r3, [r3, #4]
 800de86:	b29b      	uxth	r3, r3
 800de88:	429a      	cmp	r2, r3
 800de8a:	d235      	bcs.n	800def8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de90:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800de92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de94:	2b00      	cmp	r3, #0
 800de96:	d020      	beq.n	800deda <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800de98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de9a:	889b      	ldrh	r3, [r3, #4]
 800de9c:	b29a      	uxth	r2, r3
 800de9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea0:	88db      	ldrh	r3, [r3, #6]
 800dea2:	b29b      	uxth	r3, r3
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d307      	bcc.n	800deb8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800dea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deaa:	88db      	ldrh	r3, [r3, #6]
 800deac:	b29a      	uxth	r2, r3
 800deae:	693b      	ldr	r3, [r7, #16]
 800deb0:	889b      	ldrh	r3, [r3, #4]
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d902      	bls.n	800debe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800deb8:	f04f 33ff 	mov.w	r3, #4294967295
 800debc:	e0de      	b.n	800e07c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800debe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec0:	68ba      	ldr	r2, [r7, #8]
 800dec2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800dec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec6:	88db      	ldrh	r3, [r3, #6]
 800dec8:	b29a      	uxth	r2, r3
 800deca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800decc:	889b      	ldrh	r3, [r3, #4]
 800dece:	b29b      	uxth	r3, r3
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d03d      	beq.n	800df50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ded4:	2300      	movs	r3, #0
 800ded6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ded8:	e03a      	b.n	800df50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800deda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dedc:	88db      	ldrh	r3, [r3, #6]
 800dede:	b29a      	uxth	r2, r3
 800dee0:	693b      	ldr	r3, [r7, #16]
 800dee2:	889b      	ldrh	r3, [r3, #4]
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d902      	bls.n	800def0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800deea:	f04f 33ff 	mov.w	r3, #4294967295
 800deee:	e0c5      	b.n	800e07c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	68ba      	ldr	r2, [r7, #8]
 800def4:	605a      	str	r2, [r3, #4]
      break;
 800def6:	e02b      	b.n	800df50 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800def8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defa:	889b      	ldrh	r3, [r3, #4]
 800defc:	b29a      	uxth	r2, r3
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	889b      	ldrh	r3, [r3, #4]
 800df02:	b29b      	uxth	r3, r3
 800df04:	429a      	cmp	r2, r3
 800df06:	d102      	bne.n	800df0e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df08:	f04f 33ff 	mov.w	r3, #4294967295
 800df0c:	e0b6      	b.n	800e07c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800df0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df10:	889b      	ldrh	r3, [r3, #4]
 800df12:	b29a      	uxth	r2, r3
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	88db      	ldrh	r3, [r3, #6]
 800df18:	b29b      	uxth	r3, r3
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d202      	bcs.n	800df24 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800df1e:	f04f 33ff 	mov.w	r3, #4294967295
 800df22:	e0ab      	b.n	800e07c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800df24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df26:	2b00      	cmp	r3, #0
 800df28:	d009      	beq.n	800df3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800df2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2c:	88db      	ldrh	r3, [r3, #6]
 800df2e:	b29a      	uxth	r2, r3
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	889b      	ldrh	r3, [r3, #4]
 800df34:	b29b      	uxth	r3, r3
 800df36:	429a      	cmp	r2, r3
 800df38:	d001      	beq.n	800df3e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800df3a:	2300      	movs	r3, #0
 800df3c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800df48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d193      	bne.n	800de76 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800df4e:	e000      	b.n	800df52 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800df50:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800df52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df54:	2b00      	cmp	r3, #0
 800df56:	d12d      	bne.n	800dfb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800df58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d01c      	beq.n	800df98 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800df5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df60:	88db      	ldrh	r3, [r3, #6]
 800df62:	b29a      	uxth	r2, r3
 800df64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df66:	889b      	ldrh	r3, [r3, #4]
 800df68:	b29b      	uxth	r3, r3
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d906      	bls.n	800df7c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800df6e:	4b45      	ldr	r3, [pc, #276]	; (800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800df70:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800df74:	4944      	ldr	r1, [pc, #272]	; (800e088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800df76:	4845      	ldr	r0, [pc, #276]	; (800e08c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800df78:	f000 fd04 	bl	800e984 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800df7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df7e:	68ba      	ldr	r2, [r7, #8]
 800df80:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800df82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df84:	88db      	ldrh	r3, [r3, #6]
 800df86:	b29a      	uxth	r2, r3
 800df88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8a:	889b      	ldrh	r3, [r3, #4]
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	429a      	cmp	r2, r3
 800df90:	d010      	beq.n	800dfb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800df92:	2300      	movs	r3, #0
 800df94:	623b      	str	r3, [r7, #32]
 800df96:	e00d      	b.n	800dfb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	685b      	ldr	r3, [r3, #4]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d006      	beq.n	800dfae <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800dfa0:	4b38      	ldr	r3, [pc, #224]	; (800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dfa2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800dfa6:	493a      	ldr	r1, [pc, #232]	; (800e090 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dfa8:	4838      	ldr	r0, [pc, #224]	; (800e08c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dfaa:	f000 fceb 	bl	800e984 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	68ba      	ldr	r2, [r7, #8]
 800dfb2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d105      	bne.n	800dfc6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	7f9b      	ldrb	r3, [r3, #30]
 800dfbe:	f003 0301 	and.w	r3, r3, #1
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d059      	beq.n	800e07a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800dfc6:	6a3b      	ldr	r3, [r7, #32]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d04f      	beq.n	800e06c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d006      	beq.n	800dfe2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	889b      	ldrh	r3, [r3, #4]
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d002      	beq.n	800dfe8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	623b      	str	r3, [r7, #32]
 800dfe6:	e041      	b.n	800e06c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800dfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfea:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800dfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dff2:	e012      	b.n	800e01a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800dff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800dffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffc:	88db      	ldrh	r3, [r3, #6]
 800dffe:	b29a      	uxth	r2, r3
 800e000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e002:	889b      	ldrh	r3, [r3, #4]
 800e004:	b29b      	uxth	r3, r3
 800e006:	429a      	cmp	r2, r3
 800e008:	d002      	beq.n	800e010 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e00a:	2300      	movs	r3, #0
 800e00c:	623b      	str	r3, [r7, #32]
            break;
 800e00e:	e007      	b.n	800e020 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e012:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d1e9      	bne.n	800dff4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e020:	6a3b      	ldr	r3, [r7, #32]
 800e022:	2b00      	cmp	r3, #0
 800e024:	d022      	beq.n	800e06c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d106      	bne.n	800e03c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e02e:	4b15      	ldr	r3, [pc, #84]	; (800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e030:	f240 12df 	movw	r2, #479	; 0x1df
 800e034:	4917      	ldr	r1, [pc, #92]	; (800e094 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e036:	4815      	ldr	r0, [pc, #84]	; (800e08c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e038:	f000 fca4 	bl	800e984 <iprintf>
          LWIP_ASSERT("sanity check",
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e044:	429a      	cmp	r2, r3
 800e046:	d106      	bne.n	800e056 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e048:	4b0e      	ldr	r3, [pc, #56]	; (800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e04a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e04e:	4911      	ldr	r1, [pc, #68]	; (800e094 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e050:	480e      	ldr	r0, [pc, #56]	; (800e08c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e052:	f000 fc97 	bl	800e984 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d006      	beq.n	800e06c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e05e:	4b09      	ldr	r3, [pc, #36]	; (800e084 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e060:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e064:	490c      	ldr	r1, [pc, #48]	; (800e098 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e066:	4809      	ldr	r0, [pc, #36]	; (800e08c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e068:	f000 fc8c 	bl	800e984 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e06c:	6a3b      	ldr	r3, [r7, #32]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	bf14      	ite	ne
 800e072:	2301      	movne	r3, #1
 800e074:	2300      	moveq	r3, #0
 800e076:	b2db      	uxtb	r3, r3
 800e078:	e000      	b.n	800e07c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3730      	adds	r7, #48	; 0x30
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}
 800e084:	080125f0 	.word	0x080125f0
 800e088:	080126d4 	.word	0x080126d4
 800e08c:	08012638 	.word	0x08012638
 800e090:	080126f4 	.word	0x080126f4
 800e094:	0801272c 	.word	0x0801272c
 800e098:	0801273c 	.word	0x0801273c

0800e09c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b08e      	sub	sp, #56	; 0x38
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	685b      	ldr	r3, [r3, #4]
 800e0a8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	f003 030f 	and.w	r3, r3, #15
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	2b14      	cmp	r3, #20
 800e0ba:	f040 8171 	bne.w	800e3a0 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0c0:	88db      	ldrh	r3, [r3, #6]
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7f6 f811 	bl	80040ec <lwip_htons>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	00db      	lsls	r3, r3, #3
 800e0d4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d8:	885b      	ldrh	r3, [r3, #2]
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7f6 f805 	bl	80040ec <lwip_htons>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	f003 030f 	and.w	r3, r3, #15
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	009b      	lsls	r3, r3, #2
 800e0f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e0f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e0fa:	b29b      	uxth	r3, r3
 800e0fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e0fe:	429a      	cmp	r2, r3
 800e100:	f0c0 8150 	bcc.w	800e3a4 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e104:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e108:	b29b      	uxth	r3, r3
 800e10a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f7f7 fbd1 	bl	80058b8 <pbuf_clen>
 800e116:	4603      	mov	r3, r0
 800e118:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e11a:	4b8c      	ldr	r3, [pc, #560]	; (800e34c <ip4_reass+0x2b0>)
 800e11c:	881b      	ldrh	r3, [r3, #0]
 800e11e:	461a      	mov	r2, r3
 800e120:	8c3b      	ldrh	r3, [r7, #32]
 800e122:	4413      	add	r3, r2
 800e124:	2b0a      	cmp	r3, #10
 800e126:	dd10      	ble.n	800e14a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e128:	8c3b      	ldrh	r3, [r7, #32]
 800e12a:	4619      	mov	r1, r3
 800e12c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e12e:	f7ff fd81 	bl	800dc34 <ip_reass_remove_oldest_datagram>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	f000 8137 	beq.w	800e3a8 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e13a:	4b84      	ldr	r3, [pc, #528]	; (800e34c <ip4_reass+0x2b0>)
 800e13c:	881b      	ldrh	r3, [r3, #0]
 800e13e:	461a      	mov	r2, r3
 800e140:	8c3b      	ldrh	r3, [r7, #32]
 800e142:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e144:	2b0a      	cmp	r3, #10
 800e146:	f300 812f 	bgt.w	800e3a8 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e14a:	4b81      	ldr	r3, [pc, #516]	; (800e350 <ip4_reass+0x2b4>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	633b      	str	r3, [r7, #48]	; 0x30
 800e150:	e015      	b.n	800e17e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e154:	695a      	ldr	r2, [r3, #20]
 800e156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e158:	68db      	ldr	r3, [r3, #12]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d10c      	bne.n	800e178 <ip4_reass+0xdc>
 800e15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e160:	699a      	ldr	r2, [r3, #24]
 800e162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e164:	691b      	ldr	r3, [r3, #16]
 800e166:	429a      	cmp	r2, r3
 800e168:	d106      	bne.n	800e178 <ip4_reass+0xdc>
 800e16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16c:	899a      	ldrh	r2, [r3, #12]
 800e16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e170:	889b      	ldrh	r3, [r3, #4]
 800e172:	b29b      	uxth	r3, r3
 800e174:	429a      	cmp	r2, r3
 800e176:	d006      	beq.n	800e186 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	633b      	str	r3, [r7, #48]	; 0x30
 800e17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e180:	2b00      	cmp	r3, #0
 800e182:	d1e6      	bne.n	800e152 <ip4_reass+0xb6>
 800e184:	e000      	b.n	800e188 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e186:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d109      	bne.n	800e1a2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e18e:	8c3b      	ldrh	r3, [r7, #32]
 800e190:	4619      	mov	r1, r3
 800e192:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e194:	f7ff fdb0 	bl	800dcf8 <ip_reass_enqueue_new_datagram>
 800e198:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d11c      	bne.n	800e1da <ip4_reass+0x13e>
      goto nullreturn;
 800e1a0:	e105      	b.n	800e3ae <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a4:	88db      	ldrh	r3, [r3, #6]
 800e1a6:	b29b      	uxth	r3, r3
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7f5 ff9f 	bl	80040ec <lwip_htons>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d110      	bne.n	800e1da <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ba:	89db      	ldrh	r3, [r3, #14]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7f5 ff95 	bl	80040ec <lwip_htons>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d006      	beq.n	800e1da <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ce:	3308      	adds	r3, #8
 800e1d0:	2214      	movs	r2, #20
 800e1d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f000 fba5 	bl	800e924 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1dc:	88db      	ldrh	r3, [r3, #6]
 800e1de:	b29b      	uxth	r3, r3
 800e1e0:	f003 0320 	and.w	r3, r3, #32
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	bf0c      	ite	eq
 800e1e8:	2301      	moveq	r3, #1
 800e1ea:	2300      	movne	r3, #0
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d00e      	beq.n	800e214 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800e1f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e1f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e1fa:	4413      	add	r3, r2
 800e1fc:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e1fe:	8b7a      	ldrh	r2, [r7, #26]
 800e200:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e202:	429a      	cmp	r2, r3
 800e204:	f0c0 80a0 	bcc.w	800e348 <ip4_reass+0x2ac>
 800e208:	8b7b      	ldrh	r3, [r7, #26]
 800e20a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e20e:	4293      	cmp	r3, r2
 800e210:	f200 809a 	bhi.w	800e348 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800e214:	69fa      	ldr	r2, [r7, #28]
 800e216:	6879      	ldr	r1, [r7, #4]
 800e218:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e21a:	f7ff fdd5 	bl	800ddc8 <ip_reass_chain_frag_into_datagram_and_validate>
 800e21e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e226:	f000 809b 	beq.w	800e360 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e22a:	4b48      	ldr	r3, [pc, #288]	; (800e34c <ip4_reass+0x2b0>)
 800e22c:	881a      	ldrh	r2, [r3, #0]
 800e22e:	8c3b      	ldrh	r3, [r7, #32]
 800e230:	4413      	add	r3, r2
 800e232:	b29a      	uxth	r2, r3
 800e234:	4b45      	ldr	r3, [pc, #276]	; (800e34c <ip4_reass+0x2b0>)
 800e236:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00d      	beq.n	800e25a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800e23e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e240:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e242:	4413      	add	r3, r2
 800e244:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800e246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e248:	8a7a      	ldrh	r2, [r7, #18]
 800e24a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e24e:	7f9b      	ldrb	r3, [r3, #30]
 800e250:	f043 0301 	orr.w	r3, r3, #1
 800e254:	b2da      	uxtb	r2, r3
 800e256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e258:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	d171      	bne.n	800e344 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e262:	8b9b      	ldrh	r3, [r3, #28]
 800e264:	3314      	adds	r3, #20
 800e266:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	685b      	ldr	r3, [r3, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800e272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e27c:	3308      	adds	r3, #8
 800e27e:	2214      	movs	r2, #20
 800e280:	4619      	mov	r1, r3
 800e282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e284:	f000 fb4e 	bl	800e924 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e288:	8a3b      	ldrh	r3, [r7, #16]
 800e28a:	4618      	mov	r0, r3
 800e28c:	f7f5 ff2e 	bl	80040ec <lwip_htons>
 800e290:	4603      	mov	r3, r0
 800e292:	461a      	mov	r2, r3
 800e294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e296:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e29a:	2200      	movs	r2, #0
 800e29c:	719a      	strb	r2, [r3, #6]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	729a      	strb	r2, [r3, #10]
 800e2a8:	2200      	movs	r2, #0
 800e2aa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800e2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800e2b2:	e00d      	b.n	800e2d0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800e2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800e2ba:	2114      	movs	r1, #20
 800e2bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e2be:	f7f7 f9ed 	bl	800569c <pbuf_remove_header>
      pbuf_cat(p, r);
 800e2c2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7f7 fb31 	bl	800592c <pbuf_cat>
      r = iprh->next_pbuf;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800e2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d1ee      	bne.n	800e2b4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800e2d6:	4b1e      	ldr	r3, [pc, #120]	; (800e350 <ip4_reass+0x2b4>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d102      	bne.n	800e2e6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2e4:	e010      	b.n	800e308 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e2e6:	4b1a      	ldr	r3, [pc, #104]	; (800e350 <ip4_reass+0x2b4>)
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2ec:	e007      	b.n	800e2fe <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800e2ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d006      	beq.n	800e306 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1f4      	bne.n	800e2ee <ip4_reass+0x252>
 800e304:	e000      	b.n	800e308 <ip4_reass+0x26c>
          break;
 800e306:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e30a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e30c:	f7ff fd2e 	bl	800dd6c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7f7 fad1 	bl	80058b8 <pbuf_clen>
 800e316:	4603      	mov	r3, r0
 800e318:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e31a:	4b0c      	ldr	r3, [pc, #48]	; (800e34c <ip4_reass+0x2b0>)
 800e31c:	881b      	ldrh	r3, [r3, #0]
 800e31e:	8c3a      	ldrh	r2, [r7, #32]
 800e320:	429a      	cmp	r2, r3
 800e322:	d906      	bls.n	800e332 <ip4_reass+0x296>
 800e324:	4b0b      	ldr	r3, [pc, #44]	; (800e354 <ip4_reass+0x2b8>)
 800e326:	f240 229b 	movw	r2, #667	; 0x29b
 800e32a:	490b      	ldr	r1, [pc, #44]	; (800e358 <ip4_reass+0x2bc>)
 800e32c:	480b      	ldr	r0, [pc, #44]	; (800e35c <ip4_reass+0x2c0>)
 800e32e:	f000 fb29 	bl	800e984 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e332:	4b06      	ldr	r3, [pc, #24]	; (800e34c <ip4_reass+0x2b0>)
 800e334:	881a      	ldrh	r2, [r3, #0]
 800e336:	8c3b      	ldrh	r3, [r7, #32]
 800e338:	1ad3      	subs	r3, r2, r3
 800e33a:	b29a      	uxth	r2, r3
 800e33c:	4b03      	ldr	r3, [pc, #12]	; (800e34c <ip4_reass+0x2b0>)
 800e33e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	e038      	b.n	800e3b6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800e344:	2300      	movs	r3, #0
 800e346:	e036      	b.n	800e3b6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800e348:	bf00      	nop
 800e34a:	e00a      	b.n	800e362 <ip4_reass+0x2c6>
 800e34c:	20008408 	.word	0x20008408
 800e350:	20008404 	.word	0x20008404
 800e354:	080125f0 	.word	0x080125f0
 800e358:	08012760 	.word	0x08012760
 800e35c:	08012638 	.word	0x08012638
    goto nullreturn_ipr;
 800e360:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e364:	2b00      	cmp	r3, #0
 800e366:	d106      	bne.n	800e376 <ip4_reass+0x2da>
 800e368:	4b15      	ldr	r3, [pc, #84]	; (800e3c0 <ip4_reass+0x324>)
 800e36a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e36e:	4915      	ldr	r1, [pc, #84]	; (800e3c4 <ip4_reass+0x328>)
 800e370:	4815      	ldr	r0, [pc, #84]	; (800e3c8 <ip4_reass+0x32c>)
 800e372:	f000 fb07 	bl	800e984 <iprintf>
  if (ipr->p == NULL) {
 800e376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d116      	bne.n	800e3ac <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e37e:	4b13      	ldr	r3, [pc, #76]	; (800e3cc <ip4_reass+0x330>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e384:	429a      	cmp	r2, r3
 800e386:	d006      	beq.n	800e396 <ip4_reass+0x2fa>
 800e388:	4b0d      	ldr	r3, [pc, #52]	; (800e3c0 <ip4_reass+0x324>)
 800e38a:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e38e:	4910      	ldr	r1, [pc, #64]	; (800e3d0 <ip4_reass+0x334>)
 800e390:	480d      	ldr	r0, [pc, #52]	; (800e3c8 <ip4_reass+0x32c>)
 800e392:	f000 faf7 	bl	800e984 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e396:	2100      	movs	r1, #0
 800e398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e39a:	f7ff fce7 	bl	800dd6c <ip_reass_dequeue_datagram>
 800e39e:	e006      	b.n	800e3ae <ip4_reass+0x312>
    goto nullreturn;
 800e3a0:	bf00      	nop
 800e3a2:	e004      	b.n	800e3ae <ip4_reass+0x312>
    goto nullreturn;
 800e3a4:	bf00      	nop
 800e3a6:	e002      	b.n	800e3ae <ip4_reass+0x312>
      goto nullreturn;
 800e3a8:	bf00      	nop
 800e3aa:	e000      	b.n	800e3ae <ip4_reass+0x312>
  }

nullreturn:
 800e3ac:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f7f7 f9fa 	bl	80057a8 <pbuf_free>
  return NULL;
 800e3b4:	2300      	movs	r3, #0
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3738      	adds	r7, #56	; 0x38
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}
 800e3be:	bf00      	nop
 800e3c0:	080125f0 	.word	0x080125f0
 800e3c4:	0801277c 	.word	0x0801277c
 800e3c8:	08012638 	.word	0x08012638
 800e3cc:	20008404 	.word	0x20008404
 800e3d0:	08012788 	.word	0x08012788

0800e3d4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e3d8:	2005      	movs	r0, #5
 800e3da:	f7f6 faff 	bl	80049dc <memp_malloc>
 800e3de:	4603      	mov	r3, r0
}
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d106      	bne.n	800e400 <ip_frag_free_pbuf_custom_ref+0x1c>
 800e3f2:	4b07      	ldr	r3, [pc, #28]	; (800e410 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e3f4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e3f8:	4906      	ldr	r1, [pc, #24]	; (800e414 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e3fa:	4807      	ldr	r0, [pc, #28]	; (800e418 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e3fc:	f000 fac2 	bl	800e984 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e400:	6879      	ldr	r1, [r7, #4]
 800e402:	2005      	movs	r0, #5
 800e404:	f7f6 fb5a 	bl	8004abc <memp_free>
}
 800e408:	bf00      	nop
 800e40a:	3708      	adds	r7, #8
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	080125f0 	.word	0x080125f0
 800e414:	080127a8 	.word	0x080127a8
 800e418:	08012638 	.word	0x08012638

0800e41c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d106      	bne.n	800e43c <ipfrag_free_pbuf_custom+0x20>
 800e42e:	4b11      	ldr	r3, [pc, #68]	; (800e474 <ipfrag_free_pbuf_custom+0x58>)
 800e430:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e434:	4910      	ldr	r1, [pc, #64]	; (800e478 <ipfrag_free_pbuf_custom+0x5c>)
 800e436:	4811      	ldr	r0, [pc, #68]	; (800e47c <ipfrag_free_pbuf_custom+0x60>)
 800e438:	f000 faa4 	bl	800e984 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800e43c:	68fa      	ldr	r2, [r7, #12]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	429a      	cmp	r2, r3
 800e442:	d006      	beq.n	800e452 <ipfrag_free_pbuf_custom+0x36>
 800e444:	4b0b      	ldr	r3, [pc, #44]	; (800e474 <ipfrag_free_pbuf_custom+0x58>)
 800e446:	f240 22cf 	movw	r2, #719	; 0x2cf
 800e44a:	490d      	ldr	r1, [pc, #52]	; (800e480 <ipfrag_free_pbuf_custom+0x64>)
 800e44c:	480b      	ldr	r0, [pc, #44]	; (800e47c <ipfrag_free_pbuf_custom+0x60>)
 800e44e:	f000 fa99 	bl	800e984 <iprintf>
  if (pcr->original != NULL) {
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	695b      	ldr	r3, [r3, #20]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d004      	beq.n	800e464 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	695b      	ldr	r3, [r3, #20]
 800e45e:	4618      	mov	r0, r3
 800e460:	f7f7 f9a2 	bl	80057a8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e464:	68f8      	ldr	r0, [r7, #12]
 800e466:	f7ff ffbd 	bl	800e3e4 <ip_frag_free_pbuf_custom_ref>
}
 800e46a:	bf00      	nop
 800e46c:	3710      	adds	r7, #16
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	080125f0 	.word	0x080125f0
 800e478:	080127b4 	.word	0x080127b4
 800e47c:	08012638 	.word	0x08012638
 800e480:	080127c0 	.word	0x080127c0

0800e484 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b094      	sub	sp, #80	; 0x50
 800e488:	af02      	add	r7, sp, #8
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	60b9      	str	r1, [r7, #8]
 800e48e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e490:	2300      	movs	r3, #0
 800e492:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e49a:	3b14      	subs	r3, #20
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	da00      	bge.n	800e4a2 <ip4_frag+0x1e>
 800e4a0:	3307      	adds	r3, #7
 800e4a2:	10db      	asrs	r3, r3, #3
 800e4a4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e4a6:	2314      	movs	r3, #20
 800e4a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	685b      	ldr	r3, [r3, #4]
 800e4ae:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800e4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4b2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	f003 030f 	and.w	r3, r3, #15
 800e4bc:	b2db      	uxtb	r3, r3
 800e4be:	009b      	lsls	r3, r3, #2
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	2b14      	cmp	r3, #20
 800e4c4:	d002      	beq.n	800e4cc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800e4c6:	f06f 0305 	mvn.w	r3, #5
 800e4ca:	e110      	b.n	800e6ee <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	895b      	ldrh	r3, [r3, #10]
 800e4d0:	2b13      	cmp	r3, #19
 800e4d2:	d809      	bhi.n	800e4e8 <ip4_frag+0x64>
 800e4d4:	4b88      	ldr	r3, [pc, #544]	; (800e6f8 <ip4_frag+0x274>)
 800e4d6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e4da:	4988      	ldr	r1, [pc, #544]	; (800e6fc <ip4_frag+0x278>)
 800e4dc:	4888      	ldr	r0, [pc, #544]	; (800e700 <ip4_frag+0x27c>)
 800e4de:	f000 fa51 	bl	800e984 <iprintf>
 800e4e2:	f06f 0305 	mvn.w	r3, #5
 800e4e6:	e102      	b.n	800e6ee <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4ea:	88db      	ldrh	r3, [r3, #6]
 800e4ec:	b29b      	uxth	r3, r3
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7f5 fdfc 	bl	80040ec <lwip_htons>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800e4f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e4fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e4fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e502:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e504:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e508:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	891b      	ldrh	r3, [r3, #8]
 800e50e:	3b14      	subs	r3, #20
 800e510:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800e514:	e0e1      	b.n	800e6da <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e516:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e518:	00db      	lsls	r3, r3, #3
 800e51a:	b29b      	uxth	r3, r3
 800e51c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e520:	4293      	cmp	r3, r2
 800e522:	bf28      	it	cs
 800e524:	4613      	movcs	r3, r2
 800e526:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e528:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e52c:	2114      	movs	r1, #20
 800e52e:	200e      	movs	r0, #14
 800e530:	f7f6 fe56 	bl	80051e0 <pbuf_alloc>
 800e534:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800e536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f000 80d5 	beq.w	800e6e8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e540:	895b      	ldrh	r3, [r3, #10]
 800e542:	2b13      	cmp	r3, #19
 800e544:	d806      	bhi.n	800e554 <ip4_frag+0xd0>
 800e546:	4b6c      	ldr	r3, [pc, #432]	; (800e6f8 <ip4_frag+0x274>)
 800e548:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e54c:	496d      	ldr	r1, [pc, #436]	; (800e704 <ip4_frag+0x280>)
 800e54e:	486c      	ldr	r0, [pc, #432]	; (800e700 <ip4_frag+0x27c>)
 800e550:	f000 fa18 	bl	800e984 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	2214      	movs	r2, #20
 800e55a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e55c:	4618      	mov	r0, r3
 800e55e:	f000 f9e1 	bl	800e924 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800e568:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e56a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800e56e:	e064      	b.n	800e63a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	895a      	ldrh	r2, [r3, #10]
 800e574:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e576:	1ad3      	subs	r3, r2, r3
 800e578:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	895b      	ldrh	r3, [r3, #10]
 800e57e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e580:	429a      	cmp	r2, r3
 800e582:	d906      	bls.n	800e592 <ip4_frag+0x10e>
 800e584:	4b5c      	ldr	r3, [pc, #368]	; (800e6f8 <ip4_frag+0x274>)
 800e586:	f240 322d 	movw	r2, #813	; 0x32d
 800e58a:	495f      	ldr	r1, [pc, #380]	; (800e708 <ip4_frag+0x284>)
 800e58c:	485c      	ldr	r0, [pc, #368]	; (800e700 <ip4_frag+0x27c>)
 800e58e:	f000 f9f9 	bl	800e984 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e592:	8bfa      	ldrh	r2, [r7, #30]
 800e594:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e598:	4293      	cmp	r3, r2
 800e59a:	bf28      	it	cs
 800e59c:	4613      	movcs	r3, r2
 800e59e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e5a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d105      	bne.n	800e5b6 <ip4_frag+0x132>
        poff = 0;
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	60fb      	str	r3, [r7, #12]
        continue;
 800e5b4:	e041      	b.n	800e63a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e5b6:	f7ff ff0d 	bl	800e3d4 <ip_frag_alloc_pbuf_custom_ref>
 800e5ba:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800e5bc:	69bb      	ldr	r3, [r7, #24]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d103      	bne.n	800e5ca <ip4_frag+0x146>
        pbuf_free(rambuf);
 800e5c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5c4:	f7f7 f8f0 	bl	80057a8 <pbuf_free>
        goto memerr;
 800e5c8:	e08f      	b.n	800e6ea <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e5ca:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e5d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e5d2:	4413      	add	r3, r2
 800e5d4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800e5d8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800e5dc:	9201      	str	r2, [sp, #4]
 800e5de:	9300      	str	r3, [sp, #0]
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2241      	movs	r2, #65	; 0x41
 800e5e4:	2000      	movs	r0, #0
 800e5e6:	f7f6 ff25 	bl	8005434 <pbuf_alloced_custom>
 800e5ea:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800e5ec:	697b      	ldr	r3, [r7, #20]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d106      	bne.n	800e600 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e5f2:	69b8      	ldr	r0, [r7, #24]
 800e5f4:	f7ff fef6 	bl	800e3e4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e5f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5fa:	f7f7 f8d5 	bl	80057a8 <pbuf_free>
        goto memerr;
 800e5fe:	e074      	b.n	800e6ea <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800e600:	68f8      	ldr	r0, [r7, #12]
 800e602:	f7f7 f971 	bl	80058e8 <pbuf_ref>
      pcr->original = p;
 800e606:	69bb      	ldr	r3, [r7, #24]
 800e608:	68fa      	ldr	r2, [r7, #12]
 800e60a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e60c:	69bb      	ldr	r3, [r7, #24]
 800e60e:	4a3f      	ldr	r2, [pc, #252]	; (800e70c <ip4_frag+0x288>)
 800e610:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e612:	6979      	ldr	r1, [r7, #20]
 800e614:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e616:	f7f7 f989 	bl	800592c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e61a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800e61e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e622:	1ad3      	subs	r3, r2, r3
 800e624:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800e628:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d004      	beq.n	800e63a <ip4_frag+0x1b6>
        poff = 0;
 800e630:	2300      	movs	r3, #0
 800e632:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e63a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d196      	bne.n	800e570 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e642:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e644:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800e648:	4413      	add	r3, r2
 800e64a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e650:	f1a3 0213 	sub.w	r2, r3, #19
 800e654:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e658:	429a      	cmp	r2, r3
 800e65a:	bfcc      	ite	gt
 800e65c:	2301      	movgt	r3, #1
 800e65e:	2300      	movle	r3, #0
 800e660:	b2db      	uxtb	r3, r3
 800e662:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e664:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e66c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800e66e:	6a3b      	ldr	r3, [r7, #32]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d002      	beq.n	800e67a <ip4_frag+0x1f6>
 800e674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e676:	2b00      	cmp	r3, #0
 800e678:	d003      	beq.n	800e682 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e67a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e67c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e680:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e682:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e684:	4618      	mov	r0, r3
 800e686:	f7f5 fd31 	bl	80040ec <lwip_htons>
 800e68a:	4603      	mov	r3, r0
 800e68c:	461a      	mov	r2, r3
 800e68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e690:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e692:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e694:	3314      	adds	r3, #20
 800e696:	b29b      	uxth	r3, r3
 800e698:	4618      	mov	r0, r3
 800e69a:	f7f5 fd27 	bl	80040ec <lwip_htons>
 800e69e:	4603      	mov	r3, r0
 800e6a0:	461a      	mov	r2, r3
 800e6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a4:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	729a      	strb	r2, [r3, #10]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	695b      	ldr	r3, [r3, #20]
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e6b8:	68b8      	ldr	r0, [r7, #8]
 800e6ba:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e6bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6be:	f7f7 f873 	bl	80057a8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e6c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e6c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e6c8:	1ad3      	subs	r3, r2, r3
 800e6ca:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800e6ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e6d2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e6d4:	4413      	add	r3, r2
 800e6d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800e6da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	f47f af19 	bne.w	800e516 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	e002      	b.n	800e6ee <ip4_frag+0x26a>
      goto memerr;
 800e6e8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e6ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3748      	adds	r7, #72	; 0x48
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	080125f0 	.word	0x080125f0
 800e6fc:	080127cc 	.word	0x080127cc
 800e700:	08012638 	.word	0x08012638
 800e704:	080127e8 	.word	0x080127e8
 800e708:	08012808 	.word	0x08012808
 800e70c:	0800e41d 	.word	0x0800e41d

0800e710 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b086      	sub	sp, #24
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
 800e718:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800e71a:	230e      	movs	r3, #14
 800e71c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	895b      	ldrh	r3, [r3, #10]
 800e722:	2b0e      	cmp	r3, #14
 800e724:	d96e      	bls.n	800e804 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	7bdb      	ldrb	r3, [r3, #15]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d106      	bne.n	800e73c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e734:	3301      	adds	r3, #1
 800e736:	b2da      	uxtb	r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	7b1a      	ldrb	r2, [r3, #12]
 800e746:	7b5b      	ldrb	r3, [r3, #13]
 800e748:	021b      	lsls	r3, r3, #8
 800e74a:	4313      	orrs	r3, r2
 800e74c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	f003 0301 	and.w	r3, r3, #1
 800e756:	2b00      	cmp	r3, #0
 800e758:	d023      	beq.n	800e7a2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d10f      	bne.n	800e782 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	785b      	ldrb	r3, [r3, #1]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d11b      	bne.n	800e7a2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e76e:	2b5e      	cmp	r3, #94	; 0x5e
 800e770:	d117      	bne.n	800e7a2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	7b5b      	ldrb	r3, [r3, #13]
 800e776:	f043 0310 	orr.w	r3, r3, #16
 800e77a:	b2da      	uxtb	r2, r3
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	735a      	strb	r2, [r3, #13]
 800e780:	e00f      	b.n	800e7a2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	2206      	movs	r2, #6
 800e786:	4928      	ldr	r1, [pc, #160]	; (800e828 <ethernet_input+0x118>)
 800e788:	4618      	mov	r0, r3
 800e78a:	f000 f8bb 	bl	800e904 <memcmp>
 800e78e:	4603      	mov	r3, r0
 800e790:	2b00      	cmp	r3, #0
 800e792:	d106      	bne.n	800e7a2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	7b5b      	ldrb	r3, [r3, #13]
 800e798:	f043 0308 	orr.w	r3, r3, #8
 800e79c:	b2da      	uxtb	r2, r3
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e7a2:	89fb      	ldrh	r3, [r7, #14]
 800e7a4:	2b08      	cmp	r3, #8
 800e7a6:	d003      	beq.n	800e7b0 <ethernet_input+0xa0>
 800e7a8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e7ac:	d014      	beq.n	800e7d8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e7ae:	e032      	b.n	800e816 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7b6:	f003 0308 	and.w	r3, r3, #8
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d024      	beq.n	800e808 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e7be:	8afb      	ldrh	r3, [r7, #22]
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f7f6 ff6a 	bl	800569c <pbuf_remove_header>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d11e      	bne.n	800e80c <ethernet_input+0xfc>
        ip4_input(p, netif);
 800e7ce:	6839      	ldr	r1, [r7, #0]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7fe ff21 	bl	800d618 <ip4_input>
      break;
 800e7d6:	e013      	b.n	800e800 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e7d8:	683b      	ldr	r3, [r7, #0]
 800e7da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7de:	f003 0308 	and.w	r3, r3, #8
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d014      	beq.n	800e810 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e7e6:	8afb      	ldrh	r3, [r7, #22]
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f7f6 ff56 	bl	800569c <pbuf_remove_header>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d10e      	bne.n	800e814 <ethernet_input+0x104>
        etharp_input(p, netif);
 800e7f6:	6839      	ldr	r1, [r7, #0]
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f7fe f8c1 	bl	800c980 <etharp_input>
      break;
 800e7fe:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e800:	2300      	movs	r3, #0
 800e802:	e00c      	b.n	800e81e <ethernet_input+0x10e>
    goto free_and_return;
 800e804:	bf00      	nop
 800e806:	e006      	b.n	800e816 <ethernet_input+0x106>
        goto free_and_return;
 800e808:	bf00      	nop
 800e80a:	e004      	b.n	800e816 <ethernet_input+0x106>
        goto free_and_return;
 800e80c:	bf00      	nop
 800e80e:	e002      	b.n	800e816 <ethernet_input+0x106>
        goto free_and_return;
 800e810:	bf00      	nop
 800e812:	e000      	b.n	800e816 <ethernet_input+0x106>
        goto free_and_return;
 800e814:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f7f6 ffc6 	bl	80057a8 <pbuf_free>
  return ERR_OK;
 800e81c:	2300      	movs	r3, #0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3718      	adds	r7, #24
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	0801299c 	.word	0x0801299c

0800e82c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b086      	sub	sp, #24
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	60b9      	str	r1, [r7, #8]
 800e836:	607a      	str	r2, [r7, #4]
 800e838:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e83a:	8c3b      	ldrh	r3, [r7, #32]
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7f5 fc55 	bl	80040ec <lwip_htons>
 800e842:	4603      	mov	r3, r0
 800e844:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e846:	210e      	movs	r1, #14
 800e848:	68b8      	ldr	r0, [r7, #8]
 800e84a:	f7f6 ff17 	bl	800567c <pbuf_add_header>
 800e84e:	4603      	mov	r3, r0
 800e850:	2b00      	cmp	r3, #0
 800e852:	d125      	bne.n	800e8a0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	8afa      	ldrh	r2, [r7, #22]
 800e85e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e860:	693b      	ldr	r3, [r7, #16]
 800e862:	2206      	movs	r2, #6
 800e864:	6839      	ldr	r1, [r7, #0]
 800e866:	4618      	mov	r0, r3
 800e868:	f000 f85c 	bl	800e924 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	3306      	adds	r3, #6
 800e870:	2206      	movs	r2, #6
 800e872:	6879      	ldr	r1, [r7, #4]
 800e874:	4618      	mov	r0, r3
 800e876:	f000 f855 	bl	800e924 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e880:	2b06      	cmp	r3, #6
 800e882:	d006      	beq.n	800e892 <ethernet_output+0x66>
 800e884:	4b0a      	ldr	r3, [pc, #40]	; (800e8b0 <ethernet_output+0x84>)
 800e886:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e88a:	490a      	ldr	r1, [pc, #40]	; (800e8b4 <ethernet_output+0x88>)
 800e88c:	480a      	ldr	r0, [pc, #40]	; (800e8b8 <ethernet_output+0x8c>)
 800e88e:	f000 f879 	bl	800e984 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	699b      	ldr	r3, [r3, #24]
 800e896:	68b9      	ldr	r1, [r7, #8]
 800e898:	68f8      	ldr	r0, [r7, #12]
 800e89a:	4798      	blx	r3
 800e89c:	4603      	mov	r3, r0
 800e89e:	e002      	b.n	800e8a6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e8a0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e8a2:	f06f 0301 	mvn.w	r3, #1
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3718      	adds	r7, #24
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	08012818 	.word	0x08012818
 800e8b4:	08012850 	.word	0x08012850
 800e8b8:	08012884 	.word	0x08012884

0800e8bc <__libc_init_array>:
 800e8bc:	b570      	push	{r4, r5, r6, lr}
 800e8be:	4d0d      	ldr	r5, [pc, #52]	; (800e8f4 <__libc_init_array+0x38>)
 800e8c0:	4c0d      	ldr	r4, [pc, #52]	; (800e8f8 <__libc_init_array+0x3c>)
 800e8c2:	1b64      	subs	r4, r4, r5
 800e8c4:	10a4      	asrs	r4, r4, #2
 800e8c6:	2600      	movs	r6, #0
 800e8c8:	42a6      	cmp	r6, r4
 800e8ca:	d109      	bne.n	800e8e0 <__libc_init_array+0x24>
 800e8cc:	4d0b      	ldr	r5, [pc, #44]	; (800e8fc <__libc_init_array+0x40>)
 800e8ce:	4c0c      	ldr	r4, [pc, #48]	; (800e900 <__libc_init_array+0x44>)
 800e8d0:	f001 fa5c 	bl	800fd8c <_init>
 800e8d4:	1b64      	subs	r4, r4, r5
 800e8d6:	10a4      	asrs	r4, r4, #2
 800e8d8:	2600      	movs	r6, #0
 800e8da:	42a6      	cmp	r6, r4
 800e8dc:	d105      	bne.n	800e8ea <__libc_init_array+0x2e>
 800e8de:	bd70      	pop	{r4, r5, r6, pc}
 800e8e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8e4:	4798      	blx	r3
 800e8e6:	3601      	adds	r6, #1
 800e8e8:	e7ee      	b.n	800e8c8 <__libc_init_array+0xc>
 800e8ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800e8ee:	4798      	blx	r3
 800e8f0:	3601      	adds	r6, #1
 800e8f2:	e7f2      	b.n	800e8da <__libc_init_array+0x1e>
 800e8f4:	08012afc 	.word	0x08012afc
 800e8f8:	08012afc 	.word	0x08012afc
 800e8fc:	08012afc 	.word	0x08012afc
 800e900:	08012b00 	.word	0x08012b00

0800e904 <memcmp>:
 800e904:	b510      	push	{r4, lr}
 800e906:	3901      	subs	r1, #1
 800e908:	4402      	add	r2, r0
 800e90a:	4290      	cmp	r0, r2
 800e90c:	d101      	bne.n	800e912 <memcmp+0xe>
 800e90e:	2000      	movs	r0, #0
 800e910:	e005      	b.n	800e91e <memcmp+0x1a>
 800e912:	7803      	ldrb	r3, [r0, #0]
 800e914:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e918:	42a3      	cmp	r3, r4
 800e91a:	d001      	beq.n	800e920 <memcmp+0x1c>
 800e91c:	1b18      	subs	r0, r3, r4
 800e91e:	bd10      	pop	{r4, pc}
 800e920:	3001      	adds	r0, #1
 800e922:	e7f2      	b.n	800e90a <memcmp+0x6>

0800e924 <memcpy>:
 800e924:	440a      	add	r2, r1
 800e926:	4291      	cmp	r1, r2
 800e928:	f100 33ff 	add.w	r3, r0, #4294967295
 800e92c:	d100      	bne.n	800e930 <memcpy+0xc>
 800e92e:	4770      	bx	lr
 800e930:	b510      	push	{r4, lr}
 800e932:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e93a:	4291      	cmp	r1, r2
 800e93c:	d1f9      	bne.n	800e932 <memcpy+0xe>
 800e93e:	bd10      	pop	{r4, pc}

0800e940 <memmove>:
 800e940:	4288      	cmp	r0, r1
 800e942:	b510      	push	{r4, lr}
 800e944:	eb01 0402 	add.w	r4, r1, r2
 800e948:	d902      	bls.n	800e950 <memmove+0x10>
 800e94a:	4284      	cmp	r4, r0
 800e94c:	4623      	mov	r3, r4
 800e94e:	d807      	bhi.n	800e960 <memmove+0x20>
 800e950:	1e43      	subs	r3, r0, #1
 800e952:	42a1      	cmp	r1, r4
 800e954:	d008      	beq.n	800e968 <memmove+0x28>
 800e956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e95a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e95e:	e7f8      	b.n	800e952 <memmove+0x12>
 800e960:	4402      	add	r2, r0
 800e962:	4601      	mov	r1, r0
 800e964:	428a      	cmp	r2, r1
 800e966:	d100      	bne.n	800e96a <memmove+0x2a>
 800e968:	bd10      	pop	{r4, pc}
 800e96a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e96e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e972:	e7f7      	b.n	800e964 <memmove+0x24>

0800e974 <memset>:
 800e974:	4402      	add	r2, r0
 800e976:	4603      	mov	r3, r0
 800e978:	4293      	cmp	r3, r2
 800e97a:	d100      	bne.n	800e97e <memset+0xa>
 800e97c:	4770      	bx	lr
 800e97e:	f803 1b01 	strb.w	r1, [r3], #1
 800e982:	e7f9      	b.n	800e978 <memset+0x4>

0800e984 <iprintf>:
 800e984:	b40f      	push	{r0, r1, r2, r3}
 800e986:	4b0a      	ldr	r3, [pc, #40]	; (800e9b0 <iprintf+0x2c>)
 800e988:	b513      	push	{r0, r1, r4, lr}
 800e98a:	681c      	ldr	r4, [r3, #0]
 800e98c:	b124      	cbz	r4, 800e998 <iprintf+0x14>
 800e98e:	69a3      	ldr	r3, [r4, #24]
 800e990:	b913      	cbnz	r3, 800e998 <iprintf+0x14>
 800e992:	4620      	mov	r0, r4
 800e994:	f000 f8e2 	bl	800eb5c <__sinit>
 800e998:	ab05      	add	r3, sp, #20
 800e99a:	9a04      	ldr	r2, [sp, #16]
 800e99c:	68a1      	ldr	r1, [r4, #8]
 800e99e:	9301      	str	r3, [sp, #4]
 800e9a0:	4620      	mov	r0, r4
 800e9a2:	f000 fbfb 	bl	800f19c <_vfiprintf_r>
 800e9a6:	b002      	add	sp, #8
 800e9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9ac:	b004      	add	sp, #16
 800e9ae:	4770      	bx	lr
 800e9b0:	2000002c 	.word	0x2000002c

0800e9b4 <rand>:
 800e9b4:	4b16      	ldr	r3, [pc, #88]	; (800ea10 <rand+0x5c>)
 800e9b6:	b510      	push	{r4, lr}
 800e9b8:	681c      	ldr	r4, [r3, #0]
 800e9ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e9bc:	b9b3      	cbnz	r3, 800e9ec <rand+0x38>
 800e9be:	2018      	movs	r0, #24
 800e9c0:	f000 f97e 	bl	800ecc0 <malloc>
 800e9c4:	63a0      	str	r0, [r4, #56]	; 0x38
 800e9c6:	b928      	cbnz	r0, 800e9d4 <rand+0x20>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	4b12      	ldr	r3, [pc, #72]	; (800ea14 <rand+0x60>)
 800e9cc:	4812      	ldr	r0, [pc, #72]	; (800ea18 <rand+0x64>)
 800e9ce:	214e      	movs	r1, #78	; 0x4e
 800e9d0:	f000 f84e 	bl	800ea70 <__assert_func>
 800e9d4:	4a11      	ldr	r2, [pc, #68]	; (800ea1c <rand+0x68>)
 800e9d6:	4b12      	ldr	r3, [pc, #72]	; (800ea20 <rand+0x6c>)
 800e9d8:	e9c0 2300 	strd	r2, r3, [r0]
 800e9dc:	4b11      	ldr	r3, [pc, #68]	; (800ea24 <rand+0x70>)
 800e9de:	6083      	str	r3, [r0, #8]
 800e9e0:	230b      	movs	r3, #11
 800e9e2:	8183      	strh	r3, [r0, #12]
 800e9e4:	2201      	movs	r2, #1
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e9ec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800e9ee:	4a0e      	ldr	r2, [pc, #56]	; (800ea28 <rand+0x74>)
 800e9f0:	6920      	ldr	r0, [r4, #16]
 800e9f2:	6963      	ldr	r3, [r4, #20]
 800e9f4:	490d      	ldr	r1, [pc, #52]	; (800ea2c <rand+0x78>)
 800e9f6:	4342      	muls	r2, r0
 800e9f8:	fb01 2203 	mla	r2, r1, r3, r2
 800e9fc:	fba0 0101 	umull	r0, r1, r0, r1
 800ea00:	1c43      	adds	r3, r0, #1
 800ea02:	eb42 0001 	adc.w	r0, r2, r1
 800ea06:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ea0a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ea0e:	bd10      	pop	{r4, pc}
 800ea10:	2000002c 	.word	0x2000002c
 800ea14:	080129b0 	.word	0x080129b0
 800ea18:	080129c7 	.word	0x080129c7
 800ea1c:	abcd330e 	.word	0xabcd330e
 800ea20:	e66d1234 	.word	0xe66d1234
 800ea24:	0005deec 	.word	0x0005deec
 800ea28:	5851f42d 	.word	0x5851f42d
 800ea2c:	4c957f2d 	.word	0x4c957f2d

0800ea30 <siprintf>:
 800ea30:	b40e      	push	{r1, r2, r3}
 800ea32:	b500      	push	{lr}
 800ea34:	b09c      	sub	sp, #112	; 0x70
 800ea36:	ab1d      	add	r3, sp, #116	; 0x74
 800ea38:	9002      	str	r0, [sp, #8]
 800ea3a:	9006      	str	r0, [sp, #24]
 800ea3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ea40:	4809      	ldr	r0, [pc, #36]	; (800ea68 <siprintf+0x38>)
 800ea42:	9107      	str	r1, [sp, #28]
 800ea44:	9104      	str	r1, [sp, #16]
 800ea46:	4909      	ldr	r1, [pc, #36]	; (800ea6c <siprintf+0x3c>)
 800ea48:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea4c:	9105      	str	r1, [sp, #20]
 800ea4e:	6800      	ldr	r0, [r0, #0]
 800ea50:	9301      	str	r3, [sp, #4]
 800ea52:	a902      	add	r1, sp, #8
 800ea54:	f000 fa78 	bl	800ef48 <_svfiprintf_r>
 800ea58:	9b02      	ldr	r3, [sp, #8]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	701a      	strb	r2, [r3, #0]
 800ea5e:	b01c      	add	sp, #112	; 0x70
 800ea60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea64:	b003      	add	sp, #12
 800ea66:	4770      	bx	lr
 800ea68:	2000002c 	.word	0x2000002c
 800ea6c:	ffff0208 	.word	0xffff0208

0800ea70 <__assert_func>:
 800ea70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea72:	4614      	mov	r4, r2
 800ea74:	461a      	mov	r2, r3
 800ea76:	4b09      	ldr	r3, [pc, #36]	; (800ea9c <__assert_func+0x2c>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	4605      	mov	r5, r0
 800ea7c:	68d8      	ldr	r0, [r3, #12]
 800ea7e:	b14c      	cbz	r4, 800ea94 <__assert_func+0x24>
 800ea80:	4b07      	ldr	r3, [pc, #28]	; (800eaa0 <__assert_func+0x30>)
 800ea82:	9100      	str	r1, [sp, #0]
 800ea84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea88:	4906      	ldr	r1, [pc, #24]	; (800eaa4 <__assert_func+0x34>)
 800ea8a:	462b      	mov	r3, r5
 800ea8c:	f000 f8e4 	bl	800ec58 <fiprintf>
 800ea90:	f000 ff6e 	bl	800f970 <abort>
 800ea94:	4b04      	ldr	r3, [pc, #16]	; (800eaa8 <__assert_func+0x38>)
 800ea96:	461c      	mov	r4, r3
 800ea98:	e7f3      	b.n	800ea82 <__assert_func+0x12>
 800ea9a:	bf00      	nop
 800ea9c:	2000002c 	.word	0x2000002c
 800eaa0:	08012a22 	.word	0x08012a22
 800eaa4:	08012a2f 	.word	0x08012a2f
 800eaa8:	08012a5d 	.word	0x08012a5d

0800eaac <std>:
 800eaac:	2300      	movs	r3, #0
 800eaae:	b510      	push	{r4, lr}
 800eab0:	4604      	mov	r4, r0
 800eab2:	e9c0 3300 	strd	r3, r3, [r0]
 800eab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eaba:	6083      	str	r3, [r0, #8]
 800eabc:	8181      	strh	r1, [r0, #12]
 800eabe:	6643      	str	r3, [r0, #100]	; 0x64
 800eac0:	81c2      	strh	r2, [r0, #14]
 800eac2:	6183      	str	r3, [r0, #24]
 800eac4:	4619      	mov	r1, r3
 800eac6:	2208      	movs	r2, #8
 800eac8:	305c      	adds	r0, #92	; 0x5c
 800eaca:	f7ff ff53 	bl	800e974 <memset>
 800eace:	4b05      	ldr	r3, [pc, #20]	; (800eae4 <std+0x38>)
 800ead0:	6263      	str	r3, [r4, #36]	; 0x24
 800ead2:	4b05      	ldr	r3, [pc, #20]	; (800eae8 <std+0x3c>)
 800ead4:	62a3      	str	r3, [r4, #40]	; 0x28
 800ead6:	4b05      	ldr	r3, [pc, #20]	; (800eaec <std+0x40>)
 800ead8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eada:	4b05      	ldr	r3, [pc, #20]	; (800eaf0 <std+0x44>)
 800eadc:	6224      	str	r4, [r4, #32]
 800eade:	6323      	str	r3, [r4, #48]	; 0x30
 800eae0:	bd10      	pop	{r4, pc}
 800eae2:	bf00      	nop
 800eae4:	0800f745 	.word	0x0800f745
 800eae8:	0800f767 	.word	0x0800f767
 800eaec:	0800f79f 	.word	0x0800f79f
 800eaf0:	0800f7c3 	.word	0x0800f7c3

0800eaf4 <_cleanup_r>:
 800eaf4:	4901      	ldr	r1, [pc, #4]	; (800eafc <_cleanup_r+0x8>)
 800eaf6:	f000 b8c1 	b.w	800ec7c <_fwalk_reent>
 800eafa:	bf00      	nop
 800eafc:	0800faad 	.word	0x0800faad

0800eb00 <__sfmoreglue>:
 800eb00:	b570      	push	{r4, r5, r6, lr}
 800eb02:	2268      	movs	r2, #104	; 0x68
 800eb04:	1e4d      	subs	r5, r1, #1
 800eb06:	4355      	muls	r5, r2
 800eb08:	460e      	mov	r6, r1
 800eb0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb0e:	f000 f94b 	bl	800eda8 <_malloc_r>
 800eb12:	4604      	mov	r4, r0
 800eb14:	b140      	cbz	r0, 800eb28 <__sfmoreglue+0x28>
 800eb16:	2100      	movs	r1, #0
 800eb18:	e9c0 1600 	strd	r1, r6, [r0]
 800eb1c:	300c      	adds	r0, #12
 800eb1e:	60a0      	str	r0, [r4, #8]
 800eb20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb24:	f7ff ff26 	bl	800e974 <memset>
 800eb28:	4620      	mov	r0, r4
 800eb2a:	bd70      	pop	{r4, r5, r6, pc}

0800eb2c <__sfp_lock_acquire>:
 800eb2c:	4801      	ldr	r0, [pc, #4]	; (800eb34 <__sfp_lock_acquire+0x8>)
 800eb2e:	f000 b8c5 	b.w	800ecbc <__retarget_lock_acquire_recursive>
 800eb32:	bf00      	nop
 800eb34:	20008411 	.word	0x20008411

0800eb38 <__sfp_lock_release>:
 800eb38:	4801      	ldr	r0, [pc, #4]	; (800eb40 <__sfp_lock_release+0x8>)
 800eb3a:	f000 b8c0 	b.w	800ecbe <__retarget_lock_release_recursive>
 800eb3e:	bf00      	nop
 800eb40:	20008411 	.word	0x20008411

0800eb44 <__sinit_lock_acquire>:
 800eb44:	4801      	ldr	r0, [pc, #4]	; (800eb4c <__sinit_lock_acquire+0x8>)
 800eb46:	f000 b8b9 	b.w	800ecbc <__retarget_lock_acquire_recursive>
 800eb4a:	bf00      	nop
 800eb4c:	20008412 	.word	0x20008412

0800eb50 <__sinit_lock_release>:
 800eb50:	4801      	ldr	r0, [pc, #4]	; (800eb58 <__sinit_lock_release+0x8>)
 800eb52:	f000 b8b4 	b.w	800ecbe <__retarget_lock_release_recursive>
 800eb56:	bf00      	nop
 800eb58:	20008412 	.word	0x20008412

0800eb5c <__sinit>:
 800eb5c:	b510      	push	{r4, lr}
 800eb5e:	4604      	mov	r4, r0
 800eb60:	f7ff fff0 	bl	800eb44 <__sinit_lock_acquire>
 800eb64:	69a3      	ldr	r3, [r4, #24]
 800eb66:	b11b      	cbz	r3, 800eb70 <__sinit+0x14>
 800eb68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb6c:	f7ff bff0 	b.w	800eb50 <__sinit_lock_release>
 800eb70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb74:	6523      	str	r3, [r4, #80]	; 0x50
 800eb76:	4b13      	ldr	r3, [pc, #76]	; (800ebc4 <__sinit+0x68>)
 800eb78:	4a13      	ldr	r2, [pc, #76]	; (800ebc8 <__sinit+0x6c>)
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb7e:	42a3      	cmp	r3, r4
 800eb80:	bf04      	itt	eq
 800eb82:	2301      	moveq	r3, #1
 800eb84:	61a3      	streq	r3, [r4, #24]
 800eb86:	4620      	mov	r0, r4
 800eb88:	f000 f820 	bl	800ebcc <__sfp>
 800eb8c:	6060      	str	r0, [r4, #4]
 800eb8e:	4620      	mov	r0, r4
 800eb90:	f000 f81c 	bl	800ebcc <__sfp>
 800eb94:	60a0      	str	r0, [r4, #8]
 800eb96:	4620      	mov	r0, r4
 800eb98:	f000 f818 	bl	800ebcc <__sfp>
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	60e0      	str	r0, [r4, #12]
 800eba0:	2104      	movs	r1, #4
 800eba2:	6860      	ldr	r0, [r4, #4]
 800eba4:	f7ff ff82 	bl	800eaac <std>
 800eba8:	68a0      	ldr	r0, [r4, #8]
 800ebaa:	2201      	movs	r2, #1
 800ebac:	2109      	movs	r1, #9
 800ebae:	f7ff ff7d 	bl	800eaac <std>
 800ebb2:	68e0      	ldr	r0, [r4, #12]
 800ebb4:	2202      	movs	r2, #2
 800ebb6:	2112      	movs	r1, #18
 800ebb8:	f7ff ff78 	bl	800eaac <std>
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	61a3      	str	r3, [r4, #24]
 800ebc0:	e7d2      	b.n	800eb68 <__sinit+0xc>
 800ebc2:	bf00      	nop
 800ebc4:	080129ac 	.word	0x080129ac
 800ebc8:	0800eaf5 	.word	0x0800eaf5

0800ebcc <__sfp>:
 800ebcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebce:	4607      	mov	r7, r0
 800ebd0:	f7ff ffac 	bl	800eb2c <__sfp_lock_acquire>
 800ebd4:	4b1e      	ldr	r3, [pc, #120]	; (800ec50 <__sfp+0x84>)
 800ebd6:	681e      	ldr	r6, [r3, #0]
 800ebd8:	69b3      	ldr	r3, [r6, #24]
 800ebda:	b913      	cbnz	r3, 800ebe2 <__sfp+0x16>
 800ebdc:	4630      	mov	r0, r6
 800ebde:	f7ff ffbd 	bl	800eb5c <__sinit>
 800ebe2:	3648      	adds	r6, #72	; 0x48
 800ebe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	d503      	bpl.n	800ebf4 <__sfp+0x28>
 800ebec:	6833      	ldr	r3, [r6, #0]
 800ebee:	b30b      	cbz	r3, 800ec34 <__sfp+0x68>
 800ebf0:	6836      	ldr	r6, [r6, #0]
 800ebf2:	e7f7      	b.n	800ebe4 <__sfp+0x18>
 800ebf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ebf8:	b9d5      	cbnz	r5, 800ec30 <__sfp+0x64>
 800ebfa:	4b16      	ldr	r3, [pc, #88]	; (800ec54 <__sfp+0x88>)
 800ebfc:	60e3      	str	r3, [r4, #12]
 800ebfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec02:	6665      	str	r5, [r4, #100]	; 0x64
 800ec04:	f000 f859 	bl	800ecba <__retarget_lock_init_recursive>
 800ec08:	f7ff ff96 	bl	800eb38 <__sfp_lock_release>
 800ec0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec14:	6025      	str	r5, [r4, #0]
 800ec16:	61a5      	str	r5, [r4, #24]
 800ec18:	2208      	movs	r2, #8
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec20:	f7ff fea8 	bl	800e974 <memset>
 800ec24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec30:	3468      	adds	r4, #104	; 0x68
 800ec32:	e7d9      	b.n	800ebe8 <__sfp+0x1c>
 800ec34:	2104      	movs	r1, #4
 800ec36:	4638      	mov	r0, r7
 800ec38:	f7ff ff62 	bl	800eb00 <__sfmoreglue>
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	6030      	str	r0, [r6, #0]
 800ec40:	2800      	cmp	r0, #0
 800ec42:	d1d5      	bne.n	800ebf0 <__sfp+0x24>
 800ec44:	f7ff ff78 	bl	800eb38 <__sfp_lock_release>
 800ec48:	230c      	movs	r3, #12
 800ec4a:	603b      	str	r3, [r7, #0]
 800ec4c:	e7ee      	b.n	800ec2c <__sfp+0x60>
 800ec4e:	bf00      	nop
 800ec50:	080129ac 	.word	0x080129ac
 800ec54:	ffff0001 	.word	0xffff0001

0800ec58 <fiprintf>:
 800ec58:	b40e      	push	{r1, r2, r3}
 800ec5a:	b503      	push	{r0, r1, lr}
 800ec5c:	4601      	mov	r1, r0
 800ec5e:	ab03      	add	r3, sp, #12
 800ec60:	4805      	ldr	r0, [pc, #20]	; (800ec78 <fiprintf+0x20>)
 800ec62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec66:	6800      	ldr	r0, [r0, #0]
 800ec68:	9301      	str	r3, [sp, #4]
 800ec6a:	f000 fa97 	bl	800f19c <_vfiprintf_r>
 800ec6e:	b002      	add	sp, #8
 800ec70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec74:	b003      	add	sp, #12
 800ec76:	4770      	bx	lr
 800ec78:	2000002c 	.word	0x2000002c

0800ec7c <_fwalk_reent>:
 800ec7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec80:	4606      	mov	r6, r0
 800ec82:	4688      	mov	r8, r1
 800ec84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec88:	2700      	movs	r7, #0
 800ec8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec8e:	f1b9 0901 	subs.w	r9, r9, #1
 800ec92:	d505      	bpl.n	800eca0 <_fwalk_reent+0x24>
 800ec94:	6824      	ldr	r4, [r4, #0]
 800ec96:	2c00      	cmp	r4, #0
 800ec98:	d1f7      	bne.n	800ec8a <_fwalk_reent+0xe>
 800ec9a:	4638      	mov	r0, r7
 800ec9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eca0:	89ab      	ldrh	r3, [r5, #12]
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d907      	bls.n	800ecb6 <_fwalk_reent+0x3a>
 800eca6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecaa:	3301      	adds	r3, #1
 800ecac:	d003      	beq.n	800ecb6 <_fwalk_reent+0x3a>
 800ecae:	4629      	mov	r1, r5
 800ecb0:	4630      	mov	r0, r6
 800ecb2:	47c0      	blx	r8
 800ecb4:	4307      	orrs	r7, r0
 800ecb6:	3568      	adds	r5, #104	; 0x68
 800ecb8:	e7e9      	b.n	800ec8e <_fwalk_reent+0x12>

0800ecba <__retarget_lock_init_recursive>:
 800ecba:	4770      	bx	lr

0800ecbc <__retarget_lock_acquire_recursive>:
 800ecbc:	4770      	bx	lr

0800ecbe <__retarget_lock_release_recursive>:
 800ecbe:	4770      	bx	lr

0800ecc0 <malloc>:
 800ecc0:	4b02      	ldr	r3, [pc, #8]	; (800eccc <malloc+0xc>)
 800ecc2:	4601      	mov	r1, r0
 800ecc4:	6818      	ldr	r0, [r3, #0]
 800ecc6:	f000 b86f 	b.w	800eda8 <_malloc_r>
 800ecca:	bf00      	nop
 800eccc:	2000002c 	.word	0x2000002c

0800ecd0 <_free_r>:
 800ecd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ecd2:	2900      	cmp	r1, #0
 800ecd4:	d044      	beq.n	800ed60 <_free_r+0x90>
 800ecd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecda:	9001      	str	r0, [sp, #4]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	f1a1 0404 	sub.w	r4, r1, #4
 800ece2:	bfb8      	it	lt
 800ece4:	18e4      	addlt	r4, r4, r3
 800ece6:	f000 ff95 	bl	800fc14 <__malloc_lock>
 800ecea:	4a1e      	ldr	r2, [pc, #120]	; (800ed64 <_free_r+0x94>)
 800ecec:	9801      	ldr	r0, [sp, #4]
 800ecee:	6813      	ldr	r3, [r2, #0]
 800ecf0:	b933      	cbnz	r3, 800ed00 <_free_r+0x30>
 800ecf2:	6063      	str	r3, [r4, #4]
 800ecf4:	6014      	str	r4, [r2, #0]
 800ecf6:	b003      	add	sp, #12
 800ecf8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecfc:	f000 bf90 	b.w	800fc20 <__malloc_unlock>
 800ed00:	42a3      	cmp	r3, r4
 800ed02:	d908      	bls.n	800ed16 <_free_r+0x46>
 800ed04:	6825      	ldr	r5, [r4, #0]
 800ed06:	1961      	adds	r1, r4, r5
 800ed08:	428b      	cmp	r3, r1
 800ed0a:	bf01      	itttt	eq
 800ed0c:	6819      	ldreq	r1, [r3, #0]
 800ed0e:	685b      	ldreq	r3, [r3, #4]
 800ed10:	1949      	addeq	r1, r1, r5
 800ed12:	6021      	streq	r1, [r4, #0]
 800ed14:	e7ed      	b.n	800ecf2 <_free_r+0x22>
 800ed16:	461a      	mov	r2, r3
 800ed18:	685b      	ldr	r3, [r3, #4]
 800ed1a:	b10b      	cbz	r3, 800ed20 <_free_r+0x50>
 800ed1c:	42a3      	cmp	r3, r4
 800ed1e:	d9fa      	bls.n	800ed16 <_free_r+0x46>
 800ed20:	6811      	ldr	r1, [r2, #0]
 800ed22:	1855      	adds	r5, r2, r1
 800ed24:	42a5      	cmp	r5, r4
 800ed26:	d10b      	bne.n	800ed40 <_free_r+0x70>
 800ed28:	6824      	ldr	r4, [r4, #0]
 800ed2a:	4421      	add	r1, r4
 800ed2c:	1854      	adds	r4, r2, r1
 800ed2e:	42a3      	cmp	r3, r4
 800ed30:	6011      	str	r1, [r2, #0]
 800ed32:	d1e0      	bne.n	800ecf6 <_free_r+0x26>
 800ed34:	681c      	ldr	r4, [r3, #0]
 800ed36:	685b      	ldr	r3, [r3, #4]
 800ed38:	6053      	str	r3, [r2, #4]
 800ed3a:	4421      	add	r1, r4
 800ed3c:	6011      	str	r1, [r2, #0]
 800ed3e:	e7da      	b.n	800ecf6 <_free_r+0x26>
 800ed40:	d902      	bls.n	800ed48 <_free_r+0x78>
 800ed42:	230c      	movs	r3, #12
 800ed44:	6003      	str	r3, [r0, #0]
 800ed46:	e7d6      	b.n	800ecf6 <_free_r+0x26>
 800ed48:	6825      	ldr	r5, [r4, #0]
 800ed4a:	1961      	adds	r1, r4, r5
 800ed4c:	428b      	cmp	r3, r1
 800ed4e:	bf04      	itt	eq
 800ed50:	6819      	ldreq	r1, [r3, #0]
 800ed52:	685b      	ldreq	r3, [r3, #4]
 800ed54:	6063      	str	r3, [r4, #4]
 800ed56:	bf04      	itt	eq
 800ed58:	1949      	addeq	r1, r1, r5
 800ed5a:	6021      	streq	r1, [r4, #0]
 800ed5c:	6054      	str	r4, [r2, #4]
 800ed5e:	e7ca      	b.n	800ecf6 <_free_r+0x26>
 800ed60:	b003      	add	sp, #12
 800ed62:	bd30      	pop	{r4, r5, pc}
 800ed64:	20008414 	.word	0x20008414

0800ed68 <sbrk_aligned>:
 800ed68:	b570      	push	{r4, r5, r6, lr}
 800ed6a:	4e0e      	ldr	r6, [pc, #56]	; (800eda4 <sbrk_aligned+0x3c>)
 800ed6c:	460c      	mov	r4, r1
 800ed6e:	6831      	ldr	r1, [r6, #0]
 800ed70:	4605      	mov	r5, r0
 800ed72:	b911      	cbnz	r1, 800ed7a <sbrk_aligned+0x12>
 800ed74:	f000 fcd6 	bl	800f724 <_sbrk_r>
 800ed78:	6030      	str	r0, [r6, #0]
 800ed7a:	4621      	mov	r1, r4
 800ed7c:	4628      	mov	r0, r5
 800ed7e:	f000 fcd1 	bl	800f724 <_sbrk_r>
 800ed82:	1c43      	adds	r3, r0, #1
 800ed84:	d00a      	beq.n	800ed9c <sbrk_aligned+0x34>
 800ed86:	1cc4      	adds	r4, r0, #3
 800ed88:	f024 0403 	bic.w	r4, r4, #3
 800ed8c:	42a0      	cmp	r0, r4
 800ed8e:	d007      	beq.n	800eda0 <sbrk_aligned+0x38>
 800ed90:	1a21      	subs	r1, r4, r0
 800ed92:	4628      	mov	r0, r5
 800ed94:	f000 fcc6 	bl	800f724 <_sbrk_r>
 800ed98:	3001      	adds	r0, #1
 800ed9a:	d101      	bne.n	800eda0 <sbrk_aligned+0x38>
 800ed9c:	f04f 34ff 	mov.w	r4, #4294967295
 800eda0:	4620      	mov	r0, r4
 800eda2:	bd70      	pop	{r4, r5, r6, pc}
 800eda4:	20008418 	.word	0x20008418

0800eda8 <_malloc_r>:
 800eda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edac:	1ccd      	adds	r5, r1, #3
 800edae:	f025 0503 	bic.w	r5, r5, #3
 800edb2:	3508      	adds	r5, #8
 800edb4:	2d0c      	cmp	r5, #12
 800edb6:	bf38      	it	cc
 800edb8:	250c      	movcc	r5, #12
 800edba:	2d00      	cmp	r5, #0
 800edbc:	4607      	mov	r7, r0
 800edbe:	db01      	blt.n	800edc4 <_malloc_r+0x1c>
 800edc0:	42a9      	cmp	r1, r5
 800edc2:	d905      	bls.n	800edd0 <_malloc_r+0x28>
 800edc4:	230c      	movs	r3, #12
 800edc6:	603b      	str	r3, [r7, #0]
 800edc8:	2600      	movs	r6, #0
 800edca:	4630      	mov	r0, r6
 800edcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edd0:	4e2e      	ldr	r6, [pc, #184]	; (800ee8c <_malloc_r+0xe4>)
 800edd2:	f000 ff1f 	bl	800fc14 <__malloc_lock>
 800edd6:	6833      	ldr	r3, [r6, #0]
 800edd8:	461c      	mov	r4, r3
 800edda:	bb34      	cbnz	r4, 800ee2a <_malloc_r+0x82>
 800eddc:	4629      	mov	r1, r5
 800edde:	4638      	mov	r0, r7
 800ede0:	f7ff ffc2 	bl	800ed68 <sbrk_aligned>
 800ede4:	1c43      	adds	r3, r0, #1
 800ede6:	4604      	mov	r4, r0
 800ede8:	d14d      	bne.n	800ee86 <_malloc_r+0xde>
 800edea:	6834      	ldr	r4, [r6, #0]
 800edec:	4626      	mov	r6, r4
 800edee:	2e00      	cmp	r6, #0
 800edf0:	d140      	bne.n	800ee74 <_malloc_r+0xcc>
 800edf2:	6823      	ldr	r3, [r4, #0]
 800edf4:	4631      	mov	r1, r6
 800edf6:	4638      	mov	r0, r7
 800edf8:	eb04 0803 	add.w	r8, r4, r3
 800edfc:	f000 fc92 	bl	800f724 <_sbrk_r>
 800ee00:	4580      	cmp	r8, r0
 800ee02:	d13a      	bne.n	800ee7a <_malloc_r+0xd2>
 800ee04:	6821      	ldr	r1, [r4, #0]
 800ee06:	3503      	adds	r5, #3
 800ee08:	1a6d      	subs	r5, r5, r1
 800ee0a:	f025 0503 	bic.w	r5, r5, #3
 800ee0e:	3508      	adds	r5, #8
 800ee10:	2d0c      	cmp	r5, #12
 800ee12:	bf38      	it	cc
 800ee14:	250c      	movcc	r5, #12
 800ee16:	4629      	mov	r1, r5
 800ee18:	4638      	mov	r0, r7
 800ee1a:	f7ff ffa5 	bl	800ed68 <sbrk_aligned>
 800ee1e:	3001      	adds	r0, #1
 800ee20:	d02b      	beq.n	800ee7a <_malloc_r+0xd2>
 800ee22:	6823      	ldr	r3, [r4, #0]
 800ee24:	442b      	add	r3, r5
 800ee26:	6023      	str	r3, [r4, #0]
 800ee28:	e00e      	b.n	800ee48 <_malloc_r+0xa0>
 800ee2a:	6822      	ldr	r2, [r4, #0]
 800ee2c:	1b52      	subs	r2, r2, r5
 800ee2e:	d41e      	bmi.n	800ee6e <_malloc_r+0xc6>
 800ee30:	2a0b      	cmp	r2, #11
 800ee32:	d916      	bls.n	800ee62 <_malloc_r+0xba>
 800ee34:	1961      	adds	r1, r4, r5
 800ee36:	42a3      	cmp	r3, r4
 800ee38:	6025      	str	r5, [r4, #0]
 800ee3a:	bf18      	it	ne
 800ee3c:	6059      	strne	r1, [r3, #4]
 800ee3e:	6863      	ldr	r3, [r4, #4]
 800ee40:	bf08      	it	eq
 800ee42:	6031      	streq	r1, [r6, #0]
 800ee44:	5162      	str	r2, [r4, r5]
 800ee46:	604b      	str	r3, [r1, #4]
 800ee48:	4638      	mov	r0, r7
 800ee4a:	f104 060b 	add.w	r6, r4, #11
 800ee4e:	f000 fee7 	bl	800fc20 <__malloc_unlock>
 800ee52:	f026 0607 	bic.w	r6, r6, #7
 800ee56:	1d23      	adds	r3, r4, #4
 800ee58:	1af2      	subs	r2, r6, r3
 800ee5a:	d0b6      	beq.n	800edca <_malloc_r+0x22>
 800ee5c:	1b9b      	subs	r3, r3, r6
 800ee5e:	50a3      	str	r3, [r4, r2]
 800ee60:	e7b3      	b.n	800edca <_malloc_r+0x22>
 800ee62:	6862      	ldr	r2, [r4, #4]
 800ee64:	42a3      	cmp	r3, r4
 800ee66:	bf0c      	ite	eq
 800ee68:	6032      	streq	r2, [r6, #0]
 800ee6a:	605a      	strne	r2, [r3, #4]
 800ee6c:	e7ec      	b.n	800ee48 <_malloc_r+0xa0>
 800ee6e:	4623      	mov	r3, r4
 800ee70:	6864      	ldr	r4, [r4, #4]
 800ee72:	e7b2      	b.n	800edda <_malloc_r+0x32>
 800ee74:	4634      	mov	r4, r6
 800ee76:	6876      	ldr	r6, [r6, #4]
 800ee78:	e7b9      	b.n	800edee <_malloc_r+0x46>
 800ee7a:	230c      	movs	r3, #12
 800ee7c:	603b      	str	r3, [r7, #0]
 800ee7e:	4638      	mov	r0, r7
 800ee80:	f000 fece 	bl	800fc20 <__malloc_unlock>
 800ee84:	e7a1      	b.n	800edca <_malloc_r+0x22>
 800ee86:	6025      	str	r5, [r4, #0]
 800ee88:	e7de      	b.n	800ee48 <_malloc_r+0xa0>
 800ee8a:	bf00      	nop
 800ee8c:	20008414 	.word	0x20008414

0800ee90 <__ssputs_r>:
 800ee90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee94:	688e      	ldr	r6, [r1, #8]
 800ee96:	429e      	cmp	r6, r3
 800ee98:	4682      	mov	sl, r0
 800ee9a:	460c      	mov	r4, r1
 800ee9c:	4690      	mov	r8, r2
 800ee9e:	461f      	mov	r7, r3
 800eea0:	d838      	bhi.n	800ef14 <__ssputs_r+0x84>
 800eea2:	898a      	ldrh	r2, [r1, #12]
 800eea4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eea8:	d032      	beq.n	800ef10 <__ssputs_r+0x80>
 800eeaa:	6825      	ldr	r5, [r4, #0]
 800eeac:	6909      	ldr	r1, [r1, #16]
 800eeae:	eba5 0901 	sub.w	r9, r5, r1
 800eeb2:	6965      	ldr	r5, [r4, #20]
 800eeb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eeb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eebc:	3301      	adds	r3, #1
 800eebe:	444b      	add	r3, r9
 800eec0:	106d      	asrs	r5, r5, #1
 800eec2:	429d      	cmp	r5, r3
 800eec4:	bf38      	it	cc
 800eec6:	461d      	movcc	r5, r3
 800eec8:	0553      	lsls	r3, r2, #21
 800eeca:	d531      	bpl.n	800ef30 <__ssputs_r+0xa0>
 800eecc:	4629      	mov	r1, r5
 800eece:	f7ff ff6b 	bl	800eda8 <_malloc_r>
 800eed2:	4606      	mov	r6, r0
 800eed4:	b950      	cbnz	r0, 800eeec <__ssputs_r+0x5c>
 800eed6:	230c      	movs	r3, #12
 800eed8:	f8ca 3000 	str.w	r3, [sl]
 800eedc:	89a3      	ldrh	r3, [r4, #12]
 800eede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eee2:	81a3      	strh	r3, [r4, #12]
 800eee4:	f04f 30ff 	mov.w	r0, #4294967295
 800eee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeec:	6921      	ldr	r1, [r4, #16]
 800eeee:	464a      	mov	r2, r9
 800eef0:	f7ff fd18 	bl	800e924 <memcpy>
 800eef4:	89a3      	ldrh	r3, [r4, #12]
 800eef6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eefa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eefe:	81a3      	strh	r3, [r4, #12]
 800ef00:	6126      	str	r6, [r4, #16]
 800ef02:	6165      	str	r5, [r4, #20]
 800ef04:	444e      	add	r6, r9
 800ef06:	eba5 0509 	sub.w	r5, r5, r9
 800ef0a:	6026      	str	r6, [r4, #0]
 800ef0c:	60a5      	str	r5, [r4, #8]
 800ef0e:	463e      	mov	r6, r7
 800ef10:	42be      	cmp	r6, r7
 800ef12:	d900      	bls.n	800ef16 <__ssputs_r+0x86>
 800ef14:	463e      	mov	r6, r7
 800ef16:	6820      	ldr	r0, [r4, #0]
 800ef18:	4632      	mov	r2, r6
 800ef1a:	4641      	mov	r1, r8
 800ef1c:	f7ff fd10 	bl	800e940 <memmove>
 800ef20:	68a3      	ldr	r3, [r4, #8]
 800ef22:	1b9b      	subs	r3, r3, r6
 800ef24:	60a3      	str	r3, [r4, #8]
 800ef26:	6823      	ldr	r3, [r4, #0]
 800ef28:	4433      	add	r3, r6
 800ef2a:	6023      	str	r3, [r4, #0]
 800ef2c:	2000      	movs	r0, #0
 800ef2e:	e7db      	b.n	800eee8 <__ssputs_r+0x58>
 800ef30:	462a      	mov	r2, r5
 800ef32:	f000 fe7b 	bl	800fc2c <_realloc_r>
 800ef36:	4606      	mov	r6, r0
 800ef38:	2800      	cmp	r0, #0
 800ef3a:	d1e1      	bne.n	800ef00 <__ssputs_r+0x70>
 800ef3c:	6921      	ldr	r1, [r4, #16]
 800ef3e:	4650      	mov	r0, sl
 800ef40:	f7ff fec6 	bl	800ecd0 <_free_r>
 800ef44:	e7c7      	b.n	800eed6 <__ssputs_r+0x46>
	...

0800ef48 <_svfiprintf_r>:
 800ef48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef4c:	4698      	mov	r8, r3
 800ef4e:	898b      	ldrh	r3, [r1, #12]
 800ef50:	061b      	lsls	r3, r3, #24
 800ef52:	b09d      	sub	sp, #116	; 0x74
 800ef54:	4607      	mov	r7, r0
 800ef56:	460d      	mov	r5, r1
 800ef58:	4614      	mov	r4, r2
 800ef5a:	d50e      	bpl.n	800ef7a <_svfiprintf_r+0x32>
 800ef5c:	690b      	ldr	r3, [r1, #16]
 800ef5e:	b963      	cbnz	r3, 800ef7a <_svfiprintf_r+0x32>
 800ef60:	2140      	movs	r1, #64	; 0x40
 800ef62:	f7ff ff21 	bl	800eda8 <_malloc_r>
 800ef66:	6028      	str	r0, [r5, #0]
 800ef68:	6128      	str	r0, [r5, #16]
 800ef6a:	b920      	cbnz	r0, 800ef76 <_svfiprintf_r+0x2e>
 800ef6c:	230c      	movs	r3, #12
 800ef6e:	603b      	str	r3, [r7, #0]
 800ef70:	f04f 30ff 	mov.w	r0, #4294967295
 800ef74:	e0d1      	b.n	800f11a <_svfiprintf_r+0x1d2>
 800ef76:	2340      	movs	r3, #64	; 0x40
 800ef78:	616b      	str	r3, [r5, #20]
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ef7e:	2320      	movs	r3, #32
 800ef80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef88:	2330      	movs	r3, #48	; 0x30
 800ef8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f134 <_svfiprintf_r+0x1ec>
 800ef8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef92:	f04f 0901 	mov.w	r9, #1
 800ef96:	4623      	mov	r3, r4
 800ef98:	469a      	mov	sl, r3
 800ef9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef9e:	b10a      	cbz	r2, 800efa4 <_svfiprintf_r+0x5c>
 800efa0:	2a25      	cmp	r2, #37	; 0x25
 800efa2:	d1f9      	bne.n	800ef98 <_svfiprintf_r+0x50>
 800efa4:	ebba 0b04 	subs.w	fp, sl, r4
 800efa8:	d00b      	beq.n	800efc2 <_svfiprintf_r+0x7a>
 800efaa:	465b      	mov	r3, fp
 800efac:	4622      	mov	r2, r4
 800efae:	4629      	mov	r1, r5
 800efb0:	4638      	mov	r0, r7
 800efb2:	f7ff ff6d 	bl	800ee90 <__ssputs_r>
 800efb6:	3001      	adds	r0, #1
 800efb8:	f000 80aa 	beq.w	800f110 <_svfiprintf_r+0x1c8>
 800efbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efbe:	445a      	add	r2, fp
 800efc0:	9209      	str	r2, [sp, #36]	; 0x24
 800efc2:	f89a 3000 	ldrb.w	r3, [sl]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	f000 80a2 	beq.w	800f110 <_svfiprintf_r+0x1c8>
 800efcc:	2300      	movs	r3, #0
 800efce:	f04f 32ff 	mov.w	r2, #4294967295
 800efd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efd6:	f10a 0a01 	add.w	sl, sl, #1
 800efda:	9304      	str	r3, [sp, #16]
 800efdc:	9307      	str	r3, [sp, #28]
 800efde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efe2:	931a      	str	r3, [sp, #104]	; 0x68
 800efe4:	4654      	mov	r4, sl
 800efe6:	2205      	movs	r2, #5
 800efe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efec:	4851      	ldr	r0, [pc, #324]	; (800f134 <_svfiprintf_r+0x1ec>)
 800efee:	f7f1 f917 	bl	8000220 <memchr>
 800eff2:	9a04      	ldr	r2, [sp, #16]
 800eff4:	b9d8      	cbnz	r0, 800f02e <_svfiprintf_r+0xe6>
 800eff6:	06d0      	lsls	r0, r2, #27
 800eff8:	bf44      	itt	mi
 800effa:	2320      	movmi	r3, #32
 800effc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f000:	0711      	lsls	r1, r2, #28
 800f002:	bf44      	itt	mi
 800f004:	232b      	movmi	r3, #43	; 0x2b
 800f006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f00a:	f89a 3000 	ldrb.w	r3, [sl]
 800f00e:	2b2a      	cmp	r3, #42	; 0x2a
 800f010:	d015      	beq.n	800f03e <_svfiprintf_r+0xf6>
 800f012:	9a07      	ldr	r2, [sp, #28]
 800f014:	4654      	mov	r4, sl
 800f016:	2000      	movs	r0, #0
 800f018:	f04f 0c0a 	mov.w	ip, #10
 800f01c:	4621      	mov	r1, r4
 800f01e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f022:	3b30      	subs	r3, #48	; 0x30
 800f024:	2b09      	cmp	r3, #9
 800f026:	d94e      	bls.n	800f0c6 <_svfiprintf_r+0x17e>
 800f028:	b1b0      	cbz	r0, 800f058 <_svfiprintf_r+0x110>
 800f02a:	9207      	str	r2, [sp, #28]
 800f02c:	e014      	b.n	800f058 <_svfiprintf_r+0x110>
 800f02e:	eba0 0308 	sub.w	r3, r0, r8
 800f032:	fa09 f303 	lsl.w	r3, r9, r3
 800f036:	4313      	orrs	r3, r2
 800f038:	9304      	str	r3, [sp, #16]
 800f03a:	46a2      	mov	sl, r4
 800f03c:	e7d2      	b.n	800efe4 <_svfiprintf_r+0x9c>
 800f03e:	9b03      	ldr	r3, [sp, #12]
 800f040:	1d19      	adds	r1, r3, #4
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	9103      	str	r1, [sp, #12]
 800f046:	2b00      	cmp	r3, #0
 800f048:	bfbb      	ittet	lt
 800f04a:	425b      	neglt	r3, r3
 800f04c:	f042 0202 	orrlt.w	r2, r2, #2
 800f050:	9307      	strge	r3, [sp, #28]
 800f052:	9307      	strlt	r3, [sp, #28]
 800f054:	bfb8      	it	lt
 800f056:	9204      	strlt	r2, [sp, #16]
 800f058:	7823      	ldrb	r3, [r4, #0]
 800f05a:	2b2e      	cmp	r3, #46	; 0x2e
 800f05c:	d10c      	bne.n	800f078 <_svfiprintf_r+0x130>
 800f05e:	7863      	ldrb	r3, [r4, #1]
 800f060:	2b2a      	cmp	r3, #42	; 0x2a
 800f062:	d135      	bne.n	800f0d0 <_svfiprintf_r+0x188>
 800f064:	9b03      	ldr	r3, [sp, #12]
 800f066:	1d1a      	adds	r2, r3, #4
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	9203      	str	r2, [sp, #12]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	bfb8      	it	lt
 800f070:	f04f 33ff 	movlt.w	r3, #4294967295
 800f074:	3402      	adds	r4, #2
 800f076:	9305      	str	r3, [sp, #20]
 800f078:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f144 <_svfiprintf_r+0x1fc>
 800f07c:	7821      	ldrb	r1, [r4, #0]
 800f07e:	2203      	movs	r2, #3
 800f080:	4650      	mov	r0, sl
 800f082:	f7f1 f8cd 	bl	8000220 <memchr>
 800f086:	b140      	cbz	r0, 800f09a <_svfiprintf_r+0x152>
 800f088:	2340      	movs	r3, #64	; 0x40
 800f08a:	eba0 000a 	sub.w	r0, r0, sl
 800f08e:	fa03 f000 	lsl.w	r0, r3, r0
 800f092:	9b04      	ldr	r3, [sp, #16]
 800f094:	4303      	orrs	r3, r0
 800f096:	3401      	adds	r4, #1
 800f098:	9304      	str	r3, [sp, #16]
 800f09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f09e:	4826      	ldr	r0, [pc, #152]	; (800f138 <_svfiprintf_r+0x1f0>)
 800f0a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0a4:	2206      	movs	r2, #6
 800f0a6:	f7f1 f8bb 	bl	8000220 <memchr>
 800f0aa:	2800      	cmp	r0, #0
 800f0ac:	d038      	beq.n	800f120 <_svfiprintf_r+0x1d8>
 800f0ae:	4b23      	ldr	r3, [pc, #140]	; (800f13c <_svfiprintf_r+0x1f4>)
 800f0b0:	bb1b      	cbnz	r3, 800f0fa <_svfiprintf_r+0x1b2>
 800f0b2:	9b03      	ldr	r3, [sp, #12]
 800f0b4:	3307      	adds	r3, #7
 800f0b6:	f023 0307 	bic.w	r3, r3, #7
 800f0ba:	3308      	adds	r3, #8
 800f0bc:	9303      	str	r3, [sp, #12]
 800f0be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0c0:	4433      	add	r3, r6
 800f0c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f0c4:	e767      	b.n	800ef96 <_svfiprintf_r+0x4e>
 800f0c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0ca:	460c      	mov	r4, r1
 800f0cc:	2001      	movs	r0, #1
 800f0ce:	e7a5      	b.n	800f01c <_svfiprintf_r+0xd4>
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	3401      	adds	r4, #1
 800f0d4:	9305      	str	r3, [sp, #20]
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	f04f 0c0a 	mov.w	ip, #10
 800f0dc:	4620      	mov	r0, r4
 800f0de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0e2:	3a30      	subs	r2, #48	; 0x30
 800f0e4:	2a09      	cmp	r2, #9
 800f0e6:	d903      	bls.n	800f0f0 <_svfiprintf_r+0x1a8>
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d0c5      	beq.n	800f078 <_svfiprintf_r+0x130>
 800f0ec:	9105      	str	r1, [sp, #20]
 800f0ee:	e7c3      	b.n	800f078 <_svfiprintf_r+0x130>
 800f0f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0f4:	4604      	mov	r4, r0
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	e7f0      	b.n	800f0dc <_svfiprintf_r+0x194>
 800f0fa:	ab03      	add	r3, sp, #12
 800f0fc:	9300      	str	r3, [sp, #0]
 800f0fe:	462a      	mov	r2, r5
 800f100:	4b0f      	ldr	r3, [pc, #60]	; (800f140 <_svfiprintf_r+0x1f8>)
 800f102:	a904      	add	r1, sp, #16
 800f104:	4638      	mov	r0, r7
 800f106:	f3af 8000 	nop.w
 800f10a:	1c42      	adds	r2, r0, #1
 800f10c:	4606      	mov	r6, r0
 800f10e:	d1d6      	bne.n	800f0be <_svfiprintf_r+0x176>
 800f110:	89ab      	ldrh	r3, [r5, #12]
 800f112:	065b      	lsls	r3, r3, #25
 800f114:	f53f af2c 	bmi.w	800ef70 <_svfiprintf_r+0x28>
 800f118:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f11a:	b01d      	add	sp, #116	; 0x74
 800f11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f120:	ab03      	add	r3, sp, #12
 800f122:	9300      	str	r3, [sp, #0]
 800f124:	462a      	mov	r2, r5
 800f126:	4b06      	ldr	r3, [pc, #24]	; (800f140 <_svfiprintf_r+0x1f8>)
 800f128:	a904      	add	r1, sp, #16
 800f12a:	4638      	mov	r0, r7
 800f12c:	f000 f9d4 	bl	800f4d8 <_printf_i>
 800f130:	e7eb      	b.n	800f10a <_svfiprintf_r+0x1c2>
 800f132:	bf00      	nop
 800f134:	08012ac0 	.word	0x08012ac0
 800f138:	08012aca 	.word	0x08012aca
 800f13c:	00000000 	.word	0x00000000
 800f140:	0800ee91 	.word	0x0800ee91
 800f144:	08012ac6 	.word	0x08012ac6

0800f148 <__sfputc_r>:
 800f148:	6893      	ldr	r3, [r2, #8]
 800f14a:	3b01      	subs	r3, #1
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	b410      	push	{r4}
 800f150:	6093      	str	r3, [r2, #8]
 800f152:	da08      	bge.n	800f166 <__sfputc_r+0x1e>
 800f154:	6994      	ldr	r4, [r2, #24]
 800f156:	42a3      	cmp	r3, r4
 800f158:	db01      	blt.n	800f15e <__sfputc_r+0x16>
 800f15a:	290a      	cmp	r1, #10
 800f15c:	d103      	bne.n	800f166 <__sfputc_r+0x1e>
 800f15e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f162:	f000 bb33 	b.w	800f7cc <__swbuf_r>
 800f166:	6813      	ldr	r3, [r2, #0]
 800f168:	1c58      	adds	r0, r3, #1
 800f16a:	6010      	str	r0, [r2, #0]
 800f16c:	7019      	strb	r1, [r3, #0]
 800f16e:	4608      	mov	r0, r1
 800f170:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f174:	4770      	bx	lr

0800f176 <__sfputs_r>:
 800f176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f178:	4606      	mov	r6, r0
 800f17a:	460f      	mov	r7, r1
 800f17c:	4614      	mov	r4, r2
 800f17e:	18d5      	adds	r5, r2, r3
 800f180:	42ac      	cmp	r4, r5
 800f182:	d101      	bne.n	800f188 <__sfputs_r+0x12>
 800f184:	2000      	movs	r0, #0
 800f186:	e007      	b.n	800f198 <__sfputs_r+0x22>
 800f188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f18c:	463a      	mov	r2, r7
 800f18e:	4630      	mov	r0, r6
 800f190:	f7ff ffda 	bl	800f148 <__sfputc_r>
 800f194:	1c43      	adds	r3, r0, #1
 800f196:	d1f3      	bne.n	800f180 <__sfputs_r+0xa>
 800f198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f19c <_vfiprintf_r>:
 800f19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1a0:	460d      	mov	r5, r1
 800f1a2:	b09d      	sub	sp, #116	; 0x74
 800f1a4:	4614      	mov	r4, r2
 800f1a6:	4698      	mov	r8, r3
 800f1a8:	4606      	mov	r6, r0
 800f1aa:	b118      	cbz	r0, 800f1b4 <_vfiprintf_r+0x18>
 800f1ac:	6983      	ldr	r3, [r0, #24]
 800f1ae:	b90b      	cbnz	r3, 800f1b4 <_vfiprintf_r+0x18>
 800f1b0:	f7ff fcd4 	bl	800eb5c <__sinit>
 800f1b4:	4b89      	ldr	r3, [pc, #548]	; (800f3dc <_vfiprintf_r+0x240>)
 800f1b6:	429d      	cmp	r5, r3
 800f1b8:	d11b      	bne.n	800f1f2 <_vfiprintf_r+0x56>
 800f1ba:	6875      	ldr	r5, [r6, #4]
 800f1bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1be:	07d9      	lsls	r1, r3, #31
 800f1c0:	d405      	bmi.n	800f1ce <_vfiprintf_r+0x32>
 800f1c2:	89ab      	ldrh	r3, [r5, #12]
 800f1c4:	059a      	lsls	r2, r3, #22
 800f1c6:	d402      	bmi.n	800f1ce <_vfiprintf_r+0x32>
 800f1c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1ca:	f7ff fd77 	bl	800ecbc <__retarget_lock_acquire_recursive>
 800f1ce:	89ab      	ldrh	r3, [r5, #12]
 800f1d0:	071b      	lsls	r3, r3, #28
 800f1d2:	d501      	bpl.n	800f1d8 <_vfiprintf_r+0x3c>
 800f1d4:	692b      	ldr	r3, [r5, #16]
 800f1d6:	b9eb      	cbnz	r3, 800f214 <_vfiprintf_r+0x78>
 800f1d8:	4629      	mov	r1, r5
 800f1da:	4630      	mov	r0, r6
 800f1dc:	f000 fb5a 	bl	800f894 <__swsetup_r>
 800f1e0:	b1c0      	cbz	r0, 800f214 <_vfiprintf_r+0x78>
 800f1e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1e4:	07dc      	lsls	r4, r3, #31
 800f1e6:	d50e      	bpl.n	800f206 <_vfiprintf_r+0x6a>
 800f1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1ec:	b01d      	add	sp, #116	; 0x74
 800f1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f2:	4b7b      	ldr	r3, [pc, #492]	; (800f3e0 <_vfiprintf_r+0x244>)
 800f1f4:	429d      	cmp	r5, r3
 800f1f6:	d101      	bne.n	800f1fc <_vfiprintf_r+0x60>
 800f1f8:	68b5      	ldr	r5, [r6, #8]
 800f1fa:	e7df      	b.n	800f1bc <_vfiprintf_r+0x20>
 800f1fc:	4b79      	ldr	r3, [pc, #484]	; (800f3e4 <_vfiprintf_r+0x248>)
 800f1fe:	429d      	cmp	r5, r3
 800f200:	bf08      	it	eq
 800f202:	68f5      	ldreq	r5, [r6, #12]
 800f204:	e7da      	b.n	800f1bc <_vfiprintf_r+0x20>
 800f206:	89ab      	ldrh	r3, [r5, #12]
 800f208:	0598      	lsls	r0, r3, #22
 800f20a:	d4ed      	bmi.n	800f1e8 <_vfiprintf_r+0x4c>
 800f20c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f20e:	f7ff fd56 	bl	800ecbe <__retarget_lock_release_recursive>
 800f212:	e7e9      	b.n	800f1e8 <_vfiprintf_r+0x4c>
 800f214:	2300      	movs	r3, #0
 800f216:	9309      	str	r3, [sp, #36]	; 0x24
 800f218:	2320      	movs	r3, #32
 800f21a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f21e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f222:	2330      	movs	r3, #48	; 0x30
 800f224:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f3e8 <_vfiprintf_r+0x24c>
 800f228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f22c:	f04f 0901 	mov.w	r9, #1
 800f230:	4623      	mov	r3, r4
 800f232:	469a      	mov	sl, r3
 800f234:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f238:	b10a      	cbz	r2, 800f23e <_vfiprintf_r+0xa2>
 800f23a:	2a25      	cmp	r2, #37	; 0x25
 800f23c:	d1f9      	bne.n	800f232 <_vfiprintf_r+0x96>
 800f23e:	ebba 0b04 	subs.w	fp, sl, r4
 800f242:	d00b      	beq.n	800f25c <_vfiprintf_r+0xc0>
 800f244:	465b      	mov	r3, fp
 800f246:	4622      	mov	r2, r4
 800f248:	4629      	mov	r1, r5
 800f24a:	4630      	mov	r0, r6
 800f24c:	f7ff ff93 	bl	800f176 <__sfputs_r>
 800f250:	3001      	adds	r0, #1
 800f252:	f000 80aa 	beq.w	800f3aa <_vfiprintf_r+0x20e>
 800f256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f258:	445a      	add	r2, fp
 800f25a:	9209      	str	r2, [sp, #36]	; 0x24
 800f25c:	f89a 3000 	ldrb.w	r3, [sl]
 800f260:	2b00      	cmp	r3, #0
 800f262:	f000 80a2 	beq.w	800f3aa <_vfiprintf_r+0x20e>
 800f266:	2300      	movs	r3, #0
 800f268:	f04f 32ff 	mov.w	r2, #4294967295
 800f26c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f270:	f10a 0a01 	add.w	sl, sl, #1
 800f274:	9304      	str	r3, [sp, #16]
 800f276:	9307      	str	r3, [sp, #28]
 800f278:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f27c:	931a      	str	r3, [sp, #104]	; 0x68
 800f27e:	4654      	mov	r4, sl
 800f280:	2205      	movs	r2, #5
 800f282:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f286:	4858      	ldr	r0, [pc, #352]	; (800f3e8 <_vfiprintf_r+0x24c>)
 800f288:	f7f0 ffca 	bl	8000220 <memchr>
 800f28c:	9a04      	ldr	r2, [sp, #16]
 800f28e:	b9d8      	cbnz	r0, 800f2c8 <_vfiprintf_r+0x12c>
 800f290:	06d1      	lsls	r1, r2, #27
 800f292:	bf44      	itt	mi
 800f294:	2320      	movmi	r3, #32
 800f296:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f29a:	0713      	lsls	r3, r2, #28
 800f29c:	bf44      	itt	mi
 800f29e:	232b      	movmi	r3, #43	; 0x2b
 800f2a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2a4:	f89a 3000 	ldrb.w	r3, [sl]
 800f2a8:	2b2a      	cmp	r3, #42	; 0x2a
 800f2aa:	d015      	beq.n	800f2d8 <_vfiprintf_r+0x13c>
 800f2ac:	9a07      	ldr	r2, [sp, #28]
 800f2ae:	4654      	mov	r4, sl
 800f2b0:	2000      	movs	r0, #0
 800f2b2:	f04f 0c0a 	mov.w	ip, #10
 800f2b6:	4621      	mov	r1, r4
 800f2b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f2bc:	3b30      	subs	r3, #48	; 0x30
 800f2be:	2b09      	cmp	r3, #9
 800f2c0:	d94e      	bls.n	800f360 <_vfiprintf_r+0x1c4>
 800f2c2:	b1b0      	cbz	r0, 800f2f2 <_vfiprintf_r+0x156>
 800f2c4:	9207      	str	r2, [sp, #28]
 800f2c6:	e014      	b.n	800f2f2 <_vfiprintf_r+0x156>
 800f2c8:	eba0 0308 	sub.w	r3, r0, r8
 800f2cc:	fa09 f303 	lsl.w	r3, r9, r3
 800f2d0:	4313      	orrs	r3, r2
 800f2d2:	9304      	str	r3, [sp, #16]
 800f2d4:	46a2      	mov	sl, r4
 800f2d6:	e7d2      	b.n	800f27e <_vfiprintf_r+0xe2>
 800f2d8:	9b03      	ldr	r3, [sp, #12]
 800f2da:	1d19      	adds	r1, r3, #4
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	9103      	str	r1, [sp, #12]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	bfbb      	ittet	lt
 800f2e4:	425b      	neglt	r3, r3
 800f2e6:	f042 0202 	orrlt.w	r2, r2, #2
 800f2ea:	9307      	strge	r3, [sp, #28]
 800f2ec:	9307      	strlt	r3, [sp, #28]
 800f2ee:	bfb8      	it	lt
 800f2f0:	9204      	strlt	r2, [sp, #16]
 800f2f2:	7823      	ldrb	r3, [r4, #0]
 800f2f4:	2b2e      	cmp	r3, #46	; 0x2e
 800f2f6:	d10c      	bne.n	800f312 <_vfiprintf_r+0x176>
 800f2f8:	7863      	ldrb	r3, [r4, #1]
 800f2fa:	2b2a      	cmp	r3, #42	; 0x2a
 800f2fc:	d135      	bne.n	800f36a <_vfiprintf_r+0x1ce>
 800f2fe:	9b03      	ldr	r3, [sp, #12]
 800f300:	1d1a      	adds	r2, r3, #4
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	9203      	str	r2, [sp, #12]
 800f306:	2b00      	cmp	r3, #0
 800f308:	bfb8      	it	lt
 800f30a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f30e:	3402      	adds	r4, #2
 800f310:	9305      	str	r3, [sp, #20]
 800f312:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f3f8 <_vfiprintf_r+0x25c>
 800f316:	7821      	ldrb	r1, [r4, #0]
 800f318:	2203      	movs	r2, #3
 800f31a:	4650      	mov	r0, sl
 800f31c:	f7f0 ff80 	bl	8000220 <memchr>
 800f320:	b140      	cbz	r0, 800f334 <_vfiprintf_r+0x198>
 800f322:	2340      	movs	r3, #64	; 0x40
 800f324:	eba0 000a 	sub.w	r0, r0, sl
 800f328:	fa03 f000 	lsl.w	r0, r3, r0
 800f32c:	9b04      	ldr	r3, [sp, #16]
 800f32e:	4303      	orrs	r3, r0
 800f330:	3401      	adds	r4, #1
 800f332:	9304      	str	r3, [sp, #16]
 800f334:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f338:	482c      	ldr	r0, [pc, #176]	; (800f3ec <_vfiprintf_r+0x250>)
 800f33a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f33e:	2206      	movs	r2, #6
 800f340:	f7f0 ff6e 	bl	8000220 <memchr>
 800f344:	2800      	cmp	r0, #0
 800f346:	d03f      	beq.n	800f3c8 <_vfiprintf_r+0x22c>
 800f348:	4b29      	ldr	r3, [pc, #164]	; (800f3f0 <_vfiprintf_r+0x254>)
 800f34a:	bb1b      	cbnz	r3, 800f394 <_vfiprintf_r+0x1f8>
 800f34c:	9b03      	ldr	r3, [sp, #12]
 800f34e:	3307      	adds	r3, #7
 800f350:	f023 0307 	bic.w	r3, r3, #7
 800f354:	3308      	adds	r3, #8
 800f356:	9303      	str	r3, [sp, #12]
 800f358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f35a:	443b      	add	r3, r7
 800f35c:	9309      	str	r3, [sp, #36]	; 0x24
 800f35e:	e767      	b.n	800f230 <_vfiprintf_r+0x94>
 800f360:	fb0c 3202 	mla	r2, ip, r2, r3
 800f364:	460c      	mov	r4, r1
 800f366:	2001      	movs	r0, #1
 800f368:	e7a5      	b.n	800f2b6 <_vfiprintf_r+0x11a>
 800f36a:	2300      	movs	r3, #0
 800f36c:	3401      	adds	r4, #1
 800f36e:	9305      	str	r3, [sp, #20]
 800f370:	4619      	mov	r1, r3
 800f372:	f04f 0c0a 	mov.w	ip, #10
 800f376:	4620      	mov	r0, r4
 800f378:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f37c:	3a30      	subs	r2, #48	; 0x30
 800f37e:	2a09      	cmp	r2, #9
 800f380:	d903      	bls.n	800f38a <_vfiprintf_r+0x1ee>
 800f382:	2b00      	cmp	r3, #0
 800f384:	d0c5      	beq.n	800f312 <_vfiprintf_r+0x176>
 800f386:	9105      	str	r1, [sp, #20]
 800f388:	e7c3      	b.n	800f312 <_vfiprintf_r+0x176>
 800f38a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f38e:	4604      	mov	r4, r0
 800f390:	2301      	movs	r3, #1
 800f392:	e7f0      	b.n	800f376 <_vfiprintf_r+0x1da>
 800f394:	ab03      	add	r3, sp, #12
 800f396:	9300      	str	r3, [sp, #0]
 800f398:	462a      	mov	r2, r5
 800f39a:	4b16      	ldr	r3, [pc, #88]	; (800f3f4 <_vfiprintf_r+0x258>)
 800f39c:	a904      	add	r1, sp, #16
 800f39e:	4630      	mov	r0, r6
 800f3a0:	f3af 8000 	nop.w
 800f3a4:	4607      	mov	r7, r0
 800f3a6:	1c78      	adds	r0, r7, #1
 800f3a8:	d1d6      	bne.n	800f358 <_vfiprintf_r+0x1bc>
 800f3aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f3ac:	07d9      	lsls	r1, r3, #31
 800f3ae:	d405      	bmi.n	800f3bc <_vfiprintf_r+0x220>
 800f3b0:	89ab      	ldrh	r3, [r5, #12]
 800f3b2:	059a      	lsls	r2, r3, #22
 800f3b4:	d402      	bmi.n	800f3bc <_vfiprintf_r+0x220>
 800f3b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f3b8:	f7ff fc81 	bl	800ecbe <__retarget_lock_release_recursive>
 800f3bc:	89ab      	ldrh	r3, [r5, #12]
 800f3be:	065b      	lsls	r3, r3, #25
 800f3c0:	f53f af12 	bmi.w	800f1e8 <_vfiprintf_r+0x4c>
 800f3c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3c6:	e711      	b.n	800f1ec <_vfiprintf_r+0x50>
 800f3c8:	ab03      	add	r3, sp, #12
 800f3ca:	9300      	str	r3, [sp, #0]
 800f3cc:	462a      	mov	r2, r5
 800f3ce:	4b09      	ldr	r3, [pc, #36]	; (800f3f4 <_vfiprintf_r+0x258>)
 800f3d0:	a904      	add	r1, sp, #16
 800f3d2:	4630      	mov	r0, r6
 800f3d4:	f000 f880 	bl	800f4d8 <_printf_i>
 800f3d8:	e7e4      	b.n	800f3a4 <_vfiprintf_r+0x208>
 800f3da:	bf00      	nop
 800f3dc:	08012a80 	.word	0x08012a80
 800f3e0:	08012aa0 	.word	0x08012aa0
 800f3e4:	08012a60 	.word	0x08012a60
 800f3e8:	08012ac0 	.word	0x08012ac0
 800f3ec:	08012aca 	.word	0x08012aca
 800f3f0:	00000000 	.word	0x00000000
 800f3f4:	0800f177 	.word	0x0800f177
 800f3f8:	08012ac6 	.word	0x08012ac6

0800f3fc <_printf_common>:
 800f3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f400:	4616      	mov	r6, r2
 800f402:	4699      	mov	r9, r3
 800f404:	688a      	ldr	r2, [r1, #8]
 800f406:	690b      	ldr	r3, [r1, #16]
 800f408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f40c:	4293      	cmp	r3, r2
 800f40e:	bfb8      	it	lt
 800f410:	4613      	movlt	r3, r2
 800f412:	6033      	str	r3, [r6, #0]
 800f414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f418:	4607      	mov	r7, r0
 800f41a:	460c      	mov	r4, r1
 800f41c:	b10a      	cbz	r2, 800f422 <_printf_common+0x26>
 800f41e:	3301      	adds	r3, #1
 800f420:	6033      	str	r3, [r6, #0]
 800f422:	6823      	ldr	r3, [r4, #0]
 800f424:	0699      	lsls	r1, r3, #26
 800f426:	bf42      	ittt	mi
 800f428:	6833      	ldrmi	r3, [r6, #0]
 800f42a:	3302      	addmi	r3, #2
 800f42c:	6033      	strmi	r3, [r6, #0]
 800f42e:	6825      	ldr	r5, [r4, #0]
 800f430:	f015 0506 	ands.w	r5, r5, #6
 800f434:	d106      	bne.n	800f444 <_printf_common+0x48>
 800f436:	f104 0a19 	add.w	sl, r4, #25
 800f43a:	68e3      	ldr	r3, [r4, #12]
 800f43c:	6832      	ldr	r2, [r6, #0]
 800f43e:	1a9b      	subs	r3, r3, r2
 800f440:	42ab      	cmp	r3, r5
 800f442:	dc26      	bgt.n	800f492 <_printf_common+0x96>
 800f444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f448:	1e13      	subs	r3, r2, #0
 800f44a:	6822      	ldr	r2, [r4, #0]
 800f44c:	bf18      	it	ne
 800f44e:	2301      	movne	r3, #1
 800f450:	0692      	lsls	r2, r2, #26
 800f452:	d42b      	bmi.n	800f4ac <_printf_common+0xb0>
 800f454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f458:	4649      	mov	r1, r9
 800f45a:	4638      	mov	r0, r7
 800f45c:	47c0      	blx	r8
 800f45e:	3001      	adds	r0, #1
 800f460:	d01e      	beq.n	800f4a0 <_printf_common+0xa4>
 800f462:	6823      	ldr	r3, [r4, #0]
 800f464:	68e5      	ldr	r5, [r4, #12]
 800f466:	6832      	ldr	r2, [r6, #0]
 800f468:	f003 0306 	and.w	r3, r3, #6
 800f46c:	2b04      	cmp	r3, #4
 800f46e:	bf08      	it	eq
 800f470:	1aad      	subeq	r5, r5, r2
 800f472:	68a3      	ldr	r3, [r4, #8]
 800f474:	6922      	ldr	r2, [r4, #16]
 800f476:	bf0c      	ite	eq
 800f478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f47c:	2500      	movne	r5, #0
 800f47e:	4293      	cmp	r3, r2
 800f480:	bfc4      	itt	gt
 800f482:	1a9b      	subgt	r3, r3, r2
 800f484:	18ed      	addgt	r5, r5, r3
 800f486:	2600      	movs	r6, #0
 800f488:	341a      	adds	r4, #26
 800f48a:	42b5      	cmp	r5, r6
 800f48c:	d11a      	bne.n	800f4c4 <_printf_common+0xc8>
 800f48e:	2000      	movs	r0, #0
 800f490:	e008      	b.n	800f4a4 <_printf_common+0xa8>
 800f492:	2301      	movs	r3, #1
 800f494:	4652      	mov	r2, sl
 800f496:	4649      	mov	r1, r9
 800f498:	4638      	mov	r0, r7
 800f49a:	47c0      	blx	r8
 800f49c:	3001      	adds	r0, #1
 800f49e:	d103      	bne.n	800f4a8 <_printf_common+0xac>
 800f4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4a8:	3501      	adds	r5, #1
 800f4aa:	e7c6      	b.n	800f43a <_printf_common+0x3e>
 800f4ac:	18e1      	adds	r1, r4, r3
 800f4ae:	1c5a      	adds	r2, r3, #1
 800f4b0:	2030      	movs	r0, #48	; 0x30
 800f4b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4b6:	4422      	add	r2, r4
 800f4b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f4bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f4c0:	3302      	adds	r3, #2
 800f4c2:	e7c7      	b.n	800f454 <_printf_common+0x58>
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	4622      	mov	r2, r4
 800f4c8:	4649      	mov	r1, r9
 800f4ca:	4638      	mov	r0, r7
 800f4cc:	47c0      	blx	r8
 800f4ce:	3001      	adds	r0, #1
 800f4d0:	d0e6      	beq.n	800f4a0 <_printf_common+0xa4>
 800f4d2:	3601      	adds	r6, #1
 800f4d4:	e7d9      	b.n	800f48a <_printf_common+0x8e>
	...

0800f4d8 <_printf_i>:
 800f4d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f4dc:	7e0f      	ldrb	r7, [r1, #24]
 800f4de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f4e0:	2f78      	cmp	r7, #120	; 0x78
 800f4e2:	4691      	mov	r9, r2
 800f4e4:	4680      	mov	r8, r0
 800f4e6:	460c      	mov	r4, r1
 800f4e8:	469a      	mov	sl, r3
 800f4ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f4ee:	d807      	bhi.n	800f500 <_printf_i+0x28>
 800f4f0:	2f62      	cmp	r7, #98	; 0x62
 800f4f2:	d80a      	bhi.n	800f50a <_printf_i+0x32>
 800f4f4:	2f00      	cmp	r7, #0
 800f4f6:	f000 80d8 	beq.w	800f6aa <_printf_i+0x1d2>
 800f4fa:	2f58      	cmp	r7, #88	; 0x58
 800f4fc:	f000 80a3 	beq.w	800f646 <_printf_i+0x16e>
 800f500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f508:	e03a      	b.n	800f580 <_printf_i+0xa8>
 800f50a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f50e:	2b15      	cmp	r3, #21
 800f510:	d8f6      	bhi.n	800f500 <_printf_i+0x28>
 800f512:	a101      	add	r1, pc, #4	; (adr r1, 800f518 <_printf_i+0x40>)
 800f514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f518:	0800f571 	.word	0x0800f571
 800f51c:	0800f585 	.word	0x0800f585
 800f520:	0800f501 	.word	0x0800f501
 800f524:	0800f501 	.word	0x0800f501
 800f528:	0800f501 	.word	0x0800f501
 800f52c:	0800f501 	.word	0x0800f501
 800f530:	0800f585 	.word	0x0800f585
 800f534:	0800f501 	.word	0x0800f501
 800f538:	0800f501 	.word	0x0800f501
 800f53c:	0800f501 	.word	0x0800f501
 800f540:	0800f501 	.word	0x0800f501
 800f544:	0800f691 	.word	0x0800f691
 800f548:	0800f5b5 	.word	0x0800f5b5
 800f54c:	0800f673 	.word	0x0800f673
 800f550:	0800f501 	.word	0x0800f501
 800f554:	0800f501 	.word	0x0800f501
 800f558:	0800f6b3 	.word	0x0800f6b3
 800f55c:	0800f501 	.word	0x0800f501
 800f560:	0800f5b5 	.word	0x0800f5b5
 800f564:	0800f501 	.word	0x0800f501
 800f568:	0800f501 	.word	0x0800f501
 800f56c:	0800f67b 	.word	0x0800f67b
 800f570:	682b      	ldr	r3, [r5, #0]
 800f572:	1d1a      	adds	r2, r3, #4
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	602a      	str	r2, [r5, #0]
 800f578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f57c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f580:	2301      	movs	r3, #1
 800f582:	e0a3      	b.n	800f6cc <_printf_i+0x1f4>
 800f584:	6820      	ldr	r0, [r4, #0]
 800f586:	6829      	ldr	r1, [r5, #0]
 800f588:	0606      	lsls	r6, r0, #24
 800f58a:	f101 0304 	add.w	r3, r1, #4
 800f58e:	d50a      	bpl.n	800f5a6 <_printf_i+0xce>
 800f590:	680e      	ldr	r6, [r1, #0]
 800f592:	602b      	str	r3, [r5, #0]
 800f594:	2e00      	cmp	r6, #0
 800f596:	da03      	bge.n	800f5a0 <_printf_i+0xc8>
 800f598:	232d      	movs	r3, #45	; 0x2d
 800f59a:	4276      	negs	r6, r6
 800f59c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5a0:	485e      	ldr	r0, [pc, #376]	; (800f71c <_printf_i+0x244>)
 800f5a2:	230a      	movs	r3, #10
 800f5a4:	e019      	b.n	800f5da <_printf_i+0x102>
 800f5a6:	680e      	ldr	r6, [r1, #0]
 800f5a8:	602b      	str	r3, [r5, #0]
 800f5aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f5ae:	bf18      	it	ne
 800f5b0:	b236      	sxthne	r6, r6
 800f5b2:	e7ef      	b.n	800f594 <_printf_i+0xbc>
 800f5b4:	682b      	ldr	r3, [r5, #0]
 800f5b6:	6820      	ldr	r0, [r4, #0]
 800f5b8:	1d19      	adds	r1, r3, #4
 800f5ba:	6029      	str	r1, [r5, #0]
 800f5bc:	0601      	lsls	r1, r0, #24
 800f5be:	d501      	bpl.n	800f5c4 <_printf_i+0xec>
 800f5c0:	681e      	ldr	r6, [r3, #0]
 800f5c2:	e002      	b.n	800f5ca <_printf_i+0xf2>
 800f5c4:	0646      	lsls	r6, r0, #25
 800f5c6:	d5fb      	bpl.n	800f5c0 <_printf_i+0xe8>
 800f5c8:	881e      	ldrh	r6, [r3, #0]
 800f5ca:	4854      	ldr	r0, [pc, #336]	; (800f71c <_printf_i+0x244>)
 800f5cc:	2f6f      	cmp	r7, #111	; 0x6f
 800f5ce:	bf0c      	ite	eq
 800f5d0:	2308      	moveq	r3, #8
 800f5d2:	230a      	movne	r3, #10
 800f5d4:	2100      	movs	r1, #0
 800f5d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f5da:	6865      	ldr	r5, [r4, #4]
 800f5dc:	60a5      	str	r5, [r4, #8]
 800f5de:	2d00      	cmp	r5, #0
 800f5e0:	bfa2      	ittt	ge
 800f5e2:	6821      	ldrge	r1, [r4, #0]
 800f5e4:	f021 0104 	bicge.w	r1, r1, #4
 800f5e8:	6021      	strge	r1, [r4, #0]
 800f5ea:	b90e      	cbnz	r6, 800f5f0 <_printf_i+0x118>
 800f5ec:	2d00      	cmp	r5, #0
 800f5ee:	d04d      	beq.n	800f68c <_printf_i+0x1b4>
 800f5f0:	4615      	mov	r5, r2
 800f5f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800f5f6:	fb03 6711 	mls	r7, r3, r1, r6
 800f5fa:	5dc7      	ldrb	r7, [r0, r7]
 800f5fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f600:	4637      	mov	r7, r6
 800f602:	42bb      	cmp	r3, r7
 800f604:	460e      	mov	r6, r1
 800f606:	d9f4      	bls.n	800f5f2 <_printf_i+0x11a>
 800f608:	2b08      	cmp	r3, #8
 800f60a:	d10b      	bne.n	800f624 <_printf_i+0x14c>
 800f60c:	6823      	ldr	r3, [r4, #0]
 800f60e:	07de      	lsls	r6, r3, #31
 800f610:	d508      	bpl.n	800f624 <_printf_i+0x14c>
 800f612:	6923      	ldr	r3, [r4, #16]
 800f614:	6861      	ldr	r1, [r4, #4]
 800f616:	4299      	cmp	r1, r3
 800f618:	bfde      	ittt	le
 800f61a:	2330      	movle	r3, #48	; 0x30
 800f61c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f620:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f624:	1b52      	subs	r2, r2, r5
 800f626:	6122      	str	r2, [r4, #16]
 800f628:	f8cd a000 	str.w	sl, [sp]
 800f62c:	464b      	mov	r3, r9
 800f62e:	aa03      	add	r2, sp, #12
 800f630:	4621      	mov	r1, r4
 800f632:	4640      	mov	r0, r8
 800f634:	f7ff fee2 	bl	800f3fc <_printf_common>
 800f638:	3001      	adds	r0, #1
 800f63a:	d14c      	bne.n	800f6d6 <_printf_i+0x1fe>
 800f63c:	f04f 30ff 	mov.w	r0, #4294967295
 800f640:	b004      	add	sp, #16
 800f642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f646:	4835      	ldr	r0, [pc, #212]	; (800f71c <_printf_i+0x244>)
 800f648:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f64c:	6829      	ldr	r1, [r5, #0]
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	f851 6b04 	ldr.w	r6, [r1], #4
 800f654:	6029      	str	r1, [r5, #0]
 800f656:	061d      	lsls	r5, r3, #24
 800f658:	d514      	bpl.n	800f684 <_printf_i+0x1ac>
 800f65a:	07df      	lsls	r7, r3, #31
 800f65c:	bf44      	itt	mi
 800f65e:	f043 0320 	orrmi.w	r3, r3, #32
 800f662:	6023      	strmi	r3, [r4, #0]
 800f664:	b91e      	cbnz	r6, 800f66e <_printf_i+0x196>
 800f666:	6823      	ldr	r3, [r4, #0]
 800f668:	f023 0320 	bic.w	r3, r3, #32
 800f66c:	6023      	str	r3, [r4, #0]
 800f66e:	2310      	movs	r3, #16
 800f670:	e7b0      	b.n	800f5d4 <_printf_i+0xfc>
 800f672:	6823      	ldr	r3, [r4, #0]
 800f674:	f043 0320 	orr.w	r3, r3, #32
 800f678:	6023      	str	r3, [r4, #0]
 800f67a:	2378      	movs	r3, #120	; 0x78
 800f67c:	4828      	ldr	r0, [pc, #160]	; (800f720 <_printf_i+0x248>)
 800f67e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f682:	e7e3      	b.n	800f64c <_printf_i+0x174>
 800f684:	0659      	lsls	r1, r3, #25
 800f686:	bf48      	it	mi
 800f688:	b2b6      	uxthmi	r6, r6
 800f68a:	e7e6      	b.n	800f65a <_printf_i+0x182>
 800f68c:	4615      	mov	r5, r2
 800f68e:	e7bb      	b.n	800f608 <_printf_i+0x130>
 800f690:	682b      	ldr	r3, [r5, #0]
 800f692:	6826      	ldr	r6, [r4, #0]
 800f694:	6961      	ldr	r1, [r4, #20]
 800f696:	1d18      	adds	r0, r3, #4
 800f698:	6028      	str	r0, [r5, #0]
 800f69a:	0635      	lsls	r5, r6, #24
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	d501      	bpl.n	800f6a4 <_printf_i+0x1cc>
 800f6a0:	6019      	str	r1, [r3, #0]
 800f6a2:	e002      	b.n	800f6aa <_printf_i+0x1d2>
 800f6a4:	0670      	lsls	r0, r6, #25
 800f6a6:	d5fb      	bpl.n	800f6a0 <_printf_i+0x1c8>
 800f6a8:	8019      	strh	r1, [r3, #0]
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	6123      	str	r3, [r4, #16]
 800f6ae:	4615      	mov	r5, r2
 800f6b0:	e7ba      	b.n	800f628 <_printf_i+0x150>
 800f6b2:	682b      	ldr	r3, [r5, #0]
 800f6b4:	1d1a      	adds	r2, r3, #4
 800f6b6:	602a      	str	r2, [r5, #0]
 800f6b8:	681d      	ldr	r5, [r3, #0]
 800f6ba:	6862      	ldr	r2, [r4, #4]
 800f6bc:	2100      	movs	r1, #0
 800f6be:	4628      	mov	r0, r5
 800f6c0:	f7f0 fdae 	bl	8000220 <memchr>
 800f6c4:	b108      	cbz	r0, 800f6ca <_printf_i+0x1f2>
 800f6c6:	1b40      	subs	r0, r0, r5
 800f6c8:	6060      	str	r0, [r4, #4]
 800f6ca:	6863      	ldr	r3, [r4, #4]
 800f6cc:	6123      	str	r3, [r4, #16]
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6d4:	e7a8      	b.n	800f628 <_printf_i+0x150>
 800f6d6:	6923      	ldr	r3, [r4, #16]
 800f6d8:	462a      	mov	r2, r5
 800f6da:	4649      	mov	r1, r9
 800f6dc:	4640      	mov	r0, r8
 800f6de:	47d0      	blx	sl
 800f6e0:	3001      	adds	r0, #1
 800f6e2:	d0ab      	beq.n	800f63c <_printf_i+0x164>
 800f6e4:	6823      	ldr	r3, [r4, #0]
 800f6e6:	079b      	lsls	r3, r3, #30
 800f6e8:	d413      	bmi.n	800f712 <_printf_i+0x23a>
 800f6ea:	68e0      	ldr	r0, [r4, #12]
 800f6ec:	9b03      	ldr	r3, [sp, #12]
 800f6ee:	4298      	cmp	r0, r3
 800f6f0:	bfb8      	it	lt
 800f6f2:	4618      	movlt	r0, r3
 800f6f4:	e7a4      	b.n	800f640 <_printf_i+0x168>
 800f6f6:	2301      	movs	r3, #1
 800f6f8:	4632      	mov	r2, r6
 800f6fa:	4649      	mov	r1, r9
 800f6fc:	4640      	mov	r0, r8
 800f6fe:	47d0      	blx	sl
 800f700:	3001      	adds	r0, #1
 800f702:	d09b      	beq.n	800f63c <_printf_i+0x164>
 800f704:	3501      	adds	r5, #1
 800f706:	68e3      	ldr	r3, [r4, #12]
 800f708:	9903      	ldr	r1, [sp, #12]
 800f70a:	1a5b      	subs	r3, r3, r1
 800f70c:	42ab      	cmp	r3, r5
 800f70e:	dcf2      	bgt.n	800f6f6 <_printf_i+0x21e>
 800f710:	e7eb      	b.n	800f6ea <_printf_i+0x212>
 800f712:	2500      	movs	r5, #0
 800f714:	f104 0619 	add.w	r6, r4, #25
 800f718:	e7f5      	b.n	800f706 <_printf_i+0x22e>
 800f71a:	bf00      	nop
 800f71c:	08012ad1 	.word	0x08012ad1
 800f720:	08012ae2 	.word	0x08012ae2

0800f724 <_sbrk_r>:
 800f724:	b538      	push	{r3, r4, r5, lr}
 800f726:	4d06      	ldr	r5, [pc, #24]	; (800f740 <_sbrk_r+0x1c>)
 800f728:	2300      	movs	r3, #0
 800f72a:	4604      	mov	r4, r0
 800f72c:	4608      	mov	r0, r1
 800f72e:	602b      	str	r3, [r5, #0]
 800f730:	f7f1 f9b0 	bl	8000a94 <_sbrk>
 800f734:	1c43      	adds	r3, r0, #1
 800f736:	d102      	bne.n	800f73e <_sbrk_r+0x1a>
 800f738:	682b      	ldr	r3, [r5, #0]
 800f73a:	b103      	cbz	r3, 800f73e <_sbrk_r+0x1a>
 800f73c:	6023      	str	r3, [r4, #0]
 800f73e:	bd38      	pop	{r3, r4, r5, pc}
 800f740:	2000840c 	.word	0x2000840c

0800f744 <__sread>:
 800f744:	b510      	push	{r4, lr}
 800f746:	460c      	mov	r4, r1
 800f748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f74c:	f000 fa9e 	bl	800fc8c <_read_r>
 800f750:	2800      	cmp	r0, #0
 800f752:	bfab      	itete	ge
 800f754:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f756:	89a3      	ldrhlt	r3, [r4, #12]
 800f758:	181b      	addge	r3, r3, r0
 800f75a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f75e:	bfac      	ite	ge
 800f760:	6563      	strge	r3, [r4, #84]	; 0x54
 800f762:	81a3      	strhlt	r3, [r4, #12]
 800f764:	bd10      	pop	{r4, pc}

0800f766 <__swrite>:
 800f766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f76a:	461f      	mov	r7, r3
 800f76c:	898b      	ldrh	r3, [r1, #12]
 800f76e:	05db      	lsls	r3, r3, #23
 800f770:	4605      	mov	r5, r0
 800f772:	460c      	mov	r4, r1
 800f774:	4616      	mov	r6, r2
 800f776:	d505      	bpl.n	800f784 <__swrite+0x1e>
 800f778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f77c:	2302      	movs	r3, #2
 800f77e:	2200      	movs	r2, #0
 800f780:	f000 f9d0 	bl	800fb24 <_lseek_r>
 800f784:	89a3      	ldrh	r3, [r4, #12]
 800f786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f78a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f78e:	81a3      	strh	r3, [r4, #12]
 800f790:	4632      	mov	r2, r6
 800f792:	463b      	mov	r3, r7
 800f794:	4628      	mov	r0, r5
 800f796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f79a:	f000 b869 	b.w	800f870 <_write_r>

0800f79e <__sseek>:
 800f79e:	b510      	push	{r4, lr}
 800f7a0:	460c      	mov	r4, r1
 800f7a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7a6:	f000 f9bd 	bl	800fb24 <_lseek_r>
 800f7aa:	1c43      	adds	r3, r0, #1
 800f7ac:	89a3      	ldrh	r3, [r4, #12]
 800f7ae:	bf15      	itete	ne
 800f7b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f7b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f7b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f7ba:	81a3      	strheq	r3, [r4, #12]
 800f7bc:	bf18      	it	ne
 800f7be:	81a3      	strhne	r3, [r4, #12]
 800f7c0:	bd10      	pop	{r4, pc}

0800f7c2 <__sclose>:
 800f7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7c6:	f000 b8db 	b.w	800f980 <_close_r>
	...

0800f7cc <__swbuf_r>:
 800f7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ce:	460e      	mov	r6, r1
 800f7d0:	4614      	mov	r4, r2
 800f7d2:	4605      	mov	r5, r0
 800f7d4:	b118      	cbz	r0, 800f7de <__swbuf_r+0x12>
 800f7d6:	6983      	ldr	r3, [r0, #24]
 800f7d8:	b90b      	cbnz	r3, 800f7de <__swbuf_r+0x12>
 800f7da:	f7ff f9bf 	bl	800eb5c <__sinit>
 800f7de:	4b21      	ldr	r3, [pc, #132]	; (800f864 <__swbuf_r+0x98>)
 800f7e0:	429c      	cmp	r4, r3
 800f7e2:	d12b      	bne.n	800f83c <__swbuf_r+0x70>
 800f7e4:	686c      	ldr	r4, [r5, #4]
 800f7e6:	69a3      	ldr	r3, [r4, #24]
 800f7e8:	60a3      	str	r3, [r4, #8]
 800f7ea:	89a3      	ldrh	r3, [r4, #12]
 800f7ec:	071a      	lsls	r2, r3, #28
 800f7ee:	d52f      	bpl.n	800f850 <__swbuf_r+0x84>
 800f7f0:	6923      	ldr	r3, [r4, #16]
 800f7f2:	b36b      	cbz	r3, 800f850 <__swbuf_r+0x84>
 800f7f4:	6923      	ldr	r3, [r4, #16]
 800f7f6:	6820      	ldr	r0, [r4, #0]
 800f7f8:	1ac0      	subs	r0, r0, r3
 800f7fa:	6963      	ldr	r3, [r4, #20]
 800f7fc:	b2f6      	uxtb	r6, r6
 800f7fe:	4283      	cmp	r3, r0
 800f800:	4637      	mov	r7, r6
 800f802:	dc04      	bgt.n	800f80e <__swbuf_r+0x42>
 800f804:	4621      	mov	r1, r4
 800f806:	4628      	mov	r0, r5
 800f808:	f000 f950 	bl	800faac <_fflush_r>
 800f80c:	bb30      	cbnz	r0, 800f85c <__swbuf_r+0x90>
 800f80e:	68a3      	ldr	r3, [r4, #8]
 800f810:	3b01      	subs	r3, #1
 800f812:	60a3      	str	r3, [r4, #8]
 800f814:	6823      	ldr	r3, [r4, #0]
 800f816:	1c5a      	adds	r2, r3, #1
 800f818:	6022      	str	r2, [r4, #0]
 800f81a:	701e      	strb	r6, [r3, #0]
 800f81c:	6963      	ldr	r3, [r4, #20]
 800f81e:	3001      	adds	r0, #1
 800f820:	4283      	cmp	r3, r0
 800f822:	d004      	beq.n	800f82e <__swbuf_r+0x62>
 800f824:	89a3      	ldrh	r3, [r4, #12]
 800f826:	07db      	lsls	r3, r3, #31
 800f828:	d506      	bpl.n	800f838 <__swbuf_r+0x6c>
 800f82a:	2e0a      	cmp	r6, #10
 800f82c:	d104      	bne.n	800f838 <__swbuf_r+0x6c>
 800f82e:	4621      	mov	r1, r4
 800f830:	4628      	mov	r0, r5
 800f832:	f000 f93b 	bl	800faac <_fflush_r>
 800f836:	b988      	cbnz	r0, 800f85c <__swbuf_r+0x90>
 800f838:	4638      	mov	r0, r7
 800f83a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f83c:	4b0a      	ldr	r3, [pc, #40]	; (800f868 <__swbuf_r+0x9c>)
 800f83e:	429c      	cmp	r4, r3
 800f840:	d101      	bne.n	800f846 <__swbuf_r+0x7a>
 800f842:	68ac      	ldr	r4, [r5, #8]
 800f844:	e7cf      	b.n	800f7e6 <__swbuf_r+0x1a>
 800f846:	4b09      	ldr	r3, [pc, #36]	; (800f86c <__swbuf_r+0xa0>)
 800f848:	429c      	cmp	r4, r3
 800f84a:	bf08      	it	eq
 800f84c:	68ec      	ldreq	r4, [r5, #12]
 800f84e:	e7ca      	b.n	800f7e6 <__swbuf_r+0x1a>
 800f850:	4621      	mov	r1, r4
 800f852:	4628      	mov	r0, r5
 800f854:	f000 f81e 	bl	800f894 <__swsetup_r>
 800f858:	2800      	cmp	r0, #0
 800f85a:	d0cb      	beq.n	800f7f4 <__swbuf_r+0x28>
 800f85c:	f04f 37ff 	mov.w	r7, #4294967295
 800f860:	e7ea      	b.n	800f838 <__swbuf_r+0x6c>
 800f862:	bf00      	nop
 800f864:	08012a80 	.word	0x08012a80
 800f868:	08012aa0 	.word	0x08012aa0
 800f86c:	08012a60 	.word	0x08012a60

0800f870 <_write_r>:
 800f870:	b538      	push	{r3, r4, r5, lr}
 800f872:	4d07      	ldr	r5, [pc, #28]	; (800f890 <_write_r+0x20>)
 800f874:	4604      	mov	r4, r0
 800f876:	4608      	mov	r0, r1
 800f878:	4611      	mov	r1, r2
 800f87a:	2200      	movs	r2, #0
 800f87c:	602a      	str	r2, [r5, #0]
 800f87e:	461a      	mov	r2, r3
 800f880:	f7f1 f8b7 	bl	80009f2 <_write>
 800f884:	1c43      	adds	r3, r0, #1
 800f886:	d102      	bne.n	800f88e <_write_r+0x1e>
 800f888:	682b      	ldr	r3, [r5, #0]
 800f88a:	b103      	cbz	r3, 800f88e <_write_r+0x1e>
 800f88c:	6023      	str	r3, [r4, #0]
 800f88e:	bd38      	pop	{r3, r4, r5, pc}
 800f890:	2000840c 	.word	0x2000840c

0800f894 <__swsetup_r>:
 800f894:	4b32      	ldr	r3, [pc, #200]	; (800f960 <__swsetup_r+0xcc>)
 800f896:	b570      	push	{r4, r5, r6, lr}
 800f898:	681d      	ldr	r5, [r3, #0]
 800f89a:	4606      	mov	r6, r0
 800f89c:	460c      	mov	r4, r1
 800f89e:	b125      	cbz	r5, 800f8aa <__swsetup_r+0x16>
 800f8a0:	69ab      	ldr	r3, [r5, #24]
 800f8a2:	b913      	cbnz	r3, 800f8aa <__swsetup_r+0x16>
 800f8a4:	4628      	mov	r0, r5
 800f8a6:	f7ff f959 	bl	800eb5c <__sinit>
 800f8aa:	4b2e      	ldr	r3, [pc, #184]	; (800f964 <__swsetup_r+0xd0>)
 800f8ac:	429c      	cmp	r4, r3
 800f8ae:	d10f      	bne.n	800f8d0 <__swsetup_r+0x3c>
 800f8b0:	686c      	ldr	r4, [r5, #4]
 800f8b2:	89a3      	ldrh	r3, [r4, #12]
 800f8b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f8b8:	0719      	lsls	r1, r3, #28
 800f8ba:	d42c      	bmi.n	800f916 <__swsetup_r+0x82>
 800f8bc:	06dd      	lsls	r5, r3, #27
 800f8be:	d411      	bmi.n	800f8e4 <__swsetup_r+0x50>
 800f8c0:	2309      	movs	r3, #9
 800f8c2:	6033      	str	r3, [r6, #0]
 800f8c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f8c8:	81a3      	strh	r3, [r4, #12]
 800f8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ce:	e03e      	b.n	800f94e <__swsetup_r+0xba>
 800f8d0:	4b25      	ldr	r3, [pc, #148]	; (800f968 <__swsetup_r+0xd4>)
 800f8d2:	429c      	cmp	r4, r3
 800f8d4:	d101      	bne.n	800f8da <__swsetup_r+0x46>
 800f8d6:	68ac      	ldr	r4, [r5, #8]
 800f8d8:	e7eb      	b.n	800f8b2 <__swsetup_r+0x1e>
 800f8da:	4b24      	ldr	r3, [pc, #144]	; (800f96c <__swsetup_r+0xd8>)
 800f8dc:	429c      	cmp	r4, r3
 800f8de:	bf08      	it	eq
 800f8e0:	68ec      	ldreq	r4, [r5, #12]
 800f8e2:	e7e6      	b.n	800f8b2 <__swsetup_r+0x1e>
 800f8e4:	0758      	lsls	r0, r3, #29
 800f8e6:	d512      	bpl.n	800f90e <__swsetup_r+0x7a>
 800f8e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8ea:	b141      	cbz	r1, 800f8fe <__swsetup_r+0x6a>
 800f8ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8f0:	4299      	cmp	r1, r3
 800f8f2:	d002      	beq.n	800f8fa <__swsetup_r+0x66>
 800f8f4:	4630      	mov	r0, r6
 800f8f6:	f7ff f9eb 	bl	800ecd0 <_free_r>
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	6363      	str	r3, [r4, #52]	; 0x34
 800f8fe:	89a3      	ldrh	r3, [r4, #12]
 800f900:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f904:	81a3      	strh	r3, [r4, #12]
 800f906:	2300      	movs	r3, #0
 800f908:	6063      	str	r3, [r4, #4]
 800f90a:	6923      	ldr	r3, [r4, #16]
 800f90c:	6023      	str	r3, [r4, #0]
 800f90e:	89a3      	ldrh	r3, [r4, #12]
 800f910:	f043 0308 	orr.w	r3, r3, #8
 800f914:	81a3      	strh	r3, [r4, #12]
 800f916:	6923      	ldr	r3, [r4, #16]
 800f918:	b94b      	cbnz	r3, 800f92e <__swsetup_r+0x9a>
 800f91a:	89a3      	ldrh	r3, [r4, #12]
 800f91c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f920:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f924:	d003      	beq.n	800f92e <__swsetup_r+0x9a>
 800f926:	4621      	mov	r1, r4
 800f928:	4630      	mov	r0, r6
 800f92a:	f000 f933 	bl	800fb94 <__smakebuf_r>
 800f92e:	89a0      	ldrh	r0, [r4, #12]
 800f930:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f934:	f010 0301 	ands.w	r3, r0, #1
 800f938:	d00a      	beq.n	800f950 <__swsetup_r+0xbc>
 800f93a:	2300      	movs	r3, #0
 800f93c:	60a3      	str	r3, [r4, #8]
 800f93e:	6963      	ldr	r3, [r4, #20]
 800f940:	425b      	negs	r3, r3
 800f942:	61a3      	str	r3, [r4, #24]
 800f944:	6923      	ldr	r3, [r4, #16]
 800f946:	b943      	cbnz	r3, 800f95a <__swsetup_r+0xc6>
 800f948:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f94c:	d1ba      	bne.n	800f8c4 <__swsetup_r+0x30>
 800f94e:	bd70      	pop	{r4, r5, r6, pc}
 800f950:	0781      	lsls	r1, r0, #30
 800f952:	bf58      	it	pl
 800f954:	6963      	ldrpl	r3, [r4, #20]
 800f956:	60a3      	str	r3, [r4, #8]
 800f958:	e7f4      	b.n	800f944 <__swsetup_r+0xb0>
 800f95a:	2000      	movs	r0, #0
 800f95c:	e7f7      	b.n	800f94e <__swsetup_r+0xba>
 800f95e:	bf00      	nop
 800f960:	2000002c 	.word	0x2000002c
 800f964:	08012a80 	.word	0x08012a80
 800f968:	08012aa0 	.word	0x08012aa0
 800f96c:	08012a60 	.word	0x08012a60

0800f970 <abort>:
 800f970:	b508      	push	{r3, lr}
 800f972:	2006      	movs	r0, #6
 800f974:	f000 f9c4 	bl	800fd00 <raise>
 800f978:	2001      	movs	r0, #1
 800f97a:	f7f1 f813 	bl	80009a4 <_exit>
	...

0800f980 <_close_r>:
 800f980:	b538      	push	{r3, r4, r5, lr}
 800f982:	4d06      	ldr	r5, [pc, #24]	; (800f99c <_close_r+0x1c>)
 800f984:	2300      	movs	r3, #0
 800f986:	4604      	mov	r4, r0
 800f988:	4608      	mov	r0, r1
 800f98a:	602b      	str	r3, [r5, #0]
 800f98c:	f7f1 f84d 	bl	8000a2a <_close>
 800f990:	1c43      	adds	r3, r0, #1
 800f992:	d102      	bne.n	800f99a <_close_r+0x1a>
 800f994:	682b      	ldr	r3, [r5, #0]
 800f996:	b103      	cbz	r3, 800f99a <_close_r+0x1a>
 800f998:	6023      	str	r3, [r4, #0]
 800f99a:	bd38      	pop	{r3, r4, r5, pc}
 800f99c:	2000840c 	.word	0x2000840c

0800f9a0 <__sflush_r>:
 800f9a0:	898a      	ldrh	r2, [r1, #12]
 800f9a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a6:	4605      	mov	r5, r0
 800f9a8:	0710      	lsls	r0, r2, #28
 800f9aa:	460c      	mov	r4, r1
 800f9ac:	d458      	bmi.n	800fa60 <__sflush_r+0xc0>
 800f9ae:	684b      	ldr	r3, [r1, #4]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	dc05      	bgt.n	800f9c0 <__sflush_r+0x20>
 800f9b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	dc02      	bgt.n	800f9c0 <__sflush_r+0x20>
 800f9ba:	2000      	movs	r0, #0
 800f9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f9c2:	2e00      	cmp	r6, #0
 800f9c4:	d0f9      	beq.n	800f9ba <__sflush_r+0x1a>
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f9cc:	682f      	ldr	r7, [r5, #0]
 800f9ce:	602b      	str	r3, [r5, #0]
 800f9d0:	d032      	beq.n	800fa38 <__sflush_r+0x98>
 800f9d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f9d4:	89a3      	ldrh	r3, [r4, #12]
 800f9d6:	075a      	lsls	r2, r3, #29
 800f9d8:	d505      	bpl.n	800f9e6 <__sflush_r+0x46>
 800f9da:	6863      	ldr	r3, [r4, #4]
 800f9dc:	1ac0      	subs	r0, r0, r3
 800f9de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f9e0:	b10b      	cbz	r3, 800f9e6 <__sflush_r+0x46>
 800f9e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f9e4:	1ac0      	subs	r0, r0, r3
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	4602      	mov	r2, r0
 800f9ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f9ec:	6a21      	ldr	r1, [r4, #32]
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	47b0      	blx	r6
 800f9f2:	1c43      	adds	r3, r0, #1
 800f9f4:	89a3      	ldrh	r3, [r4, #12]
 800f9f6:	d106      	bne.n	800fa06 <__sflush_r+0x66>
 800f9f8:	6829      	ldr	r1, [r5, #0]
 800f9fa:	291d      	cmp	r1, #29
 800f9fc:	d82c      	bhi.n	800fa58 <__sflush_r+0xb8>
 800f9fe:	4a2a      	ldr	r2, [pc, #168]	; (800faa8 <__sflush_r+0x108>)
 800fa00:	40ca      	lsrs	r2, r1
 800fa02:	07d6      	lsls	r6, r2, #31
 800fa04:	d528      	bpl.n	800fa58 <__sflush_r+0xb8>
 800fa06:	2200      	movs	r2, #0
 800fa08:	6062      	str	r2, [r4, #4]
 800fa0a:	04d9      	lsls	r1, r3, #19
 800fa0c:	6922      	ldr	r2, [r4, #16]
 800fa0e:	6022      	str	r2, [r4, #0]
 800fa10:	d504      	bpl.n	800fa1c <__sflush_r+0x7c>
 800fa12:	1c42      	adds	r2, r0, #1
 800fa14:	d101      	bne.n	800fa1a <__sflush_r+0x7a>
 800fa16:	682b      	ldr	r3, [r5, #0]
 800fa18:	b903      	cbnz	r3, 800fa1c <__sflush_r+0x7c>
 800fa1a:	6560      	str	r0, [r4, #84]	; 0x54
 800fa1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fa1e:	602f      	str	r7, [r5, #0]
 800fa20:	2900      	cmp	r1, #0
 800fa22:	d0ca      	beq.n	800f9ba <__sflush_r+0x1a>
 800fa24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fa28:	4299      	cmp	r1, r3
 800fa2a:	d002      	beq.n	800fa32 <__sflush_r+0x92>
 800fa2c:	4628      	mov	r0, r5
 800fa2e:	f7ff f94f 	bl	800ecd0 <_free_r>
 800fa32:	2000      	movs	r0, #0
 800fa34:	6360      	str	r0, [r4, #52]	; 0x34
 800fa36:	e7c1      	b.n	800f9bc <__sflush_r+0x1c>
 800fa38:	6a21      	ldr	r1, [r4, #32]
 800fa3a:	2301      	movs	r3, #1
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	47b0      	blx	r6
 800fa40:	1c41      	adds	r1, r0, #1
 800fa42:	d1c7      	bne.n	800f9d4 <__sflush_r+0x34>
 800fa44:	682b      	ldr	r3, [r5, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d0c4      	beq.n	800f9d4 <__sflush_r+0x34>
 800fa4a:	2b1d      	cmp	r3, #29
 800fa4c:	d001      	beq.n	800fa52 <__sflush_r+0xb2>
 800fa4e:	2b16      	cmp	r3, #22
 800fa50:	d101      	bne.n	800fa56 <__sflush_r+0xb6>
 800fa52:	602f      	str	r7, [r5, #0]
 800fa54:	e7b1      	b.n	800f9ba <__sflush_r+0x1a>
 800fa56:	89a3      	ldrh	r3, [r4, #12]
 800fa58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa5c:	81a3      	strh	r3, [r4, #12]
 800fa5e:	e7ad      	b.n	800f9bc <__sflush_r+0x1c>
 800fa60:	690f      	ldr	r7, [r1, #16]
 800fa62:	2f00      	cmp	r7, #0
 800fa64:	d0a9      	beq.n	800f9ba <__sflush_r+0x1a>
 800fa66:	0793      	lsls	r3, r2, #30
 800fa68:	680e      	ldr	r6, [r1, #0]
 800fa6a:	bf08      	it	eq
 800fa6c:	694b      	ldreq	r3, [r1, #20]
 800fa6e:	600f      	str	r7, [r1, #0]
 800fa70:	bf18      	it	ne
 800fa72:	2300      	movne	r3, #0
 800fa74:	eba6 0807 	sub.w	r8, r6, r7
 800fa78:	608b      	str	r3, [r1, #8]
 800fa7a:	f1b8 0f00 	cmp.w	r8, #0
 800fa7e:	dd9c      	ble.n	800f9ba <__sflush_r+0x1a>
 800fa80:	6a21      	ldr	r1, [r4, #32]
 800fa82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fa84:	4643      	mov	r3, r8
 800fa86:	463a      	mov	r2, r7
 800fa88:	4628      	mov	r0, r5
 800fa8a:	47b0      	blx	r6
 800fa8c:	2800      	cmp	r0, #0
 800fa8e:	dc06      	bgt.n	800fa9e <__sflush_r+0xfe>
 800fa90:	89a3      	ldrh	r3, [r4, #12]
 800fa92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa96:	81a3      	strh	r3, [r4, #12]
 800fa98:	f04f 30ff 	mov.w	r0, #4294967295
 800fa9c:	e78e      	b.n	800f9bc <__sflush_r+0x1c>
 800fa9e:	4407      	add	r7, r0
 800faa0:	eba8 0800 	sub.w	r8, r8, r0
 800faa4:	e7e9      	b.n	800fa7a <__sflush_r+0xda>
 800faa6:	bf00      	nop
 800faa8:	20400001 	.word	0x20400001

0800faac <_fflush_r>:
 800faac:	b538      	push	{r3, r4, r5, lr}
 800faae:	690b      	ldr	r3, [r1, #16]
 800fab0:	4605      	mov	r5, r0
 800fab2:	460c      	mov	r4, r1
 800fab4:	b913      	cbnz	r3, 800fabc <_fflush_r+0x10>
 800fab6:	2500      	movs	r5, #0
 800fab8:	4628      	mov	r0, r5
 800faba:	bd38      	pop	{r3, r4, r5, pc}
 800fabc:	b118      	cbz	r0, 800fac6 <_fflush_r+0x1a>
 800fabe:	6983      	ldr	r3, [r0, #24]
 800fac0:	b90b      	cbnz	r3, 800fac6 <_fflush_r+0x1a>
 800fac2:	f7ff f84b 	bl	800eb5c <__sinit>
 800fac6:	4b14      	ldr	r3, [pc, #80]	; (800fb18 <_fflush_r+0x6c>)
 800fac8:	429c      	cmp	r4, r3
 800faca:	d11b      	bne.n	800fb04 <_fflush_r+0x58>
 800facc:	686c      	ldr	r4, [r5, #4]
 800face:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d0ef      	beq.n	800fab6 <_fflush_r+0xa>
 800fad6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fad8:	07d0      	lsls	r0, r2, #31
 800fada:	d404      	bmi.n	800fae6 <_fflush_r+0x3a>
 800fadc:	0599      	lsls	r1, r3, #22
 800fade:	d402      	bmi.n	800fae6 <_fflush_r+0x3a>
 800fae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fae2:	f7ff f8eb 	bl	800ecbc <__retarget_lock_acquire_recursive>
 800fae6:	4628      	mov	r0, r5
 800fae8:	4621      	mov	r1, r4
 800faea:	f7ff ff59 	bl	800f9a0 <__sflush_r>
 800faee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800faf0:	07da      	lsls	r2, r3, #31
 800faf2:	4605      	mov	r5, r0
 800faf4:	d4e0      	bmi.n	800fab8 <_fflush_r+0xc>
 800faf6:	89a3      	ldrh	r3, [r4, #12]
 800faf8:	059b      	lsls	r3, r3, #22
 800fafa:	d4dd      	bmi.n	800fab8 <_fflush_r+0xc>
 800fafc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fafe:	f7ff f8de 	bl	800ecbe <__retarget_lock_release_recursive>
 800fb02:	e7d9      	b.n	800fab8 <_fflush_r+0xc>
 800fb04:	4b05      	ldr	r3, [pc, #20]	; (800fb1c <_fflush_r+0x70>)
 800fb06:	429c      	cmp	r4, r3
 800fb08:	d101      	bne.n	800fb0e <_fflush_r+0x62>
 800fb0a:	68ac      	ldr	r4, [r5, #8]
 800fb0c:	e7df      	b.n	800face <_fflush_r+0x22>
 800fb0e:	4b04      	ldr	r3, [pc, #16]	; (800fb20 <_fflush_r+0x74>)
 800fb10:	429c      	cmp	r4, r3
 800fb12:	bf08      	it	eq
 800fb14:	68ec      	ldreq	r4, [r5, #12]
 800fb16:	e7da      	b.n	800face <_fflush_r+0x22>
 800fb18:	08012a80 	.word	0x08012a80
 800fb1c:	08012aa0 	.word	0x08012aa0
 800fb20:	08012a60 	.word	0x08012a60

0800fb24 <_lseek_r>:
 800fb24:	b538      	push	{r3, r4, r5, lr}
 800fb26:	4d07      	ldr	r5, [pc, #28]	; (800fb44 <_lseek_r+0x20>)
 800fb28:	4604      	mov	r4, r0
 800fb2a:	4608      	mov	r0, r1
 800fb2c:	4611      	mov	r1, r2
 800fb2e:	2200      	movs	r2, #0
 800fb30:	602a      	str	r2, [r5, #0]
 800fb32:	461a      	mov	r2, r3
 800fb34:	f7f0 ffa0 	bl	8000a78 <_lseek>
 800fb38:	1c43      	adds	r3, r0, #1
 800fb3a:	d102      	bne.n	800fb42 <_lseek_r+0x1e>
 800fb3c:	682b      	ldr	r3, [r5, #0]
 800fb3e:	b103      	cbz	r3, 800fb42 <_lseek_r+0x1e>
 800fb40:	6023      	str	r3, [r4, #0]
 800fb42:	bd38      	pop	{r3, r4, r5, pc}
 800fb44:	2000840c 	.word	0x2000840c

0800fb48 <__swhatbuf_r>:
 800fb48:	b570      	push	{r4, r5, r6, lr}
 800fb4a:	460e      	mov	r6, r1
 800fb4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb50:	2900      	cmp	r1, #0
 800fb52:	b096      	sub	sp, #88	; 0x58
 800fb54:	4614      	mov	r4, r2
 800fb56:	461d      	mov	r5, r3
 800fb58:	da08      	bge.n	800fb6c <__swhatbuf_r+0x24>
 800fb5a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	602a      	str	r2, [r5, #0]
 800fb62:	061a      	lsls	r2, r3, #24
 800fb64:	d410      	bmi.n	800fb88 <__swhatbuf_r+0x40>
 800fb66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb6a:	e00e      	b.n	800fb8a <__swhatbuf_r+0x42>
 800fb6c:	466a      	mov	r2, sp
 800fb6e:	f000 f8e3 	bl	800fd38 <_fstat_r>
 800fb72:	2800      	cmp	r0, #0
 800fb74:	dbf1      	blt.n	800fb5a <__swhatbuf_r+0x12>
 800fb76:	9a01      	ldr	r2, [sp, #4]
 800fb78:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fb7c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fb80:	425a      	negs	r2, r3
 800fb82:	415a      	adcs	r2, r3
 800fb84:	602a      	str	r2, [r5, #0]
 800fb86:	e7ee      	b.n	800fb66 <__swhatbuf_r+0x1e>
 800fb88:	2340      	movs	r3, #64	; 0x40
 800fb8a:	2000      	movs	r0, #0
 800fb8c:	6023      	str	r3, [r4, #0]
 800fb8e:	b016      	add	sp, #88	; 0x58
 800fb90:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fb94 <__smakebuf_r>:
 800fb94:	898b      	ldrh	r3, [r1, #12]
 800fb96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fb98:	079d      	lsls	r5, r3, #30
 800fb9a:	4606      	mov	r6, r0
 800fb9c:	460c      	mov	r4, r1
 800fb9e:	d507      	bpl.n	800fbb0 <__smakebuf_r+0x1c>
 800fba0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fba4:	6023      	str	r3, [r4, #0]
 800fba6:	6123      	str	r3, [r4, #16]
 800fba8:	2301      	movs	r3, #1
 800fbaa:	6163      	str	r3, [r4, #20]
 800fbac:	b002      	add	sp, #8
 800fbae:	bd70      	pop	{r4, r5, r6, pc}
 800fbb0:	ab01      	add	r3, sp, #4
 800fbb2:	466a      	mov	r2, sp
 800fbb4:	f7ff ffc8 	bl	800fb48 <__swhatbuf_r>
 800fbb8:	9900      	ldr	r1, [sp, #0]
 800fbba:	4605      	mov	r5, r0
 800fbbc:	4630      	mov	r0, r6
 800fbbe:	f7ff f8f3 	bl	800eda8 <_malloc_r>
 800fbc2:	b948      	cbnz	r0, 800fbd8 <__smakebuf_r+0x44>
 800fbc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbc8:	059a      	lsls	r2, r3, #22
 800fbca:	d4ef      	bmi.n	800fbac <__smakebuf_r+0x18>
 800fbcc:	f023 0303 	bic.w	r3, r3, #3
 800fbd0:	f043 0302 	orr.w	r3, r3, #2
 800fbd4:	81a3      	strh	r3, [r4, #12]
 800fbd6:	e7e3      	b.n	800fba0 <__smakebuf_r+0xc>
 800fbd8:	4b0d      	ldr	r3, [pc, #52]	; (800fc10 <__smakebuf_r+0x7c>)
 800fbda:	62b3      	str	r3, [r6, #40]	; 0x28
 800fbdc:	89a3      	ldrh	r3, [r4, #12]
 800fbde:	6020      	str	r0, [r4, #0]
 800fbe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbe4:	81a3      	strh	r3, [r4, #12]
 800fbe6:	9b00      	ldr	r3, [sp, #0]
 800fbe8:	6163      	str	r3, [r4, #20]
 800fbea:	9b01      	ldr	r3, [sp, #4]
 800fbec:	6120      	str	r0, [r4, #16]
 800fbee:	b15b      	cbz	r3, 800fc08 <__smakebuf_r+0x74>
 800fbf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbf4:	4630      	mov	r0, r6
 800fbf6:	f000 f8b1 	bl	800fd5c <_isatty_r>
 800fbfa:	b128      	cbz	r0, 800fc08 <__smakebuf_r+0x74>
 800fbfc:	89a3      	ldrh	r3, [r4, #12]
 800fbfe:	f023 0303 	bic.w	r3, r3, #3
 800fc02:	f043 0301 	orr.w	r3, r3, #1
 800fc06:	81a3      	strh	r3, [r4, #12]
 800fc08:	89a0      	ldrh	r0, [r4, #12]
 800fc0a:	4305      	orrs	r5, r0
 800fc0c:	81a5      	strh	r5, [r4, #12]
 800fc0e:	e7cd      	b.n	800fbac <__smakebuf_r+0x18>
 800fc10:	0800eaf5 	.word	0x0800eaf5

0800fc14 <__malloc_lock>:
 800fc14:	4801      	ldr	r0, [pc, #4]	; (800fc1c <__malloc_lock+0x8>)
 800fc16:	f7ff b851 	b.w	800ecbc <__retarget_lock_acquire_recursive>
 800fc1a:	bf00      	nop
 800fc1c:	20008410 	.word	0x20008410

0800fc20 <__malloc_unlock>:
 800fc20:	4801      	ldr	r0, [pc, #4]	; (800fc28 <__malloc_unlock+0x8>)
 800fc22:	f7ff b84c 	b.w	800ecbe <__retarget_lock_release_recursive>
 800fc26:	bf00      	nop
 800fc28:	20008410 	.word	0x20008410

0800fc2c <_realloc_r>:
 800fc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc30:	4680      	mov	r8, r0
 800fc32:	4614      	mov	r4, r2
 800fc34:	460e      	mov	r6, r1
 800fc36:	b921      	cbnz	r1, 800fc42 <_realloc_r+0x16>
 800fc38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc3c:	4611      	mov	r1, r2
 800fc3e:	f7ff b8b3 	b.w	800eda8 <_malloc_r>
 800fc42:	b92a      	cbnz	r2, 800fc50 <_realloc_r+0x24>
 800fc44:	f7ff f844 	bl	800ecd0 <_free_r>
 800fc48:	4625      	mov	r5, r4
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc50:	f000 f894 	bl	800fd7c <_malloc_usable_size_r>
 800fc54:	4284      	cmp	r4, r0
 800fc56:	4607      	mov	r7, r0
 800fc58:	d802      	bhi.n	800fc60 <_realloc_r+0x34>
 800fc5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fc5e:	d812      	bhi.n	800fc86 <_realloc_r+0x5a>
 800fc60:	4621      	mov	r1, r4
 800fc62:	4640      	mov	r0, r8
 800fc64:	f7ff f8a0 	bl	800eda8 <_malloc_r>
 800fc68:	4605      	mov	r5, r0
 800fc6a:	2800      	cmp	r0, #0
 800fc6c:	d0ed      	beq.n	800fc4a <_realloc_r+0x1e>
 800fc6e:	42bc      	cmp	r4, r7
 800fc70:	4622      	mov	r2, r4
 800fc72:	4631      	mov	r1, r6
 800fc74:	bf28      	it	cs
 800fc76:	463a      	movcs	r2, r7
 800fc78:	f7fe fe54 	bl	800e924 <memcpy>
 800fc7c:	4631      	mov	r1, r6
 800fc7e:	4640      	mov	r0, r8
 800fc80:	f7ff f826 	bl	800ecd0 <_free_r>
 800fc84:	e7e1      	b.n	800fc4a <_realloc_r+0x1e>
 800fc86:	4635      	mov	r5, r6
 800fc88:	e7df      	b.n	800fc4a <_realloc_r+0x1e>
	...

0800fc8c <_read_r>:
 800fc8c:	b538      	push	{r3, r4, r5, lr}
 800fc8e:	4d07      	ldr	r5, [pc, #28]	; (800fcac <_read_r+0x20>)
 800fc90:	4604      	mov	r4, r0
 800fc92:	4608      	mov	r0, r1
 800fc94:	4611      	mov	r1, r2
 800fc96:	2200      	movs	r2, #0
 800fc98:	602a      	str	r2, [r5, #0]
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	f7f0 fe8c 	bl	80009b8 <_read>
 800fca0:	1c43      	adds	r3, r0, #1
 800fca2:	d102      	bne.n	800fcaa <_read_r+0x1e>
 800fca4:	682b      	ldr	r3, [r5, #0]
 800fca6:	b103      	cbz	r3, 800fcaa <_read_r+0x1e>
 800fca8:	6023      	str	r3, [r4, #0]
 800fcaa:	bd38      	pop	{r3, r4, r5, pc}
 800fcac:	2000840c 	.word	0x2000840c

0800fcb0 <_raise_r>:
 800fcb0:	291f      	cmp	r1, #31
 800fcb2:	b538      	push	{r3, r4, r5, lr}
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	460d      	mov	r5, r1
 800fcb8:	d904      	bls.n	800fcc4 <_raise_r+0x14>
 800fcba:	2316      	movs	r3, #22
 800fcbc:	6003      	str	r3, [r0, #0]
 800fcbe:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc2:	bd38      	pop	{r3, r4, r5, pc}
 800fcc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fcc6:	b112      	cbz	r2, 800fcce <_raise_r+0x1e>
 800fcc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fccc:	b94b      	cbnz	r3, 800fce2 <_raise_r+0x32>
 800fcce:	4620      	mov	r0, r4
 800fcd0:	f000 f830 	bl	800fd34 <_getpid_r>
 800fcd4:	462a      	mov	r2, r5
 800fcd6:	4601      	mov	r1, r0
 800fcd8:	4620      	mov	r0, r4
 800fcda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fcde:	f000 b817 	b.w	800fd10 <_kill_r>
 800fce2:	2b01      	cmp	r3, #1
 800fce4:	d00a      	beq.n	800fcfc <_raise_r+0x4c>
 800fce6:	1c59      	adds	r1, r3, #1
 800fce8:	d103      	bne.n	800fcf2 <_raise_r+0x42>
 800fcea:	2316      	movs	r3, #22
 800fcec:	6003      	str	r3, [r0, #0]
 800fcee:	2001      	movs	r0, #1
 800fcf0:	e7e7      	b.n	800fcc2 <_raise_r+0x12>
 800fcf2:	2400      	movs	r4, #0
 800fcf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fcf8:	4628      	mov	r0, r5
 800fcfa:	4798      	blx	r3
 800fcfc:	2000      	movs	r0, #0
 800fcfe:	e7e0      	b.n	800fcc2 <_raise_r+0x12>

0800fd00 <raise>:
 800fd00:	4b02      	ldr	r3, [pc, #8]	; (800fd0c <raise+0xc>)
 800fd02:	4601      	mov	r1, r0
 800fd04:	6818      	ldr	r0, [r3, #0]
 800fd06:	f7ff bfd3 	b.w	800fcb0 <_raise_r>
 800fd0a:	bf00      	nop
 800fd0c:	2000002c 	.word	0x2000002c

0800fd10 <_kill_r>:
 800fd10:	b538      	push	{r3, r4, r5, lr}
 800fd12:	4d07      	ldr	r5, [pc, #28]	; (800fd30 <_kill_r+0x20>)
 800fd14:	2300      	movs	r3, #0
 800fd16:	4604      	mov	r4, r0
 800fd18:	4608      	mov	r0, r1
 800fd1a:	4611      	mov	r1, r2
 800fd1c:	602b      	str	r3, [r5, #0]
 800fd1e:	f7f0 fe2f 	bl	8000980 <_kill>
 800fd22:	1c43      	adds	r3, r0, #1
 800fd24:	d102      	bne.n	800fd2c <_kill_r+0x1c>
 800fd26:	682b      	ldr	r3, [r5, #0]
 800fd28:	b103      	cbz	r3, 800fd2c <_kill_r+0x1c>
 800fd2a:	6023      	str	r3, [r4, #0]
 800fd2c:	bd38      	pop	{r3, r4, r5, pc}
 800fd2e:	bf00      	nop
 800fd30:	2000840c 	.word	0x2000840c

0800fd34 <_getpid_r>:
 800fd34:	f7f0 be1c 	b.w	8000970 <_getpid>

0800fd38 <_fstat_r>:
 800fd38:	b538      	push	{r3, r4, r5, lr}
 800fd3a:	4d07      	ldr	r5, [pc, #28]	; (800fd58 <_fstat_r+0x20>)
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	4604      	mov	r4, r0
 800fd40:	4608      	mov	r0, r1
 800fd42:	4611      	mov	r1, r2
 800fd44:	602b      	str	r3, [r5, #0]
 800fd46:	f7f0 fe7c 	bl	8000a42 <_fstat>
 800fd4a:	1c43      	adds	r3, r0, #1
 800fd4c:	d102      	bne.n	800fd54 <_fstat_r+0x1c>
 800fd4e:	682b      	ldr	r3, [r5, #0]
 800fd50:	b103      	cbz	r3, 800fd54 <_fstat_r+0x1c>
 800fd52:	6023      	str	r3, [r4, #0]
 800fd54:	bd38      	pop	{r3, r4, r5, pc}
 800fd56:	bf00      	nop
 800fd58:	2000840c 	.word	0x2000840c

0800fd5c <_isatty_r>:
 800fd5c:	b538      	push	{r3, r4, r5, lr}
 800fd5e:	4d06      	ldr	r5, [pc, #24]	; (800fd78 <_isatty_r+0x1c>)
 800fd60:	2300      	movs	r3, #0
 800fd62:	4604      	mov	r4, r0
 800fd64:	4608      	mov	r0, r1
 800fd66:	602b      	str	r3, [r5, #0]
 800fd68:	f7f0 fe7b 	bl	8000a62 <_isatty>
 800fd6c:	1c43      	adds	r3, r0, #1
 800fd6e:	d102      	bne.n	800fd76 <_isatty_r+0x1a>
 800fd70:	682b      	ldr	r3, [r5, #0]
 800fd72:	b103      	cbz	r3, 800fd76 <_isatty_r+0x1a>
 800fd74:	6023      	str	r3, [r4, #0]
 800fd76:	bd38      	pop	{r3, r4, r5, pc}
 800fd78:	2000840c 	.word	0x2000840c

0800fd7c <_malloc_usable_size_r>:
 800fd7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd80:	1f18      	subs	r0, r3, #4
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	bfbc      	itt	lt
 800fd86:	580b      	ldrlt	r3, [r1, r0]
 800fd88:	18c0      	addlt	r0, r0, r3
 800fd8a:	4770      	bx	lr

0800fd8c <_init>:
 800fd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd8e:	bf00      	nop
 800fd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd92:	bc08      	pop	{r3}
 800fd94:	469e      	mov	lr, r3
 800fd96:	4770      	bx	lr

0800fd98 <_fini>:
 800fd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd9a:	bf00      	nop
 800fd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd9e:	bc08      	pop	{r3}
 800fda0:	469e      	mov	lr, r3
 800fda2:	4770      	bx	lr
